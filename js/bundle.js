var laya = (function () {
	'use strict';

	class AppCfg {
	    constructor() {
	    }
	}
	AppCfg.frameRate = 30;
	AppCfg.frameTime = 33;
	AppCfg.isWeb = true;
	AppCfg.Asecond = 1000;

	class ScaleButton extends Laya.Script {
	    constructor() {
	        super();
	        this.scale = 0.90;
	        this.originX = 1;
	        this.originY = 1;
	        this.isDown = false;
	    }
	    toSmall() {
	        let owner = this.owner;
	        this.originX = owner.scaleX;
	        this.originY = owner.scaleY;
	        owner.scale(this.originX * this.scale, this.originX * this.scale);
	    }
	    toNormal() {
	        let owner = this.owner;
	        owner.scale(this.originX, this.originY);
	    }
	    onMouseDown() {
	        if (this.isDown)
	            return;
	        this.isDown = true;
	        this.toSmall();
	    }
	    onMouseUp() {
	        if (!this.isDown)
	            return;
	        this.isDown = false;
	        this.toNormal();
	    }
	    onMouseOut() {
	        if (!this.isDown)
	            return;
	        this.isDown = false;
	        this.toNormal();
	    }
	}

	var Text = Laya.Text;
	class HtmlText extends Laya.Text {
	    constructor() {
	        super();
	        this.typeList = {};
	        this.typeIndexList = [];
	        this.typeLines = [];
	        this.underLineWidth = 0;
	        this.underColor = "";
	    }
	    renderText(begin, visibleLineCount) {
	        var graphics = this.graphics;
	        graphics.clear(true);
	        var ctxFont = this._getContextFont();
	        if (Laya.Render.isConchApp) {
	            window["conchTextCanvas"].font = ctxFont;
	        }
	        else {
	            Laya.Browser.context.font = ctxFont;
	        }
	        var padding = this.padding;
	        var startX = padding[3];
	        var textAlgin = "left";
	        var lineHeight = this.leading + this._charSize.height;
	        var tCurrBitmapFont = this._currBitmapFont;
	        if (tCurrBitmapFont) {
	            lineHeight = this.leading + tCurrBitmapFont.getMaxHeight();
	        }
	        ;
	        var startY = padding[0];
	        if (this.height > 0) {
	            var tempVAlign = (this._textHeight > this.height) ? "top" : this.valign;
	            if (tempVAlign === "middle")
	                startY = (this.height - visibleLineCount * lineHeight) * 0.5 + padding[0] - padding[2];
	            else if (tempVAlign === "bottom")
	                startY = this.height - visibleLineCount * lineHeight - padding[2];
	        }
	        ;
	        var style = this.getStyle();
	        if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {
	            var bitmapScale = tCurrBitmapFont.fontSize / this.fontSize;
	        }
	        if (this._clipPoint) {
	            graphics.save();
	            if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {
	                var tClipWidth = 0;
	                var tClipHeight = 0;
	                this.width ? tClipWidth = (this.width - padding[3] - padding[1]) : tClipWidth = this._textWidth;
	                this.height ? tClipHeight = (this.height - padding[0] - padding[2]) : tClipHeight = this._textHeight;
	                tClipWidth *= bitmapScale;
	                tClipHeight *= bitmapScale;
	                graphics.clipRect(padding[3], padding[0], tClipWidth, tClipHeight);
	            }
	            else {
	                graphics.clipRect(padding[3], padding[0], this.width ? (this.width - padding[3] - padding[1]) : this._textWidth, this.height ? (this.height - padding[0] - padding[2]) : this._textHeight);
	            }
	        }
	        ;
	        var password = style.asPassword;
	        if (("prompt" in this) && this['prompt'] == this["_text"])
	            password = false;
	        var x = 0, y = 0;
	        var end = Math.min(this._lines.length, visibleLineCount + begin) || 1;
	        let color = this.color;
	        let underline = this.underline;
	        let bold = this.bold;
	        for (var i = begin; i < end; i++) {
	            var lines = this.typeLines[i];
	            var _word;
	            if (this.align == "right") {
	                startX = this.width - padding[1] - this.getTextLinesWidth(lines);
	            }
	            else if (this.align == "center") {
	                startX = (this.width - this.getTextLinesWidth(lines)) * 0.5 + padding[3] - padding[1];
	            }
	            let nowX = startX - (this._clipPoint ? this._clipPoint.x : 0);
	            for (var line of lines) {
	                var word = line['text'];
	                x = nowX;
	                y = startY + lineHeight * i - (this._clipPoint ? this._clipPoint.y : 0);
	                if (tCurrBitmapFont) {
	                    var tWidth = this.width;
	                    if (tCurrBitmapFont.autoScaleSize) {
	                        tWidth = this.width * bitmapScale;
	                    }
	                    tCurrBitmapFont._drawText(word, this, x, y, this.align, tWidth);
	                }
	                else {
	                    if (true) {
	                        this._words || (this._words = []);
	                        _word = this._words.length > (i - begin) ? this._words[i - begin] : new Laya.WordText();
	                        _word.setText(word);
	                    }
	                    else {
	                        _word = word;
	                    }
	                    if (line["type"]) {
	                        if (line["type"]["bold"] != undefined) {
	                            if (bold != line["type"]["bold"]) {
	                                bold = line["type"]["bold"];
	                                ctxFont = (this.italic ? "italic " : "") + (bold ? "bold " : "") + this.fontSize + "px " + (Laya.Browser.onIPhone ? (Laya.Text.fontFamilyMap[this.font] || this.font) : this.font);
	                                if (Laya.Render.isConchApp) {
	                                    window["conchTextCanvas"].font = ctxFont;
	                                }
	                                else {
	                                    Laya.Browser.context.font = ctxFont;
	                                }
	                            }
	                        }
	                        if (line["type"]["underline"] != undefined) {
	                            if (underline != line["type"]["underline"]) {
	                                underline = line["type"]["underline"];
	                            }
	                        }
	                        if (line["type"]["color"]) {
	                            if (color != line["type"]["color"]) {
	                                color = line["type"]["color"];
	                            }
	                        }
	                    }
	                    if (underline) {
	                        this.underColor = color;
	                        this.underLineWidth = this._getTextWidth(line['text']);
	                        this.drawUnderline(textAlgin, x, y, i);
	                    }
	                    if (style.stroke)
	                        graphics.fillBorderText(_word, x, y, ctxFont, color, style.strokeColor, style.stroke, textAlgin);
	                    else
	                        graphics.fillText(_word, x, y, ctxFont, color, textAlgin);
	                }
	                nowX += this._getTextWidth(line['text']);
	            }
	        }
	        if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {
	            var tScale = 1 / bitmapScale;
	            this.scale(tScale, tScale);
	        }
	        if (this._clipPoint)
	            graphics.restore();
	        this._startX = startX;
	        this._startY = startY;
	    }
	    parseLines(text) {
	        var needWordWrapOrTruncate = this.wordWrap || this.overflow == Text.HIDDEN;
	        if (needWordWrapOrTruncate) {
	            var wordWrapWidth = this._getWordWrapWidth();
	        }
	        if (this._currBitmapFont) {
	            this._charSize.width = this._currBitmapFont.getMaxWidth();
	            this._charSize.height = this._currBitmapFont.getMaxHeight();
	        }
	        else {
	            var measureResult = null;
	            if (Laya.Render.isConchApp) {
	                measureResult = window["conchTextCanvas"].measureText(Text._testWord);
	            }
	            else {
	                measureResult = Laya.Browser.context.measureText(Text._testWord);
	            }
	            this._charSize.width = measureResult.width;
	            this._charSize.height = (measureResult.height || this.fontSize);
	        }
	        ;
	        var lines = text.replace(/\\r\\n/g, "\n").split("\n");
	        for (var i = 0, n = lines.length; i < n; i++) {
	            var line = lines[i];
	            if (needWordWrapOrTruncate)
	                this._parseLine(line, wordWrapWidth);
	            else {
	                this._lineWidths.push(this._getTextWidth(line));
	                this._lines.push(line);
	            }
	        }
	    }
	    typeset() {
	        this._isChanged = false;
	        if (!this._text) {
	            this._clipPoint = null;
	            this._textWidth = this._textHeight = 0;
	            this.graphics.clear(true);
	            return;
	        }
	        if (Laya.Render.isConchApp) {
	            window["conchTextCanvas"].font = this._getContextFont();
	        }
	        else {
	            Laya.Browser.context.font = this._getContextFont();
	        }
	        this._lines.length = 0;
	        this._lineWidths.length = 0;
	        this.typeLines.length = 0;
	        var text = this.parseType(this._text);
	        if (this._isPassWordMode()) {
	            this.parseLines(this._getPassWordTxt(this._text));
	        }
	        else
	            this.parseLines(text);
	        this._evalTextSize();
	        if (this._checkEnabledViewportOrNot())
	            this._clipPoint || (this._clipPoint = new Laya.Point(0, 0));
	        else
	            this._clipPoint = null;
	        var lineCount = this._lines.length;
	        if (this.overflow != Text.VISIBLE) {
	            var func = this.overflow == Text.HIDDEN ? Math.floor : Math.ceil;
	            lineCount = Math.min(lineCount, func((this.height - this.padding[0] - this.padding[2]) / (this.leading + this._charSize.height)));
	        }
	        ;
	        var startLine = this.scrollY / (this._charSize.height + this.leading) | 0;
	        this.parseTypeLines();
	        this.renderText(startLine, lineCount);
	        this.repaint();
	    }
	    drawUnderline(align, x, y, lineIndex) {
	        var lineWidth = this.underLineWidth;
	        switch (align) {
	            case 'center':
	                x -= lineWidth / 2;
	                break;
	            case 'right':
	                x -= lineWidth;
	                break;
	            case 'left':
	            default:
	                break;
	        }
	        y += this._charSize.height;
	        this.graphics.drawLine(x, y, x + lineWidth, y, this.underColor || this.color, 1);
	    }
	    parseType(_text) {
	        let text = _text.replace(/(\r\n)|(\n)/g, "");
	        let textN = _text;
	        let typeKey = text.match(/{.+?}/);
	        if (!typeKey)
	            return textN;
	        let ketStr = typeKey[0];
	        this.typeList = {};
	        while (ketStr) {
	            let typeIndex = text.indexOf(ketStr);
	            if (!this.typeList[typeIndex]) {
	                this.typeIndexList.push(typeIndex);
	                this.typeList[typeIndex] = {};
	            }
	            switch (ketStr) {
	                case '{b}':
	                    this.typeList[typeIndex]["bold"] = true;
	                    break;
	                case '{/b}':
	                    this.typeList[typeIndex]["bold"] = false;
	                    break;
	                case '{u}':
	                    this.typeList[typeIndex]["underline"] = true;
	                    break;
	                case '{/u}':
	                    this.typeList[typeIndex]["underline"] = false;
	                    break;
	                default:
	                    this.typeList[typeIndex]["color"] = ketStr.slice(1, -1);
	                    break;
	            }
	            textN = textN.replace(ketStr, '');
	            text = text.replace(ketStr, '');
	            typeKey = text.match(/{.+?}/);
	            if (!typeKey)
	                return textN;
	            ketStr = typeKey[0];
	        }
	        return textN;
	    }
	    parseTypeLines() {
	        let lines = this._lines;
	        let index = 0;
	        for (let oldLine of lines) {
	            let newLines = [];
	            let oldIndex = 0;
	            while (oldLine.length > this.typeIndexList[0] - index) {
	                let newLine = {};
	                if (oldIndex < this.typeIndexList[0] - index) {
	                    newLine['text'] = oldLine.slice(oldIndex, this.typeIndexList[0] - index);
	                    newLine['type'] = this.typeList[oldIndex + index];
	                    newLines.push(newLine);
	                }
	                oldIndex = this.typeIndexList[0] - index;
	                this.typeIndexList.splice(0, 1);
	            }
	            let endLine = {};
	            if (oldIndex < oldLine.length) {
	                endLine['text'] = oldLine.slice(oldIndex);
	                endLine['type'] = this.typeList[oldIndex + index];
	                newLines.push(endLine);
	            }
	            this.typeLines.push(newLines);
	            index += oldLine.length;
	        }
	    }
	    getTextLinesWidth(lines) {
	        let width = 0;
	        for (let line of lines) {
	            width += this._getTextWidth(line['text']);
	        }
	        return width;
	    }
	}

	class HtmlLabel extends Laya.Label {
	    constructor(text) {
	        super(text);
	    }
	    createChildren() {
	        this.addChild(this._tf = new HtmlText());
	    }
	}

	class TimerBox extends Laya.HBox {
	    constructor() {
	        super(...arguments);
	        this._prefix = "";
	        this._count = null;
	        this._fixedText = "";
	    }
	    updateTimer() {
	        this.lblTimer.text = this.formatFunc ? this.formatFunc.runWith(this._count) : (this.count + "");
	        this._updateHandler && this._updateHandler.runWith(this._count);
	        if (this._count === 0) {
	            this._completeHandler && this._completeHandler.run();
	            this.clearTimer(this, this.updateTimer);
	        }
	        this._count--;
	    }
	    onCountChanged() {
	        this.lblPrefix.text = this._prefix;
	        this.updateTimer();
	        this.timerLoop(1000, this, this.updateTimer);
	    }
	    set count(val) {
	        this._count = val;
	        this.onCountChanged();
	    }
	    get count() {
	        return this._count;
	    }
	    set countM(val) {
	        this.count = Math.floor(val / 1000);
	    }
	    set fixedText(val) {
	        this._fixedText = val;
	        this.lblPrefix.text = val;
	        this.lblTimer.text = "";
	        this.clearTimer(this, this.updateTimer);
	    }
	    get fixedText() {
	        return this._fixedText;
	    }
	    set prefix(val) {
	        this._prefix = val;
	    }
	    get prefix() {
	        return this._prefix;
	    }
	    set completeHandler(value) {
	        this._completeHandler = value;
	    }
	    get completeHandler() {
	        return this._completeHandler;
	    }
	    set updateHandler(value) {
	        this._updateHandler = value;
	    }
	    get updateHandler() {
	        return this._updateHandler;
	    }
	    set formatFunc(value) {
	        this._formatFunc = value;
	    }
	    get formatFunc() {
	        return this._formatFunc;
	    }
	    onAwake() {
	        this.lblTimer = this.getChildByName("lblTimer");
	        this.lblPrefix = this.getChildByName("lblPrefix");
	    }
	    onDisable() {
	        this._count = null;
	        this.clearTimer(this, this.updateTimer);
	    }
	}

	class AtlasTabItem extends Laya.Box {
	    onAwake() {
	        this.button = this.getChildAt(0);
	        this.on(Laya.Event.CLICK, this, this.onClick);
	        this.onSelectedChange();
	    }
	    set selected(val) {
	        this._selected = val;
	        this.onSelectedChange();
	    }
	    get selected() {
	        return this._selected;
	    }
	    onSelectedChange() {
	        if (this.button) {
	            this.button.selected = this.selected;
	            this.button.height = this.selected ? 76 : 66;
	        }
	    }
	    set clickHandler(val) {
	        this._clickHandler = val;
	    }
	    get clickHandler() {
	        return this._clickHandler;
	    }
	    onClick() {
	        this._clickHandler && this._clickHandler.run();
	    }
	}

	class ModalCom extends Laya.Box {
	    onClickClose() {
	        this._closeHandler && this._closeHandler.run();
	    }
	    set title(value) {
	        this.lblTitle.text = value;
	    }
	    get title() {
	        return this.lblTitle.text;
	    }
	    set closeHandler(value) {
	        this._closeHandler = value;
	    }
	    get closeHandler() {
	        return this._closeHandler;
	    }
	    set btnCloseVisible(v) {
	        this.btnClose.visible = v;
	    }
	    onAwake() {
	        this.lblTitle = this.getChildByName("lblTitle");
	        this.btnClose = this.getChildByName("btnClose");
	        this.btnClose.on(Laya.Event.CLICK, this, this.onClickClose);
	    }
	    onDestroy() {
	        this.btnClose.off(Laya.Event.CLICK, this, this.onClickClose);
	        this._closeHandler = null;
	    }
	}

	class LanCfg {
	    static setData(cont) {
	        let t = Laya.timer.currTimer;
	        cont = cont.trim();
	        if (cont.length <= 0)
	            return;
	        cont = cont.replace(/\r\n/g, "\n");
	        let tmp = cont.split("\n");
	        let len = tmp.length;
	        let line, key, val;
	        let singleWord;
	        let i, j;
	        for (i = 0; i < len; i++) {
	            line = tmp[i];
	            line = line.replace(/\\n/g, "\n");
	            if (line.trim().length > 0) {
	                singleWord = line.split("=");
	                key = singleWord[0];
	                if (this.keys.hasOwnProperty(key))
	                    continue;
	                if (singleWord.length == 2) {
	                    this.keys[key] = singleWord[1];
	                }
	                else if (singleWord.length > 2) {
	                    val = "";
	                    for (j = 1; j < singleWord.length; j++) {
	                        if (j > 1)
	                            val += "=";
	                        val += singleWord[j];
	                    }
	                    this.keys[key] = val;
	                }
	            }
	        }
	        console.log("lang表读取花费时间(ms):", Laya.timer.currTimer - t, "总条数:", i);
	    }
	    static get(key) {
	        if (key == null) {
	            return "";
	        }
	        let txt = this.keys[key];
	        if (txt) {
	            return txt;
	        }
	        else {
	            return key;
	        }
	    }
	}
	LanCfg.keys = {};

	class LoginData {
	    static get verCN() {
	        return this.ver == 1;
	    }
	}
	LoginData.channel = 1;
	LoginData.currChannel = 1;
	LoginData.gm = 0;
	LoginData.openLang = ["zh"];
	LoginData.guideData = "0";
	LoginData.uploadError = true;
	LoginData.age = 100;
	LoginData.lang = "zh";
	LoginData.ver = 1;
	LoginData.uploadPage = false;
	LoginData.isDebug = false;

	class ArrayUtil {
	    constructor() {
	    }
	    static cleannull(arr) {
	        var len = arr.length;
	        var emptylen = 0;
	        var reallen = len;
	        var tempindex = 0;
	        var lastii = 0;
	        for (var i = 0; i < len - emptylen; i++) {
	            var term = arr[i];
	            if (!term) {
	                if (i == 0 || i > lastii + emptylen) {
	                    emptylen++;
	                }
	                lastii = i;
	                for (var ii = i + emptylen; ii < len; ii++) {
	                    if (arr[ii]) {
	                        arr[i] = arr[ii];
	                        arr[ii] = null;
	                        break;
	                    }
	                    else {
	                        emptylen++;
	                    }
	                }
	            }
	        }
	        arr.length = len - emptylen;
	    }
	    static caculateLen(arr) {
	        var ret = 0;
	        for (var i = arr.length - 1; i >= 0; i--) {
	            if (arr[i]) {
	                ret++;
	            }
	        }
	        return ret;
	    }
	    static insert(arr, obj, index) {
	        for (var i = arr.length; i > index; i--) {
	            arr[i] = arr[i - 1];
	        }
	        arr[index] = obj;
	    }
	    static remove(arr, obj) {
	        var index = arr.indexOf(obj);
	        if (index > -1) {
	            arr.splice(index, 1);
	        }
	    }
	    static getRandom(arr, count = 1) {
	        var shuffled = arr.slice(0), i = arr.length, min = i - count, temp, index;
	        if (min <= 0) {
	            return shuffled;
	        }
	        while (i-- > min) {
	            index = Math.floor((i + 1) * Math.random());
	            temp = shuffled[index];
	            shuffled[index] = shuffled[i];
	            shuffled[i] = temp;
	        }
	        return shuffled.slice(min);
	    }
	    static findItem(data, fn) {
	        let item;
	        for (let i = 0; i < data.length; i++) {
	            if (fn(data[i], i, data)) {
	                item = data[i];
	                break;
	            }
	        }
	        return item;
	    }
	    static findIndex(data, fn) {
	        let item = -1;
	        for (let i = 0; i < data.length; i++) {
	            if (fn(data[i], i, data)) {
	                item = i;
	                break;
	            }
	        }
	        return item;
	    }
	    static newArray(list) {
	        let array = [];
	        for (var item of list) {
	            array.push(item);
	        }
	        return array;
	    }
	    static contains(list, item) {
	        let index = list.indexOf(item);
	        return index >= 0;
	    }
	}

	class MsgCenter {
	    constructor() {
	        this.msgMap = {};
	        this.invalidMap = {};
	        this.invalid = 0;
	    }
	    notify(msg, arg = null) {
	        var list = this.msgMap[msg];
	        if (list) {
	            var len = list.length;
	            for (var i = 0; i < len; i++) {
	                var listenerInfo = list[i];
	                if (listenerInfo) {
	                    listenerInfo[0] = arg;
	                    listenerInfo[1].apply(listenerInfo[2], listenerInfo);
	                }
	            }
	        }
	    }
	    remove(msg, listener, thisObj = null) {
	        var list = this.msgMap[msg];
	        if (list) {
	            var index = this.getIndex(listener, list, thisObj);
	            if (index != -1) {
	                list[index] = null;
	                this.invalidMap[msg] = true;
	                if (!this.invalid) {
	                    Laya.timer.callLater(this, MsgCenter.cleannull);
	                }
	                this.invalid++;
	            }
	        }
	    }
	    listen(msg, listener, thisObj = null) {
	        var list = this.msgMap[msg];
	        if (!list) {
	            list = this.msgMap[msg] = [];
	        }
	        var index = this.getIndex(listener, list, thisObj);
	        if (index >= 0) {
	            return;
	        }
	        if (true) {
	            list.push([null, listener, thisObj]);
	        }
	    }
	    static cleannull() {
	        var self = this;
	        var arrayutil = ArrayUtil;
	        if (self.invalid) {
	            self.invalid = 0;
	            for (var k in self.invalidMap) {
	                var invalidList = self.msgMap[k];
	                arrayutil.cleannull(invalidList);
	                delete self.invalidMap[k];
	            }
	        }
	    }
	    listenonce(msg, listener, thisObj = null) {
	        var msgCenter = this;
	        this.listen(msg, function func(arg) {
	            msgCenter.remove(msg, func, this);
	            listener.apply(thisObj, [arg]);
	        }, this);
	    }
	    getIndex(listener, list, thisObj) {
	        for (var i = list.length - 1; i >= 0; i--) {
	            var term = list[i];
	            if (term && listener == term[1] && (!thisObj || (term[2] == thisObj))) {
	                return i;
	            }
	        }
	        return -1;
	    }
	    static notify(msg, arg = null) {
	        this.center.notify(msg, arg);
	    }
	    static remove(msg, listener, thisObj = null) {
	        this.center.remove(msg, listener, thisObj);
	    }
	    static listen(msg, listener, thisObj = null) {
	        this.center.listen(msg, listener, thisObj);
	    }
	    static listenonce(msg, listener, thisObj = null) {
	        this.center.listenonce(msg, listener, thisObj);
	    }
	}
	MsgCenter.center = new MsgCenter();

	class ProgressBar extends Laya.Sprite {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.bar = new Laya.Image();
	        this.barMask = new Laya.Sprite();
	        this.bar.mask = this.barMask;
	        this.addChild(this.bar);
	    }
	    set skin(v) {
	        this.bar.skin = v;
	    }
	    set sizeGrid(v) {
	        this.bar.sizeGrid = v;
	    }
	    set value(v) {
	        if (v > 1) {
	            v = 1;
	        }
	        else if (v < 0) {
	            v = 0;
	        }
	        var w = this.bar.width * v;
	        if (w <= 0)
	            w = 1;
	        this.barMask.graphics.clear();
	        this.barMask.graphics.drawRect(0, 0, w, this.bar.height, "#000000");
	    }
	    size(w, h) {
	        super.size(w, h);
	        this.bar.size(w, h);
	        return this;
	    }
	}

	class Singleton {
	    static ins() {
	        let cls = this;
	        if (!cls._ins) {
	            cls._ins = new cls();
	        }
	        return cls._ins;
	    }
	}
	class SpriteSingleton extends Laya.Sprite {
	    static ins() {
	        let cls = this;
	        if (!cls._ins) {
	            cls._ins = new cls();
	        }
	        return cls._ins;
	    }
	}

	class Loading extends SpriteSingleton {
	    constructor() {
	        super();
	        this.useInitMsg = true;
	        this.changeCount = 0;
	        this.isBarInit = false;
	        if (LoginData.verCN) {
	            this.initMsgArr = ["首次加载需要时间，请耐心等待！"];
	        }
	        else {
	            this.initMsgArr = ["The first load of the game takes a long time, please be patient!",
	                "Like this game under the collection!"];
	        }
	        this.init();
	        this.mouseEnabled = true;
	    }
	    initMsg() {
	        this.msgArr = [""];
	        this.useInitMsg = false;
	    }
	    onResize() {
	        this.bgImg.size(Laya.stage.width, Laya.stage.height);
	        this.barY = Laya.stage.height - 80;
	        this.info.width = Laya.stage.width;
	        this.info.pos(0, this.barY + 35);
	    }
	    init() {
	        this.bg = new Laya.Sprite();
	        this.bg.size(2048, 2048);
	        this.bg.graphics.drawRect(0, 0, 2048, 2048, 0);
	        this.bg.pos(-384, -664);
	        this.bg.mouseEnabled = true;
	        this.bg.cacheAs = "normal";
	        this.bg.on(Laya.Event.MOUSE_DOWN, this, () => { });
	        this.addChild(this.bg);
	        this.bgImg = new Laya.Sprite();
	        this.addChild(this.bgImg);
	        this.bgImg.loadImage("res/load/loading.jpg");
	        this.info = new Laya.Label("Welcome to here!");
	        this.info.align = "center";
	        this.info.wordWrap = true;
	        this.info.color = "#ffffff";
	        this.info.strokeColor = "#4c4c4c";
	        this.info.stroke = 1;
	        this.info.fontSize = 20;
	        this.addChild(this.info);
	    }
	    initBar() {
	        if (this.isBarInit)
	            return;
	        this.isBarInit = true;
	        let barWidth = Laya.stage.width - 70;
	        let barHeight = 28;
	        let barX = 35;
	        this.barBg = new Laya.Image();
	        this.barBg.skin = "res/skin/loading/ditu.png";
	        this.barBg.sizeGrid = "11,11,11,11";
	        this.barBg.size(barWidth, barHeight);
	        this.barBg.pos(barX, this.barY);
	        this.addChild(this.barBg);
	        this.bar = new ProgressBar();
	        this.bar.skin = "res/skin/loading/prog.png";
	        this.bar.sizeGrid = "11,11,11,11";
	        this.bar.pos(barX, this.barY);
	        this.bar.size(barWidth, barHeight);
	        this.addChild(this.bar);
	        this.block = new Laya.Clip("res/skin/loading/huo.png", 4, 1);
	        this.block.pivotX = 77;
	        this.block.interval = 100;
	        this.block.y = this.barY - 36;
	        this.addChild(this.block);
	        this.barTxt = new Laya.Label("LODING..");
	        this.barTxt.pos(Laya.stage.width - 240, this.barY - 25);
	        this.barTxt.color = "#ffffff";
	        this.barTxt.strokeColor = "#4c4c4c";
	        this.barTxt.stroke = 1;
	        this.barTxt.fontSize = 15;
	        this.addChild(this.barTxt);
	    }
	    changeBgImg() {
	        var ran = 1;
	        if (this.changeCount >= 3) {
	            ran = Math.random() * 3 + 1 >> 0;
	        }
	        this.bgImg.loadImage("res/load/loading_" + ran + ".jpg");
	        this.changeCount++;
	    }
	    appInit() {
	        this.show1();
	    }
	    showBg() {
	        this.show(100, true);
	    }
	    show(per = 100, changeBg = false) {
	        if (this.isShow)
	            return;
	        this.isShow = true;
	        this.show1();
	        this.initBar();
	        this.block.play();
	        this.setProgress(per);
	        if (changeBg) {
	            this.changeBgImg();
	        }
	    }
	    show1() {
	        if (this.parent)
	            return;
	        if (this._container == null) {
	            Laya.stage.addChild(this);
	        }
	        else {
	            this._container.addChild(this);
	        }
	        this.onResize();
	        Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
	        Laya.timer.loop(5000, this, this.onUpdataInfo);
	        this.onUpdataInfo();
	    }
	    hide() {
	        if (!this.isShow)
	            return;
	        this.block.stop();
	        Laya.stage.off(Laya.Event.RESIZE, this, this.onResize);
	        Laya.timer.clear(this, this.onUpdataInfo);
	        this.isShow = false;
	        this.removeSelf();
	    }
	    setProgress(val) {
	        val = val >> 0;
	        this.bar.value = val / 100;
	        this.barTxt.text = "LOADING..." + val + "%";
	        this.block.x = 45 + this.bar.width * val / 100;
	    }
	    setInfo(txt, caller = null, listener = null) {
	        Laya.timer.clear(this, this.onUpdataInfo);
	        this.info.text = txt;
	        if (caller) {
	            this.info.once(Laya.Event.CLICK, caller, listener);
	        }
	    }
	    onUpdataInfo() {
	        var msg = this.useInitMsg ? this.initMsgArr : this.msgArr;
	        var ran = Math.random() * msg.length >> 0;
	        this.info.text = msg[ran];
	    }
	    setContainer(v) {
	        this._container = v;
	        if (this.parent && this.parent != v) {
	            v.addChild(this);
	            this.block.play();
	        }
	    }
	}
	Loading.STEP_APPINIT = 0;
	Loading.STEP_VERSION = 2;
	Loading.STEP_FILECONFIG = 4;
	Loading.STEP_INIT = 6;
	Loading.STEP_LANG = 10;
	Loading.STEP_CONFIG = 15;
	Loading.STEP_ZIP = 20;
	Loading.STEP_PRELOAD = 25;

	class ServerDate {
	    constructor() {
	        this.date = new Date();
	    }
	    setTime(time) {
	        this.date.setTime(time + ServerDate.timezone * 3600000);
	    }
	    getTime() {
	        return this.date.getTime();
	    }
	    getSerFullYear() {
	        return this.date.getUTCFullYear();
	    }
	    getSerMonth() {
	        return this.date.getUTCMonth();
	    }
	    getSerDate() {
	        return this.date.getUTCDate();
	    }
	    getSerDay() {
	        return this.date.getUTCDay();
	    }
	    getSerHours() {
	        return this.date.getUTCHours();
	    }
	    getSerMinutes() {
	        return this.date.getUTCMinutes();
	    }
	    getSerSeconds() {
	        return this.date.getUTCSeconds();
	    }
	    getSerMilliseconds() {
	        return this.date.getUTCMilliseconds();
	    }
	    toSerString() {
	        return this.date.toUTCString();
	    }
	    recover() {
	        Laya.Pool.recover("ServerDate", this);
	    }
	    static create() {
	        return Laya.Pool.getItemByClass("ServerDate", ServerDate);
	    }
	}
	ServerDate.timezone = 0;

	class TimeMgr extends Singleton {
	    constructor() {
	        super();
	        this.OneDayTime = 86400000;
	        this.pauseStatus = false;
	        this._loginTime = 0;
	        this.serverLoginTime = false;
	        this._openServerTime = 0;
	        this.date = new ServerDate();
	        this.setServer(this.date.getTime());
	        this.serverLoginTime = false;
	    }
	    get openServerTime() {
	        return this._openServerTime;
	    }
	    set openServerTime(v) {
	        this._openServerTime = v;
	    }
	    get openTimeTotal() {
	        var v = this.getTime() - this._openServerTime;
	        if (v < 0)
	            v = 0;
	        return v;
	    }
	    get loginTime() {
	        return this._loginTime;
	    }
	    setServer(t) {
	        this.lastServerTime = t;
	        this.setTime = Laya.Browser.now();
	        if (!this.serverLoginTime) {
	            this._loginTime = this.getTime();
	            this.serverLoginTime = true;
	        }
	    }
	    getTime() {
	        return this.lastServerTime + (Laya.Browser.now() - this.setTime);
	    }
	    getSeconds() {
	        return this.getTime() * 0.001 >> 0;
	    }
	    getDate() {
	        this.date.setTime(this.getTime());
	        return this.date;
	    }
	    toSeconds(millisecond) {
	        return Math.floor(millisecond / 1000);
	    }
	    getSerTimeByDate(month, dat) {
	        var date = TimeMgr.tmpDate;
	        date.setTime(this.getTime());
	        date.setUTCMonth(month);
	        date.setUTCDate(dat);
	        date.setUTCHours(0, 0, 0, 0);
	        var time = date.getTime() + ServerDate.timezone * 3600000;
	        return time;
	    }
	    getCurDay(timer) {
	        if (!timer) {
	            timer = this.getTime();
	        }
	        return Math.floor((timer + 3600000 * ServerDate.timezone) / this.OneDayTime);
	    }
	    getTodayEnd() {
	        let time = this.getTime();
	        let dayTime = this.getTimeEnd(time);
	        return dayTime;
	    }
	    getTodayZero() {
	        let time = this.getTime();
	        let dayTime = this.getTimeZero(time);
	        return dayTime;
	    }
	    getTimeEnd(cTime) {
	        var time = cTime + 3600000 * ServerDate.timezone;
	        let dayTime = cTime - time % this.OneDayTime;
	        dayTime += this.OneDayTime;
	        return dayTime;
	    }
	    getTimeZero(cTime) {
	        let time = cTime + 3600000 * ServerDate.timezone;
	        let dayTime = cTime - time % this.OneDayTime;
	        return dayTime;
	    }
	    isSameDay(timer) {
	        if (!timer)
	            return false;
	        return this.getCurDay() == this.getCurDay(timer);
	    }
	    getTimeDate(timer) {
	        let date = new Date(timer);
	        return date;
	    }
	    getCurCreateDay() {
	    }
	    dateFormat(format, time) {
	        var date = ServerDate.create();
	        date.setTime(time);
	        let opt = {
	            "Y+": date.getSerFullYear().toString(),
	            "m+": (date.getSerMonth() + 1).toString(),
	            "d+": date.getSerDate().toString(),
	            "H+": date.getSerHours().toString(),
	            "M+": date.getSerMinutes().toString(),
	            "S+": date.getSerSeconds().toString()
	        };
	        date.recover();
	        let ret;
	        for (let k in opt) {
	            ret = new RegExp("(" + k + ")").exec(format);
	            if (ret) {
	                try {
	                    format = format.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
	                }
	                catch (e) {
	                    format = format.replace(ret[1], opt[k]);
	                }
	            }
	            ;
	        }
	        ;
	        return format;
	    }
	    getTimeInt(time, hasYear = false) {
	        let dateTime = this.getTimeDate(time);
	        let year = 0;
	        if (hasYear) {
	            year = dateTime.getFullYear();
	        }
	        let month = dateTime.getMonth();
	        let day = dateTime.getDay();
	        let dateInt = year * 10000 + month * 100 + day;
	        return dateInt;
	    }
	    targetTimePastDay(time) {
	        let startZero = this.getTimeZero(time);
	        let nowZero = this.getTodayZero() + this.OneDayTime;
	        let day = Math.floor((nowZero - startZero) / this.OneDayTime);
	        return day;
	    }
	    getTimeStrBylan(time) {
	        let format = LanCfg.get("10080138");
	        if (format == "10080138") {
	            format = "mm/dd/YYYY HH:MM:SS";
	        }
	        let year = TimeMgr.ins().dateFormat(format, time);
	        return year;
	        ;
	    }
	    formatTimer1(value = 0, options = {}) {
	        let format = options.format || LanCfg.get("20013027");
	        let isSecond = options.isSecond === undefined ? true : options.isSecond;
	        value = value < 0 ? 0 : value;
	        value = isSecond ? value : Math.floor(value / 1000);
	        let s = value % 60;
	        let m = Math.floor(value / 60) % 60;
	        let h = Math.floor(value / 60 / 60);
	        return StringUtil.format(format, h, m, s);
	    }
	    formatTimer2(value = 0, options = {}) {
	        let hStr = LanCfg.get("20013028");
	        let mStr = LanCfg.get("20013029");
	        let sStr = LanCfg.get("20013030");
	        let isSecond = options.isSecond === undefined ? true : options.isSecond;
	        value = value < 0 ? 0 : value;
	        value = isSecond ? value : Math.floor(value / 1000);
	        let s = value % 60;
	        let m = Math.floor(value / 60) % 60;
	        let h = Math.floor(value / 60 / 60);
	        let str = (h > 0 ? (h + hStr) : "") +
	            (m > 0 ? (m + mStr) : "") +
	            (s > 0 ? (s + sStr) : "");
	        return str ? str : "0" + sStr;
	    }
	    getCurBuyDay(time) {
	        let curTime = this.getTime();
	        let buyTime = time;
	        let curZeroTime = this.getTimeZero(buyTime);
	        let takeTime = curTime - curZeroTime;
	        return Math.ceil((takeTime / this.OneDayTime));
	    }
	    getTimeStrMs(time, isShowMin = true) {
	        if (time < 0)
	            return "00:00";
	        let timeStr = "";
	        {
	            let hour = Math.floor(time / 3600);
	            if (hour > 9) {
	                timeStr += hour + ":";
	            }
	            else if (hour > 0) {
	                timeStr += "0" + hour + ":";
	            }
	        }
	        time %= 3600;
	        if (isShowMin) {
	            let minute = Math.floor(time / 60);
	            if (minute > 0) {
	                if (minute > 9) {
	                    timeStr += minute + ":";
	                }
	                else {
	                    timeStr += "0" + minute + ":";
	                }
	            }
	            else {
	                timeStr += "00" + ":";
	            }
	        }
	        if (this.isEmpty(timeStr)) {
	            timeStr += (time %= 60);
	        }
	        else {
	            let s = time % 60;
	            if (s > 9) {
	                timeStr += s + "";
	            }
	            else {
	                timeStr += "0" + s;
	            }
	        }
	        return timeStr;
	    }
	    isEmpty(obj) {
	        if (obj == undefined || obj == null || obj == "") {
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	}
	TimeMgr.tmpDate = new Date();

	class LocalData extends Singleton {
	    constructor() {
	        super();
	        this.dayLoginTime = [];
	        this.dayAlerts = {};
	        this.isShowGiftRed = false;
	        this.levelRecord = {};
	        this.loginRecord = {};
	        this.serviceDB = {};
	        if (!LocalData.LID) {
	            console.error("LocalData must init LID!");
	            return;
	        }
	        this.init();
	        this.updateDayLogin();
	    }
	    static setId(account, areaId = 0) {
	        LocalData.LID = "wxd_" + account + "_" + areaId;
	    }
	    save() {
	        Laya.timer.callLater(this, this.saveNow);
	    }
	    saveNow() {
	        Laya.LocalStorage.setJSON(LocalData.LID, this);
	    }
	    init() {
	        var obj;
	        try {
	            obj = Laya.LocalStorage.getJSON(LocalData.LID);
	        }
	        catch (e) {
	            console.error("LocalData.LID JSON ERROR!");
	        }
	        if (!obj)
	            return;
	        this.lang = obj.lang;
	        if (obj.dayAlerts)
	            this.dayAlerts = obj.dayAlerts;
	        if (obj.levelRecord)
	            this.levelRecord = obj.levelRecord;
	        if (obj.loginRecord)
	            this.loginRecord = obj.loginRecord;
	        if (obj.dayLoginTime)
	            this.dayLoginTime = obj.dayLoginTime;
	        if (obj.isShowGiftRed)
	            this.isShowGiftRed = obj.isShowGiftRed;
	        if (obj.serviceDB)
	            this.serviceDB = obj.serviceDB;
	    }
	    updateDayLogin() {
	        var time = TimeMgr.ins().getTodayZero();
	        var tmp = [];
	        for (var i of this.dayLoginTime) {
	            if (i > time) {
	                tmp.push(i);
	            }
	        }
	        this.dayLoginTime = tmp;
	        if (this.dayLoginTime.length < 5) {
	            this.dayLoginTime.push(TimeMgr.ins().getTime());
	        }
	        else {
	            this.dayLoginTime[4] = TimeMgr.ins().getTime();
	        }
	        this.save();
	    }
	    get dayLoginCount() {
	        return this.dayLoginTime.length;
	    }
	    isDayAlert(type) {
	        var day = this.dayAlerts[type];
	        if (day) {
	            var nowDay = TimeMgr.ins().getCurDay();
	            return nowDay > day;
	        }
	        return true;
	    }
	    setDayAlert(type, alert) {
	        if (alert) {
	            this.dayAlerts[type] = 0;
	        }
	        else {
	            this.dayAlerts[type] = TimeMgr.ins().getCurDay();
	        }
	        this.save();
	    }
	    saveGiftState(flag) {
	        LocalData.ins().isShowGiftRed = flag;
	        LocalData.ins().save();
	    }
	    isRecorded(levelId, type) {
	        if (this.levelRecord[levelId]) {
	            let recordTime = this.levelRecord[levelId][type];
	            if (recordTime) {
	                return recordTime === TimeMgr.ins().getTodayZero();
	            }
	            return false;
	        }
	        return false;
	    }
	    recordLevel(levelId, type) {
	        this.levelRecord[levelId] = this.levelRecord[levelId] || {};
	        this.levelRecord[levelId][type] = TimeMgr.ins().getTodayZero();
	        this.save();
	    }
	    isLoginRecorded(type) {
	        return !!this.loginRecord[type];
	    }
	    recordLogin(type) {
	        this.loginRecord[type] = 1;
	        this.save();
	    }
	    setServiceVal(key, valueToSet, flush = false) {
	        this.serviceDB[key] = valueToSet;
	        if (flush) {
	            this.persistData();
	        }
	        else {
	            this.save();
	        }
	    }
	    getServiceVal(key, def) {
	        if (this.hasKey(key)) {
	            return this.serviceDB[key];
	        }
	        return def;
	    }
	    setNumber(key, valueToSet, flush = false) {
	        this.setServiceVal(key, valueToSet, flush);
	    }
	    setString(key, valueToSet, flush = false) {
	        this.setServiceVal(key, valueToSet, flush);
	    }
	    setBool(key, valueToSet, flush = false) {
	        this.setServiceVal(key, valueToSet, flush);
	    }
	    getNumber(key, def) {
	        return this.getServiceVal(key, def);
	    }
	    getString(key, def) {
	        return this.getServiceVal(key, def);
	    }
	    getBool(key, def) {
	        return this.getServiceVal(key, def);
	    }
	    remove(key) {
	        if (this.hasKey(key)) {
	            delete this.serviceDB[key];
	            this.save();
	        }
	    }
	    deleteAll() {
	        this.serviceDB = {};
	        this.save();
	    }
	    persistData() {
	        this.saveNow();
	    }
	    hasKey(key) {
	        return key in this.serviceDB;
	    }
	}

	class MsgConst {
	}
	MsgConst.LOGIN_SUCCESS = "LOGIN_SUCCESS";
	MsgConst.RELOAD = "RELOAD";
	MsgConst.START_GAME = "START_GAME";
	MsgConst.ENTER_GAME = "ENTER_GAME";
	MsgConst.CONFIG_COMPLETE = "CONFIG_COMPLETE";
	MsgConst.RES_COMPLETE = "RES_COMPLETE";
	MsgConst.SHOW_ERROR_MSG = "SHOW_ERROR_MSG";
	MsgConst.LOGIN_BACK_SUC = "LOGIN_BACK_SUC";
	MsgConst.LOGIN_GATE_SUC = "LOGIN_GATE_SUC";
	MsgConst.RESIZE_WINDOW = "RESIZE_WINDOW";
	MsgConst.PL_INITED_ARG = "PL_INITED_ARG";
	MsgConst.INIT_APP = "INIT_APP";
	MsgConst.CLOUDE_UPLOAD_NOW = "CLOUDE_UPLOAD_NOW";
	MsgConst.CURRENCY_CHANGE = "CURRENCY_CHANGE";
	MsgConst.CURRENCY_PURCHASE = "CURRENCY_CHARGE";
	MsgConst.THING_SELECT = "THING_SELECT";
	MsgConst.THING_CANCALE_SELECT = "THING_CANCALE_SELECT";
	MsgConst.CLICK_HOME_ENTER = "CLICK_HOME_ENTER";
	MsgConst.ALL_DRAGON_SLEEP = "ALL_DRAGON_SLEEP";
	MsgConst.SCENE_STATE_CHANGED = "SCENE_STATE_CHANGED";
	MsgConst.LEVEL_GOAL_CHECK = "LEVEL_GOAL_CHECK";
	MsgConst.LEVEL_GOAL_PROGRESS = "LEVEL_GOAL_PROGRESS";
	MsgConst.LEVEL_GOAL_COMPLETE = "LEVEL_GOAL_COMPLETE";
	MsgConst.LEVEL_MAIN_GOAL_PROGRESS = "LEVEL_MAIN_GOAL_PROGRESS";
	MsgConst.LEVEL_MAIN_GOAL_COMPLETE = "LEVEL_MAIN_GOAL_COMPLETE";
	MsgConst.GAME_ACTION = "GAME_ACTION";
	MsgConst.LEVEL_SHOW_WON_VIEW = "LEVEL_SHOW_WON_VIEW";
	MsgConst.LEVEL_POINT_CHANGE = "LEVEL_POINT_CHANGE";
	MsgConst.LEVEL_JUMP_HIGH = "LEVEL_JUMP_HIGH";
	MsgConst.LEVEL_ENTER_CLICK = "LEVEL_ENTER_CLICK";
	MsgConst.CURRENT_LEVEL_READY = "CURRENT_LEVEL_READY";
	MsgConst.SHOW_BUY_TIME = "SHOW_BUY_TIME";
	MsgConst.ENABLE_CLOCK = "ENABLE_CLOCK";
	MsgConst.CLOCK_UPDATE = "CLOCK_UPDATE";
	MsgConst.HOME_TOTAL_STAR = "HOME_TOTAL_STAR";
	MsgConst.BOUNCING_ARROW_SHOW = "BOUNCING_ARROW_SHOW";
	MsgConst.BOUNCING_ARROW_HIDE = "BOUNCING_ARROW_HIDE";
	MsgConst.TOME_TIP_FINISH = "TOME_TIP_FINISH";
	MsgConst.BRING_REWARD_CHANGED = "BRING_REWARD_CHANGED";
	MsgConst.LEVEL_REPEAT_REWARD = "LEVEL_REPEAT_REWARD";
	MsgConst.LEVEL_FIRST_PASS = "LEVEL_FIRST_PASS";
	MsgConst.NOT_LEVEL_FIRST_PASS = "NOT_LEVEL_FIRST_PASS";
	MsgConst.LEVEL_START_PLAYING = "LEVEL_START_PLAYING";
	MsgConst.THING_MERGE_START = "THING_MERGE_START";
	MsgConst.THING_BECOME_ALIVE = "THING_BECOME_ALIVE";
	MsgConst.THING_SPAWN = "THING_SPAWN";
	MsgConst.THING_DESTROY = "THING_DESTROY";
	MsgConst.CATEGORIES_ADD = "CATEGORIES_ADD";
	MsgConst.CATEGORIES_REMOVE = "CATEGORIES_REMOVE";
	MsgConst.ACTIVATE_TAP_BEHAVIOR = "ACTIVATE_TAP_BEHAVIOR";
	MsgConst.R_BAG_UPATE = "R_BAG_UPATE";
	MsgConst.R_BAG_LIST = "R_BAG_LIST";
	MsgConst.DAILY_QUEST_OPEN = "DAILY_QUEST_OPEN";
	MsgConst.DAILY_QUEST_PROGRESS = "DAILY_QUEST_PROGRESS";
	MsgConst.DAILY_QUEST_PICK = "DAILY_QUEST_PICK";
	MsgConst.HANDBOOK_SEEN = "HANDBOOK_SEEN";
	MsgConst.HANDBOOK_DISCOVER = "HANDBOOK_DISCOVER";
	MsgConst.DRAGON_BOOK_SEEN = "DRAGON_BOOK_SEEN";
	MsgConst.DRAGON_BOOK_DISCOVER = "DRAGON_BOOK_DISCOVER";
	MsgConst.DRAGON_BOOK_RED_REFRESH = "DRAGON_BOOK_RED_REFRESH";
	MsgConst.DRAGON_BOOK_MERGE = "DRAGON_BOOK_MERGE";
	MsgConst.SHOP_CHARGE_OK = "SHOP_CHARGE_OK";
	MsgConst.SHOP_UNLOCK_OK = "SHOP_UNLOCK_OK";
	MsgConst.TIMED_SHOP_RESET = "TIMED_SHOP_RESET";
	MsgConst.SHOP_CHANGE_STAR = "SHOP_CHANGE_STAR";
	MsgConst.LEVEL_CHEST_ADD = "LEVEL_CHEST_ADD";
	MsgConst.LEVEL_CHEST_UNLOCK = "LEVEL_CHEST_UNLOCK";
	MsgConst.LEVEL_CHEST_FINISHED = "LEVEL_CHEST_FINISHED";
	MsgConst.LEVEL_CHEST_COLLECT = "LEVEL_CHEST_COLLECT";
	MsgConst.PLAY_SWITCH_SCROLL = "PLAY_SWITCH_SCROLL";
	MsgConst.ATLAS_UNLOCHED = "ATLAS_UNLOCHED";
	MsgConst.ATLAS_DISCOVER = "ATLAS_DISCOVER";
	MsgConst.ATLAS_UNLOCKEDGOODS = "ATLAS_UNLOCKEDGOODS";
	MsgConst.FIRSTCHARGE_HASBUY = "FIRSTCHARGE_HASBUY";
	MsgConst.FIRSTCHARG_GETAWARD = "FIRSTCHARG_GETAWARD";
	MsgConst.SHOP_BUYDIAMONDS = "SHOP_BUYDIAMONDS";
	MsgConst.SHOP_BUYMONTHCARD = "SHOP_BUYMONTHCARD";
	MsgConst.SHOP_RECEIVEWARD = "SHOP_RECEIVEWARD";
	MsgConst.OPENSHOP_BUYDIAMONDS = "OPENSHOP_BUYDIAMONDS";
	MsgConst.SHOP_BUYGIFT = "SHOP_BUYGIFT";
	MsgConst.RESET_DAYTIME = "RESET_DAYTIME";
	MsgConst.UPDATE_SIGNINSTATE = "UPDATE_SIGNINSTATE";
	MsgConst.EVERYDAYSIGN_GETGIFT = "EVERYDAYSIGN_GETGIFT";
	MsgConst.EVERYDAYSIGN_HASGETGIFT = "EVERYDAYSIGN_HASGETGIFT";
	MsgConst.EVERYDAYSIGN_CLEARDATA = "EVERYDAYSIGN_CLEARDATA";
	MsgConst.EGGBANK_HASEGG = "EGGBANK_HASEGG";
	MsgConst.BANCKEGG_CLEAR = "BANCKEGG_CLEAR";
	MsgConst.BANCKEGG_UPDATE = "BANCKEGG_UPDATE";
	MsgConst.UPDATE_LANGCODE = "UPDATE_LANGCODE";
	MsgConst.SHOWBANNER = "SHOWBANNER";
	MsgConst.UPDATE_HOMETASK_REDPOINT = "UPDATE_HOMETASK_REDPOINT";
	MsgConst.UPDATE_HOMETASK = "UPDATE_HOMETASK";
	MsgConst.SHOW_PAY_FOG_AREA = "SHOW_PAY_FOG_AREA";
	MsgConst.CHANGE_SUCCESS = "CHANGE_SUCCESS";
	MsgConst.ONLINE_REAWARD_COLLECT = "ONLINE_REAWARD_COLLECT";

	class Http {
	    constructor() {
	        this.request = new Laya.HttpRequest();
	        this.responseType = "text";
	    }
	    static create() {
	        return new Http();
	    }
	    success(handle, thisObj = null, arg = null) {
	        this.request.once(Laya.Event.COMPLETE, thisObj, handle, arg);
	        return this;
	    }
	    error(handle, thisObj = null) {
	        this.request.once(Laya.Event.ERROR, thisObj, handle);
	        return this;
	    }
	    add(source) {
	        if (this.params != null) {
	            this.params = this.params + "&" + source;
	        }
	        else {
	            this.params = source;
	        }
	        return this;
	    }
	    dataFormat(dataFormat) {
	        this.responseType = dataFormat;
	        return this;
	    }
	    get(url) {
	        if (this.params != null) {
	            url = url + "?" + this.params;
	        }
	        this.request.send(url, this.params, "get", this.responseType);
	    }
	    post(url, data) {
	        if (this.params != null) {
	            url = url + "?" + this.params;
	        }
	        this.request.send(url, data, "post", this.responseType);
	    }
	    changeResponseType(type) {
	        this.responseType = type;
	    }
	}

	class MD5 extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.hexcase = 0;
	        this.b64pad = "";
	    }
	    hex_md5(s) { return this.rstr2hex(this.rstr_md5(this.str2rstr_utf8(s))); }
	    b64_md5(s) { return this.rstr2b64(this.rstr_md5(this.str2rstr_utf8(s))); }
	    any_md5(s, e) { return this.rstr2any(this.rstr_md5(this.str2rstr_utf8(s)), e); }
	    hex_hmac_md5(k, d) { return this.rstr2hex(this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d))); }
	    b64_hmac_md5(k, d) { return this.rstr2b64(this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d))); }
	    any_hmac_md5(k, d, e) { return this.rstr2any(this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d)), e); }
	    rstr_md5(s) {
	        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));
	    }
	    rstr_hmac_md5(key, data) {
	        var bkey = this.rstr2binl(key);
	        if (bkey.length > 16)
	            bkey = this.binl_md5(bkey, key.length * 8);
	        var ipad = Array(16), opad = Array(16);
	        for (var i = 0; i < 16; i++) {
	            ipad[i] = bkey[i] ^ 0x36363636;
	            opad[i] = bkey[i] ^ 0x5C5C5C5C;
	        }
	        var hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);
	        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));
	    }
	    rstr2hex(input) {
	        try {
	            this.hexcase;
	        }
	        catch (e) {
	            this.hexcase = 0;
	        }
	        var hex_tab = this.hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	        var output = "";
	        var x;
	        for (var i = 0; i < input.length; i++) {
	            x = input.charCodeAt(i);
	            output += hex_tab.charAt((x >>> 4) & 0x0F)
	                + hex_tab.charAt(x & 0x0F);
	        }
	        return output;
	    }
	    rstr2b64(input) {
	        try {
	            this.b64pad;
	        }
	        catch (e) {
	            this.b64pad = '';
	        }
	        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	        var output = "";
	        var len = input.length;
	        for (var i = 0; i < len; i += 3) {
	            var triplet = (input.charCodeAt(i) << 16)
	                | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0)
	                | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
	            for (var j = 0; j < 4; j++) {
	                if (i * 8 + j * 6 > input.length * 8)
	                    output += this.b64pad;
	                else
	                    output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
	            }
	        }
	        return output;
	    }
	    rstr2any(input, encoding) {
	        var divisor = encoding.length;
	        var i, j, q, x, quotient;
	        var dividend = Array(Math.ceil(input.length / 2));
	        for (i = 0; i < dividend.length; i++) {
	            dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
	        }
	        var full_length = Math.ceil(input.length * 8 /
	            (Math.log(encoding.length) / Math.log(2)));
	        var remainders = Array(full_length);
	        for (j = 0; j < full_length; j++) {
	            quotient = Array();
	            x = 0;
	            for (i = 0; i < dividend.length; i++) {
	                x = (x << 16) + dividend[i];
	                q = Math.floor(x / divisor);
	                x -= q * divisor;
	                if (quotient.length > 0 || q > 0)
	                    quotient[quotient.length] = q;
	            }
	            remainders[j] = x;
	            dividend = quotient;
	        }
	        var output = "";
	        for (i = remainders.length - 1; i >= 0; i--)
	            output += encoding.charAt(remainders[i]);
	        return output;
	    }
	    str2rstr_utf8(input) {
	        var output = "";
	        var i = -1;
	        var x, y;
	        while (++i < input.length) {
	            x = input.charCodeAt(i);
	            y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
	            if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
	                x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
	                i++;
	            }
	            if (x <= 0x7F)
	                output += String.fromCharCode(x);
	            else if (x <= 0x7FF)
	                output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F), 0x80 | (x & 0x3F));
	            else if (x <= 0xFFFF)
	                output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F), 0x80 | ((x >>> 6) & 0x3F), 0x80 | (x & 0x3F));
	            else if (x <= 0x1FFFFF)
	                output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07), 0x80 | ((x >>> 12) & 0x3F), 0x80 | ((x >>> 6) & 0x3F), 0x80 | (x & 0x3F));
	        }
	        return output;
	    }
	    str2rstr_utf16le(input) {
	        var output = "";
	        for (var i = 0; i < input.length; i++)
	            output += String.fromCharCode(input.charCodeAt(i) & 0xFF, (input.charCodeAt(i) >>> 8) & 0xFF);
	        return output;
	    }
	    str2rstr_utf16be(input) {
	        var output = "";
	        for (var i = 0; i < input.length; i++)
	            output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF, input.charCodeAt(i) & 0xFF);
	        return output;
	    }
	    rstr2binl(input) {
	        var output = Array(input.length >> 2);
	        for (var i = 0; i < output.length; i++)
	            output[i] = 0;
	        for (var i = 0; i < input.length * 8; i += 8)
	            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
	        return output;
	    }
	    binl2rstr(input) {
	        var output = "";
	        for (var i = 0; i < input.length * 32; i += 8)
	            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
	        return output;
	    }
	    binl_md5(x, len) {
	        x[len >> 5] |= 0x80 << ((len) % 32);
	        x[(((len + 64) >>> 9) << 4) + 14] = len;
	        var a = 1732584193;
	        var b = -271733879;
	        var c = -1732584194;
	        var d = 271733878;
	        for (var i = 0; i < x.length; i += 16) {
	            var olda = a;
	            var oldb = b;
	            var oldc = c;
	            var oldd = d;
	            a = this.md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
	            d = this.md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
	            c = this.md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
	            b = this.md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
	            a = this.md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
	            d = this.md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
	            c = this.md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
	            b = this.md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
	            a = this.md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
	            d = this.md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
	            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);
	            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
	            a = this.md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
	            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
	            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
	            b = this.md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
	            a = this.md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
	            d = this.md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
	            c = this.md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
	            b = this.md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
	            a = this.md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
	            d = this.md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
	            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
	            b = this.md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
	            a = this.md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
	            d = this.md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
	            c = this.md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
	            b = this.md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
	            a = this.md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
	            d = this.md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
	            c = this.md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
	            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
	            a = this.md5_hh(a, b, c, d, x[i + 5], 4, -378558);
	            d = this.md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
	            c = this.md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
	            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
	            a = this.md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
	            d = this.md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
	            c = this.md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
	            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
	            a = this.md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
	            d = this.md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
	            c = this.md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
	            b = this.md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
	            a = this.md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
	            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
	            c = this.md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
	            b = this.md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
	            a = this.md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
	            d = this.md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
	            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
	            b = this.md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
	            a = this.md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
	            d = this.md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
	            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
	            b = this.md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
	            a = this.md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
	            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
	            c = this.md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
	            b = this.md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
	            a = this.md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
	            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
	            c = this.md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
	            b = this.md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
	            a = this.safe_add(a, olda);
	            b = this.safe_add(b, oldb);
	            c = this.safe_add(c, oldc);
	            d = this.safe_add(d, oldd);
	        }
	        return [a, b, c, d];
	    }
	    md5_cmn(q, a, b, x, s, t) {
	        return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
	    }
	    md5_ff(a, b, c, d, x, s, t) {
	        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	    }
	    md5_gg(a, b, c, d, x, s, t) {
	        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	    }
	    md5_hh(a, b, c, d, x, s, t) {
	        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
	    }
	    md5_ii(a, b, c, d, x, s, t) {
	        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	    }
	    safe_add(x, y) {
	        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	        return (msw << 16) | (lsw & 0xFFFF);
	    }
	    bit_rol(num, cnt) {
	        return (num << cnt) | (num >>> (32 - cnt));
	    }
	}

	class Version {
	    static get ver() {
	        return this.bigVer + this.smallVer;
	    }
	    static get fver() {
	        return this.ver + this.fileVer;
	    }
	}
	Version.bigVer = "1.0.78";
	Version.smallVer = "";
	Version.fileVer = "";

	var ECurrency;
	(function (ECurrency) {
	    ECurrency[ECurrency["Gold"] = 0] = "Gold";
	    ECurrency[ECurrency["Stone"] = 1] = "Stone";
	    ECurrency[ECurrency["Diamond"] = 2] = "Diamond";
	    ECurrency[ECurrency["Energy"] = 3] = "Energy";
	    ECurrency[ECurrency["Life"] = 4] = "Life";
	    ECurrency[ECurrency["BoosterShovel"] = 5] = "BoosterShovel";
	    ECurrency[ECurrency["BoosterBomb"] = 6] = "BoosterBomb";
	    ECurrency[ECurrency["BoosterSwapper"] = 7] = "BoosterSwapper";
	    ECurrency[ECurrency["Rewarded"] = 8] = "Rewarded";
	    ECurrency[ECurrency["DragonPower"] = 9] = "DragonPower";
	})(ECurrency || (ECurrency = {}));

	class JsonUtil {
	    static getObject(data, key) {
	        if (data == null) {
	            return null;
	        }
	        var tmp = data;
	        if (key.indexOf(".") <= 0) {
	            tmp = this.getMiniValue(tmp, key);
	        }
	        else {
	            var names = key.split('.');
	            for (var i = 0; i < names.length && tmp != null; i++) {
	                tmp = this.getMiniValue(tmp, names[i]);
	            }
	        }
	        return tmp;
	    }
	    static getNumber(data, key) {
	        var obj = this.getObject(data, key);
	        if (obj != null) {
	            return Number(obj);
	        }
	        return 0;
	    }
	    static getString(data, key) {
	        var obj = this.getObject(data, key);
	        if (obj != null)
	            return obj;
	        else
	            return "";
	    }
	    static getStringNull(data, key) {
	        var obj = this.getObject(data, key);
	        if (obj != null)
	            return obj;
	        else
	            return null;
	    }
	    static getBool(data, key) {
	        return this.getNumber(data, key) != 0;
	    }
	    static getMiniValue(data, key) {
	        return data[key];
	    }
	}

	class ConstCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = PConfig.getCfg("CanShuConst.json");
	        }
	        return this._cfg;
	    }
	    static getConfig(id) {
	        let data = this.cfg;
	        return JsonUtil.getObject(data, id);
	    }
	    static getValue(id) {
	        let cfg = this.getConfig(id);
	        return cfg ? JsonUtil.getString(cfg, "value") : undefined;
	    }
	}

	class Platfrom {
	    static get isMobile() {
	        return Laya.Render.isConchApp;
	    }
	    static get isWebGm() {
	        return !this.isMobile && LoginData.gm > 0;
	    }
	}
	var PlatformID;
	(function (PlatformID) {
	    PlatformID["inter_test"] = "inter_test";
	    PlatformID["exter_test"] = "exter_test";
	    PlatformID["XXGame"] = "XXGame";
	    PlatformID["XXGame_test"] = "XXGame_test";
	})(PlatformID || (PlatformID = {}));

	class Debug {
	    static print(...arg) {
	        if (!this.isPrint)
	            return;
	        if (!this.outTx) {
	            this.outTx = new Laya.Text();
	            this.outTx.wordWrap = true;
	            this.outTx.y = 150;
	            this.outTx.width = 200;
	            this.outTx.bgColor = "#ffffff";
	            this.outTx.color = "#000000";
	            this.outTx.zOrder = 99999;
	            Laya.stage.addChild(this.outTx);
	        }
	        let out = "";
	        for (let i = 0; i < arg.length; i++) {
	            out += arg[i] + " ";
	        }
	        this.outTx.text = out + "\n" + this.outTx.text;
	    }
	    static log(...msg) {
	        if (LoginData.gm > 0) {
	            console.log(...msg);
	        }
	    }
	    static mLog(...msg) {
	        if (Platfrom.isMobile) {
	            this.log(...msg);
	        }
	    }
	}
	Debug.skipApplicationPauseEventInEditor = true;
	Debug.printDebugLogMessages = true;
	Debug.isPrint = true;

	class MyScript3D extends Laya.Script3D {
	    setArg(arg) {
	    }
	}

	var RenderQueueModifierID;
	(function (RenderQueueModifierID) {
	    RenderQueueModifierID[RenderQueueModifierID["FRONT"] = 0] = "FRONT";
	    RenderQueueModifierID[RenderQueueModifierID["BACK"] = 1] = "BACK";
	})(RenderQueueModifierID || (RenderQueueModifierID = {}));
	var InfoTextColorID;
	(function (InfoTextColorID) {
	    InfoTextColorID[InfoTextColorID["Blue"] = 0] = "Blue";
	    InfoTextColorID[InfoTextColorID["Green"] = 1] = "Green";
	    InfoTextColorID[InfoTextColorID["Red"] = 2] = "Red";
	})(InfoTextColorID || (InfoTextColorID = {}));
	var TextTypeID;
	(function (TextTypeID) {
	    TextTypeID[TextTypeID["Text"] = 0] = "Text";
	    TextTypeID[TextTypeID["LocKey"] = 1] = "LocKey";
	})(TextTypeID || (TextTypeID = {}));
	var TextAppearLocationID;
	(function (TextAppearLocationID) {
	    TextAppearLocationID[TextAppearLocationID["OverlapObject"] = 0] = "OverlapObject";
	    TextAppearLocationID[TextAppearLocationID["Left"] = 1] = "Left";
	    TextAppearLocationID[TextAppearLocationID["Right"] = 2] = "Right";
	    TextAppearLocationID[TextAppearLocationID["Above"] = 3] = "Above";
	    TextAppearLocationID[TextAppearLocationID["Below"] = 4] = "Below";
	})(TextAppearLocationID || (TextAppearLocationID = {}));
	var TextKindID;
	(function (TextKindID) {
	    TextKindID[TextKindID["Yun"] = 0] = "Yun";
	    TextKindID[TextKindID["TapArrow"] = 1] = "TapArrow";
	})(TextKindID || (TextKindID = {}));

	class Vector3 {
	}
	Vector3.ZERO = new Laya.Vector3(0.0, 0.0, 0.0);
	Vector3.ONE = new Laya.Vector3(1.0, 1.0, 1.0);
	Vector3.NegativeUnitX = new Laya.Vector3(-1, 0, 0);
	Vector3.UnitX = new Laya.Vector3(1, 0, 0);
	Vector3.UnitY = new Laya.Vector3(0, 1, 0);
	Vector3.UnitZ = new Laya.Vector3(0, 0, 1);
	Vector3.ForwardRH = new Laya.Vector3(0, 0, -1);
	Vector3.ForwardLH = new Laya.Vector3(0, 0, 1);
	Vector3.Up = new Laya.Vector3(0, 1, 0);

	let isMobile = Laya.Render.isConchApp;
	let TextDefault = {
	    bold: true,
	    fontSize: 40,
	    color: "#ffffff",
	};
	class Text3D extends Laya.MeshSprite3D {
	    constructor() {
	        super();
	        let mat = this.material = new Laya.UnlitMaterial();
	        mat.cull = Laya.RenderState.CULL_NONE;
	        mat.renderMode = Laya.UnlitMaterial.RENDERMODE_TRANSPARENT;
	        this.meshRenderer.sharedMaterial = mat;
	        let uiText = new HtmlText();
	        this.textField = uiText;
	        uiText.bold = TextDefault.bold;
	        uiText.color = TextDefault.color;
	        uiText.fontSize = TextDefault.fontSize;
	        if (isMobile) {
	            uiText.skewX = 180;
	        }
	        this.transform.rotate(new Laya.Vector3(0, 180, 0), false, false);
	        if (Text3D.DEBUG) {
	            console.log("Text3D CREATE count:  ", ++Text3D.COUNT_CREATE);
	        }
	    }
	    setSize(w, h = Text3D.CONVERT) {
	        if (isMobile) {
	            this.textField.y = 0;
	            this.textField.pivotY = h;
	        }
	        let unityW = w / Text3D.CONVERT;
	        let unityH = h / Text3D.CONVERT;
	        let mesh = Laya.PrimitiveMesh.createQuad(unityW, unityH);
	        let lastMesh = this.meshFilter.sharedMesh;
	        this.meshFilter.sharedMesh = mesh;
	        if (lastMesh)
	            lastMesh.destroy();
	    }
	    redraw() {
	        let w = this.textField.width;
	        let h = this.textField.height;
	        this.setSize(w, h);
	        if (Text3D.DEBUG) {
	            this.textField.bgColor = "#ff0000";
	        }
	        this.destroyRes();
	        this.canvas = this.textField.drawToCanvas(w, h, 0, 0);
	        this.albedoTexture = this.canvas.getTexture().bitmap;
	        this.material.albedoTexture = this.albedoTexture;
	    }
	    destroyRes() {
	        if (this.canvas) {
	            this.canvas.destroy();
	            this.canvas = null;
	        }
	        if (this.albedoTexture) {
	            this.albedoTexture.destroy();
	            this.albedoTexture = null;
	        }
	    }
	    get color() {
	        return this.textField.color;
	    }
	    set color(val) {
	        if (val != this.color) {
	            this.textField.color = val;
	        }
	    }
	    get label() {
	        return this.textField.text;
	    }
	    set label(val) {
	        if (this.label != val) {
	            this.textField.text = val;
	            this.redraw();
	        }
	    }
	    onDestroy() {
	        if (Text3D.DEBUG) {
	            console.log("Text3D DESTROY count:  ", ++Text3D.COUNT_DESTROY);
	        }
	        this.destroyRes();
	        this.textField.destroy(true);
	        this.textField = null;
	    }
	    recover() {
	        this.removeSelf();
	        this.destroyRes();
	        this.textField.text = "";
	        this.textField.bold = TextDefault.bold;
	        this.textField.color = TextDefault.color;
	        this.textField.fontSize = TextDefault.fontSize;
	        if (this.textField.align != "left")
	            this.textField.align = "left";
	        if (!this.active)
	            this.active = true;
	        this.transform.position = Vector3.ZERO;
	        this.transform.localScale = Vector3.ONE;
	        Laya.Pool.recover(Text3D.POOL_NAME, this);
	    }
	}
	Text3D.POOL_NAME = "Text3D";
	Text3D.CONVERT = 128;
	Text3D.DEBUG = false;
	Text3D.COUNT_CREATE = 0;
	Text3D.COUNT_DESTROY = 0;

	class Text3DMgr extends Singleton {
	    constructor() {
	        super();
	        this.colors = {};
	        this.fonts = {};
	        this.init();
	    }
	    init() {
	        this.colors[InfoTextColorID.Blue] = "#0000ff";
	        this.colors[InfoTextColorID.Green] = "#00ff00";
	        this.colors[InfoTextColorID.Red] = "#ff0000";
	        this.fonts[TextKindID.Yun] = new FontKind("#F9FFBD");
	        this.fonts[TextKindID.TapArrow] = new FontKind("#FFAB1A");
	    }
	    create() {
	        return Laya.Pool.getItemByClass(Text3D.POOL_NAME, Text3D);
	    }
	    createByColor(colorId) {
	        let t3 = this.create();
	        let color = this.colors[colorId];
	        if (color)
	            t3.color = color;
	        return t3;
	    }
	    createByKind(kind) {
	        let t3 = this.create();
	        let font = this.fonts[kind];
	        if (font) {
	            if (font.color != null)
	                t3.color = font.color;
	            if (font.bold != null)
	                t3.textField.bold = font.bold;
	            if (font.fontSize != null)
	                t3.textField.fontSize = font.fontSize;
	        }
	        return t3;
	    }
	    createYun() {
	        let t3 = new Text3D();
	        t3.textField.color = "#FFEE90";
	        t3.textField.align = "center";
	        t3.textField.stroke = 2;
	        t3.textField.strokeColor = "#656565";
	        return t3;
	    }
	}
	class FontKind {
	    constructor(color, bold = null, fontSize = null) {
	        this.color = color;
	        this.bold = bold;
	        this.fontSize = fontSize;
	    }
	}

	class CompText extends MyScript3D {
	    onAwake() {
	        this.text = Text3DMgr.ins().createByKind(TextKindID.TapArrow);
	        this.text.label = LanCfg.get(this.msg);
	        let go = this.owner.getChildByName("Text");
	        go.addChild(this.text);
	    }
	    onDestroy() {
	        if (this.text) {
	            this.text.recover();
	        }
	    }
	    setArg(arg) {
	        this.msg = arg;
	    }
	}

	class CompTimeKill extends MyScript3D {
	    constructor() {
	        super(...arguments);
	        this.totalTime = 10;
	    }
	    setArg(arg) {
	        if (arg != null) {
	            this.setTotalTime(Number(arg));
	        }
	        this.pref = this.owner;
	    }
	    setTotalTime(time) {
	        this.totalTime = time;
	        this.timeToLive = time;
	    }
	    onUpdate() {
	        if (this.timeToLive <= 0) {
	            this.pref.dispose();
	            return;
	        }
	        this.timeToLive -= Glob.deltaTime;
	    }
	    onEnable() {
	        this.setTotalTime(this.totalTime);
	    }
	}

	class ScriptCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = PConfig.getCfg("Script.json");
	            this.regClass();
	        }
	        return this._cfg;
	    }
	    static get(id) {
	        return this.cfg[id];
	    }
	    static regClass() {
	        Laya.ClassUtils.regClass("CompTimeKill", CompTimeKill);
	        Laya.ClassUtils.regClass("CompText", CompText);
	    }
	    static addScript1(sp, name) {
	        let data = this.get(name);
	        if (!data || !data.scr1)
	            return;
	        let scripts = data.scr1;
	        let args = data.arg1;
	        for (let i = 0; i < scripts.length; i++) {
	            let script = scripts[i];
	            let comp = sp.addComponent(Laya.ClassUtils.getClass(script));
	            if (args && args[i]) {
	                comp.setArg(args[i]);
	            }
	        }
	    }
	    static addScript2(sp, name) {
	        let data = this.get(name);
	        if (!data || !data.scr2)
	            return;
	        let scripts = data.scr2;
	        let args = data.arg2;
	        for (let i = 0; i < scripts.length; i++) {
	            let script = scripts[i];
	            let comp = sp.addComponent(Laya.ClassUtils.getClass(script));
	            if (args && args[i]) {
	                comp.setArg(args[i]);
	            }
	        }
	    }
	}

	var View = Laya.View;
	var REG = Laya.ClassUtils.regClass;
	var ui;
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var activity;
	            (function (activity) {
	                class ActivityButtonUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ActivityButtonUI.uiView);
	                    }
	                }
	                ActivityButtonUI.uiView = { "type": "View", "props": { "width": 242, "height": 91 }, "compId": 2, "child": [{ "type": "Button", "props": { "var": "btnAct", "top": 0, "stateNum": 2, "skin": "res/skin/activity/tab_houdong.png", "right": 0, "presetID": 1, "name": "btnAct", "left": 0, "bottom": 0, "y": 0, "x": 0, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 3, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 50 }, { "type": "Label", "props": { "var": "lblBtn", "valign": "middle", "top": 0, "text": "七天签到", "right": 0, "presetID": 1, "name": "lblBtn", "left": 0, "fontSize": 30, "color": "#ffffff", "bottom": 0, "bold": true, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 51 }] }, { "type": "Image", "props": { "y": -2, "x": 207, "var": "redPoint", "skin": "res/comp/hongdian.png", "name": "redPoint" }, "compId": 52 }], "loadList": ["res/skin/activity/tab_houdong.png", "data/common/ScaleButton.prefab", "data/common/HtmlLabel.prefab", "res/comp/hongdian.png"], "loadList3D": [] };
	                activity.ActivityButtonUI = ActivityButtonUI;
	                REG("ui.data.module.activity.ActivityButtonUI", ActivityButtonUI);
	                class EveryDaySignInItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(EveryDaySignInItemUI.uiView);
	                    }
	                }
	                EveryDaySignInItemUI.uiView = { "type": "View", "props": { "width": 162, "height": 188 }, "compId": 2, "child": [{ "type": "Image", "props": { "x": 13, "width": 136, "top": 14, "skin": "res/skin/activity/hd_fankuang.png", "height": 160, "sizeGrid": "41,9,8,8" }, "compId": 3, "child": [{ "type": "Label", "props": { "y": 9, "x": 0, "width": 122, "var": "dayLb", "valign": "middle", "text": "5日", "right": 0, "presetID": 1, "name": "dayLb", "left": 0, "height": 16, "fontSize": 20, "color": "#B33D1B", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 4 }, { "type": "Image", "props": { "width": 136, "skin": "res/skin/level_box/gkbx_fsg.png", "right": 0, "left": 0, "height": 127, "bottom": 0 }, "compId": 15 }, { "type": "Image", "props": { "y": 15, "x": 8, "width": 123, "var": "effBg", "skin": "res/skin/level/gk_faguang.png", "height": 123 }, "compId": 14 }, { "type": "Box", "props": { "width": 136, "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "height": 160, "bottom": 0 }, "compId": 5 }, { "type": "Image", "props": { "y": 122, "x": 8, "width": 122, "skin": "res/skin/activity/hd_anniu2.png", "height": 32, "sizeGrid": "8,8,7,5" }, "compId": 12, "child": [{ "type": "Label", "props": { "width": 122, "var": "signInLb", "valign": "middle", "text": "2580", "right": 0, "presetID": 1, "name": "signInLb", "left": 0, "height": 26, "fontSize": 16, "color": "#ffffff", "bottom": 0, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 6 }] }, { "type": "Sprite", "props": { "width": 134, "var": "zhezhao", "top": 0, "right": 2, "name": "zhezhao", "left": 0, "height": 156, "bottom": 4, "alpha": 0.5 }, "compId": 7, "child": [{ "type": "Poly", "props": { "points": "0,4,2,2,7,0,128,0,133,2,135,6,135,149,133,155,129,158,7,158,2,155,0,149", "lineWidth": 1, "lineColor": "#ff0000", "fillColor": "#030303" }, "compId": 16 }] }, { "type": "Image", "props": { "y": 55, "x": 50.5, "width": 35, "var": "gouBg", "skin": "res/skin/dailyQuest/mrdh_gou.png", "name": "gouBg", "height": 35 }, "compId": 8 }, { "type": "Image", "props": { "y": 0, "x": 93, "var": "reSignBg", "skin": "res/skin/signIn/qd_yeqianhong.png", "name": "reSignBg" }, "compId": 9, "child": [{ "type": "Label", "props": { "y": -9, "x": 17, "width": 48, "valign": "middle", "text": "补签", "rotation": 51, "presetID": 1, "height": 20, "fontSize": 18, "color": "#F0D928", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 11 }] }, { "type": "Image", "props": { "y": -15, "x": -14, "width": 162, "visible": false, "var": "signInFlag", "skin": "res/skin/activity/hd_guangxiao.png", "name": "signInFlag", "height": 188 }, "compId": 13 }] }], "loadList": ["res/skin/activity/hd_fankuang.png", "data/common/HtmlLabel.prefab", "res/skin/level_box/gkbx_fsg.png", "res/skin/level/gk_faguang.png", "res/skin/activity/hd_anniu2.png", "res/skin/dailyQuest/mrdh_gou.png", "res/skin/signIn/qd_yeqianhong.png", "res/skin/activity/hd_guangxiao.png"], "loadList3D": [] };
	                activity.EveryDaySignInItemUI = EveryDaySignInItemUI;
	                REG("ui.data.module.activity.EveryDaySignInItemUI", EveryDaySignInItemUI);
	                class EveryDaySignInPanelUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(EveryDaySignInPanelUI.uiView);
	                    }
	                }
	                EveryDaySignInPanelUI.uiView = { "type": "View", "props": { "width": 758, "height": 501 }, "compId": 2, "child": [{ "type": "List", "props": { "y": 0, "x": 14, "width": 742, "var": "dayList", "spaceY": -15, "spaceX": -18, "name": "dayList", "height": 352 }, "compId": 5 }, { "type": "Image", "props": { "x": -1, "width": 758, "skin": "res/skin/activity/hd_touming.png", "height": 148, "bottom": 0, "sizeGrid": "0,7,9,3" }, "compId": 4, "child": [{ "type": "Label", "props": { "y": 34.5, "x": 31, "width": 156, "var": "dayLb", "valign": "middle", "text": "已累计签到", "presetID": 1, "name": "dayLb", "height": 30, "fontSize": 28, "color": "#501C06", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 10, "child": [{ "type": "Label", "props": { "y": 36, "var": "totalDayLb", "valign": "middle", "text": "15天", "right": 0, "presetID": 1, "name": "totalDayLb", "left": 0, "height": 30, "fontSize": 30, "color": "#CA2700", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 11 }] }, { "type": "ProgressBar", "props": { "y": 57, "x": 247, "width": 465, "var": "proBar", "skin": "res/skin/signIn/progress_qiandao.png", "name": "proBar", "height": 15, "sizeGrid": "5,6,7,5" }, "compId": 6, "child": [{ "type": "Box", "props": { "y": -33, "width": 418, "var": "giftBox", "right": 0, "name": "giftBox", "left": 0, "height": 90 }, "compId": 8 }] }, { "type": "Image", "props": { "y": 122, "x": 277, "width": 21, "skin": "res/skin/signIn/qd_jingtan.png", "height": 21 }, "compId": 7, "child": [{ "type": "Label", "props": { "y": 0, "x": 23, "width": 350, "var": "descLb", "valign": "middle", "text": "如漏签，可花10钻石补签", "presetID": 1, "name": "descLb", "height": 24, "fontSize": 20, "color": "#CA2700", "bold": true, "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 9 }] }] }], "loadList": ["res/skin/activity/hd_touming.png", "data/common/HtmlLabel.prefab", "res/skin/signIn/progress_qiandao.png", "res/skin/signIn/qd_jingtan.png"], "loadList3D": [] };
	                activity.EveryDaySignInPanelUI = EveryDaySignInPanelUI;
	                REG("ui.data.module.activity.EveryDaySignInPanelUI", EveryDaySignInPanelUI);
	                class EveryDaySignInRewardIconUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(EveryDaySignInRewardIconUI.uiView);
	                    }
	                }
	                EveryDaySignInRewardIconUI.uiView = { "type": "View", "props": { "width": 100, "height": 100 }, "compId": 2, "child": [{ "type": "Label", "props": { "y": -5, "width": 100, "var": "dayLb", "valign": "middle", "text": "累计5天", "right": 0, "presetID": 1, "name": "dayLb", "left": 0, "height": 16, "fontSize": 18, "color": "#501C06", "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 4 }, { "type": "Image", "props": { "y": -12, "x": -14, "width": 124, "var": "effBg", "skin": "res/skin/signIn/qd_guanxiao.png", "name": "effBg", "height": 128 }, "compId": 6 }, { "type": "Image", "props": { "y": 21, "x": 20, "skin": "res/skin/signIn/qd_yuan.png" }, "compId": 3 }, { "type": "Box", "props": { "width": 100, "var": "boxPref", "top": -1, "right": 0, "name": "boxPref", "left": 0, "height": 110, "bottom": 0 }, "compId": 7 }, { "type": "Label", "props": { "y": 74, "width": 94, "var": "awardName", "valign": "middle", "text": "金龙鱼蛋", "stroke": 1, "right": 0, "presetID": 1, "name": "awardName", "left": 6, "height": 16, "fontSize": 18, "color": "#ffffff", "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 5 }, { "type": "Image", "props": { "y": 34, "x": 34, "width": 33, "var": "gouBg", "skin": "res/skin/dailyQuest/mrdh_gou.png", "name": "gouBg", "height": 33 }, "compId": 8 }, { "type": "Image", "props": { "y": 12, "x": 60, "width": 22, "var": "redPoint", "skin": "res/comp/hongdian.png", "name": "redPoint", "height": 22 }, "compId": 12 }], "loadList": ["data/common/HtmlLabel.prefab", "res/skin/signIn/qd_guanxiao.png", "res/skin/signIn/qd_yuan.png", "res/skin/dailyQuest/mrdh_gou.png", "res/comp/hongdian.png"], "loadList3D": [] };
	                activity.EveryDaySignInRewardIconUI = EveryDaySignInRewardIconUI;
	                REG("ui.data.module.activity.EveryDaySignInRewardIconUI", EveryDaySignInRewardIconUI);
	                class MonthlyCardPanelUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(MonthlyCardPanelUI.uiView);
	                    }
	                }
	                MonthlyCardPanelUI.uiView = { "type": "View", "props": { "width": 757, "height": 525 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/skin/activity/hd_beijing.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 3, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 0, "renderType": "mask", "cacheAs": "normal" }, "compId": 67, "child": [{ "type": "Poly", "props": { "y": 33, "x": 7.5, "points": "-6,-11,97,-35,705,-35,752,18,749,493,749,493,-5,492", "lineWidth": 1, "fillColor": "#23d5dd" }, "compId": 68 }] }, { "type": "Label", "props": { "y": 222, "x": 247, "width": 483, "valign": "middle", "text": "20090012", "presetID": 1, "height": 49, "fontSize": 25, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true, "color": "#ffffff" }, "compId": 4 }, { "type": "List", "props": { "y": 280, "x": 260, "width": 463, "var": "rewardList", "spaceX": 15, "repeatX": 3, "name": "rewardList", "height": 104 }, "compId": 55 }, { "type": "Button", "props": { "y": 470, "x": 508, "width": 183, "visible": false, "var": "btnReceived", "skin": "res/comp/hd_kongjian.png", "presetID": 1, "pivotY": 33.5, "pivotX": 91.5, "name": "btnReceived", "height": 67, "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 52, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 53 }, { "type": "Label", "props": { "valign": "middle", "top": 0, "text": "20016022", "right": 0, "presetID": 1, "left": 0, "fontSize": 25, "bottom": 0, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true, "color": "#ffffff" }, "compId": 54 }] }, { "type": "Button", "props": { "y": 470, "x": 508, "width": 183, "var": "btnBuy", "skin": "res/comp/hd_kongjian.png", "presetID": 1, "pivotY": 33.5, "pivotX": 91.5, "name": "btnBuy", "height": 67, "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 8, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 50 }, { "type": "Label", "props": { "width": 183, "var": "lblCost", "valign": "middle", "text": "￥12", "right": 0, "presetID": 1, "name": "lblCost", "left": 0, "height": 61, "fontSize": 28, "bottom": 0, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true, "color": "#ffffff" }, "compId": 51 }] }, { "type": "Image", "props": { "y": 443, "x": -2, "width": 358, "var": "buyFlag", "skin": "res/skin/activity/hd_jianbian.png", "name": "buyFlag", "height": 52 }, "compId": 69 }, { "type": "Label", "props": { "y": 448, "x": 2, "width": 370, "var": "residueDay", "valign": "middle", "text": "20090002", "presetID": 1, "name": "residueDay", "height": 52, "fontSize": 25, "color": "#2F256A", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 64 }, { "type": "Label", "props": { "y": 446, "x": 418, "width": 320, "var": "lblTips", "valign": "middle", "text": "20019010", "presetID": 1, "name": "lblTips", "height": 49, "fontSize": 25, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true, "color": "#ffffff" }, "compId": 65 }, { "type": "Label", "props": { "y": 54, "x": 231, "width": 158, "valign": "middle", "text": "20090007", "presetID": 1, "height": 49, "fontSize": 60, "font": "Microsoft YaHei", "color": "#FDE5A5", "bold": true, "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 70 }, { "type": "Label", "props": { "y": 45, "x": 391, "width": 208, "valign": "middle", "text": "20090008", "presetID": 1, "height": 77, "fontSize": 80, "font": "Microsoft YaHei", "color": "#FDE5A5", "bold": true, "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 71 }, { "type": "Label", "props": { "y": 149, "x": 243, "width": 89, "valign": "middle", "text": "20090009", "strokeColor": "#3F3186", "stroke": 2, "presetID": 1, "height": 49, "fontSize": 30, "color": "#ffffff", "bold": true, "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 72 }, { "type": "Label", "props": { "y": 145, "x": 338, "width": 156, "valign": "middle", "text": "20090010", "strokeColor": "#3F3186", "stroke": 2, "presetID": 1, "height": 52, "fontSize": 60, "font": "Microsoft YaHei", "color": "#FDD259", "bold": true, "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 73 }, { "type": "Label", "props": { "y": 148, "x": 504, "width": 211, "valign": "middle", "text": "20090011", "strokeColor": "#3F3186", "stroke": 2, "presetID": 1, "height": 49, "fontSize": 30, "color": "#ffffff", "bold": true, "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 75 }] }], "loadList": ["res/skin/activity/hd_beijing.png", "data/common/HtmlLabel.prefab", "res/comp/hd_kongjian.png", "data/common/ScaleButton.prefab", "res/skin/activity/hd_jianbian.png"], "loadList3D": [] };
	                activity.MonthlyCardPanelUI = MonthlyCardPanelUI;
	                REG("ui.data.module.activity.MonthlyCardPanelUI", MonthlyCardPanelUI);
	                class MonthlyRewardIconUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(MonthlyRewardIconUI.uiView);
	                    }
	                }
	                MonthlyRewardIconUI.uiView = { "type": "View", "props": { "width": 156, "height": 144 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/skin/activity/hd_guang.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 3, "child": [{ "type": "Box", "props": { "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "bottom": 0 }, "compId": 4 }] }], "loadList": ["res/skin/activity/hd_guang.png"], "loadList3D": [] };
	                activity.MonthlyRewardIconUI = MonthlyRewardIconUI;
	                REG("ui.data.module.activity.MonthlyRewardIconUI", MonthlyRewardIconUI);
	                class OnlineRewardBotItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(OnlineRewardBotItemUI.uiView);
	                    }
	                }
	                OnlineRewardBotItemUI.uiView = { "type": "View", "props": { "width": 340, "height": 188 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/skin/activity/hd_fankuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "41,9,8,8" }, "compId": 3, "child": [{ "type": "Image", "props": { "y": 35, "skin": "res/skin/level_box/gkbx_fsg.png", "right": 0, "left": 0, "height": 149, "alpha": 0.6 }, "compId": 4 }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "bottom": 0 }, "compId": 11 }, { "type": "Label", "props": { "y": 7, "x": 0, "width": 220, "var": "lblName", "valign": "middle", "text": "青草龙蛋", "right": 0, "presetID": 1, "name": "lblName", "left": 0, "height": 28, "fontSize": 22, "color": "#B33D1B", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 5 }, { "type": "Image", "props": { "y": 146, "x": 108, "width": 122, "var": "timeImg", "skin": "res/skin/activity/hd_anniu2.png", "name": "timeImg", "height": 35, "sizeGrid": "8,8,7,5" }, "compId": 6, "child": [{ "type": "Label", "props": { "width": 122, "var": "lblTime", "valign": "middle", "text": "25分钟", "right": 0, "presetID": 1, "name": "lblTime", "left": 0, "height": 32, "fontSize": 22, "color": "#ffffff", "bottom": 0, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 7 }] }, { "type": "Image", "props": { "y": 147, "x": 108, "width": 122, "visible": false, "var": "receiveImg", "skin": "res/skin/activity/hd_anniu.png", "name": "receiveImg", "height": 35, "sizeGrid": "8,6,9,4" }, "compId": 8, "child": [{ "type": "Label", "props": { "width": 122, "var": "lblBtn", "valign": "middle", "text": "领取", "right": 0, "presetID": 1, "name": "lblBtn", "left": 0, "height": 32, "fontSize": 22, "color": "#ffffff", "bottom": 0, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 9 }] }, { "type": "Image", "props": { "y": 40, "x": 136, "width": 69, "var": "lockImg", "skin": "res/skin/level_box/gkbx_wenhao.png", "name": "lockImg", "height": 96 }, "compId": 10 }] }], "loadList": ["res/skin/activity/hd_fankuang.png", "res/skin/level_box/gkbx_fsg.png", "data/common/HtmlLabel.prefab", "res/skin/activity/hd_anniu2.png", "res/skin/activity/hd_anniu.png", "res/skin/level_box/gkbx_wenhao.png"], "loadList3D": [] };
	                activity.OnlineRewardBotItemUI = OnlineRewardBotItemUI;
	                REG("ui.data.module.activity.OnlineRewardBotItemUI", OnlineRewardBotItemUI);
	                class OnlineRewardsPanelUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(OnlineRewardsPanelUI.uiView);
	                    }
	                }
	                OnlineRewardsPanelUI.uiView = { "type": "View", "props": { "width": 752, "height": 521 }, "compId": 2, "child": [{ "type": "List", "props": { "y": 23, "x": 23, "width": 712, "var": "topList", "spaceX": 10, "name": "topList", "height": 193 }, "compId": 5 }, { "type": "List", "props": { "y": 224, "x": 23, "width": 712, "var": "bottomList", "spaceX": 8, "name": "bottomList", "height": 190 }, "compId": 6 }, { "type": "Image", "props": { "y": 427, "width": 752, "skin": "res/skin/activity/hd_touming.png", "right": 0, "left": 0, "height": 93, "sizeGrid": "0,7,9,3" }, "compId": 3, "child": [{ "type": "Label", "props": { "y": 18, "x": 33, "width": 710, "valign": "middle", "text": "20130008", "presetID": 1, "height": 30, "fontSize": 25, "color": "#98393A", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 7 }, { "type": "Label", "props": { "y": 50, "x": 33, "width": 710, "var": "totalTime", "valign": "middle", "text": "20130009", "presetID": 1, "name": "totalTime", "height": 30, "fontSize": 25, "color": "#98393A", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 8 }] }], "loadList": ["res/skin/activity/hd_touming.png", "data/common/HtmlLabel.prefab"], "loadList3D": [] };
	                activity.OnlineRewardsPanelUI = OnlineRewardsPanelUI;
	                REG("ui.data.module.activity.OnlineRewardsPanelUI", OnlineRewardsPanelUI);
	                class OnlineRewardTopItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(OnlineRewardTopItemUI.uiView);
	                    }
	                }
	                OnlineRewardTopItemUI.uiView = { "type": "View", "props": { "width": 221, "height": 188 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/skin/activity/hd_fankuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "41,9,8,8" }, "compId": 3, "child": [{ "type": "Image", "props": { "y": 35, "x": 0, "width": 220, "skin": "res/skin/level_box/gkbx_fsg.png", "height": 149, "alpha": 0.6 }, "compId": 4 }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "bottom": 0 }, "compId": 12 }, { "type": "Label", "props": { "y": 7, "x": 0, "width": 220, "var": "lblName", "valign": "middle", "text": "青草龙蛋", "right": 0, "presetID": 1, "name": "lblName", "left": 0, "height": 28, "fontSize": 22, "color": "#B33D1B", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 5 }, { "type": "Image", "props": { "y": 146, "x": 49, "width": 122, "var": "timeImg", "skin": "res/skin/activity/hd_anniu2.png", "name": "timeImg", "height": 35, "sizeGrid": "8,8,7,5" }, "compId": 6, "child": [{ "type": "Label", "props": { "width": 122, "var": "lblTime", "valign": "middle", "text": "25分钟", "right": 0, "presetID": 1, "name": "lblTime", "left": 0, "height": 32, "fontSize": 22, "color": "#ffffff", "bottom": 0, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 9 }] }, { "type": "Image", "props": { "y": 146, "x": 49, "width": 122, "visible": false, "var": "receiveImg", "skin": "res/skin/activity/hd_anniu.png", "name": "receiveImg", "height": 35, "sizeGrid": "8,6,9,4" }, "compId": 8, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "width": 122, "var": "lblBtn", "valign": "middle", "text": "领取", "right": 0, "presetID": 1, "name": "lblBtn", "left": 0, "height": 32, "fontSize": 22, "color": "#ffffff", "bottom": 0, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 10 }] }, { "type": "Image", "props": { "y": 43, "x": 78, "width": 69, "var": "lockImg", "skin": "res/skin/level_box/gkbx_wenhao.png", "name": "lockImg", "height": 96 }, "compId": 11 }] }], "loadList": ["res/skin/activity/hd_fankuang.png", "res/skin/level_box/gkbx_fsg.png", "data/common/HtmlLabel.prefab", "res/skin/activity/hd_anniu2.png", "res/skin/activity/hd_anniu.png", "res/skin/level_box/gkbx_wenhao.png"], "loadList3D": [] };
	                activity.OnlineRewardTopItemUI = OnlineRewardTopItemUI;
	                REG("ui.data.module.activity.OnlineRewardTopItemUI", OnlineRewardTopItemUI);
	                class SevenDaySignInLItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(SevenDaySignInLItemUI.uiView);
	                    }
	                }
	                SevenDaySignInLItemUI.uiView = { "type": "View", "props": { "width": 157, "height": 224 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/skin/activity/hd_fankuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "41,9,8,8" }, "compId": 3, "child": [{ "type": "Image", "props": { "width": 157, "skin": "res/skin/level_box/gkbx_fsg.png", "right": 0, "left": 0, "height": 191, "bottom": 1, "alpha": 0.6 }, "compId": 4 }, { "type": "Label", "props": { "y": 5, "width": 157, "var": "dayLb", "valign": "middle", "text": "第一天", "right": 0, "presetID": 1, "name": "dayLb", "left": 0, "height": 30, "fontSize": 25, "color": "#B33D1B", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 5 }, { "type": "Label", "props": { "y": 35, "x": 0, "width": 160, "var": "giftName", "valign": "middle", "text": "海王龙蛋", "right": 0, "presetID": 1, "name": "giftName", "left": 0, "height": 30, "fontSize": 20, "color": "#6E461E", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 6 }, { "type": "Image", "props": { "y": 34.5, "x": -1.5, "width": 160, "var": "effBg", "skin": "res/skin/level/gk_faguang.png", "height": 160 }, "compId": 13 }, { "type": "Image", "props": { "y": 81, "x": 28, "var": "receivedBg", "skin": "res/skin/signIn/zw_lingqu.png", "name": "receivedBg" }, "compId": 7 }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 200, "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "height": 220, "bottom": 0 }, "compId": 9 }, { "type": "Image", "props": { "y": 0, "x": 134, "visible": false, "var": "redPoint", "skin": "res/comp/hongdian.png", "scaleY": 0.8, "scaleX": 0.8, "name": "redPoint" }, "compId": 10 }, { "type": "Image", "props": { "y": 179, "x": 14, "width": 131, "var": "unSignLbBg", "skin": "res/skin/activity/hd_anniu2.png", "name": "unSignLbBg", "height": 31, "sizeGrid": "8,8,7,5" }, "compId": 11 }, { "type": "Image", "props": { "y": 179, "x": 14, "width": 131, "var": "signingLbBg", "skin": "res/skin/activity/hd_anniu.png", "name": "signingLbBg", "height": 31, "sizeGrid": "8,6,9,4" }, "compId": 12 }, { "type": "Label", "props": { "y": 187, "x": 9, "width": 142, "var": "signInLb", "valign": "middle", "text": "待签到", "presetID": 1, "name": "signInLb", "height": 23, "fontSize": 22, "color": "#fbfbfb", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 8 }] }], "loadList": ["res/skin/activity/hd_fankuang.png", "res/skin/level_box/gkbx_fsg.png", "data/common/HtmlLabel.prefab", "res/skin/level/gk_faguang.png", "res/skin/signIn/zw_lingqu.png", "res/comp/hongdian.png", "res/skin/activity/hd_anniu2.png", "res/skin/activity/hd_anniu.png"], "loadList3D": [] };
	                activity.SevenDaySignInLItemUI = SevenDaySignInLItemUI;
	                REG("ui.data.module.activity.SevenDaySignInLItemUI", SevenDaySignInLItemUI);
	                class SevenDaySignInPanelUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(SevenDaySignInPanelUI.uiView);
	                    }
	                }
	                SevenDaySignInPanelUI.uiView = { "type": "View", "props": { "width": 752, "height": 521 }, "compId": 2, "child": [{ "type": "List", "props": { "y": 20, "x": 15, "width": 513, "var": "leftList", "spaceY": 9, "spaceX": 9, "repeatX": 3, "name": "leftList", "height": 491 }, "compId": 3 }, { "type": "List", "props": { "y": 20, "x": 522, "width": 218, "var": "rightList", "repeatX": 1, "name": "rightList", "height": 491 }, "compId": 4 }], "loadList": [], "loadList3D": [] };
	                activity.SevenDaySignInPanelUI = SevenDaySignInPanelUI;
	                REG("ui.data.module.activity.SevenDaySignInPanelUI", SevenDaySignInPanelUI);
	                class SevenDaySignInRItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(SevenDaySignInRItemUI.uiView);
	                    }
	                }
	                SevenDaySignInRItemUI.uiView = { "type": "View", "props": { "width": 203, "height": 461 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/skin/activity/hd_fankuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "41,9,8,8" }, "compId": 3, "child": [{ "type": "Image", "props": { "y": 37, "width": 203, "skin": "res/skin/level_box/gkbx_fsg.png", "right": 0, "left": 0, "height": 360, "alpha": 0.3 }, "compId": 4 }, { "type": "Label", "props": { "y": 5, "width": 157, "var": "dayLb", "valign": "middle", "text": "第一天", "right": 0, "presetID": 1, "name": "dayLb", "left": 0, "height": 30, "fontSize": 25, "color": "#B33D1B", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 5 }, { "type": "Label", "props": { "y": 34, "width": 160, "var": "giftName", "valign": "middle", "text": "海王龙蛋", "right": 0, "presetID": 1, "name": "giftName", "left": 0, "height": 30, "fontSize": 20, "color": "#6E461E", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 6 }, { "type": "Image", "props": { "y": 64, "x": -12, "width": 225, "var": "effBg", "skin": "res/skin/level/gk_faguang.png", "height": 267 }, "compId": 13 }, { "type": "Image", "props": { "y": 157, "x": 48.5, "width": 104, "var": "receivedBg", "skin": "res/skin/signIn/zw_lingqu.png", "name": "receivedBg", "height": 77 }, "compId": 7 }, { "type": "Box", "props": { "width": 203, "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "height": 461, "bottom": 0 }, "compId": 8 }, { "type": "Image", "props": { "y": 0, "x": 178, "visible": false, "var": "redPoint", "skin": "res/comp/hongdian.png", "scaleY": 0.8, "scaleX": 0.8, "name": "redPoint" }, "compId": 9 }, { "type": "Image", "props": { "y": 415, "x": 37, "width": 131, "var": "unSignLbBg", "skin": "res/skin/activity/hd_anniu2.png", "name": "unSignLbBg", "height": 31, "sizeGrid": "8,8,7,5" }, "compId": 10 }, { "type": "Image", "props": { "y": 415, "x": 37, "width": 131, "var": "signingLbBg", "skin": "res/skin/activity/hd_anniu.png", "name": "signingLbBg", "height": 31, "sizeGrid": "8,6,9,4" }, "compId": 11 }, { "type": "Label", "props": { "y": 423, "x": 30.5, "width": 142, "var": "signInLb", "valign": "middle", "text": "待签到", "presetID": 1, "name": "signInLb", "height": 23, "fontSize": 22, "color": "#ffffff", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 12 }] }], "loadList": ["res/skin/activity/hd_fankuang.png", "res/skin/level_box/gkbx_fsg.png", "data/common/HtmlLabel.prefab", "res/skin/level/gk_faguang.png", "res/skin/signIn/zw_lingqu.png", "res/comp/hongdian.png", "res/skin/activity/hd_anniu2.png", "res/skin/activity/hd_anniu.png"], "loadList3D": [] };
	                activity.SevenDaySignInRItemUI = SevenDaySignInRItemUI;
	                REG("ui.data.module.activity.SevenDaySignInRItemUI", SevenDaySignInRItemUI);
	            })(activity = module.activity || (module.activity = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var atlas;
	            (function (atlas) {
	                class AtlasContentItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(AtlasContentItemUI.uiView);
	                    }
	                }
	                AtlasContentItemUI.uiView = { "type": "View", "props": { "width": 290, "height": 364 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": -1, "x": 0, "width": 242, "var": "bgImg", "skin": "res/skin/level_box/gkbx_dikuang.png", "name": "bgImg", "height": 364, "sizeGrid": "15,15,15,15" }, "compId": 4, "child": [{ "type": "Label", "props": { "y": 24, "x": 97, "var": "lblName", "top": 23, "text": "新石", "fontSize": 24, "color": "#703819", "centerX": 0 }, "compId": 7 }, { "type": "Image", "props": { "y": 53, "x": 15, "width": 210, "skin": "res/comp/zjm_toumingkuong3.png", "height": 227, "sizeGrid": "8,8,8,8" }, "compId": 9, "child": [{ "type": "Image", "props": { "y": 2, "x": 4, "width": 200, "var": "bannerBg", "skin": "res/comp/gy_jianbian.png", "name": "bannerBg", "height": 30, "sizeGrid": "3,30,3,30" }, "compId": 5, "child": [{ "type": "Label", "props": { "y": 0, "x": 0, "var": "lblLv", "text": "普通", "fontSize": 22, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 10 }] }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 217, "visible": false, "var": "findLb", "valign": "middle", "text": "你找到了：", "name": "findLb", "height": 29, "fontSize": 22, "color": "#703819", "align": "center" }, "compId": 14 }, { "type": "Image", "props": { "x": 106, "width": 108, "var": "goodIcon", "top": 51, "skin": "res/skin/atlas/tujian_shuo.png", "pivotY": 54, "pivotX": 54, "name": "goodIcon", "height": 108 }, "compId": 20, "child": [{ "type": "Label", "props": { "width": 80, "var": "clickLb", "valign": "middle", "text": "点击！", "stroke": 2, "rotation": -20, "name": "clickLb", "height": 29, "fontSize": 25, "color": "#FCF802", "centerY": -32, "centerX": -23, "align": "center" }, "compId": 15 }] }, { "type": "Label", "props": { "width": 203, "var": "levelLb", "valign": "middle", "text": "等级1", "name": "levelLb", "height": 29, "fontSize": 22, "color": "#703819", "centerY": 87, "centerX": 0, "align": "center" }, "compId": 12 }] }, { "type": "Label", "props": { "wordWrap": true, "width": 213, "var": "desLb", "valign": "top", "text": "普通", "presetID": 1, "name": "desLb", "height": 70, "fontSize": 18, "color": "#703819", "centerY": 138, "centerX": -2, "align": "left", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 22 }, { "type": "Box", "props": { "y": 165, "x": 27830, "width": 242, "var": "boxPref", "top": 0, "right": 0, "pivotY": 165, "left": 0, "height": 350, "bottom": 0, "anchorX": 115 }, "compId": 21 }] }, { "type": "Image", "props": { "y": 130, "x": 244, "width": 51, "var": "arrow", "skin": "res/comp/gy_zhixiang.png", "name": "arrow", "height": 74 }, "compId": 16 }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/comp/zjm_toumingkuong3.png", "res/comp/gy_jianbian.png", "res/skin/atlas/tujian_shuo.png", "data/common/HtmlLabel.prefab", "res/comp/gy_zhixiang.png"], "loadList3D": [] };
	                atlas.AtlasContentItemUI = AtlasContentItemUI;
	                REG("ui.data.module.atlas.AtlasContentItemUI", AtlasContentItemUI);
	                class AtlasSorItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(AtlasSorItemUI.uiView);
	                    }
	                }
	                AtlasSorItemUI.uiView = { "type": "View", "props": { "width": 172, "height": 196 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 172, "var": "bgOne", "skin": "res/skin/dragon/jlxt_beijinkuan1.png", "name": "bgOne", "height": 196, "sizeGrid": "45,15,25,15" }, "compId": 3 }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 172, "visible": false, "var": "bgTwo", "skin": "res/skin/dragon/jlxt_beijinkuan2.png", "name": "bgTwo", "height": 196, "sizeGrid": "45,15,25,15" }, "compId": 4 }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 172, "visible": false, "var": "bgThree", "skin": "res/skin/dragon/jlxt_beijinkuan3.png", "name": "bgThree", "height": 196, "sizeGrid": "45,15,25,15" }, "compId": 5 }, { "type": "Image", "props": { "y": 27, "x": 2, "var": "imgNone", "skin": "res/skin/dragon/jlxt_dan.png", "centerY": 18, "centerX": 1 }, "compId": 7 }, { "type": "Label", "props": { "y": 12, "x": 0, "var": "lblName", "text": "青草猛龙", "strokeColor": "#411e1e", "stroke": 2, "fontSize": 24, "color": "#f8dd82", "centerX": 0 }, "compId": 6 }, { "type": "Box", "props": { "var": "boxPref", "top": 0, "right": 0, "pivotY": 118, "pivotX": 90, "left": 0, "bottom": 0 }, "compId": 19 }, { "type": "Box", "props": { "y": 98, "x": 9, "width": 156, "var": "unlockBox", "name": "unlockBox", "height": 97 }, "compId": 17, "child": [{ "type": "Image", "props": { "y": 64, "x": 14, "width": 40, "var": "sortIcon", "skin": "res/icon/dj001.png", "name": "sortIcon", "height": 33 }, "compId": 8, "child": [{ "type": "Label", "props": { "y": 15, "width": 83, "var": "toolCount", "text": "1000", "strokeColor": "#411e1e", "stroke": 2, "name": "toolCount", "height": 18, "fontSize": 18, "color": "#38B15D", "centerX": 65, "align": "left" }, "compId": 9 }] }, { "type": "Label", "props": { "y": 39, "width": 60, "var": "hasCount", "text": "×1000", "strokeColor": "#411e1e", "stroke": 2, "name": "hasCount", "height": 19, "fontSize": 22, "color": "#ffffff", "centerX": 39 }, "compId": 10 }] }, { "type": "Image", "props": { "y": 1, "x": 140, "visible": false, "var": "atlasRedPoint", "skin": "res/comp/hongdian.png", "name": "atlasRedPoint" }, "compId": 20 }], "loadList": ["res/skin/dragon/jlxt_beijinkuan1.png", "res/skin/dragon/jlxt_beijinkuan2.png", "res/skin/dragon/jlxt_beijinkuan3.png", "res/skin/dragon/jlxt_dan.png", "res/icon/dj001.png", "res/comp/hongdian.png"], "loadList3D": [] };
	                atlas.AtlasSorItemUI = AtlasSorItemUI;
	                REG("ui.data.module.atlas.AtlasSorItemUI", AtlasSorItemUI);
	            })(atlas = module.atlas || (module.atlas = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var buyDiamonds;
	            (function (buyDiamonds) {
	                class BuyDiamondsItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(BuyDiamondsItemUI.uiView);
	                    }
	                }
	                BuyDiamondsItemUI.uiView = { "type": "View", "props": { "y": 180, "x": 115, "width": 291, "pivotY": 180, "pivotX": 115, "height": 600 }, "compId": 2, "child": [{ "type": "Image", "props": { "width": 291, "var": "itemBg", "skin": "res/skin/level_box/gkbx_dikuang.png", "name": "itemBg", "left": 0, "height": 451, "bottom": 3, "sizeGrid": "15,15,15,15" }, "compId": 6, "child": [{ "type": "Image", "props": { "y": 9, "width": 301, "skin": "res/skin/level_box/gkbx_fsg.png", "scaleY": 0.9, "scaleX": 0.9, "height": 190, "centerX": -3 }, "compId": 7 }, { "type": "Label", "props": { "y": 62, "x": -17, "width": 127, "var": "tipsLb", "valign": "middle", "text": "特别", "stroke": 1, "scaleY": 1, "scaleX": 1, "rotation": -30, "presetID": 1, "name": "tipsLb", "height": 30, "fontSize": 25, "color": "#EAFD01", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 4 }, { "type": "Image", "props": { "y": 53, "x": 85, "width": 232, "visible": false, "var": "giftIcon", "skin": "res/skin/shop/sd_zuanshi1.png", "scaleY": 0.5, "scaleX": 0.5, "name": "giftIcon", "height": 134 }, "compId": 30 }, { "type": "Box", "props": { "y": -157, "width": 291, "var": "boxPref", "styleSkin": "res/skin/firstCharge/sd_zuanshi2.png", "right": 0, "name": "boxPref", "left": 0, "height": 606 }, "compId": 8 }, { "type": "Label", "props": { "y": 143, "width": 291, "var": "itemName", "valign": "middle", "text": "超值月卡", "stroke": 1, "right": 0, "presetID": 1, "name": "itemName", "left": 0, "height": 32, "fontSize": 22, "color": "#f6f6f3", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 16 }, { "type": "Image", "props": { "y": 190, "width": 291, "skin": "res/comp/gy_jianbian.png", "right": 0, "left": 0, "height": 60, "sizeGrid": "3,30,3,30" }, "compId": 17, "child": [{ "type": "Label", "props": { "y": 17, "width": 135, "var": "desLb", "valign": "top", "text": "30天×", "stroke": 1, "presetID": 1, "name": "desLb", "left": 18, "height": 16, "fontSize": 16, "color": "#E708BC", "bold": true, "align": "right", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 18, "child": [{ "type": "Box", "props": { "y": -2.5, "x": 142, "width": 26, "var": "box1", "styleSkin": "res/comp/zjm_zhuanshi.png", "name": "box1", "height": 23 }, "compId": 32 }] }, { "type": "Label", "props": { "y": 12, "x": 35, "width": 134, "var": "eggLb", "valign": "middle", "text": "30天", "stroke": 1, "presetID": 1, "name": "eggLb", "height": 16, "fontSize": 16, "color": "#E708BC", "bold": true, "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 31, "child": [{ "type": "Box", "props": { "y": -4, "x": 144, "width": 26, "var": "box2", "styleSkin": "res/skin/shop/sd_longdan.png", "rotation": 0, "name": "box2", "height": 23 }, "compId": 33 }] }, { "type": "Image", "props": { "y": 9, "x": 117, "width": 44, "var": "diamondImg", "skin": "res/comp/zjm_zhuanshi.png", "name": "diamondImg", "height": 39 }, "compId": 35, "child": [{ "type": "Label", "props": { "y": 4, "x": -112, "width": 111, "var": "commonLb", "valign": "middle", "text": "30", "stroke": 1, "presetID": 1, "name": "commonLb", "height": 42, "fontSize": 25, "color": "#ffffff", "bold": true, "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 34 }] }, { "type": "Image", "props": { "y": -3.5, "x": 195, "var": "giveImg", "skin": "res/skin/shop/sd_biaoqian2.png", "name": "giveImg" }, "compId": 49, "child": [{ "type": "Image", "props": { "y": 5, "x": 9, "width": 67, "skin": "res/skin/shop/sd_zuanshi1.png", "height": 38 }, "compId": 50, "child": [{ "type": "Label", "props": { "y": 34, "x": 0, "width": 75, "var": "giveNum", "valign": "middle", "text": "999999", "presetID": 1, "name": "giveNum", "height": 31, "fontSize": 20, "color": "#f6f6f3", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 51 }] }] }, { "type": "Image", "props": { "y": 15, "x": 164, "width": 25, "var": "jiaImg", "skin": "res/comp/sd_jiahao.png", "height": 25 }, "compId": 52 }] }, { "type": "Label", "props": { "y": 260, "width": 256, "var": "extLb", "valign": "middle", "text": "额外赠送", "stroke": 1, "right": 0, "presetID": 1, "name": "extLb", "left": 3, "height": 20, "fontSize": 20, "color": "#f6f6f3", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 19 }, { "type": "Image", "props": { "y": 395, "x": 13, "width": 264, "var": "bottomBg", "skin": "res/comp/zjm_toumingkuong3.png", "name": "bottomBg", "height": 45, "sizeGrid": "8,8,8,8" }, "compId": 21, "child": [{ "type": "Label", "props": { "y": 11, "width": 261, "var": "costLb", "valign": "middle", "text": "￥12.8", "right": 0, "presetID": 1, "name": "costLb", "left": 0, "height": 29, "fontSize": 22, "color": "#AF2707", "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 22 }] }, { "type": "Image", "props": { "y": 0, "x": 258, "visible": false, "var": "buyPoint", "skin": "res/comp/hongdian.png", "name": "buyPointt" }, "compId": 39 }, { "type": "Image", "props": { "y": 5, "x": 0, "width": 135, "var": "firstImg", "skin": "res/comp/sd_biaoqian.png", "scaleY": 0.6, "scaleX": 0.6, "height": 116 }, "compId": 53, "child": [{ "type": "Label", "props": { "y": 48, "x": 9, "wordWrap": true, "width": 91, "var": "lblFirst", "valign": "middle", "text": "首次特惠", "rotation": -31, "presetID": 1, "name": "lblFirst", "height": 63, "fontSize": 35, "color": "#F7CF32", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 54 }] }, { "type": "Sprite", "props": { "width": 291, "var": "zhezhao", "top": 0, "name": "zhezhao", "left": 0, "height": 453, "alpha": 0.5 }, "compId": 44, "child": [{ "type": "Rect", "props": { "y": 1, "x": 2, "width": 288, "lineWidth": 1, "height": 451, "fillColor": "#0d0d0d" }, "compId": 45 }] }, { "type": "Image", "props": { "y": 144, "x": 110, "width": 83, "var": "gouBg", "skin": "res/skin/dailyQuest/mrdh_gou.png", "name": "gouBg", "height": 84 }, "compId": 46 }, { "type": "Panel", "props": { "y": 335, "x": 146, "width": 267, "var": "awardPanel", "name": "awardPanel", "height": 77, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 20 }, { "type": "Label", "props": { "y": 295, "width": 288, "var": "residueDay", "valign": "middle", "text": "额外赠送", "right": 0, "presetID": 1, "name": "residueDay", "left": 3, "height": 31, "fontSize": 20, "color": "#f6f6f3", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 48 }, { "type": "Box", "props": { "y": 1, "x": 4, "width": 281, "var": "clickBox2", "name": "clickBox2", "height": 291 }, "compId": 56 }, { "type": "Box", "props": { "y": 372, "x": 5, "width": 281, "var": "clickBox3", "name": "clickBox3", "height": 78 }, "compId": 57 }] }, { "type": "Button", "props": { "zOrder": 100, "y": 471, "x": 155, "width": 173, "visible": false, "var": "receiveBtn", "skin": "res/comp/gy_anniulu.png", "presetID": 1, "pivotY": 30, "pivotX": 86.5, "name": "receiveBtn", "height": 60, "sizeGrid": "28,16,20,16", "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 26, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 27 }, { "type": "Label", "props": { "y": 12, "x": 5, "width": 162, "var": "btnLb", "valign": "middle", "text": "领取奖励", "presetID": 1, "name": "btnLb", "height": 36, "fontSize": 20, "color": "#FCF3B4", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 28 }] }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/skin/level_box/gkbx_fsg.png", "data/common/HtmlLabel.prefab", "res/skin/shop/sd_zuanshi1.png", "res/skin/firstCharge/sd_zuanshi2.png", "res/comp/gy_jianbian.png", "res/comp/zjm_zhuanshi.png", "res/skin/shop/sd_longdan.png", "res/skin/shop/sd_biaoqian2.png", "res/comp/sd_jiahao.png", "res/comp/zjm_toumingkuong3.png", "res/comp/hongdian.png", "res/comp/sd_biaoqian.png", "res/skin/dailyQuest/mrdh_gou.png", "res/comp/gy_anniulu.png", "data/common/ScaleButton.prefab"], "loadList3D": [] };
	                buyDiamonds.BuyDiamondsItemUI = BuyDiamondsItemUI;
	                REG("ui.data.module.buyDiamonds.BuyDiamondsItemUI", BuyDiamondsItemUI);
	            })(buyDiamonds = module.buyDiamonds || (module.buyDiamonds = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var currency;
	            (function (currency) {
	                class CurrencyDetailIconUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(CurrencyDetailIconUI.uiView);
	                    }
	                }
	                CurrencyDetailIconUI.uiView = { "type": "View", "props": { "width": 60, "height": 60 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/comp/zjm_yuanquan.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 3 }, { "type": "Image", "props": { "var": "imgIcon", "skin": "res/comp/jy_jianzao.png", "centerY": 0, "centerX": 0 }, "compId": 4 }, { "type": "Label", "props": { "y": 48, "x": 10, "wordWrap": true, "var": "lblName", "text": "商店", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 20, "color": "#fdff6c", "centerY": 28, "centerX": 0 }, "compId": 5 }], "loadList": ["res/comp/zjm_yuanquan.png", "res/comp/jy_jianzao.png"], "loadList3D": [] };
	                currency.CurrencyDetailIconUI = CurrencyDetailIconUI;
	                REG("ui.data.module.currency.CurrencyDetailIconUI", CurrencyDetailIconUI);
	                class CurrencyDetailItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(CurrencyDetailItemUI.uiView);
	                    }
	                }
	                CurrencyDetailItemUI.uiView = { "type": "View", "props": { "width": 510, "height": 160 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/comp/zjm_toumingkuong3.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "8,8,8,8" }, "compId": 4 }, { "type": "Label", "props": { "y": 20, "x": 10, "var": "lblTitle", "text": "获取途径", "fontSize": 26, "color": "#703819" }, "compId": 5 }, { "type": "Label", "props": { "x": 10, "wordWrap": true, "width": 342, "var": "lblDesc", "top": 55, "text": "取途径获取途径获取途径获取途径获取途径", "leading": 10, "fontSize": 22, "color": "#703819" }, "compId": 6 }, { "type": "VBox", "props": { "width": 60, "var": "boxItems", "space": 20, "right": 10, "centerY": 0, "align": "center" }, "compId": 10 }], "loadList": ["res/comp/zjm_toumingkuong3.png"], "loadList3D": [] };
	                currency.CurrencyDetailItemUI = CurrencyDetailItemUI;
	                REG("ui.data.module.currency.CurrencyDetailItemUI", CurrencyDetailItemUI);
	            })(currency = module.currency || (module.currency = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var dragon;
	            (function (dragon) {
	                class DragonItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(DragonItemUI.uiView);
	                    }
	                }
	                DragonItemUI.uiView = { "type": "View", "props": { "width": 242, "height": 350 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "imgBg", "top": 0, "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "15,15,15,15" }, "compId": 4 }, { "type": "Label", "props": { "y": 0, "x": 0, "var": "lblName", "top": 23, "text": "魔像龙蛋", "fontSize": 24, "color": "#703819", "centerX": 0 }, "compId": 5 }, { "type": "Image", "props": { "y": 53, "x": 15, "width": 210, "var": "imgContent", "skin": "res/comp/zjm_toumingkuong3.png", "height": 240, "sizeGrid": "8,8,8,8" }, "compId": 8 }, { "type": "Label", "props": { "y": 242, "x": 0, "wordWrap": true, "visible": false, "var": "lblDesc", "valign": "middle", "text": "魔像龙蛋", "right": 25, "left": 25, "fontSize": 24, "color": "#703819", "align": "center" }, "compId": 9 }, { "type": "Box", "props": { "var": "boxDragon", "top": 0, "right": 0, "mouseEnabled": false, "left": 0, "bottom": 0 }, "compId": 18, "child": [{ "type": "Button", "props": { "y": 31, "x": 210, "var": "btnEdit", "skin": "res/skin/dragon/jlxt_bianji.png", "presetID": 1, "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 7 }] }, { "type": "Image", "props": { "y": 55, "x": 19, "width": 200, "var": "imgLv", "skin": "res/comp/gy_jianbian.png", "height": 38, "sizeGrid": "3,30,3,30" }, "compId": 16, "child": [{ "type": "Label", "props": { "var": "lblLv", "text": "等级1", "fontSize": 22, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 17 }] }, { "type": "HBox", "props": { "y": 298, "var": "hboxPower", "space": 5, "height": 42, "centerX": 0, "align": "middle" }, "compId": 19, "child": [{ "type": "Label", "props": { "var": "lblPower", "text": "258", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 30, "color": "#fdff6c" }, "compId": 20 }, { "type": "Image", "props": { "width": 22, "var": "imgPower", "skin": "res/icon/dj001.png", "height": 32 }, "compId": 21 }] }] }, { "type": "Button", "props": { "y": 298, "x": 121, "width": 174, "var": "btnMerge", "skin": "res/comp/gy_anniulu.png", "presetID": 1, "pivotY": 32, "pivotX": 87, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4", "label": "258", "height": 64, "centerX": 0, "sizeGrid": "28,16,20,16", "stateNum": 1, "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 13, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 14 }] }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/comp/zjm_toumingkuong3.png", "res/skin/dragon/jlxt_bianji.png", "data/common/ScaleButton.prefab", "res/comp/gy_jianbian.png", "res/icon/dj001.png", "res/comp/gy_anniulu.png"], "loadList3D": [] };
	                dragon.DragonItemUI = DragonItemUI;
	                REG("ui.data.module.dragon.DragonItemUI", DragonItemUI);
	                class DragonTabItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(DragonTabItemUI.uiView);
	                    }
	                }
	                DragonTabItemUI.uiView = { "type": "View", "props": { "width": 172, "height": 196 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "imgBg", "top": 0, "skin": "res/skin/dragon/jlxt_beijinkuan1.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "45,15,25,15" }, "compId": 4 }, { "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/skin/dragon/jlxt_beijinkuan2.png", "right": 0, "name": "selectBox", "left": 0, "bottom": 0, "sizeGrid": "45,15,25,15" }, "compId": 9 }, { "type": "Image", "props": { "y": 49, "x": 48, "var": "imgNone", "skin": "res/skin/dragon/jlxt_dan.png", "centerY": 0, "centerX": 0 }, "compId": 8 }, { "type": "Box", "props": { "var": "boxContent", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 12, "child": [{ "type": "Label", "props": { "y": 12, "x": 38, "var": "lblName", "text": "青草猛龙", "strokeColor": "#411e1e", "stroke": 2, "fontSize": 24, "color": "#f8dd82", "centerX": 0 }, "compId": 5 }, { "type": "Label", "props": { "y": 130, "x": 100, "var": "lblAmount", "text": "x 10", "strokeColor": "#411e1e", "stroke": 2, "fontSize": 30, "color": "#ffffff" }, "compId": 7 }, { "type": "HBox", "props": { "y": 164, "space": 10, "height": 32, "centerX": 0, "align": "middle" }, "compId": 17, "child": [{ "type": "Label", "props": { "var": "lblPower", "text": "1", "fontSize": 24, "color": "#1ed065" }, "compId": 6 }, { "type": "Image", "props": { "width": 20, "skin": "res/icon/dj001.png", "height": 28 }, "compId": 16 }] }, { "type": "Label", "props": { "y": 27, "x": -4, "width": 48, "var": "lblSeen", "text": "New", "rotation": -37, "height": 24, "fontSize": 24, "color": "#1ed065", "centerX": -66 }, "compId": 11 }, { "type": "Image", "props": { "var": "imgRed", "skin": "res/comp/hongdian.png", "right": 0 }, "compId": 19 }] }], "loadList": ["res/skin/dragon/jlxt_beijinkuan1.png", "res/skin/dragon/jlxt_beijinkuan2.png", "res/skin/dragon/jlxt_dan.png", "res/icon/dj001.png", "res/comp/hongdian.png"], "loadList3D": [] };
	                dragon.DragonTabItemUI = DragonTabItemUI;
	                REG("ui.data.module.dragon.DragonTabItemUI", DragonTabItemUI);
	            })(dragon = module.dragon || (module.dragon = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var eggTreasury;
	            (function (eggTreasury) {
	                class EggItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(EggItemUI.uiView);
	                    }
	                }
	                EggItemUI.uiView = { "type": "View", "props": { "width": 124, "height": 189 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 94.5, "skin": "res/skin/eggTreasury/mrbx_dizhuo.png", "right": 0, "left": 0 }, "compId": 3 }, { "type": "Box", "props": { "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "bottom": 0 }, "compId": 4 }, { "type": "Label", "props": { "y": 150, "x": 17, "width": 107, "visible": false, "var": "clickLb", "valign": "middle", "text": "点击！", "stroke": 1, "rotation": -5, "name": "clickLb", "height": 29, "fontSize": 35, "color": "#DF3334", "align": "center" }, "compId": 7 }], "loadList": ["res/skin/eggTreasury/mrbx_dizhuo.png"], "loadList3D": [] };
	                eggTreasury.EggItemUI = EggItemUI;
	                REG("ui.data.module.eggTreasury.EggItemUI", EggItemUI);
	                class SelectEggItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(SelectEggItemUI.uiView);
	                    }
	                }
	                SelectEggItemUI.uiView = { "type": "View", "props": { "width": 260, "height": 333 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": -12, "x": -12, "width": 284, "visible": false, "var": "effBg", "skin": "res/skin/eggTreasury/mrbx_dikuang3.png", "name": "effBg", "height": 355, "sizeGrid": "17,18,17,17" }, "compId": 13 }, { "type": "Image", "props": { "y": 1, "x": 1, "top": -1, "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "15,15,15,15" }, "compId": 3, "child": [{ "type": "Image", "props": { "y": 8, "width": 288.88888888888886, "skin": "res/skin/level_box/gkbx_fsg.png", "scaleY": 0.9, "scaleX": 0.9, "right": 0, "left": 0, "height": 332 }, "compId": 4 }, { "type": "Image", "props": { "y": 8, "x": 8, "width": 246, "skin": "res/skin/eggTreasury/mrbx_hongtiao.png", "height": 45, "sizeGrid": "0,13,2,7" }, "compId": 14, "child": [{ "type": "Label", "props": { "var": "eggName", "valign": "middle", "top": 0, "text": "青草龙蛋", "strokeColor": "#4a4a4a", "stroke": 2, "right": 0, "name": "eggName", "left": 0, "fontSize": 25, "color": "#F3E5AD", "bottom": 0, "align": "center" }, "compId": 15 }] }, { "type": "Image", "props": { "y": 172, "x": 68, "skin": "res/skin/eggTreasury/mrbx_dizhuo.png" }, "compId": 7 }, { "type": "Box", "props": { "y": 0, "x": 0, "width": 260, "var": "boxPref", "top": 0, "right": 0, "name": "boxPref", "left": 0, "height": 333, "bottom": 0 }, "compId": 8 }, { "type": "Image", "props": { "y": 281, "x": 0, "width": 260, "skin": "res/comp/gy_jianbian.png", "right": 0, "left": 0, "height": 45, "sizeGrid": "3,30,3,30" }, "compId": 5, "child": [{ "type": "Label", "props": { "var": "lblLv", "valign": "middle", "top": 0, "text": "传奇", "strokeColor": "#4a4a4a", "stroke": 2, "right": 0, "name": "lblLv", "left": 0, "fontSize": 25, "color": "#ffffff", "bottom": 0, "align": "center" }, "compId": 6 }] }, { "type": "Image", "props": { "y": 256, "x": 176, "visible": false, "var": "selectedBg", "skin": "res/skin/eggTreasury/mrbx_xianzhong.png", "name": "selectedBg" }, "compId": 9 }] }], "loadList": ["res/skin/eggTreasury/mrbx_dikuang3.png", "res/skin/level_box/gkbx_dikuang.png", "res/skin/level_box/gkbx_fsg.png", "res/skin/eggTreasury/mrbx_hongtiao.png", "res/skin/eggTreasury/mrbx_dizhuo.png", "res/comp/gy_jianbian.png", "res/skin/eggTreasury/mrbx_xianzhong.png"], "loadList3D": [] };
	                eggTreasury.SelectEggItemUI = SelectEggItemUI;
	                REG("ui.data.module.eggTreasury.SelectEggItemUI", SelectEggItemUI);
	            })(eggTreasury = module.eggTreasury || (module.eggTreasury = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var firstCharge;
	            (function (firstCharge) {
	                class FirstChargItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(FirstChargItemUI.uiView);
	                    }
	                }
	                FirstChargItemUI.uiView = { "type": "View", "props": { "width": 100, "height": 210 }, "compId": 2, "child": [{ "type": "Box", "props": { "var": "boxPref", "top": 0, "styleSkin": "res/skin/firstCharge/sd_zuanshi2.png", "right": 0, "name": "boxPref", "left": 0, "height": 210, "bottom": 0 }, "compId": 3 }, { "type": "Label", "props": { "y": 125, "x": -32, "width": 160, "var": "desLb", "valign": "middle", "text": "彩虹龙蛋窝", "presetID": 1, "name": "desLb", "height": 30, "fontSize": 18, "color": "#A72B06", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 4 }, { "type": "Image", "props": { "y": 30, "x": 5, "width": 90, "var": "imgIcon", "skin": "res/comp/btn_tili.png", "name": "imgIcon", "height": 90 }, "compId": 5 }], "loadList": ["res/skin/firstCharge/sd_zuanshi2.png", "data/common/HtmlLabel.prefab", "res/comp/btn_tili.png"], "loadList3D": [] };
	                firstCharge.FirstChargItemUI = FirstChargItemUI;
	                REG("ui.data.module.firstCharge.FirstChargItemUI", FirstChargItemUI);
	            })(firstCharge = module.firstCharge || (module.firstCharge = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            class FloatMsgUI extends View {
	                constructor() { super(); }
	                createChildren() {
	                    super.createChildren();
	                    this.createView(FloatMsgUI.uiView);
	                }
	            }
	            FloatMsgUI.uiView = { "type": "View", "props": { "x": 0, "width": 500, "height": 40 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "width": 500, "var": "bg", "skin": "res/comp/gy_heisejianbian.png", "name": "bg", "left": 0, "height": 40 }, "compId": 3, "child": [{ "type": "Label", "props": { "y": 1, "x": 249, "var": "msgLb", "valign": "middle", "text": "floatmessage", "presetID": 1, "name": "msgLb", "height": 38, "fontSize": 20, "bold": true, "anchorX": 0.5, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true, "color": "#ffffff" }, "compId": 4 }] }], "loadList": ["res/comp/gy_heisejianbian.png", "data/common/HtmlLabel.prefab"], "loadList3D": [] };
	            module.FloatMsgUI = FloatMsgUI;
	            REG("ui.data.module.FloatMsgUI", FloatMsgUI);
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var giftBag;
	            (function (giftBag) {
	                class GiftBagIconUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(GiftBagIconUI.uiView);
	                    }
	                }
	                GiftBagIconUI.uiView = { "type": "View", "props": { "width": 60, "height": 66 }, "compId": 2, "child": [{ "type": "Box", "props": { "y": -5, "var": "boxPref", "styleSkin": "res/skin/mainUI/btn_julong.png", "scaleY": 0.8, "scaleX": 0.8, "right": 0, "name": "boxPref", "left": 0, "height": 61 }, "compId": 3, "child": [{ "type": "Image", "props": { "var": "imgIcon", "centerY": 0, "centerX": 0 }, "compId": 7 }] }], "loadList": ["res/skin/mainUI/btn_julong.png"], "loadList3D": [] };
	                giftBag.GiftBagIconUI = GiftBagIconUI;
	                REG("ui.data.module.giftBag.GiftBagIconUI", GiftBagIconUI);
	                class GiftBagItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(GiftBagItemUI.uiView);
	                    }
	                }
	                GiftBagItemUI.uiView = { "type": "View", "props": { "y": 180, "x": 115, "width": 291, "pivotY": 180, "pivotX": 115, "height": 465 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 10, "var": "itemBg", "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "name": "itemBg", "left": 0, "height": 451, "sizeGrid": "15,15,15,15" }, "compId": 3, "child": [{ "type": "Image", "props": { "y": 9, "width": 304, "skin": "res/skin/level_box/gkbx_fsg.png", "scaleY": 0.9, "scaleX": 0.9, "height": 190, "centerX": -3 }, "compId": 61 }, { "type": "Image", "props": { "y": 53, "x": 85, "width": 232, "visible": false, "var": "giftIcon", "skin": "res/skin/shop/sd_zuanshi1.png", "scaleY": 0.5, "scaleX": 0.5, "name": "giftIcon", "height": 134 }, "compId": 62 }, { "type": "Box", "props": { "var": "boxPref", "top": 0, "styleSkin": "res/skin/firstCharge/sd_zuanshi2.png", "right": 0, "name": "boxPref", "left": 0, "bottom": 0 }, "compId": 6 }, { "type": "Label", "props": { "y": 13, "var": "giftName", "valign": "middle", "text": "超值月卡", "stroke": 1.5, "right": 0, "presetID": 1, "name": "giftName", "left": 0, "height": 37, "fontSize": 25, "color": "#f6f6f3", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 11 }, { "type": "Label", "props": { "y": 181, "width": 283, "var": "desLb", "valign": "top", "text": "钻石×200", "stroke": 1.5, "right": 0, "presetID": 1, "name": "desLb", "left": 8, "height": 33, "fontSize": 22, "color": "#EDFC00", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 13 }, { "type": "Label", "props": { "y": 360, "var": "limitLb", "valign": "middle", "text": "终身限购一次", "stroke": 1.5, "right": 0, "presetID": 1, "name": "limitLb", "left": 7, "height": 37, "fontSize": 22, "color": "#35EDEE", "bold": true, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 14 }, { "type": "Image", "props": { "y": 56, "x": 207, "width": 135, "var": "valueBg", "skin": "res/comp/sd_biaoqian.png", "scaleY": 0.6, "scaleX": 0.6, "height": 116 }, "compId": 58, "child": [{ "type": "Label", "props": { "y": 12, "x": 42, "wordWrap": true, "width": 90, "var": "valueLb", "valign": "middle", "text": "300×价值", "rotation": 25, "presetID": 1, "name": "valueLb", "height": 63, "fontSize": 28, "color": "#F7CF32", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 60 }] }, { "type": "List", "props": { "y": 292, "x": 145, "width": 245, "var": "awardList", "spaceX": 20, "repeatX": 3, "name": "awardList", "height": 65, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 15 }, { "type": "Box", "props": { "y": 7, "x": 7, "width": 274, "var": "buyBox1", "name": "buyBox1", "height": 232 }, "compId": 54 }, { "type": "Box", "props": { "y": 302, "x": 6, "width": 279, "var": "buyBox2", "name": "buyBox2", "height": 147 }, "compId": 55 }, { "type": "Image", "props": { "y": 395, "x": 15, "width": 261, "var": "bottomBg", "skin": "res/comp/zjm_toumingkuong3.png", "name": "bottomBg", "height": 45, "sizeGrid": "8,8,8,8" }, "compId": 57, "child": [{ "type": "Label", "props": { "y": 11, "width": 261, "var": "costLb", "valign": "middle", "text": "￥12.8", "right": 0, "presetID": 1, "name": "costLb", "left": 0, "height": 29, "fontSize": 22, "color": "#AF2707", "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 59 }] }] }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/skin/level_box/gkbx_fsg.png", "res/skin/shop/sd_zuanshi1.png", "res/skin/firstCharge/sd_zuanshi2.png", "data/common/HtmlLabel.prefab", "res/comp/sd_biaoqian.png", "res/comp/zjm_toumingkuong3.png"], "loadList3D": [] };
	                giftBag.GiftBagItemUI = GiftBagItemUI;
	                REG("ui.data.module.giftBag.GiftBagItemUI", GiftBagItemUI);
	            })(giftBag = module.giftBag || (module.giftBag = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var level;
	            (function (level) {
	                class GoalTipUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(GoalTipUI.uiView);
	                    }
	                }
	                GoalTipUI.uiView = { "type": "View", "props": { "width": 240, "height": 60 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 240, "skin": "res/skin/level/gk_landi.png", "height": 60, "sizeGrid": "9,9,9,9" }, "compId": 4 }, { "type": "Sprite", "props": { "y": 38, "x": 17, "texture": "res/comp/gy_zhixiang.png", "scaleY": 0.2, "scaleX": 0.2, "rotation": 180 }, "compId": 5 }, { "type": "Label", "props": { "y": 17, "x": 23, "var": "lblState", "text": "进度：", "fontSize": 26, "color": "#f4ea14", "centerY": 0 }, "compId": 6 }, { "type": "Label", "props": { "y": 0, "var": "lblCount", "text": "0/0", "fontSize": 26, "color": "#f4ea14", "centerY": 0, "centerX": 40 }, "compId": 7 }], "loadList": ["res/skin/level/gk_landi.png", "res/comp/gy_zhixiang.png"], "loadList3D": [] };
	                level.GoalTipUI = GoalTipUI;
	                REG("ui.data.module.level.GoalTipUI", GoalTipUI);
	                class LevelSettleItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(LevelSettleItemUI.uiView);
	                    }
	                }
	                LevelSettleItemUI.uiView = { "type": "View", "props": { "width": 220, "height": 336 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 220, "skin": "res/skin/level_box/gkbx_dikuang.png", "height": 336, "sizeGrid": "15,15,15,15" }, "compId": 4 }, { "type": "Image", "props": { "y": 6, "x": 5, "var": "imgRay", "skin": "res/skin/level_box/gkbx_fsg.png" }, "compId": 5 }, { "type": "Image", "props": { "width": 30, "var": "imgKala", "skin": "res/comp/gk_gantanhao.png", "height": 30 }, "compId": 25 }, { "type": "Image", "props": { "width": 30, "var": "imgGoal", "skin": "res/comp/gk_gantanhao.png", "height": 30 }, "compId": 26 }, { "type": "Image", "props": { "y": 10, "x": 178, "var": "imgStar1", "skin": "res/comp/zjm_xingji3.png", "scaleY": 0.7, "scaleX": 0.7 }, "compId": 6 }, { "type": "Image", "props": { "y": 40, "x": 178, "var": "imgStar2", "skin": "res/comp/zjm_xingji3.png", "scaleY": 0.7, "scaleX": 0.7 }, "compId": 18 }, { "type": "Image", "props": { "y": 70, "x": 178, "var": "imgStar3", "skin": "res/comp/zjm_xingji3.png", "scaleY": 0.7, "scaleX": 0.7 }, "compId": 19 }, { "type": "Image", "props": { "y": 100, "x": 178, "var": "imgStar4", "skin": "res/comp/zjm_xingji3.png", "scaleY": 0.7, "scaleX": 0.7 }, "compId": 22 }, { "type": "Image", "props": { "y": 130, "x": 178, "var": "imgStar5", "skin": "res/comp/zjm_xingji3.png", "scaleY": 0.7, "scaleX": 0.7 }, "compId": 23 }, { "type": "Label", "props": { "var": "lblCount", "text": "x 2", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 44, "color": "#db5d17", "centerY": -17, "centerX": 0, "bold": true }, "compId": 16 }, { "type": "Label", "props": { "y": 0, "x": 0, "var": "lblName", "text": "铜宝箱", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 26, "color": "#ffffff", "centerY": 27, "centerX": 0 }, "compId": 8 }, { "type": "Label", "props": { "y": 15, "x": 65, "var": "lblMonster", "text": "铜宝箱", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 30, "color": "#ffffff", "centerX": 0 }, "compId": 27 }, { "type": "Label", "props": { "y": 14, "var": "lblSelected", "text": "已收集", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 30, "color": "#ffffff", "centerX": 0 }, "compId": 29 }, { "type": "Label", "props": { "y": 0, "x": 0, "var": "lblLv", "text": "等级 15", "fontSize": 22, "color": "#703819", "centerY": 61, "centerX": 0 }, "compId": 9 }, { "type": "Image", "props": { "y": 242, "x": 0, "width": 199, "var": "imgRarity", "skin": "res/comp/gy_jianbian.png", "height": 36, "centerX": 0, "sizeGrid": "3,30,3,30" }, "compId": 10, "child": [{ "type": "Label", "props": { "var": "lblRarity", "text": "普通", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 22, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 11 }, { "type": "Label", "props": { "y": 0, "x": 0, "var": "lblChestTime", "text": "普通", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 22, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 28 }] }, { "type": "HBox", "props": { "y": 292, "x": 0, "var": "boxCost", "space": 20, "centerX": 0, "align": "middle" }, "compId": 12, "child": [{ "type": "Label", "props": { "var": "lblCost", "text": "等级 15", "fontSize": 22, "color": "#703819" }, "compId": 13 }, { "type": "Image", "props": { "var": "imgCost", "skin": "res/comp/zjm_zhuanshi.png", "scaleY": 0.7, "scaleX": 0.7 }, "compId": 14 }] }, { "type": "Image", "props": { "y": 283, "var": "imgFree", "skin": "res/skin/level/zw_mianfe.png", "centerX": 0 }, "compId": 15 }, { "type": "Image", "props": { "var": "imgSelected", "skin": "res/skin/level/gk_gou.png", "scaleY": 1.3, "scaleX": 1.3, "centerY": 0, "centerX": 0 }, "compId": 24 }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/skin/level_box/gkbx_fsg.png", "res/comp/gk_gantanhao.png", "res/comp/zjm_xingji3.png", "res/comp/gy_jianbian.png", "res/comp/zjm_zhuanshi.png", "res/skin/level/zw_mianfe.png", "res/skin/level/gk_gou.png"], "loadList3D": [] };
	                level.LevelSettleItemUI = LevelSettleItemUI;
	                REG("ui.data.module.level.LevelSettleItemUI", LevelSettleItemUI);
	            })(level = module.level || (module.level = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var levelChest;
	            (function (levelChest) {
	                class LevelChestItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(LevelChestItemUI.uiView);
	                    }
	                }
	                LevelChestItemUI.uiView = { "type": "View", "props": { "width": 224, "height": 336 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "15,15,15,15" }, "compId": 4 }, { "type": "Image", "props": { "y": 8, "x": 0, "skin": "res/skin/level_box/gkbx_fsg.png", "centerX": 0 }, "compId": 5 }, { "type": "Image", "props": { "y": 28, "x": 0, "var": "imgChest", "skin": "res/skin/level_box/gkbx_wenhao.png", "centerX": 0 }, "compId": 6 }, { "type": "Label", "props": { "y": 149, "x": 0, "var": "lblName", "text": "未找到宝箱", "fontSize": 30, "color": "#b22e00", "centerX": 0 }, "compId": 7 }, { "type": "ProgressBar", "props": { "y": 191, "x": 13, "width": 196, "var": "barTimer", "skin": "res/skin/level_box/progress_gkbx.png", "height": 26, "sizeGrid": "5,5,5,5" }, "compId": 8, "child": [{ "type": "HBox", "props": { "var": "boxTimer", "presetID": 1, "centerY": 0, "centerX": 0, "runtime": "frame/ui/TimerBox.ts", "isPresetRoot": true, "align": "middle" }, "compId": 16, "child": [{ "type": "Label", "props": { "presetID": 2, "fontSize": 18, "color": "#ffffff", "text": "label", "name": "lblPrefix" }, "compId": 64 }, { "type": "Label", "props": { "presetID": 3, "fontSize": 18, "color": "#ffffff", "text": "label", "name": "lblTimer" }, "compId": 65 }] }] }, { "type": "Label", "props": { "y": 231, "x": 40, "var": "lblState", "text": "寻找其他宝箱", "fontSize": 24, "color": "#703819", "centerX": 0 }, "compId": 10 }, { "type": "Button", "props": { "y": 0, "x": 0, "width": 180, "var": "btnState", "skin": "res/comp/gy_anniulu.png", "presetID": 1, "pivotY": 24.5, "pivotX": 81.5, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 26, "labelColors": "#fbffe4", "label": "解锁", "height": 64, "centerY": 121, "centerX": 0, "sizeGrid": "28,16,20,16", "stateNum": 1, "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 11, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 12 }, { "type": "HBox", "props": { "y": 2, "x": 61, "var": "hboxPrice", "space": 10, "height": 60, "centerY": 0, "centerX": 0, "align": "middle" }, "compId": 13, "child": [{ "type": "Label", "props": { "var": "lblPrice", "text": "label", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 26, "color": "#fbffe4" }, "compId": 14 }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "res/comp/zjm_zhuanshi.png" }, "compId": 15 }] }] }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/skin/level_box/gkbx_fsg.png", "res/skin/level_box/gkbx_wenhao.png", "res/skin/level_box/progress_gkbx.png", "data/common/TimerBox.prefab", "res/comp/gy_anniulu.png", "data/common/ScaleButton.prefab", "res/comp/zjm_zhuanshi.png"], "loadList3D": [] };
	                levelChest.LevelChestItemUI = LevelChestItemUI;
	                REG("ui.data.module.levelChest.LevelChestItemUI", LevelChestItemUI);
	            })(levelChest = module.levelChest || (module.levelChest = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var limitAward;
	            (function (limitAward) {
	                class TimedBundleItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(TimedBundleItemUI.uiView);
	                    }
	                }
	                TimedBundleItemUI.uiView = { "type": "View", "props": { "width": 275, "height": 422 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "15,15,15,15" }, "compId": 3, "child": [{ "type": "Box", "props": { "var": "boxPref", "top": 1, "right": 0, "name": "boxPref", "left": 0, "bottom": 0 }, "compId": 9 }, { "type": "Label", "props": { "y": 328, "x": 10, "wordWrap": true, "width": 255, "var": "desLb", "valign": "middle", "text": "微型坠落之星(等级2)", "presetID": 1, "name": "desLb", "height": 82, "fontSize": 18, "color": "#703819", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 19 }] }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "data/common/HtmlLabel.prefab"], "loadList3D": [] };
	                limitAward.TimedBundleItemUI = TimedBundleItemUI;
	                REG("ui.data.module.limitAward.TimedBundleItemUI", TimedBundleItemUI);
	            })(limitAward = module.limitAward || (module.limitAward = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var mainUi;
	            (function (mainUi) {
	                class ChallengeCountBarUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ChallengeCountBarUI.uiView);
	                    }
	                }
	                ChallengeCountBarUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 1334, "mouseThrough": true, "height": 160 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "skin": "res/skin/level/gk_toumingdi.png", "right": 0, "left": 0, "height": 150, "centerY": 0, "sizeGrid": "5,5,5,5" }, "compId": 32 }, { "type": "Label", "props": { "y": 30, "x": 639, "var": "lblTimer", "text": "3", "fontSize": 100, "color": "#ffffff\\", "centerY": 0, "centerX": 0, "bold": false }, "compId": 33 }], "loadList": ["res/skin/level/gk_toumingdi.png"], "loadList3D": [] };
	                mainUi.ChallengeCountBarUI = ChallengeCountBarUI;
	                REG("ui.data.module.mainUi.ChallengeCountBarUI", ChallengeCountBarUI);
	                class LevelChestBoxUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(LevelChestBoxUI.uiView);
	                    }
	                }
	                LevelChestBoxUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "Button", "props": { "y": 0, "x": 0, "var": "btnChest", "skin": "res/skin/mainUI/btn_baoxiang.png", "presetID": 1, "anchorY": 0.5, "anchorX": 0.5, "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true }, "compId": 3, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 4 }, { "type": "ProgressBar", "props": { "y": 75, "width": 90, "visible": false, "var": "bar", "value": 1, "skin": "res/skin/mainUI/progress_2.png", "centerX": 0, "sizeGrid": "4,4,4,4" }, "compId": 5 }, { "type": "Image", "props": { "y": 58, "width": 160, "visible": false, "var": "imgTimer", "skin": "res/comp/gy_heisejianbian.png", "height": 18, "centerX": 0 }, "compId": 66, "child": [{ "type": "HBox", "props": { "x": 89, "var": "boxTimer", "presetID": 1, "centerY": 0, "centerX": 0, "runtime": "frame/ui/TimerBox.ts", "isPresetRoot": true, "align": "middle" }, "compId": 14, "child": [{ "type": "Label", "props": { "presetID": 2, "fontSize": 16, "color": "#ffffff", "text": "label", "name": "lblPrefix" }, "compId": 64 }, { "type": "Label", "props": { "presetID": 3, "fontSize": 16, "color": "#ffffff", "text": "label", "name": "lblTimer" }, "compId": 65 }] }] }, { "type": "Image", "props": { "y": 32, "x": 12, "width": 24, "visible": false, "var": "imgSlot0", "skin": "res/skin/mainUI/btn_baoxiang_jin.png", "height": 24, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 9 }, { "type": "Image", "props": { "y": 32, "x": 39, "width": 24, "visible": false, "var": "imgSlot1", "skin": "res/skin/mainUI/btn_baoxiang_lv.png", "height": 24, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 11 }, { "type": "Image", "props": { "y": 32, "x": 65, "width": 24, "visible": false, "var": "imgSlot2", "skin": "res/skin/mainUI/btn_baoxiang_lv.png", "height": 24, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 12 }, { "type": "Label", "props": { "var": "lblNew", "top": -5, "text": "新!", "stroke": 2, "right": -6, "fontSize": 22, "color": "#ffffff", "bold": true }, "compId": 69 }] }], "loadList": ["res/skin/mainUI/btn_baoxiang.png", "data/common/ScaleButton.prefab", "res/skin/mainUI/progress_2.png", "res/comp/gy_heisejianbian.png", "data/common/TimerBox.prefab", "res/skin/mainUI/btn_baoxiang_jin.png", "res/skin/mainUI/btn_baoxiang_lv.png"], "loadList3D": [] };
	                mainUi.LevelChestBoxUI = LevelChestBoxUI;
	                REG("ui.data.module.mainUi.LevelChestBoxUI", LevelChestBoxUI);
	                class ThingInfoBarUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ThingInfoBarUI.uiView);
	                    }
	                }
	                ThingInfoBarUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 684, "mouseThrough": true, "height": 160 }, "compId": 2, "child": [{ "type": "Box", "props": { "var": "boxInfo", "top": 0, "right": 0, "mouseThrough": true, "left": 0, "bottom": 0 }, "compId": 29, "child": [{ "type": "Box", "props": { "y": 30, "x": 100, "width": 200, "var": "boxAction", "height": 60, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 25, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/skin/level/gk_ludi.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "9,9,9,9" }, "compId": 24 }, { "type": "Image", "props": { "skin": "res/skin/level/gk_shouji.png", "right": 10, "centerY": 0 }, "compId": 26 }, { "type": "Label", "props": { "var": "lblAction", "text": "选中名字", "left": 14, "fontSize": 24, "color": "#ffffff", "centerY": 0 }, "compId": 27 }, { "type": "Script", "props": { "runtime": "frame/ui/ScaleButton.ts" }, "compId": 32 }] }, { "type": "Box", "props": { "y": 72, "x": 45, "width": 640, "height": 88, "bottom": 0 }, "compId": 23, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "top": 0, "skin": "res/skin/mainUI/zjm_toumingkuong1.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "10,10,10,10" }, "compId": 3 }, { "type": "Label", "props": { "y": 10, "x": 10, "wordWrap": true, "var": "lblNo", "valign": "middle", "top": 10, "text": "未选中任何东西！", "right": 10, "left": 10, "fontSize": 20, "color": "#ffffff", "bottom": 10, "align": "center" }, "compId": 4 }, { "type": "Label", "props": { "y": 13, "x": 14, "var": "lblName", "text": "选中名字", "left": 14, "fontSize": 20, "color": "#ffffff" }, "compId": 5 }, { "type": "Label", "props": { "y": 39, "wordWrap": true, "width": 400, "var": "lblDesc", "presetID": 1, "left": 14, "fontSize": 18, "color": "#ffffff", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 8 }, { "type": "HBox", "props": { "y": 8, "x": 558, "var": "boxBtns", "space": 15, "right": 10, "height": 70, "centerY": 0 }, "compId": 13, "child": [{ "type": "Button", "props": { "var": "btnChain", "stateNum": 1, "skin": "res/skin/level/gk_wenhao.png" }, "compId": 12 }, { "type": "Button", "props": { "width": 70, "var": "btnDragonPower", "stateNum": 2, "skin": "res/skin/level/tab_lankuang.png", "height": 70, "sizeGrid": "9,9,9,9" }, "compId": 11, "child": [{ "type": "Label", "props": { "y": 13, "text": "龙之力", "fontSize": 20, "color": "#ffffff", "centerX": 0 }, "compId": 19 }, { "type": "Label", "props": { "y": 41, "x": 10, "var": "lblPower", "text": "0", "fontSize": 20, "color": "#eed740", "centerX": 0 }, "compId": 20 }] }, { "type": "Button", "props": { "width": 70, "var": "btnSale", "stateNum": 2, "skin": "res/skin/level/tab_lankuang.png", "height": 70, "sizeGrid": "9,9,9,9" }, "compId": 10, "child": [{ "type": "Label", "props": { "y": 13, "x": 0, "text": "出售", "left": 14, "fontSize": 20, "color": "#ffffff" }, "compId": 15 }, { "type": "HBox", "props": { "space": 10, "height": 24, "centerX": 0, "bottom": 5, "align": "middle" }, "compId": 17, "child": [{ "type": "Label", "props": { "var": "lblPrice", "text": "25", "strokeColor": "#000000", "stroke": 1, "fontSize": 20, "color": "#eed740" }, "compId": 16 }, { "type": "Sprite", "props": { "y": 0, "x": 0, "width": 20, "texture": "res/comp/zjm_jinbi.png", "height": 20 }, "compId": 18 }] }] }, { "type": "Button", "props": { "y": 0, "x": 0, "width": 70, "var": "btnDelete", "stateNum": 2, "skin": "res/skin/level/tab_lankuang.png", "labelSize": 20, "labelColors": "#ffffff", "label": "删除", "height": 70, "sizeGrid": "9,9,9,9" }, "compId": 14 }] }] }] }, { "type": "Button", "props": { "y": 116, "x": 20, "var": "btnSwitch", "stateNum": 1, "skin": "res/skin/mainUI/zjm_shousuo.png", "bottom": 1, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 21 }], "loadList": ["res/skin/level/gk_ludi.png", "res/skin/level/gk_shouji.png", "res/skin/mainUI/zjm_toumingkuong1.png", "data/common/HtmlLabel.prefab", "res/skin/level/gk_wenhao.png", "res/skin/level/tab_lankuang.png", "res/comp/zjm_jinbi.png", "res/skin/mainUI/zjm_shousuo.png"], "loadList3D": [] };
	                mainUi.ThingInfoBarUI = ThingInfoBarUI;
	                REG("ui.data.module.mainUi.ThingInfoBarUI", ThingInfoBarUI);
	            })(mainUi = module.mainUi || (module.mainUi = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var progress;
	            (function (progress) {
	                class ProgBuildUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgBuildUI.uiView);
	                    }
	                }
	                ProgBuildUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": -21, "x": -80, "width": 150, "var": "bar", "skin": "res/comp/progress_jdt2.png", "height": 20, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Image", "props": { "y": -28.5, "x": -107.5, "width": 35, "skin": "res/comp/zjm_yuanquan.png", "height": 35 }, "compId": 5 }, { "type": "Sprite", "props": { "y": -25, "x": -104, "width": 30, "texture": "res/comp/jy_jianzao.png", "height": 30 }, "compId": 6 }, { "type": "Label", "props": { "y": -45, "x": -80, "width": 150, "var": "lbl", "text": "10020016", "height": 25, "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 7 }, { "type": "Button", "props": { "y": -28.5, "x": 70, "width": 35, "var": "spdBtn", "stateNum": 1, "skin": "res/comp/gk_jiasu.png", "height": 35 }, "compId": 8, "child": [{ "type": "Script", "props": { "runtime": "frame/ui/ScaleButton.ts" }, "compId": 9 }] }], "loadList": ["res/comp/progress_jdt2.png", "res/comp/zjm_yuanquan.png", "res/comp/jy_jianzao.png", "res/comp/gk_jiasu.png"], "loadList3D": [] };
	                progress.ProgBuildUI = ProgBuildUI;
	                REG("ui.data.module.progress.ProgBuildUI", ProgBuildUI);
	                class ProgDailyChestUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgDailyChestUI.uiView);
	                    }
	                }
	                ProgDailyChestUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": -2, "x": 0, "width": 220, "var": "bar", "skin": "res/comp/progress_jdt2.png", "height": 33, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Label", "props": { "y": 4, "x": 0, "width": 220, "var": "lbl", "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 3 }], "loadList": ["res/comp/progress_jdt2.png"], "loadList3D": [] };
	                progress.ProgDailyChestUI = ProgDailyChestUI;
	                REG("ui.data.module.progress.ProgDailyChestUI", ProgDailyChestUI);
	                class ProgDailyQuestUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgDailyQuestUI.uiView);
	                    }
	                }
	                ProgDailyQuestUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 400, "height": 220 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "imgBg", "top": 0, "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "left": 172, "bottom": 0, "sizeGrid": "15,15,15,15" }, "compId": 6, "child": [{ "type": "Image", "props": { "var": "imgFinished", "skin": "res/skin/dailyQuest/mrdh_gou.png", "centerY": -17, "centerX": 0 }, "compId": 9 }, { "type": "ProgressBar", "props": { "var": "barProgress", "skin": "res/skin/level_box/progress_gkbx.png", "right": 10, "mouseEnabled": false, "left": 10, "height": 26, "bottom": 10, "sizeGrid": "5,5,5,5" }, "compId": 8, "child": [{ "type": "Label", "props": { "var": "lblPercent", "text": "1/3", "fontSize": 18, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 12 }] }] }, { "type": "Button", "props": { "y": 187, "x": 90, "width": 176, "var": "btnCommit", "skin": "res/comp/gy_anniulu.png", "presetID": 1, "pivotY": 31, "pivotX": 88, "label": "20016021", "height": 64, "sizeGrid": "28,16,20,16", "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 7, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 10 }, { "type": "Image", "props": { "x": 174, "skin": "res/comp/gy_zhixiang.png", "scaleY": 0.4, "scaleX": 0.4, "centerY": 0 }, "compId": 11 }] }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/skin/dailyQuest/mrdh_gou.png", "res/skin/level_box/progress_gkbx.png", "res/comp/gy_anniulu.png", "data/common/ScaleButton.prefab", "res/comp/gy_zhixiang.png"], "loadList3D": [] };
	                progress.ProgDailyQuestUI = ProgDailyQuestUI;
	                REG("ui.data.module.progress.ProgDailyQuestUI", ProgDailyQuestUI);
	                class ProgHarvestUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgHarvestUI.uiView);
	                    }
	                }
	                ProgHarvestUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": -21, "x": -75, "width": 150, "var": "bar", "skin": "res/comp/progress_jdt6.png", "height": 20, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Image", "props": { "y": -26, "x": -94, "width": 35, "skin": "res/comp/zjm_yuanquan.png", "height": 35 }, "compId": 5 }, { "type": "Sprite", "props": { "y": -23.5, "x": -88, "width": 26, "texture": "res/comp/gk_caiji.png", "height": 25 }, "compId": 6 }], "loadList": ["res/comp/progress_jdt6.png", "res/comp/zjm_yuanquan.png", "res/comp/gk_caiji.png"], "loadList3D": [] };
	                progress.ProgHarvestUI = ProgHarvestUI;
	                REG("ui.data.module.progress.ProgHarvestUI", ProgHarvestUI);
	                class ProgHealUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgHealUI.uiView);
	                    }
	                }
	                ProgHealUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": 0, "x": 0, "width": 200, "var": "bar", "skin": "res/comp/progress_jdt2.png", "height": 20, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Sprite", "props": { "y": -10, "x": -17.5, "width": 35, "var": "xin", "texture": "res/comp/gk_shengming2.png", "height": 35 }, "compId": 5 }, { "type": "Label", "props": { "y": -25, "x": 0, "width": 201, "var": "lbl", "height": 25, "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 3 }], "loadList": ["res/comp/progress_jdt2.png", "res/comp/gk_shengming2.png"], "loadList3D": [] };
	                progress.ProgHealUI = ProgHealUI;
	                REG("ui.data.module.progress.ProgHealUI", ProgHealUI);
	                class ProgHpUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgHpUI.uiView);
	                    }
	                }
	                ProgHpUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": -20, "x": 0, "width": 200, "var": "bar", "skin": "res/comp/progress_jdt7.png", "height": 20, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Sprite", "props": { "y": -30, "x": -17.5, "width": 35, "var": "xin", "texture": "res/comp/gk_shengming1.png", "height": 35 }, "compId": 5 }, { "type": "Label", "props": { "y": -45, "x": 0, "width": 201, "var": "lbl", "height": 25, "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 3 }], "loadList": ["res/comp/progress_jdt7.png", "res/comp/gk_shengming1.png"], "loadList3D": [] };
	                progress.ProgHpUI = ProgHpUI;
	                REG("ui.data.module.progress.ProgHpUI", ProgHpUI);
	                class ProgSleepUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgSleepUI.uiView);
	                    }
	                }
	                ProgSleepUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": -26, "x": -75, "width": 150, "var": "bar", "skin": "res/comp/progress_jdt2.png", "height": 26, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Label", "props": { "y": -50, "x": -70, "width": 150, "var": "lbl", "height": 25, "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 7 }, { "type": "Button", "props": { "y": -30, "x": 76, "width": 35, "var": "spdBtn", "stateNum": 1, "skin": "res/comp/gk_jiasu.png", "height": 35 }, "compId": 8, "child": [{ "type": "Script", "props": { "runtime": "frame/ui/ScaleButton.ts" }, "compId": 9 }] }, { "type": "Label", "props": { "y": -22, "x": -75, "width": 150, "var": "barLbl", "height": 25, "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 10 }], "loadList": ["res/comp/progress_jdt2.png", "res/comp/gk_jiasu.png"], "loadList3D": [] };
	                progress.ProgSleepUI = ProgSleepUI;
	                REG("ui.data.module.progress.ProgSleepUI", ProgSleepUI);
	                class ProgTimeDupeUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgTimeDupeUI.uiView);
	                    }
	                }
	                ProgTimeDupeUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": -21, "x": -80, "width": 150, "var": "bar", "skin": "res/comp/progress_jdt.png", "height": 20, "sizeGrid": "6,6,6,6" }, "compId": 4 }, { "type": "Sprite", "props": { "y": -27, "x": -95, "var": "deadSp", "texture": "res/comp/gk_kulou.png" }, "compId": 11 }, { "type": "Sprite", "props": { "y": -27, "x": -90, "width": 20, "var": "timeSp", "texture": "res/comp/gk_djs.png", "height": 26 }, "compId": 12 }, { "type": "Label", "props": { "y": -18, "x": -70, "width": 140, "var": "timeLbl", "height": 20, "fontSize": 16, "color": "#ffffff", "align": "center" }, "compId": 10 }, { "type": "Label", "props": { "y": -42, "x": -80, "width": 150, "var": "headLbl", "height": 22, "fontSize": 18, "color": "#ffffff", "align": "center" }, "compId": 7 }], "loadList": ["res/comp/progress_jdt.png", "res/comp/gk_kulou.png", "res/comp/gk_djs.png"], "loadList3D": [] };
	                progress.ProgTimeDupeUI = ProgTimeDupeUI;
	                REG("ui.data.module.progress.ProgTimeDupeUI", ProgTimeDupeUI);
	                class ProgUpgradeUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgUpgradeUI.uiView);
	                    }
	                }
	                ProgUpgradeUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "Image", "props": { "y": -45, "x": -92, "width": 180, "var": "bgImg", "skin": "res/comp/gk_shengjidi.png", "height": 35, "sizeGrid": "11,14,15,16" }, "compId": 13 }, { "type": "Image", "props": { "y": -51, "x": -98, "width": 22, "skin": "res/comp/gk_shengji.png", "height": 34 }, "compId": 14 }, { "type": "Image", "props": { "y": -13, "x": -13, "skin": "res/comp/gk_daosanjiao.png" }, "compId": 15 }, { "type": "Image", "props": { "y": -40, "x": 55, "width": 26, "skin": "res/comp/zjm_zhuanshi.png", "height": 23 }, "compId": 16 }, { "type": "Label", "props": { "y": -36, "x": -78, "width": 96, "var": "headLbl", "text": "10020032", "height": 22, "fontSize": 18, "color": "#ffff00", "align": "left" }, "compId": 7 }, { "type": "Label", "props": { "y": -36, "x": -44, "width": 96, "var": "amountLbl", "text": "0", "height": 22, "fontSize": 18, "color": "#ffffff", "align": "right" }, "compId": 17 }], "loadList": ["res/comp/gk_shengjidi.png", "res/comp/gk_shengji.png", "res/comp/gk_daosanjiao.png", "res/comp/zjm_zhuanshi.png"], "loadList3D": [] };
	                progress.ProgUpgradeUI = ProgUpgradeUI;
	                REG("ui.data.module.progress.ProgUpgradeUI", ProgUpgradeUI);
	                class ProgYunUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ProgYunUI.uiView);
	                    }
	                }
	                ProgYunUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "ProgressBar", "props": { "y": 0, "x": -90, "width": 180, "var": "bar", "skin": "res/comp/progress_jdt5.png", "height": 17, "sizeGrid": "6,6,6,6" }, "compId": 4 }], "loadList": ["res/comp/progress_jdt5.png"], "loadList3D": [] };
	                progress.ProgYunUI = ProgYunUI;
	                REG("ui.data.module.progress.ProgYunUI", ProgYunUI);
	            })(progress = module.progress || (module.progress = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var setting;
	            (function (setting) {
	                class LangItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(LangItemUI.uiView);
	                    }
	                }
	                LangItemUI.uiView = { "type": "View", "props": { "width": 346, "height": 60 }, "compId": 2, "child": [{ "type": "Button", "props": { "var": "btnChinese", "top": 0, "skin": "res/skin/setting/sz_anniulv.png", "right": 0, "presetID": 1, "pivotY": 30, "pivotX": 172.5, "name": "btnChinese", "left": 0, "labelSize": 28, "label": "中文", "bottom": 0, "sizeGrid": "12,9,12,8", "y": 0, "x": 0, "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 3, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 4 }] }], "loadList": ["res/skin/setting/sz_anniulv.png", "data/common/ScaleButton.prefab"], "loadList3D": [] };
	                setting.LangItemUI = LangItemUI;
	                REG("ui.data.module.setting.LangItemUI", LangItemUI);
	                class SettingItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(SettingItemUI.uiView);
	                    }
	                }
	                SettingItemUI.uiView = { "type": "View", "props": { "width": 527, "height": 630 }, "compId": 2, "child": [{ "type": "Box", "props": { "top": -2, "right": 0, "left": 0, "bottom": 0 }, "compId": 125, "child": [{ "type": "Label", "props": { "y": 11, "x": 25, "width": 66, "var": "voiceLb", "valign": "middle", "text": "20120021", "presetID": 1, "name": "voiceLb", "height": 28, "fontSize": 22, "color": "#6C3A16", "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 3, "child": [{ "type": "Box", "props": { "y": 0, "x": 79, "width": 119, "var": "soundBox", "name": "soundBox", "height": 28 }, "compId": 367, "child": [{ "type": "Image", "props": { "y": -1, "x": -4, "width": 99, "var": "onBg", "skin": "res/skin/setting/sz_on.png", "name": "onBg", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 368, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 369 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 370 }] }, { "type": "Image", "props": { "y": -1, "x": 0, "width": 112, "visible": false, "var": "offBg", "skin": "res/skin/setting/sz_off.png", "name": "offBg", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 371, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 372 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 373 }] }] }] }, { "type": "Label", "props": { "y": 10, "x": 304, "width": 66, "var": "sEffectLb", "valign": "middle", "text": "20120022", "presetID": 1, "name": "sEffectLb", "height": 31, "fontSize": 22, "color": "#6C3A16", "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 4, "child": [{ "type": "Box", "props": { "y": -4, "x": 75, "width": 120, "var": "effSoundBox", "name": "effSoundBox", "height": 37 }, "compId": 349, "child": [{ "type": "Image", "props": { "y": 2, "x": 0, "width": 99, "var": "effectOn", "skin": "res/skin/setting/sz_on.png", "name": "effectOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 361, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 363 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 364 }] }, { "type": "Image", "props": { "y": 2, "x": 0, "width": 112, "var": "effectOff", "skin": "res/skin/setting/sz_off.png", "name": "effectOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 362, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 365 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 366 }] }] }] }, { "type": "Label", "props": { "y": 59, "x": 25, "width": 66, "var": "courseLb", "valign": "middle", "text": "20120023", "presetID": 1, "name": "courseLb", "height": 31, "fontSize": 22, "color": "#6C3A16", "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 5, "child": [{ "type": "Box", "props": { "y": -1, "x": 75, "width": 115, "var": "courseBox", "name": "courseBox", "height": 30 }, "compId": 350, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 99, "var": "courseOn", "skin": "res/skin/setting/sz_on.png", "name": "courseOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 26, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 27 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 28 }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 112, "var": "courseOff", "skin": "res/skin/setting/sz_off.png", "name": "courseOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 29, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 30 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 31 }] }] }] }, { "type": "Button", "props": { "y": 69, "x": 412, "width": 162, "var": "btnReSet", "skin": "res/skin/setting/sz_anniucheng.png", "presetID": 1, "pivotY": 22, "pivotX": 119, "name": "btnReSet", "height": 38, "sizeGrid": "9,7,9,7", "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 32 }, { "type": "Label", "props": { "y": 0, "x": 0, "valign": "middle", "top": 0, "text": "20120026", "right": 0, "left": 0, "fontSize": 22, "color": "#fbffe4", "bottom": 0, "align": "center" }, "compId": 399 }] }, { "type": "Image", "props": { "y": 100, "x": 20, "width": 11, "skin": "res/skin/setting/sz_dian.png", "height": 3 }, "compId": 7, "child": [{ "type": "Image", "props": { "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 34 }, { "type": "Image", "props": { "y": 0, "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 35 }, { "type": "Image", "props": { "y": 0, "x": 30, "skin": "res/skin/setting/sz_dian.png" }, "compId": 36 }, { "type": "Image", "props": { "y": 0, "x": 45, "skin": "res/skin/setting/sz_dian.png" }, "compId": 37 }, { "type": "Image", "props": { "y": 0, "x": 60, "skin": "res/skin/setting/sz_dian.png" }, "compId": 38 }, { "type": "Image", "props": { "y": 0, "x": 75, "skin": "res/skin/setting/sz_dian.png" }, "compId": 39 }, { "type": "Image", "props": { "y": 0, "x": 90, "skin": "res/skin/setting/sz_dian.png" }, "compId": 40 }, { "type": "Image", "props": { "y": 0, "x": 105, "skin": "res/skin/setting/sz_dian.png" }, "compId": 41 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 42 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 43 }, { "type": "Image", "props": { "y": 0, "x": 141, "skin": "res/skin/setting/sz_dian.png" }, "compId": 44 }, { "type": "Image", "props": { "y": 0, "x": 156, "skin": "res/skin/setting/sz_dian.png" }, "compId": 45 }, { "type": "Image", "props": { "y": 0, "x": 171, "skin": "res/skin/setting/sz_dian.png" }, "compId": 46 }, { "type": "Image", "props": { "y": 0, "x": 186, "skin": "res/skin/setting/sz_dian.png" }, "compId": 47 }, { "type": "Image", "props": { "y": 0, "x": 201, "skin": "res/skin/setting/sz_dian.png" }, "compId": 48 }, { "type": "Image", "props": { "y": 0, "x": 216, "skin": "res/skin/setting/sz_dian.png" }, "compId": 49 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 50 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 51 }, { "type": "Image", "props": { "y": 0, "x": 250, "skin": "res/skin/setting/sz_dian.png" }, "compId": 52 }, { "type": "Image", "props": { "y": 0, "x": 265, "skin": "res/skin/setting/sz_dian.png" }, "compId": 53 }, { "type": "Image", "props": { "y": 0, "x": 280, "skin": "res/skin/setting/sz_dian.png" }, "compId": 54 }, { "type": "Image", "props": { "y": 0, "x": 295, "skin": "res/skin/setting/sz_dian.png" }, "compId": 55 }, { "type": "Image", "props": { "y": 0, "x": 310, "skin": "res/skin/setting/sz_dian.png" }, "compId": 56 }, { "type": "Image", "props": { "y": 0, "x": 325, "skin": "res/skin/setting/sz_dian.png" }, "compId": 57 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 58 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 59 }, { "type": "Image", "props": { "y": 0, "x": 361, "skin": "res/skin/setting/sz_dian.png" }, "compId": 60 }, { "type": "Image", "props": { "y": 0, "x": 376, "skin": "res/skin/setting/sz_dian.png" }, "compId": 61 }, { "type": "Image", "props": { "y": 0, "x": 391, "skin": "res/skin/setting/sz_dian.png" }, "compId": 62 }, { "type": "Image", "props": { "y": 0, "x": 406, "skin": "res/skin/setting/sz_dian.png" }, "compId": 63 }, { "type": "Image", "props": { "y": 0, "x": 421, "skin": "res/skin/setting/sz_dian.png" }, "compId": 64 }, { "type": "Image", "props": { "y": 0, "x": 436, "skin": "res/skin/setting/sz_dian.png" }, "compId": 65 }, { "type": "Image", "props": { "y": 0, "x": 454, "skin": "res/skin/setting/sz_dian.png" }, "compId": 66 }, { "type": "Image", "props": { "y": 0, "x": 469, "skin": "res/skin/setting/sz_dian.png" }, "compId": 67 }, { "type": "Image", "props": { "y": 0, "x": 484, "skin": "res/skin/setting/sz_dian.png" }, "compId": 68 }] }, { "type": "Label", "props": { "y": 115, "x": 13, "width": 90, "visible": false, "var": "notBuyLb", "valign": "middle", "text": "禁用购买", "presetID": 1, "name": "notBuyLb", "mouseEnabled": false, "height": 25, "fontSize": 22, "color": "#6C3A16", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 8, "child": [{ "type": "Box", "props": { "y": -12, "x": 88, "width": 121, "var": "buyBox", "name": "buyBox", "height": 36 }, "compId": 351, "child": [{ "type": "Image", "props": { "y": 8, "x": 0, "width": 99, "var": "buyOn", "skin": "res/skin/setting/sz_on.png", "name": "buyOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 69, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 70 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 71 }] }, { "type": "Image", "props": { "y": 8, "x": 4, "width": 112, "var": "buyOff", "skin": "res/skin/setting/sz_off.png", "name": "buyOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 72, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 73 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 74 }] }] }] }, { "type": "Label", "props": { "y": 115, "x": 12, "width": 86, "var": "okLb", "valign": "middle", "text": "20120024", "presetID": 1, "name": "okLb", "height": 31, "fontSize": 22, "color": "#6C3A16", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 10, "child": [{ "type": "Box", "props": { "y": -13, "x": 88, "width": 117, "var": "okBox", "name": "okBox", "height": 42 }, "compId": 354, "child": [{ "type": "Image", "props": { "y": 9, "x": 1, "width": 99, "var": "okOn", "skin": "res/skin/setting/sz_on.png", "name": "okOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 81, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 82 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 83 }] }, { "type": "Image", "props": { "y": 9, "x": 5, "width": 112, "var": "okOff", "skin": "res/skin/setting/sz_off.png", "name": "okOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 84, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 85 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 86 }] }] }] }, { "type": "Label", "props": { "y": 115, "x": 307, "width": 66, "var": "notiLb", "valign": "middle", "text": "20120025", "presetID": 1, "name": "notiLb", "height": 29, "fontSize": 22, "color": "#6C3A16", "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 9, "child": [{ "type": "Box", "props": { "y": -9, "x": 69, "var": "notiBox", "name": "notiBox" }, "compId": 352, "child": [{ "type": "Image", "props": { "y": 8, "x": 6, "width": 99, "var": "notiOn", "skin": "res/skin/setting/sz_on.png", "name": "notiOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 75, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 76 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 77 }] }, { "type": "Image", "props": { "y": 8, "x": 6, "width": 112, "var": "notiOff", "skin": "res/skin/setting/sz_off.png", "name": "notiOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 78, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 79 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 80 }] }] }] }, { "type": "Image", "props": { "y": 222, "x": 20, "width": 11, "visible": false, "skin": "res/skin/setting/sz_dian.png", "height": 3 }, "compId": 312, "child": [{ "type": "Image", "props": { "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 313 }, { "type": "Image", "props": { "y": 0, "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 314 }, { "type": "Image", "props": { "y": 0, "x": 30, "skin": "res/skin/setting/sz_dian.png" }, "compId": 315 }, { "type": "Image", "props": { "y": 0, "x": 45, "skin": "res/skin/setting/sz_dian.png" }, "compId": 316 }, { "type": "Image", "props": { "y": 0, "x": 60, "skin": "res/skin/setting/sz_dian.png" }, "compId": 317 }, { "type": "Image", "props": { "y": 0, "x": 75, "skin": "res/skin/setting/sz_dian.png" }, "compId": 318 }, { "type": "Image", "props": { "y": 0, "x": 90, "skin": "res/skin/setting/sz_dian.png" }, "compId": 319 }, { "type": "Image", "props": { "y": 0, "x": 105, "skin": "res/skin/setting/sz_dian.png" }, "compId": 320 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 321 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 322 }, { "type": "Image", "props": { "y": 0, "x": 141, "skin": "res/skin/setting/sz_dian.png" }, "compId": 323 }, { "type": "Image", "props": { "y": 0, "x": 156, "skin": "res/skin/setting/sz_dian.png" }, "compId": 324 }, { "type": "Image", "props": { "y": 0, "x": 171, "skin": "res/skin/setting/sz_dian.png" }, "compId": 325 }, { "type": "Image", "props": { "y": 0, "x": 186, "skin": "res/skin/setting/sz_dian.png" }, "compId": 326 }, { "type": "Image", "props": { "y": 0, "x": 201, "skin": "res/skin/setting/sz_dian.png" }, "compId": 327 }, { "type": "Image", "props": { "y": 0, "x": 216, "skin": "res/skin/setting/sz_dian.png" }, "compId": 328 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 329 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 330 }, { "type": "Image", "props": { "y": 0, "x": 250, "skin": "res/skin/setting/sz_dian.png" }, "compId": 331 }, { "type": "Image", "props": { "y": 0, "x": 265, "skin": "res/skin/setting/sz_dian.png" }, "compId": 332 }, { "type": "Image", "props": { "y": 0, "x": 280, "skin": "res/skin/setting/sz_dian.png" }, "compId": 333 }, { "type": "Image", "props": { "y": 0, "x": 295, "skin": "res/skin/setting/sz_dian.png" }, "compId": 334 }, { "type": "Image", "props": { "y": 0, "x": 310, "skin": "res/skin/setting/sz_dian.png" }, "compId": 335 }, { "type": "Image", "props": { "y": 0, "x": 325, "skin": "res/skin/setting/sz_dian.png" }, "compId": 336 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 337 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 338 }, { "type": "Image", "props": { "y": 0, "x": 361, "skin": "res/skin/setting/sz_dian.png" }, "compId": 339 }, { "type": "Image", "props": { "y": 0, "x": 376, "skin": "res/skin/setting/sz_dian.png" }, "compId": 340 }, { "type": "Image", "props": { "y": 0, "x": 391, "skin": "res/skin/setting/sz_dian.png" }, "compId": 341 }, { "type": "Image", "props": { "y": 0, "x": 406, "skin": "res/skin/setting/sz_dian.png" }, "compId": 342 }, { "type": "Image", "props": { "y": 0, "x": 421, "skin": "res/skin/setting/sz_dian.png" }, "compId": 343 }, { "type": "Image", "props": { "y": 0, "x": 436, "skin": "res/skin/setting/sz_dian.png" }, "compId": 344 }, { "type": "Image", "props": { "y": 0, "x": 454, "skin": "res/skin/setting/sz_dian.png" }, "compId": 345 }, { "type": "Image", "props": { "y": 0, "x": 469, "skin": "res/skin/setting/sz_dian.png" }, "compId": 346 }, { "type": "Image", "props": { "y": 0, "x": 484, "skin": "res/skin/setting/sz_dian.png" }, "compId": 347 }] }, { "type": "Label", "props": { "y": 178, "x": 9, "width": 63, "valign": "middle", "text": "20120010", "presetID": 1, "height": 33, "fontSize": 22, "color": "#6C3A16", "align": "right", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 219, "child": [{ "type": "Button", "props": { "y": 12, "x": 150, "width": 162, "var": "btnLang", "skin": "res/skin/setting/sz_anniucheng.png", "presetID": 1, "pivotY": 22, "pivotX": 119, "name": "btnLang", "height": 38, "sizeGrid": "9,7,9,7", "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 220, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 226 }, { "type": "Label", "props": { "var": "langLb", "valign": "middle", "top": 0, "text": "中文", "right": 0, "name": "langLb", "left": 0, "fontSize": 22, "color": "#fbffe4", "bottom": 0, "align": "center" }, "compId": 227 }] }] }, { "type": "Button", "props": { "y": 190, "x": 412, "width": 162, "var": "btnPowerSave", "skin": "res/skin/setting/sz_anniucheng.png", "presetID": 1, "pivotX": 119, "name": "btnPowerSave", "height": 38, "sizeGrid": "9,7,9,7", "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 11, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 87 }, { "type": "Label", "props": { "y": 0, "x": 0, "valign": "middle", "top": 0, "text": "20120027", "right": 0, "left": 0, "fontSize": 22, "color": "#fbffe4", "bottom": 0, "align": "center" }, "compId": 400 }] }, { "type": "Image", "props": { "y": 156, "x": 20, "width": 11, "skin": "res/skin/setting/sz_dian.png", "height": 3 }, "compId": 12, "child": [{ "type": "Image", "props": { "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 89 }, { "type": "Image", "props": { "y": 0, "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 90 }, { "type": "Image", "props": { "y": 0, "x": 30, "skin": "res/skin/setting/sz_dian.png" }, "compId": 91 }, { "type": "Image", "props": { "y": 0, "x": 45, "skin": "res/skin/setting/sz_dian.png" }, "compId": 92 }, { "type": "Image", "props": { "y": 0, "x": 60, "skin": "res/skin/setting/sz_dian.png" }, "compId": 93 }, { "type": "Image", "props": { "y": 0, "x": 75, "skin": "res/skin/setting/sz_dian.png" }, "compId": 94 }, { "type": "Image", "props": { "y": 0, "x": 90, "skin": "res/skin/setting/sz_dian.png" }, "compId": 95 }, { "type": "Image", "props": { "y": 0, "x": 105, "skin": "res/skin/setting/sz_dian.png" }, "compId": 96 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 97 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 98 }, { "type": "Image", "props": { "y": 0, "x": 141, "skin": "res/skin/setting/sz_dian.png" }, "compId": 99 }, { "type": "Image", "props": { "y": 0, "x": 156, "skin": "res/skin/setting/sz_dian.png" }, "compId": 100 }, { "type": "Image", "props": { "y": 0, "x": 171, "skin": "res/skin/setting/sz_dian.png" }, "compId": 101 }, { "type": "Image", "props": { "y": 0, "x": 186, "skin": "res/skin/setting/sz_dian.png" }, "compId": 102 }, { "type": "Image", "props": { "y": 0, "x": 201, "skin": "res/skin/setting/sz_dian.png" }, "compId": 103 }, { "type": "Image", "props": { "y": 0, "x": 216, "skin": "res/skin/setting/sz_dian.png" }, "compId": 104 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 105 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 106 }, { "type": "Image", "props": { "y": 0, "x": 250, "skin": "res/skin/setting/sz_dian.png" }, "compId": 107 }, { "type": "Image", "props": { "y": 0, "x": 265, "skin": "res/skin/setting/sz_dian.png" }, "compId": 108 }, { "type": "Image", "props": { "y": 0, "x": 280, "skin": "res/skin/setting/sz_dian.png" }, "compId": 109 }, { "type": "Image", "props": { "y": 0, "x": 295, "skin": "res/skin/setting/sz_dian.png" }, "compId": 110 }, { "type": "Image", "props": { "y": 0, "x": 310, "skin": "res/skin/setting/sz_dian.png" }, "compId": 111 }, { "type": "Image", "props": { "y": 0, "x": 325, "skin": "res/skin/setting/sz_dian.png" }, "compId": 112 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 113 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 114 }, { "type": "Image", "props": { "y": 0, "x": 361, "skin": "res/skin/setting/sz_dian.png" }, "compId": 115 }, { "type": "Image", "props": { "y": 0, "x": 376, "skin": "res/skin/setting/sz_dian.png" }, "compId": 116 }, { "type": "Image", "props": { "y": 0, "x": 391, "skin": "res/skin/setting/sz_dian.png" }, "compId": 117 }, { "type": "Image", "props": { "y": 0, "x": 406, "skin": "res/skin/setting/sz_dian.png" }, "compId": 118 }, { "type": "Image", "props": { "y": 0, "x": 421, "skin": "res/skin/setting/sz_dian.png" }, "compId": 119 }, { "type": "Image", "props": { "y": 0, "x": 436, "skin": "res/skin/setting/sz_dian.png" }, "compId": 120 }, { "type": "Image", "props": { "y": 0, "x": 454, "skin": "res/skin/setting/sz_dian.png" }, "compId": 121 }, { "type": "Image", "props": { "y": 0, "x": 469, "skin": "res/skin/setting/sz_dian.png" }, "compId": 122 }, { "type": "Image", "props": { "y": 0, "x": 484, "skin": "res/skin/setting/sz_dian.png" }, "compId": 123 }] }, { "type": "Image", "props": { "y": 223, "x": 20, "width": 11, "skin": "res/skin/setting/sz_dian.png", "rotation": 0, "height": 3 }, "compId": 222, "child": [{ "type": "Image", "props": { "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 230 }, { "type": "Image", "props": { "y": 0, "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 231 }, { "type": "Image", "props": { "y": 0, "x": 30, "skin": "res/skin/setting/sz_dian.png" }, "compId": 232 }, { "type": "Image", "props": { "y": 0, "x": 45, "skin": "res/skin/setting/sz_dian.png" }, "compId": 233 }, { "type": "Image", "props": { "y": 0, "x": 60, "skin": "res/skin/setting/sz_dian.png" }, "compId": 234 }, { "type": "Image", "props": { "y": 0, "x": 75, "skin": "res/skin/setting/sz_dian.png" }, "compId": 235 }, { "type": "Image", "props": { "y": 0, "x": 90, "skin": "res/skin/setting/sz_dian.png" }, "compId": 236 }, { "type": "Image", "props": { "y": 0, "x": 105, "skin": "res/skin/setting/sz_dian.png" }, "compId": 237 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 238 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 239 }, { "type": "Image", "props": { "y": 0, "x": 141, "skin": "res/skin/setting/sz_dian.png" }, "compId": 240 }, { "type": "Image", "props": { "y": 0, "x": 156, "skin": "res/skin/setting/sz_dian.png" }, "compId": 241 }, { "type": "Image", "props": { "y": 0, "x": 171, "skin": "res/skin/setting/sz_dian.png" }, "compId": 242 }, { "type": "Image", "props": { "y": 0, "x": 186, "skin": "res/skin/setting/sz_dian.png" }, "compId": 243 }, { "type": "Image", "props": { "y": 0, "x": 201, "skin": "res/skin/setting/sz_dian.png" }, "compId": 244 }, { "type": "Image", "props": { "y": 0, "x": 216, "skin": "res/skin/setting/sz_dian.png" }, "compId": 245 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 246 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 247 }, { "type": "Image", "props": { "y": 0, "x": 250, "skin": "res/skin/setting/sz_dian.png" }, "compId": 248 }, { "type": "Image", "props": { "y": 0, "x": 265, "skin": "res/skin/setting/sz_dian.png" }, "compId": 249 }, { "type": "Image", "props": { "y": 0, "x": 280, "skin": "res/skin/setting/sz_dian.png" }, "compId": 250 }, { "type": "Image", "props": { "y": 0, "x": 295, "skin": "res/skin/setting/sz_dian.png" }, "compId": 251 }, { "type": "Image", "props": { "y": 0, "x": 310, "skin": "res/skin/setting/sz_dian.png" }, "compId": 252 }, { "type": "Image", "props": { "y": 0, "x": 325, "skin": "res/skin/setting/sz_dian.png" }, "compId": 253 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 254 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 255 }, { "type": "Image", "props": { "y": 0, "x": 361, "skin": "res/skin/setting/sz_dian.png" }, "compId": 256 }, { "type": "Image", "props": { "y": 0, "x": 376, "skin": "res/skin/setting/sz_dian.png" }, "compId": 257 }, { "type": "Image", "props": { "y": 0, "x": 391, "skin": "res/skin/setting/sz_dian.png" }, "compId": 258 }, { "type": "Image", "props": { "y": 0, "x": 406, "skin": "res/skin/setting/sz_dian.png" }, "compId": 259 }, { "type": "Image", "props": { "y": 0, "x": 421, "skin": "res/skin/setting/sz_dian.png" }, "compId": 260 }, { "type": "Image", "props": { "y": 0, "x": 436, "skin": "res/skin/setting/sz_dian.png" }, "compId": 261 }, { "type": "Image", "props": { "y": 0, "x": 454, "skin": "res/skin/setting/sz_dian.png" }, "compId": 262 }, { "type": "Image", "props": { "y": 0, "x": 469, "skin": "res/skin/setting/sz_dian.png" }, "compId": 263 }, { "type": "Image", "props": { "y": 0, "x": 484, "skin": "res/skin/setting/sz_dian.png" }, "compId": 264 }] }, { "type": "Box", "props": { "y": 231, "x": 21, "width": 477, "height": 342 }, "compId": 223, "child": [{ "type": "Box", "props": { "y": 55, "x": 343, "width": 114, "var": "btnBox", "height": 32 }, "compId": 265, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 99, "visible": false, "var": "mergeOverOn", "skin": "res/skin/setting/sz_on.png", "name": "mergeOverOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 266, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 267 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 268 }] }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 112, "var": "mergeOverOff", "skin": "res/skin/setting/sz_off.png", "name": "mergeOverOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 269, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 270 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 271 }] }] }, { "type": "Label", "props": { "y": 1, "x": 0, "valign": "middle", "text": "20120011", "presetID": 1, "fontSize": 22, "color": "#6C3A16", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 374 }, { "type": "Label", "props": { "y": 27, "x": 0, "valign": "middle", "text": "20120012", "presetID": 1, "fontSize": 20, "color": "#6C3A16", "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 375 }, { "type": "Label", "props": { "y": 48, "x": 0, "wordWrap": true, "width": 332, "valign": "top", "text": "20120013", "presetID": 1, "height": 67, "fontSize": 20, "color": "#AA7746", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 376 }, { "type": "Label", "props": { "y": 144, "x": 0, "width": 335, "valign": "middle", "text": "20120017", "presetID": 1, "height": 21, "fontSize": 20, "color": "#6C3A16", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 377, "child": [{ "type": "Label", "props": { "y": 27, "x": 0, "wordWrap": true, "width": 332, "valign": "top", "text": "20120018", "presetID": 1, "height": 51, "fontSize": 20, "color": "#AA7746", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 378 }, { "type": "Box", "props": { "y": -9, "x": 332, "width": 136, "var": "chainMergeBox", "name": "chainMergeBox", "height": 48 }, "compId": 393, "child": [{ "type": "Image", "props": { "y": 9, "x": 11, "width": 99, "visible": false, "var": "chainMergeOn", "skin": "res/skin/setting/sz_on.png", "name": "chainMergeOn", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 381, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 383 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 384 }] }, { "type": "Image", "props": { "y": 9, "x": 11, "width": 112, "var": "chainMergeOff", "skin": "res/skin/setting/sz_off.png", "name": "chainMergeOff", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 382, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 385 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 386 }] }] }] }, { "type": "Label", "props": { "y": 241, "x": 0, "width": 319, "valign": "middle", "text": "20120019", "presetID": 1, "height": 21, "fontSize": 20, "color": "#6C3A16", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 379, "child": [{ "type": "Label", "props": { "y": 27, "x": 0, "wordWrap": true, "width": 332, "valign": "top", "text": "20120020", "presetID": 1, "height": 78, "fontSize": 20, "color": "#AA7746", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 380 }, { "type": "Box", "props": { "y": -13, "x": 332, "width": 131, "var": "merge5Box", "name": "merge5Box", "height": 52 }, "compId": 394, "child": [{ "type": "Image", "props": { "y": 13, "x": 11, "width": 99, "visible": false, "var": "merge5On", "skin": "res/skin/setting/sz_on.png", "name": "merge5On", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 387, "child": [{ "type": "Image", "props": { "y": -4, "x": 81, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 389 }, { "type": "Label", "props": { "y": 7, "x": 7, "width": 74, "valign": "middle", "text": "ON", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 390 }] }, { "type": "Image", "props": { "y": 13, "x": 11, "width": 112, "var": "merge5Off", "skin": "res/skin/setting/sz_off.png", "name": "merge5Off", "height": 28, "sizeGrid": "9,7,9,7" }, "compId": 388, "child": [{ "type": "Image", "props": { "y": -5, "x": -5, "width": 35, "skin": "res/skin/setting/sz_yuanquan.png", "height": 35 }, "compId": 391 }, { "type": "Label", "props": { "y": 7, "x": 30, "width": 74, "valign": "middle", "text": "OFF", "presetID": 1, "height": 22, "fontSize": 20, "color": "#ececec", "bold": true, "align": "center", "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 392 }] }] }] }] }, { "type": "Image", "props": { "y": 577, "x": 20, "width": 11, "skin": "res/skin/setting/sz_dian.png", "height": 3 }, "compId": 224, "child": [{ "type": "Image", "props": { "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 275 }, { "type": "Image", "props": { "y": 0, "x": 15, "skin": "res/skin/setting/sz_dian.png" }, "compId": 276 }, { "type": "Image", "props": { "y": 0, "x": 30, "skin": "res/skin/setting/sz_dian.png" }, "compId": 277 }, { "type": "Image", "props": { "y": 0, "x": 45, "skin": "res/skin/setting/sz_dian.png" }, "compId": 278 }, { "type": "Image", "props": { "y": 0, "x": 60, "skin": "res/skin/setting/sz_dian.png" }, "compId": 279 }, { "type": "Image", "props": { "y": 0, "x": 75, "skin": "res/skin/setting/sz_dian.png" }, "compId": 280 }, { "type": "Image", "props": { "y": 0, "x": 90, "skin": "res/skin/setting/sz_dian.png" }, "compId": 281 }, { "type": "Image", "props": { "y": 0, "x": 105, "skin": "res/skin/setting/sz_dian.png" }, "compId": 282 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 283 }, { "type": "Image", "props": { "y": 0, "x": 126, "skin": "res/skin/setting/sz_dian.png" }, "compId": 284 }, { "type": "Image", "props": { "y": 0, "x": 141, "skin": "res/skin/setting/sz_dian.png" }, "compId": 285 }, { "type": "Image", "props": { "y": 0, "x": 156, "skin": "res/skin/setting/sz_dian.png" }, "compId": 286 }, { "type": "Image", "props": { "y": 0, "x": 171, "skin": "res/skin/setting/sz_dian.png" }, "compId": 287 }, { "type": "Image", "props": { "y": 0, "x": 186, "skin": "res/skin/setting/sz_dian.png" }, "compId": 288 }, { "type": "Image", "props": { "y": 0, "x": 201, "skin": "res/skin/setting/sz_dian.png" }, "compId": 289 }, { "type": "Image", "props": { "y": 0, "x": 216, "skin": "res/skin/setting/sz_dian.png" }, "compId": 290 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 291 }, { "type": "Image", "props": { "y": 0, "x": 235, "skin": "res/skin/setting/sz_dian.png" }, "compId": 292 }, { "type": "Image", "props": { "y": 0, "x": 250, "skin": "res/skin/setting/sz_dian.png" }, "compId": 293 }, { "type": "Image", "props": { "y": 0, "x": 265, "skin": "res/skin/setting/sz_dian.png" }, "compId": 294 }, { "type": "Image", "props": { "y": 0, "x": 280, "skin": "res/skin/setting/sz_dian.png" }, "compId": 295 }, { "type": "Image", "props": { "y": 0, "x": 295, "skin": "res/skin/setting/sz_dian.png" }, "compId": 296 }, { "type": "Image", "props": { "y": 0, "x": 310, "skin": "res/skin/setting/sz_dian.png" }, "compId": 297 }, { "type": "Image", "props": { "y": 0, "x": 325, "skin": "res/skin/setting/sz_dian.png" }, "compId": 298 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 299 }, { "type": "Image", "props": { "y": 0, "x": 346, "skin": "res/skin/setting/sz_dian.png" }, "compId": 300 }, { "type": "Image", "props": { "y": 0, "x": 361, "skin": "res/skin/setting/sz_dian.png" }, "compId": 301 }, { "type": "Image", "props": { "y": 0, "x": 376, "skin": "res/skin/setting/sz_dian.png" }, "compId": 302 }, { "type": "Image", "props": { "y": 0, "x": 391, "skin": "res/skin/setting/sz_dian.png" }, "compId": 303 }, { "type": "Image", "props": { "y": 0, "x": 406, "skin": "res/skin/setting/sz_dian.png" }, "compId": 304 }, { "type": "Image", "props": { "y": 0, "x": 421, "skin": "res/skin/setting/sz_dian.png" }, "compId": 305 }, { "type": "Image", "props": { "y": 0, "x": 436, "skin": "res/skin/setting/sz_dian.png" }, "compId": 306 }, { "type": "Image", "props": { "y": 0, "x": 454, "skin": "res/skin/setting/sz_dian.png" }, "compId": 307 }, { "type": "Image", "props": { "y": 0, "x": 469, "skin": "res/skin/setting/sz_dian.png" }, "compId": 308 }, { "type": "Image", "props": { "y": 0, "x": 484, "skin": "res/skin/setting/sz_dian.png" }, "compId": 309 }] }, { "type": "Button", "props": { "y": 607, "x": 428, "width": 162, "var": "btnCode", "skin": "res/skin/setting/sz_anniucheng.png", "presetID": 1, "pivotY": 22, "pivotX": 119, "name": "btnCode", "height": 38, "sizeGrid": "9,7,9,7", "stateNum": 1, "labelStrokeColor": "#4a4a4a", "labelStroke": 2, "labelSize": 30, "labelColors": "#fbffe4,#fbffe4,#fbffe4", "isPresetRoot": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 225, "child": [{ "type": "Script", "props": { "presetID": 2, "runtime": "frame/ui/ScaleButton.ts" }, "compId": 310 }, { "type": "Label", "props": { "var": "codeLb", "valign": "middle", "top": 0, "text": "20120015", "right": 0, "name": "codeLb", "left": 0, "fontSize": 22, "color": "#fbffe4", "bottom": 0, "align": "center" }, "compId": 311 }] }] }], "loadList": ["data/common/HtmlLabel.prefab", "res/skin/setting/sz_on.png", "res/skin/setting/sz_yuanquan.png", "res/skin/setting/sz_off.png", "res/skin/setting/sz_anniucheng.png", "data/common/ScaleButton.prefab", "res/skin/setting/sz_dian.png"], "loadList3D": [] };
	                setting.SettingItemUI = SettingItemUI;
	                REG("ui.data.module.setting.SettingItemUI", SettingItemUI);
	            })(setting = module.setting || (module.setting = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var shop;
	            (function (shop) {
	                class ShopItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(ShopItemUI.uiView);
	                    }
	                }
	                ShopItemUI.uiView = { "type": "View", "props": { "y": 138, "x": 105, "width": 210, "pivotY": 138, "pivotX": 105, "height": 310 }, "compId": 2, "child": [{ "type": "Box", "props": { "y": 146, "width": 210, "var": "boxItem", "right": 0, "pivotY": 138, "pivotX": 105, "left": 0, "height": 300 }, "compId": 25, "child": [{ "type": "Image", "props": { "y": 1, "x": 1, "top": -1, "skin": "res/skin/level_box/gkbx_dikuang.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "15,15,15,15" }, "compId": 4 }, { "type": "Image", "props": { "y": 7, "x": 1, "skin": "res/skin/level_box/gkbx_fsg.png", "scaleY": 0.9, "scaleX": 0.9, "centerX": 0 }, "compId": 5 }, { "type": "Box", "props": { "var": "boxPref", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 33 }, { "type": "Label", "props": { "y": 105, "x": 77, "var": "lblLv", "text": "普通", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 22, "color": "#ffffff", "centerX": 0 }, "compId": 7 }, { "type": "Image", "props": { "y": 129, "x": 1, "width": 200, "skin": "res/comp/gy_jianbian.png", "height": 36, "centerX": 0, "sizeGrid": "3,30,3,30" }, "compId": 8, "child": [{ "type": "Label", "props": { "var": "lblName", "text": "普通", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 22, "color": "#ffffff", "centerY": 1, "centerX": 0 }, "compId": 9 }] }, { "type": "Label", "props": { "wordWrap": true, "var": "lblDesc", "valign": "middle", "right": 10, "presetID": 1, "left": 12, "height": 76, "fontSize": 18, "color": "#703819", "centerY": 54, "align": "center", "y": 0, "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 28 }, { "type": "Box", "props": { "y": 242, "width": 176, "var": "boxCost", "height": 46, "centerX": 0 }, "compId": 16, "child": [{ "type": "Image", "props": { "top": 0, "skin": "res/comp/zjm_toumingkuong3.png", "right": 0, "left": 0, "bottom": 0, "sizeGrid": "8,8,8,8" }, "compId": 17 }, { "type": "HBox", "props": { "space": 20, "height": 34, "centerY": 0, "centerX": 0, "align": "bottom" }, "compId": 18, "child": [{ "type": "Label", "props": { "var": "lblCost", "text": "等级 15", "fontSize": 22, "color": "#703819" }, "compId": 19 }, { "type": "Image", "props": { "width": 34, "var": "imgCost", "skin": "res/comp/zjm_zhuanshi.png", "height": 34 }, "compId": 20 }] }] }] }, { "type": "Box", "props": { "y": 146, "x": 105, "width": 210, "var": "boxMystic", "right": 0, "pivotY": 138, "pivotX": 105, "left": 0, "height": 300 }, "compId": 30, "child": [{ "type": "Box", "props": { "y": 32, "x": 0, "width": 198, "right": 0, "left": 0, "height": 50 }, "compId": 21, "child": [{ "type": "Image", "props": { "x": 42, "skin": "res/comp/zjm_suokai.png", "scaleY": 0.8, "scaleX": 0.8, "bottom": 0 }, "compId": 22 }, { "type": "Image", "props": { "x": 83, "skin": "res/comp/zjm_suokai.png", "bottom": 0 }, "compId": 23 }, { "type": "Image", "props": { "x": 128, "skin": "res/comp/zjm_suokai.png", "scaleY": 0.8, "scaleX": 0.8, "bottom": 0 }, "compId": 24 }] }, { "type": "Box", "props": { "y": 129, "x": -1, "width": 200 }, "compId": 11, "child": [{ "type": "CheckBox", "props": { "y": -1, "x": -37, "var": "chk0", "skin": "res/comp/tab_gouxuan.png", "mouseEnabled": false, "centerY": 0, "centerX": -45, "stateNum": 2 }, "compId": 12 }, { "type": "CheckBox", "props": { "y": -1, "x": -37, "var": "chk1", "skin": "res/comp/tab_gouxuan.png", "mouseEnabled": false, "centerY": 0, "centerX": 0, "stateNum": 2 }, "compId": 13 }, { "type": "CheckBox", "props": { "y": -1, "x": -37, "var": "chk2", "skin": "res/comp/tab_gouxuan.png", "mouseEnabled": false, "centerY": 0, "centerX": 45, "stateNum": 2 }, "compId": 14 }] }, { "type": "Label", "props": { "y": 105, "x": 77, "var": "lblMsName", "text": "普通", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 22, "color": "#ffffff", "centerX": 0 }, "compId": 31 }, { "type": "Label", "props": { "y": 0, "wordWrap": true, "var": "lblMsDesc", "valign": "middle", "right": 10, "presetID": 1, "left": 12, "height": 76, "fontSize": 18, "color": "#703819", "centerY": 54, "align": "center", "x": 0, "runtime": "frame/ui/HtmlLabel.ts", "name": "HtmlLabel", "leading": 5, "isPresetRoot": true }, "compId": 32 }] }, { "type": "Image", "props": { "x": 83, "var": "imgLock", "skin": "res/comp/zjm_suokai.png", "centerY": 0 }, "compId": 10 }, { "type": "Label", "props": { "y": 26, "var": "lblTip", "text": "点击可以解锁", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 22, "color": "#fdff6c", "centerX": 0 }, "compId": 6 }], "loadList": ["res/skin/level_box/gkbx_dikuang.png", "res/skin/level_box/gkbx_fsg.png", "res/comp/gy_jianbian.png", "data/common/HtmlLabel.prefab", "res/comp/zjm_toumingkuong3.png", "res/comp/zjm_zhuanshi.png", "res/comp/zjm_suokai.png", "res/comp/tab_gouxuan.png"], "loadList3D": [] };
	                shop.ShopItemUI = ShopItemUI;
	                REG("ui.data.module.shop.ShopItemUI", ShopItemUI);
	            })(shop = module.shop || (module.shop = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var tips;
	            (function (tips) {
	                class NormalTxtTipsUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(NormalTxtTipsUI.uiView);
	                    }
	                }
	                NormalTxtTipsUI.uiView = { "type": "View", "props": { "width": 463, "height": 166 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 3, "x": 0, "width": 461, "var": "tipsBg", "skin": "res/skin/mainUI/zjm_toumingkuong1.png", "name": "tipsBg", "height": 158, "alpha": 0.9, "sizeGrid": "10,10,10,10" }, "compId": 17 }, { "type": "Label", "props": { "y": 15, "x": 15, "wordWrap": true, "width": 431, "var": "desLb", "text": "彩虹龙蛋窝", "presetID": 1, "name": "desLb", "height": 21, "fontSize": 16, "color": "#F2E8CA", "align": "left", "runtime": "frame/ui/HtmlLabel.ts", "leading": 5, "isPresetRoot": true }, "compId": 18 }], "loadList": ["res/skin/mainUI/zjm_toumingkuong1.png", "data/common/HtmlLabel.prefab"], "loadList3D": [] };
	                tips.NormalTxtTipsUI = NormalTxtTipsUI;
	                REG("ui.data.module.tips.NormalTxtTipsUI", NormalTxtTipsUI);
	            })(tips = module.tips || (module.tips = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var module;
	        (function (module) {
	            var world;
	            (function (world) {
	                class WorldEnterRewardUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(WorldEnterRewardUI.uiView);
	                    }
	                }
	                WorldEnterRewardUI.uiView = { "type": "View", "props": { "width": 134, "height": 102 }, "compId": 2, "child": [{ "type": "Image", "props": { "skin": "res/skin/mainUI/zjm_qizhi.png", "centerX": 0, "bottom": -5 }, "compId": 3, "child": [{ "type": "Label", "props": { "var": "lblQuality", "text": "高亮", "fontSize": 18, "color": "#ffffff", "centerY": -3, "centerX": 0 }, "compId": 4 }] }], "loadList": ["res/skin/mainUI/zjm_qizhi.png"], "loadList3D": [] };
	                world.WorldEnterRewardUI = WorldEnterRewardUI;
	                REG("ui.data.module.world.WorldEnterRewardUI", WorldEnterRewardUI);
	                class WorldHomeEnterUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(WorldHomeEnterUI.uiView);
	                    }
	                }
	                WorldHomeEnterUI.uiView = { "type": "View", "props": { "y": 95, "x": 95, "width": 190, "pivotY": 95, "pivotX": 95, "height": 296 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "skin": "res/skin/level/gk_jiayuanrukou.png", "scaleY": 0.8, "scaleX": 0.8, "centerX": 0 }, "compId": 5 }, { "type": "Label", "props": { "y": 148, "text": "家园", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 40, "color": "#ffffff", "centerX": 0 }, "compId": 21 }, { "type": "Image", "props": { "y": 185, "var": "imgStar", "skin": "res/comp/zjm_xingji2.png", "scaleY": 1.3, "scaleX": 1.3, "centerX": 0 }, "compId": 20, "child": [{ "type": "Label", "props": { "x": 55, "var": "lblStar", "text": "0", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 20, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 22 }] }, { "type": "Image", "props": { "y": -43, "var": "imgArraw", "skin": "res/skin/level/gk_jiantou.png", "scaleY": 1.2, "scaleX": 1.2, "rotation": 90, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 24 }], "loadList": ["res/skin/level/gk_jiayuanrukou.png", "res/comp/zjm_xingji2.png", "res/skin/level/gk_jiantou.png"], "loadList3D": [] };
	                world.WorldHomeEnterUI = WorldHomeEnterUI;
	                REG("ui.data.module.world.WorldHomeEnterUI", WorldHomeEnterUI);
	                class WorldItemUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(WorldItemUI.uiView);
	                    }
	                }
	                WorldItemUI.uiView = { "type": "View", "props": { "width": 1024, "height": 750 }, "compId": 2, "child": [{ "type": "Image", "props": { "width": 1024, "var": "img", "height": 750 }, "compId": 3 }, { "type": "Box", "props": { "var": "boxIslands", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 11 }, { "type": "Box", "props": { "y": 0, "x": 0, "var": "boxEntrances", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 12 }], "loadList": [], "loadList3D": [] };
	                world.WorldItemUI = WorldItemUI;
	                REG("ui.data.module.world.WorldItemUI", WorldItemUI);
	                class WorldLevelEnterUI extends View {
	                    constructor() { super(); }
	                    createChildren() {
	                        super.createChildren();
	                        this.createView(WorldLevelEnterUI.uiView);
	                    }
	                }
	                WorldLevelEnterUI.uiView = { "type": "View", "props": { "y": 116, "x": 51, "width": 102, "pivotY": 116, "pivotX": 51, "height": 200 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "imgBottom", "skin": "res/skin/level/gk_dizuo.png", "centerX": 0, "bottom": 42 }, "compId": 6 }, { "type": "HBox", "props": { "y": 0, "x": 0, "var": "boxStars", "space": 5, "scaleY": 0.65, "scaleX": 0.65, "centerX": 0, "bottom": 28, "align": "middle" }, "compId": 11, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "res/comp/zjm_xingji2.png" }, "compId": 9 }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "res/comp/zjm_xingji2.png" }, "compId": 12 }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "res/comp/zjm_xingji2.png" }, "compId": 14 }] }, { "type": "Label", "props": { "y": 0, "x": 0, "var": "lblName", "text": "治疗女神", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 28, "color": "#ffffff", "centerX": 0, "bottom": 0 }, "compId": 15 }, { "type": "Image", "props": { "y": 28, "x": 51, "var": "imgArraw", "skin": "res/skin/level/gk_jiantou.png", "rotation": 90, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 27 }, { "type": "Label", "props": { "y": 9, "var": "lblInProgress", "text": "20020019", "strokeColor": "#4a4a4a", "stroke": 2, "fontSize": 28, "color": "#eedd22", "centerX": 0 }, "compId": 28 }], "loadList": ["res/skin/level/gk_dizuo.png", "res/comp/zjm_xingji2.png", "res/skin/level/gk_jiantou.png"], "loadList3D": [] };
	                world.WorldLevelEnterUI = WorldLevelEnterUI;
	                REG("ui.data.module.world.WorldLevelEnterUI", WorldLevelEnterUI);
	            })(world = module.world || (module.world = {}));
	        })(module = data.module || (data.module = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));
	(function (ui) {
	    var data;
	    (function (data) {
	        var window;
	        (function (window) {
	            class SubPanel_0UI extends View {
	                constructor() { super(); }
	                createChildren() {
	                    super.createChildren();
	                    this.createView(SubPanel_0UI.uiView);
	                }
	            }
	            SubPanel_0UI.uiView = { "type": "View", "props": { "width": 128, "height": 128 }, "compId": 2, "child": [{ "type": "Box", "props": { "width": 200, "height": 200, "bgColor": "#9c9b9b" }, "compId": 3 }, { "type": "Label", "props": { "text": "pane 0", "fontSize": 40 }, "compId": 4 }], "loadList": [], "loadList3D": [] };
	            window.SubPanel_0UI = SubPanel_0UI;
	            REG("ui.data.window.SubPanel_0UI", SubPanel_0UI);
	            class SubPanel_1UI extends View {
	                constructor() { super(); }
	                createChildren() {
	                    super.createChildren();
	                    this.createView(SubPanel_1UI.uiView);
	                }
	            }
	            SubPanel_1UI.uiView = { "type": "View", "props": { "width": 128, "height": 128 }, "compId": 2, "child": [{ "type": "Box", "props": { "width": 200, "height": 200, "bgColor": "#934444" }, "compId": 3 }, { "type": "Label", "props": { "text": "pane 1", "fontSize": 40 }, "compId": 4 }], "loadList": [], "loadList3D": [] };
	            window.SubPanel_1UI = SubPanel_1UI;
	            REG("ui.data.window.SubPanel_1UI", SubPanel_1UI);
	            class SubPanel_2UI extends View {
	                constructor() { super(); }
	                createChildren() {
	                    super.createChildren();
	                    this.createView(SubPanel_2UI.uiView);
	                }
	            }
	            SubPanel_2UI.uiView = { "type": "View", "props": { "width": 128, "height": 128 }, "compId": 2, "child": [{ "type": "Box", "props": { "width": 200, "height": 200, "bgColor": "#293e75" }, "compId": 3 }, { "type": "Label", "props": { "text": "pane 2", "fontSize": 40 }, "compId": 4 }], "loadList": [], "loadList3D": [] };
	            window.SubPanel_2UI = SubPanel_2UI;
	            REG("ui.data.window.SubPanel_2UI", SubPanel_2UI);
	        })(window = data.window || (data.window = {}));
	    })(data = ui.data || (ui.data = {}));
	})(ui || (ui = {}));

	class FloatMsg extends ui.data.module.FloatMsgUI {
	    constructor() {
	        super();
	    }
	    setData(msg) {
	        this.msg = msg;
	    }
	    onEnable() {
	        this.msgLb.text = this.msg;
	        let tmpH = Laya.stage.height / 4;
	        let tmpW = (Laya.stage.width - this.width) / 2;
	        this.bg.pos(tmpW, tmpH * 3);
	        this.bg.alpha = 0;
	        Laya.Tween.to(this.bg, { x: tmpW, y: tmpH * 2, alpha: 1 }, 1000, Laya.Ease.circOut, Laya.Handler.create(this, function () {
	            Laya.Tween.to(this.bg, { x: tmpW, y: tmpH, alpha: 0 }, 1000, Laya.Ease.circIn, Laya.Handler.create(this, function () {
	                this.removeSelf();
	                this.clearData();
	                FloatMsgUtil.recoverObj(this);
	            }));
	        }));
	    }
	    clearData() {
	        this.msg = null;
	        this.msgLb.text = "";
	        this.pos(0, 0, true);
	    }
	}

	class FloatMsgUtil {
	    static start(msg) {
	        this.flyTxtList.push(msg);
	        if (!this.flyTime) {
	            this.flyTime = new Laya.Timer();
	            this.flyTime.loop(500, this, this.listenerFlyList);
	        }
	        else {
	            this.flyTime.resume();
	        }
	    }
	    static listenerFlyList() {
	        if (this.flyTxtList.length > 0) {
	            let msg = this.flyTxtList.shift();
	            let floatObj = this.getFlyObj();
	            floatObj.setData(msg);
	            Laya.stage.addChild(floatObj);
	        }
	        else {
	            this.flyTime.pause();
	        }
	    }
	    static getFlyObj() {
	        let obj = this.saveMsgObj.pop();
	        if (!obj) {
	            obj = new FloatMsg();
	        }
	        return obj;
	    }
	    static recoverObj(obj) {
	        this.saveMsgObj.push(obj);
	    }
	}
	FloatMsgUtil.flyTxtList = [];
	FloatMsgUtil.saveMsgObj = [];

	class GameUtil {
	    static getCompPngSkin(name) {
	        if (!name) {
	            Debug.log("资源名非法：" + name);
	            return "";
	        }
	        return "res/comp/" + name + ".png";
	    }
	    static getHCompPngSkin(name) {
	        return "res/hcomp/" + name + ".png";
	    }
	    static getCompJpgSkin(name) {
	        return "res/comp/" + name + ".jpg";
	    }
	    static getModuleSkin(module, name) {
	        return "res/skin/" + module + "/" + name + ".png";
	    }
	    static setGray(ui, isGray = true) {
	        if (isGray) {
	            let gray = [0.3086, 0.6094, 0.0820, 0, 0,
	                0.3086, 0.6094, 0.0820, 0, 0,
	                0.3086, 0.6094, 0.0820, 0, 0,
	                0, 0, 0, 1, 0];
	            ui.filters = [new Laya.ColorFilter(gray)];
	        }
	        else {
	            ui.filters = [];
	        }
	    }
	    static setShadow(ui, distance = 1, blur = 0) {
	        try {
	            ui.filters = [new Laya.GlowFilter("#000000", blur, distance, distance)];
	        }
	        catch (e) {
	        }
	    }
	    static setShadowText(ui) {
	        if (Laya.Render.isConchApp) {
	            ui.stroke = 1;
	            ui.strokeColor = "#000000";
	        }
	        else {
	            try {
	                ui.filters = [new Laya.GlowFilter("#000000", 0, 1, 1)];
	            }
	            catch (e) {
	            }
	        }
	    }
	    static setLamp(ui, lampVal = 20) {
	        try {
	            let _whiteGlowFilter = [
	                1, 0, 0, 0, lampVal,
	                0, 1, 0, 0, lampVal,
	                0, 0, 1, 0, lampVal,
	                0, 0, 0, 1, 0,
	            ];
	            ui.filters = [new Laya.ColorFilter(_whiteGlowFilter)];
	        }
	        catch (e) { }
	    }
	    static setDrak(ui, D) {
	        try {
	            let _grayGlowFilter = [
	                D, 0, 0, 0, 0,
	                0, D, 0, 0, 0,
	                0, 0, D, 0, 0,
	                0, 0, 0, 1, 0,
	            ];
	            ui.filters = [new Laya.ColorFilter(_grayGlowFilter)];
	        }
	        catch (e) { }
	    }
	    static getAnyLength(data) {
	        if (!data)
	            return 0;
	        let key = "";
	        let count = 0;
	        for (key in data) {
	            count++;
	        }
	        return count;
	    }
	    static setPingpongAni(target, goArg, backArg, tweenTime, ease, delay, coverBefore = true, autoRecover = true) {
	        this.backArg = backArg;
	        Laya.Tween.to(target, goArg, tweenTime, ease, Laya.Handler.create(this, this.backAni), delay, coverBefore, autoRecover);
	    }
	    static backAni() {
	    }
	    static listHandRec(list) {
	        if (!list.renderHandler)
	            return;
	        list.renderHandler.recover();
	        list.renderHandler = null;
	    }
	    static copyTxt(txt, alert = true) {
	        try {
	            var oInput = document.createElement("input");
	            oInput.value = txt;
	            document.body.appendChild(oInput);
	            oInput.select();
	            var ret = document.execCommand("Copy");
	            if (alert) {
	                if (ret) {
	                    FloatMsgUtil.start("10080061");
	                }
	                else {
	                    FloatMsgUtil.start("10080062");
	                }
	            }
	            document.body.removeChild(oInput);
	            return ret;
	        }
	        catch (e) {
	            return false;
	        }
	    }
	    static clearImage(image) {
	        if (!image)
	            return;
	        if (!image.skin)
	            return;
	        Laya.loader.clearRes(image.skin);
	        image.skin = null;
	    }
	    static random(list) {
	        if (list.length === 0)
	            return null;
	        let randomIndex = Math.floor(Math.random() * list.length);
	        return list[randomIndex];
	    }
	    static randomWithWeight(list) {
	        if (list.length === 0)
	            return null;
	        let total = 0;
	        list.forEach(item => total += item.rate);
	        let random = Math.random() * total;
	        let current = 0;
	        for (let item of list) {
	            current += item.rate;
	            if (current >= random) {
	                return item.data;
	            }
	        }
	        return null;
	    }
	    static deepClone(o) {
	        if (typeof o === 'string' || typeof o === 'number' || typeof o === 'boolean' || typeof o === 'undefined') {
	            return o;
	        }
	        else if (Array.isArray(o)) {
	            let _arr = [];
	            o.forEach(item => { _arr.push(item); });
	            return _arr;
	        }
	        else if (typeof o === 'object') {
	            if (o === null) {
	                return null;
	            }
	            else {
	                let _o = {};
	                for (let key in o) {
	                    _o[key] = this.deepClone(o[key]);
	                }
	                return _o;
	            }
	        }
	    }
	    static boundsContains(bounds, x, y) {
	        let min = bounds.getMin();
	        let max = bounds.getMax();
	        if (x > min.x && y > min.y && x < max.x && y < max.y) {
	            return true;
	        }
	        return false;
	    }
	    static getChildrens(root, type, out) {
	        for (let i = 0; i < root.numChildren; i++) {
	            let item = root.getChildAt(i);
	            if (item instanceof type) {
	                out.push(item);
	            }
	            this.getChildrens(item, type, out);
	        }
	    }
	    static getMeshRenders(root, out) {
	        for (let i = 0; i < root.numChildren; i++) {
	            let item = root.getChildAt(i);
	            if (item instanceof Laya.MeshSprite3D) {
	                out.push(item.meshRenderer);
	            }
	            this.getMeshRenders(item, out);
	        }
	    }
	    static getUnlitMaterials(root, out) {
	        for (let i = 0; i < root.numChildren; i++) {
	            let item = root.getChildAt(i);
	            if (item instanceof Laya.MeshSprite3D) {
	                out.push(item.meshRenderer.material);
	            }
	            this.getUnlitMaterials(item, out);
	        }
	    }
	}
	GameUtil.N = 0.7;

	;
	class SyncObj {
	    constructor() {
	        this._data = {};
	    }
	    static create() {
	        return Laya.Pool.getItemByClass("SyncObj", SyncObj);
	    }
	    static createFromSyncData(data) {
	        let obj = SyncObj.create();
	        obj.deepCopy(data);
	        return obj;
	    }
	    static createFromJsonStr(data) {
	        let obj = SyncObj.create();
	        obj.deepCopy(JSON.parse(data));
	        return obj;
	    }
	    static createFromSyncObj(obj) {
	        let newObj = SyncObj.create();
	        newObj.deepCopy(obj.data);
	        return newObj;
	    }
	    static createFromTypeObject(obj) {
	        let newObj = SyncObj.create();
	        newObj.deepCopy(obj);
	        return newObj;
	    }
	    static serializeFromArray(list) {
	        let obj = SyncObj.create();
	        if (list != null) {
	            for (let i = 0; i < list.length; i++) {
	                obj.setValue(i.toString(), list[i]);
	            }
	        }
	        return obj.data;
	    }
	    static deserializeToArray(data) {
	        let list = [];
	        let keys = Object.keys(data);
	        keys.sort((a, b) => parseInt(a) - parseInt(b)).forEach(key => {
	            list.push(data[key]);
	        });
	        return list;
	    }
	    deepCopy(source) {
	        this._data = {};
	        for (let key in source) {
	            let value = source[key];
	            let typeVal = typeof value;
	            if (typeVal === "object") {
	                let gGSyncObject = SyncObj.createFromTypeObject(value);
	                this._data[key] = gGSyncObject._data;
	            }
	            else if (typeVal === "boolean" || typeVal === "number" || typeVal === "string") {
	                this._data[key] = value;
	            }
	            else {
	                console.warn("SaveLoad deepCopy a data: type is unvalid!!!", typeVal, source);
	            }
	        }
	    }
	    get data() {
	        return this._data;
	    }
	    getKeys() {
	        return Object.keys(this._data);
	    }
	    getCount() {
	        return this.getKeys().length;
	    }
	    isEmpty() {
	        return this.getCount() === 0;
	    }
	    hasKey(key) {
	        return this.getValue(key) != null;
	    }
	    clear() {
	        this._data = {};
	    }
	    dispose() {
	        this.clear();
	        Laya.Pool.recover("SyncObj", this);
	    }
	    setValue(key, value) {
	        if (value == null)
	            return;
	        if (typeof value === "object") {
	            this._data[key] = GameUtil.deepClone(value);
	        }
	        else {
	            this._data[key] = value;
	        }
	    }
	    getValue(key) {
	        let val = this._data[key];
	        if (typeof val === "object") {
	            return GameUtil.deepClone(val);
	        }
	        return (val == null) ? null : val;
	    }
	    setValueV3(key, val) {
	        if (val == null)
	            return;
	        let obj = SyncObj.create();
	        obj.setValue("0", parseFloat(val.x.toFixed(5)));
	        obj.setValue("1", parseFloat(val.y.toFixed(5)));
	        obj.setValue("2", parseFloat(val.z.toFixed(5)));
	        this.setValue(key, obj.data);
	    }
	    getValueV3(key) {
	        let val = this.data[key];
	        if (val) {
	            let v3 = new Laya.Vector3();
	            v3.x = val[0];
	            v3.y = val[1];
	            v3.z = val[2];
	            return v3;
	        }
	        return null;
	    }
	    setSyncObj(key, value) {
	        if (value == null)
	            return;
	        this._data[key] = GameUtil.deepClone(value._data);
	    }
	    getSyncObj(key) {
	        let value = this.getValue(key);
	        if (value != null) {
	            if (typeof value === "object") {
	                let result = SyncObj.create();
	                result.deepCopy(value);
	                return result;
	            }
	            else {
	                return null;
	            }
	        }
	        return new SyncObj();
	    }
	    setValueISL(key, obj) {
	        if (obj == null)
	            return;
	        this.setSyncObj(key, obj.export());
	    }
	    getValueISL(key, cls) {
	        let value = this._data[key];
	        if (value) {
	            let nISL = new cls();
	            nISL.import(SyncObj.createFromSyncData(value));
	            return nISL;
	        }
	        return null;
	    }
	    setValueISLArr(key, list) {
	        if (list == null)
	            return;
	        let obj = SyncObj.create();
	        list.forEach((item, index) => {
	            obj.setValueISL(index.toString(), item);
	        });
	        this.setSyncObj(key, obj);
	    }
	    getValueISLArr(key, cls) {
	        let value = this._data[key];
	        if (value) {
	            let arr = [];
	            for (let key in value) {
	                if (value[key]) {
	                    let nISL = new cls();
	                    nISL.import(SyncObj.createFromSyncData(value[key]));
	                    arr[key] = nISL;
	                }
	                else {
	                    arr[key] = null;
	                }
	            }
	            return arr;
	        }
	        return null;
	    }
	    setValueISLDict(key, dict) {
	        if (dict == null)
	            return;
	        let obj = SyncObj.create();
	        for (let key2 in dict) {
	            let value = dict[key2];
	            obj.setValueISL(key2, value);
	        }
	        this.setSyncObj(key, obj);
	    }
	    getValueISLDict(key, cls) {
	        let value = this._data[key];
	        if (value) {
	            let dict = {};
	            for (let key in value) {
	                if (value[key]) {
	                    let nISL = new cls();
	                    nISL.import(SyncObj.createFromSyncData(value[key]));
	                    dict[key] = nISL;
	                }
	                else {
	                    dict[key] = null;
	                }
	            }
	            return dict;
	        }
	        return null;
	    }
	    GetUnorderedList() {
	        let list = [];
	        for (let key in this.data) {
	            let value = this.data[key];
	            if (typeof value === "object") {
	                let result = SyncObj.create();
	                result.deepCopy(value);
	                list[key] = result;
	            }
	            else {
	                console.error("SyncObj GetUnorderedList: tried to get an invalid nested object!");
	            }
	        }
	        return list;
	    }
	    parse(json) {
	        try {
	            this._data = JSON.parse(json);
	        }
	        catch (error) {
	            console.error("[SyncObj] Failed to read from json: " + json);
	            this._data = {};
	        }
	    }
	    stringify() {
	        return JSON.stringify(this._data);
	    }
	    applyPatch(patch) {
	    }
	}

	class SaveLoadConst {
	}
	SaveLoadConst.MONSTERS = "Monsters";
	SaveLoadConst.METRICS = "Metrics";
	SaveLoadConst.HOME_STATS = "_homeStats";
	SaveLoadConst.BRING_HOME = "_BringHome";
	SaveLoadConst.WORLD_MAP = "WorldMap";
	SaveLoadConst.PLAYER_EXPAND_DATA = "PlayerExpandData";
	SaveLoadConst.TUTORIAL = "Tutorial";
	SaveLoadConst.EGG_BANK = "EggBank";
	SaveLoadConst.GOAL = "Goal";
	SaveLoadConst.LEVEL = "Level";
	SaveLoadConst.LEVE_STATS = "LevelStats";
	SaveLoadConst.Level_Victory_Chest = "LevelVictoryChest";
	SaveLoadConst.DRAGON_BOOK = "DragonBook";
	SaveLoadConst.SHOP = "Shop";
	SaveLoadConst.DAILY_PASS = "DailyPass";
	SaveLoadConst.SHOP_LIMITED_ITEM = "ShopLimitedItem";
	SaveLoadConst.TIMED_SHOP_ENTRY = "TimedShopEntry";
	SaveLoadConst.DAILY_QUEST = "DailyQuest";
	SaveLoadConst.CLOCK = "Clock";
	SaveLoadConst.RANGE = "Range";
	SaveLoadConst.BOARD = "Board";
	SaveLoadConst.CAMERA = "Camera";
	SaveLoadConst.OWNED_MONSTERS = "OwnedMonsters";
	SaveLoadConst.OBJECT_DEF_STATE = "ObjectDefState";
	SaveLoadConst.BAG = "Bag";
	SaveLoadConst.CLOUD_STATE = "CloudState";
	SaveLoadConst.ATLAS = "Atlas";
	SaveLoadConst.FIRSTCHARGE = "FirstCharge";
	SaveLoadConst.BUYDIAMONDS = "BuyDiamonds";
	SaveLoadConst.SIGNIN = "SignIn";
	SaveLoadConst.PURCHASEHISTORY = "PurchaseHistory";
	SaveLoadConst.SETTING = "Setting";
	SaveLoadConst.ACTIVITY = "Activity";
	SaveLoadConst.coreList = [
	    SaveLoadConst.OWNED_MONSTERS,
	    SaveLoadConst.PLAYER_EXPAND_DATA,
	    SaveLoadConst.OBJECT_DEF_STATE,
	    SaveLoadConst.SETTING,
	    SaveLoadConst.WORLD_MAP
	];

	class SL_Range {
	    constructor() {
	        this.id = SaveLoadConst.RANGE;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.min);
	        obj.setValue("1", this.max);
	        return obj;
	    }
	    import(data) {
	        this.min = data.getValue("0");
	        this.max = data.getValue("1");
	    }
	}

	class SL_Clock {
	    constructor() {
	        this.id = SaveLoadConst.CLOCK;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.timeLeft);
	        obj.setValue("1", this.originalTime);
	        if (this.timeRange) {
	            obj.setValueISL("2", this.timeRange);
	        }
	        return obj;
	    }
	    import(data) {
	        this.timeLeft = data.getValue("0");
	        this.originalTime = data.getValue("1");
	        this.exists_timeRange = data.hasKey("2");
	        if (this.exists_timeRange) {
	            this.timeRange = data.getValueISL("2", SL_Range);
	        }
	    }
	}

	class MathUtil {
	    static getRadians(p1, p2) {
	        return Math.atan2(p2.y - p1.y, p2.x - p1.x);
	    }
	    static getRadians1(px1, py1, px2, py2) {
	        return Math.atan2(py2 - py1, px2 - px1);
	    }
	    static getAngle(radians) {
	        return radians * this.ONE_RADIANS;
	    }
	    static getAngleByPos(p1, p2) {
	        return MathUtil.getAngle(MathUtil.getRadians(p1, p2));
	    }
	    static getAngleByXY(px1, py1, px2, py2) {
	        return MathUtil.getAngle(MathUtil.getRadians1(px1, py1, px2, py2));
	    }
	    static getRadiansByXY(x1, y1, x2, y2) {
	        return Math.atan2(y2 - y1, x2 - x1);
	    }
	    static randNum(min, max) {
	        return min + Math.random() * (max - min);
	    }
	    static randInt(min, max) {
	        return this.randNum(min, max + 0.99999) >> 0;
	    }
	    static coinFlip() {
	        return this.randNum(0, 1) > 0.5;
	    }
	    static randSignFlip(f) {
	        if (this.coinFlip()) {
	            return f;
	        }
	        return 0 - f;
	    }
	    static randElement(list) {
	        if (list == null || list.length == 0) {
	            return null;
	        }
	        return list[this.randInt(0, list.length - 1)];
	    }
	    static randLength(dir, length, min, max) {
	        if (dir == 1) {
	            var left = length - min;
	            return left + min + Math.random() * (max - min);
	        }
	        else {
	            var left = min - length;
	            return left - min + Math.random() * (min - max);
	        }
	    }
	    static chance(value) {
	        return Math.random() < value;
	    }
	    static random(value) {
	        return Math.floor(Math.random() * value);
	    }
	    static getDistance(px1, py1, px2, py2) {
	        return Math.sqrt((py2 - py1) * (py2 - py1) + (px2 - px1) * (px2 - px1));
	    }
	    static equalRange(px1, py1, px2, py2, range) {
	        var x1 = px1 / range >> 0;
	        var x2 = px2 / range >> 0;
	        var y1 = py1 / range >> 0;
	        var y2 = py2 / range >> 0;
	        return x1 == x2 && y1 == y2;
	    }
	    static trunNums(arr) {
	        for (var i = 0; i < arr.length; i++) {
	            arr[i] = Number(arr[i]);
	        }
	        return arr;
	    }
	    static isInCube(px1, py1, px2, py2, range) {
	        var startx = px1 - range;
	        var starty = py1 - range;
	        var endx = px1 + range;
	        var endy = py1 + range;
	        return px2 >= startx && px2 <= endx && py2 >= starty && py2 <= endy;
	    }
	    static getMaxDis(px1, py1, px2, py2) {
	        var disx = Math.abs(px1 - px2);
	        var disy = Math.abs(py1 - py2);
	        return disx > disy ? disx : disy;
	    }
	    static isInCircle(px1, py1, px2, py2, radius) {
	        var distance = this.getDistance(px1, py1, px2, py2);
	        if (distance <= radius) {
	            return true;
	        }
	        return false;
	    }
	    static isInRect(tx, ty, sx, sy, ex, ey, a, b) {
	        tx;
	        var dist = this.shadowDist(sx, sy, tx, ty, ex, ey);
	        if (dist <= 0 || dist >= b) {
	            return false;
	        }
	        var radias = this.radianBetween(sx, sy, tx, ty, ex, ey);
	        if (this.getDistance(sx, sy, tx, ty) * Math.sin(radias) < a) {
	            return true;
	        }
	        return false;
	    }
	    static isInUmbrella(tx, ty, sx, sy, ex, ey, len, angle) {
	        var dis = this.getDistance(sx, sy, tx, ty);
	        if (dis > len)
	            return false;
	        var radias = this.radianBetween(sx, sy, tx, ty, ex, ey);
	        var radAng = Math.PI / 180 * angle;
	        if (radias < radAng) {
	            return true;
	        }
	        return false;
	    }
	    static radianBetween(x, y, tx, ty, px, py) {
	        var nx = px - x;
	        var ny = py - y;
	        var length = Math.sqrt(nx * nx + ny * ny);
	        if (length != 1) {
	            nx = nx / length;
	            ny = ny / length;
	        }
	        var tnx = tx - x;
	        var tny = ty - y;
	        length = Math.sqrt(tnx * tnx + tny * tny);
	        if (length != 1) {
	            tnx = tnx / length;
	            tny = tny / length;
	        }
	        return Math.acos(nx * tnx + ny * tny);
	    }
	    static shadowDist(x, y, tx, ty, px, py) {
	        return ((px - x) * (tx - x) + (py - y) * (ty - y)) / this.getDistance(x, y, px, py);
	    }
	    static clamp(value, min, max) {
	        return Math.max(min, Math.min(max, value));
	    }
	    static getRemainder(f) {
	        f = Math.abs(f);
	        return f - Math.floor(f);
	    }
	    static nanCheck(vec) {
	        let num = vec.x;
	        let num2 = vec.y;
	        let num3 = vec.z;
	        let flag = false;
	        if (Number.isNaN(num)) {
	            num = 0;
	            flag = true;
	        }
	        if (Number.isNaN(num2)) {
	            num2 = 0;
	            flag = true;
	        }
	        if (Number.isNaN(num3)) {
	            num3 = 0;
	            flag = true;
	        }
	        if (flag) {
	            console.log("Found vector with NaN or Infinity:" + vec);
	            vec.setValue(num, num2, num3);
	        }
	    }
	    static magnitude(x, y) {
	        return Math.sqrt(x * x + y * y);
	    }
	    static magnitudeV3(v) {
	        return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	    }
	    static magnitudeMinus(x1, y1, x2, y2) {
	        let x = x1 - x2;
	        let y = y1 - y2;
	        let ret = MathUtil.magnitude(x, y);
	        return ret;
	    }
	    static normalize(x, y) {
	        let ret = [0, 0];
	        var len = x * x + y * y;
	        if (len > 0) {
	            len = 1 / Math.sqrt(len);
	            ret[0] = x * len;
	            ret[1] = y * len;
	        }
	        return ret;
	    }
	    static randomizedListCopy(list) {
	        let list2 = list.concat();
	        let list3 = [];
	        while (list2.length > 0) {
	            let index = this.randInt(0, list2.length - 1);
	            list3.push(list2[index]);
	            list2.splice(index, 1);
	        }
	        return list3;
	    }
	}
	MathUtil.INT_MAX_VALUE = 2147483647;
	MathUtil.ONE_RADIANS = 180 / Math.PI;

	class Range {
	    constructor(min, max) {
	        this.min = min;
	        this.max = max;
	    }
	    get span() {
	        return Math.abs(this.max - this.min);
	    }
	    get midpoint() {
	        return this.min + (this.max - this.min) / 2;
	    }
	    random() {
	        return MathUtil.randNum(this.min, this.max);
	    }
	    getValue(per) {
	        return (this.max - this.min) * per + this.min;
	    }
	    getPercent(val) {
	        return (val - this.min) / this.span;
	    }
	    clampMinAt(clamp) {
	        if (this.min < clamp) {
	            this.min = clamp;
	        }
	    }
	    contains(f) {
	        return f >= this.min && f <= this.max;
	    }
	    clampF(f) {
	        if (f < this.min) {
	            return this.min;
	        }
	        if (f > this.max) {
	            return this.max;
	        }
	        return f;
	    }
	    toString() {
	        return "Range:(" + this.min + "," + this.max + ")";
	    }
	    getSaveDataObject() {
	        let saveData_RangeF = new SL_Range();
	        saveData_RangeF.min = this.min;
	        saveData_RangeF.max = this.max;
	        return saveData_RangeF;
	    }
	    static create(arr) {
	        if (!arr)
	            return null;
	        let min = arr[0];
	        let max = arr.length > 1 ? arr[1] : min;
	        return new Range(min, max);
	    }
	}

	class Clock {
	    constructor(seconds = 0) {
	        this._timeLeft = 0;
	        this._originalTime = 0;
	        this._timeLeft = seconds;
	        this._originalTime = seconds;
	    }
	    get timeLeft() {
	        return this._timeLeft;
	    }
	    get originalTime() {
	        return this._originalTime;
	    }
	    get done() {
	        return this._timeLeft <= 0;
	    }
	    get going() {
	        return this._timeLeft > 0;
	    }
	    get percentElapsed() {
	        return (this._originalTime - this._timeLeft) / this._originalTime;
	    }
	    get percentLeft() {
	        return this._timeLeft / this._originalTime;
	    }
	    set(newLifetime) {
	        this._timeLeft = newLifetime;
	        this._originalTime = this._timeLeft;
	    }
	    setOriginalTime(newLifetime) {
	        this._originalTime = newLifetime;
	        if (this._timeLeft > this._originalTime) {
	            this._timeLeft = this._originalTime;
	        }
	    }
	    setRange(range) {
	        this._timeRange = range;
	        this._timeLeft = range.random();
	        this._originalTime = this._timeLeft;
	    }
	    update(deltaTime, clamp = false) {
	        this._timeLeft -= deltaTime;
	        if (clamp) {
	            if (deltaTime > 0 && this._timeLeft < 0) {
	                this._timeLeft = 0;
	            }
	            else if (deltaTime < 0 && this._timeLeft > this._originalTime) {
	                this._timeLeft = this._originalTime;
	            }
	        }
	    }
	    addTime(deltaTime) {
	        this._timeLeft += deltaTime;
	    }
	    resetToPercent(perLeft) {
	        this._timeLeft = this._originalTime * perLeft;
	    }
	    reset() {
	        if (this._timeRange) {
	            this._timeLeft = this._timeRange.random();
	            this._originalTime = this._timeLeft;
	        }
	        else {
	            this._timeLeft = this._originalTime;
	        }
	    }
	    invert() {
	        this._timeLeft = this._originalTime - this._timeLeft;
	    }
	    timeTravelTo(updatedTime) {
	        this._timeLeft = updatedTime;
	    }
	    toString() {
	        return "Clock:" + this._timeLeft;
	    }
	    getDisplayStr(numSec = 3) {
	        return Clock.getDisplayStr(this._timeLeft, false, numSec);
	    }
	    static getDisplayStr(totalSeconds, addLeadingZeros = false, numSec = 3) {
	        if (numSec < 1 || numSec > 3) {
	            console.log("Clock.getDisplayStr() only handles 1-3 significant sections. You are asking for: " + numSec);
	            return;
	        }
	        let hours = "H";
	        let minutes = "M";
	        let seconds = "S";
	        let num = Math.abs(totalSeconds);
	        let num2 = num / 3600 >> 0;
	        num -= num2 * 3600;
	        let num3 = num / 60 >> 0;
	        num -= num3 * 60;
	        let num4 = num;
	        let text = num2 + hours;
	        let text2 = num3 + minutes;
	        if (num3 < 10 && addLeadingZeros) {
	            text2 = "0" + text2;
	        }
	        let text3 = num4 + seconds;
	        if (num4 < 10 && addLeadingZeros) {
	            text3 = "0" + text3;
	        }
	        if (num2 == 0 && num3 == 0) {
	            return text3;
	        }
	        if (num2 == 0) {
	            if (numSec == 1) {
	                num3++;
	                text2 = num3 + minutes;
	                if (num3 < 10 && addLeadingZeros) {
	                    text2 = "0" + text2;
	                }
	                return text2;
	            }
	            return text2 + " " + text3;
	        }
	        switch (numSec) {
	            case 1:
	                num2++;
	                return num2 + hours;
	            case 2:
	                num3++;
	                text2 = num3 + minutes;
	                if (num3 < 10 && addLeadingZeros) {
	                    text2 = "0" + text2;
	                }
	                return text + " " + text2;
	            default:
	                return text + " " + text2 + " " + text3;
	        }
	    }
	    static getSeconds(hours, minutes, seconds) {
	        return hours * 3600 + minutes + 60 + seconds;
	    }
	    getSaveDataObject() {
	        let saveData_Timer = new SL_Clock();
	        saveData_Timer.timeLeft = this._timeLeft;
	        saveData_Timer.originalTime = this._originalTime;
	        if (this._timeRange != null) {
	            saveData_Timer.exists_timeRange = true;
	            saveData_Timer.timeRange = this._timeRange.getSaveDataObject();
	        }
	        return saveData_Timer;
	    }
	    initFromSaveData(data) {
	        this._timeLeft = data.timeLeft;
	        this._originalTime = data.originalTime;
	        if (data.exists_timeRange) {
	            this._timeRange = new Range(data.timeRange.min, data.timeRange.max);
	        }
	    }
	}

	class ChanceBagPair {
	    constructor(item, weight) {
	        this.item = item;
	        this.weight = weight;
	    }
	}

	class ChanceBag {
	    constructor() {
	        this.items = [];
	        this.totalWeight = 0;
	    }
	    get count() {
	        return this.items.length;
	    }
	    get hasElements() {
	        return this.items.length > 0;
	    }
	    addPair(...pairs) {
	        for (let pair of pairs) {
	            this.add(pair.item, pair.weight);
	        }
	    }
	    add(item, weight) {
	        this.items.push(new ChanceBagPair(item, weight));
	        this.totalWeight += weight;
	    }
	    remove(pair) {
	        ArrayUtil.remove(this.items, pair);
	        this.totalWeight -= pair.weight;
	    }
	    random() {
	        let chanceBagPair = this.randomPair();
	        if (chanceBagPair == null) {
	            return null;
	        }
	        return chanceBagPair.item;
	    }
	    randomPair() {
	        let num = MathUtil.randNum(0, this.totalWeight);
	        let num2 = 0;
	        for (let item of this.items) {
	            num2 += item.weight;
	            if (num <= num2) {
	                return item;
	            }
	        }
	        return null;
	    }
	}

	class CompBlinker extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.blinkDuration = new Clock(0.2);
	        this.updatesToFirstUnblink = 3;
	    }
	    static init() {
	        let v = new ChanceBag();
	        v.add(this.blinkTimeShort, 0.3);
	        v.add(this.blinkTimeMedium, 0.5);
	        v.add(this.blinkTimeLong, 0.7);
	        this.blinkChances = v;
	    }
	    getEye() {
	        let go = this.owner.getChildByName("Body").getChildByName("EyeClose");
	        return go;
	    }
	    onStart() {
	        this.eyeGo = this.getEye();
	        if (this.eyeGo == null) {
	            this.destroy();
	            return;
	        }
	        this.blinkDelay = new Clock();
	        this.blinkDelay.setRange(CompBlinker.blinkTimeLong);
	    }
	    tryFirstUnblink() {
	        this.updatesToFirstUnblink--;
	        if (this.updatesToFirstUnblink <= 0) {
	            this.firstUnblinkHappened = true;
	            this.unblink();
	        }
	    }
	    onUpdate() {
	        if (!this.firstUnblinkHappened) {
	            this.tryFirstUnblink();
	            return;
	        }
	        this.blinkDelay.update(Glob.deltaTime);
	        if (this.blinkDelay.going) {
	            return;
	        }
	        if (this.blinking) {
	            this.blinkDuration.update(Glob.deltaTime);
	            if (!this.blinkDuration.going) {
	                this.unblink();
	            }
	        }
	        else {
	            this.blink();
	        }
	    }
	    blink() {
	        if (this.eyeGo) {
	            this.eyeGo.active = true;
	        }
	        this.blinking = true;
	    }
	    unblink() {
	        if (this.eyeGo) {
	            this.eyeGo.active = false;
	        }
	        this.blinkDuration.reset();
	        let range = CompBlinker.blinkChances.random();
	        if (!range)
	            range = new Range(0, 0);
	        this.blinkDelay.setRange(range);
	        this.blinking = false;
	    }
	}
	CompBlinker.blinkTimeShort = new Range(0.1, 0.2);
	CompBlinker.blinkTimeMedium = new Range(3, 5);
	CompBlinker.blinkTimeLong = new Range(10, 12);

	class CompNest extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.eggs = [];
	    }
	    onStart() {
	        let pref = this.owner.parent;
	        let thing = pref.thing;
	        for (let i = 1; i < 4; i++) {
	            let egg = pref.sp.getChildByName("Egg_" + i);
	            if (egg) {
	                this.eggs.push(egg);
	            }
	        }
	        if (thing != null && thing.hasTapsAvailable) {
	            this.updateEgg(thing.tapsLeft);
	        }
	    }
	    onDisable() {
	        this.updateEgg(10);
	    }
	    tapped(eggsLeft) {
	        this.updateEgg(eggsLeft);
	    }
	    updateEgg(v) {
	        let num = 0;
	        for (let gameObject of this.eggs) {
	            if (v > num) {
	                gameObject.active = true;
	                num++;
	            }
	            else {
	                gameObject.active = false;
	            }
	        }
	    }
	}

	class Pref extends Laya.Sprite3D {
	    constructor(n) {
	        super();
	        this.isDispose = false;
	        this.resetBodyScale = false;
	        this.nid = n;
	        this.atlas = PrefMgr.getUrl(n);
	        this.init();
	        ScriptCfg.addScript1(this, this.nid);
	    }
	    init() {
	        Laya.loader.create(this.atlas, Laya.Handler.create(this, this.onLoaded));
	    }
	    onLoaded() {
	        var sp = Laya.Loader.getRes(this.atlas);
	        if (!sp) {
	            return;
	        }
	        this.sp = sp.clone();
	        this.sp.transform.localPosition = Vector3.ZERO;
	        Pref.addScripts(this);
	        this.addChild(this.sp);
	        if (this.loadedHand) {
	            this.loadedHand.run();
	        }
	    }
	    dispose() {
	        if (this.isDispose)
	            return;
	        this.active = true;
	        this.isDispose = true;
	        this.loadedHand = null;
	        this.thing = null;
	        this.transform.localPosition = Vector3.ZERO;
	        this.transform.localScale = Vector3.ONE;
	        if (this.resetBodyScale) {
	            if (this.sp) {
	                let body = this.sp.getChildByName("Body");
	                if (body && body.transform.localScaleX != 1) {
	                    this.sp.transform.localScaleX = 1;
	                }
	            }
	            this.resetBodyScale = false;
	        }
	        this.removeSelf();
	        PrefMgr.rec(this);
	    }
	    clear() {
	        super.destroy(true);
	    }
	    destroy(destroyChild) {
	        this.dispose();
	    }
	    static addScripts(pref) {
	        if (pref.nid.substring(0, 5) == "Long_") {
	            pref.sp.addComponent(CompBlinker);
	        }
	        else if (pref.nid.substring(0, 5) == "Nest_") {
	            pref.sp.addComponent(CompNest);
	        }
	        ScriptCfg.addScript2(pref.sp, pref.nid);
	    }
	}

	class PrefMgr {
	    constructor() {
	    }
	    static get(nid) {
	        var avas = this.map[nid];
	        if (!avas) {
	            avas = [];
	            this.map[nid] = avas;
	        }
	        var ava;
	        if (avas.length == 0) {
	            ava = new Pref(nid);
	        }
	        else {
	            ava = avas.shift();
	        }
	        if (!this.refMap[nid]) {
	            this.refMap[nid] = 0;
	        }
	        this.refMap[nid]++;
	        ava.isDispose = false;
	        return ava;
	    }
	    static rec(avatar) {
	        if (avatar == null)
	            return;
	        var avas = this.map[avatar.nid];
	        if (avas) {
	            avas.push(avatar);
	        }
	        if (this.refMap[avatar.nid]) {
	            this.refMap[avatar.nid]--;
	        }
	    }
	    static clear() {
	        for (var i in this.refMap) {
	            if (this.refMap[i] > 0)
	                continue;
	            var avas = this.map[i];
	            if (avas.length == 0)
	                continue;
	            var ava = avas[0];
	            var atlas = ava.atlas;
	            Laya.loader.clearRes(atlas);
	            for (var j of avas) {
	                j.clear();
	            }
	            avas.length = 0;
	        }
	    }
	    static getUrl(nid) {
	        return "res/utd/" + nid + ".lh";
	    }
	}
	PrefMgr.map = {};
	PrefMgr.refMap = {};

	class SocketMgr extends MsgCenter {
	    constructor() {
	        super();
	        this.reqestMap = {};
	        this.handleMap = {};
	        this.isLogined = false;
	        this.requestID = 1;
	        this.socketCache = new Laya.Byte();
	        this.dataPool = [];
	        this.isDebug = 1;
	        this.ba = new Laya.Byte();
	    }
	    init() {
	        if (!this.socket) {
	            this.bodyBytes = new Laya.Byte();
	            this.socket = new Laya.Socket();
	            this.socket.on(Laya.Event.OPEN, this, this.onConnect);
	            this.socket.on(Laya.Event.ERROR, this, this.onError);
	            this.socket.on(Laya.Event.MESSAGE, this, this.onData);
	            this.socket.on(Laya.Event.CLOSE, this, this.onClose);
	            this.socketCache.endian = Laya.Byte.BIG_ENDIAN;
	            this.ba.endian = Laya.Byte.BIG_ENDIAN;
	            this.bodyBytes.endian = Laya.Byte.BIG_ENDIAN;
	            this.socket.endian = Laya.Byte.BIG_ENDIAN;
	            this.initTimer();
	        }
	    }
	    initTimer() {
	        Laya.timer.loop(SocketMgr.TIMER, this, this.onTimer);
	    }
	    delSocket() {
	        if (this.socket) {
	            this.socket.off(Laya.Event.OPEN, this, this.onConnect);
	            this.socket.off(Laya.Event.ERROR, this, this.onError);
	            this.socket.off(Laya.Event.MESSAGE, this, this.onData);
	            this.socket.off(Laya.Event.CLOSE, this, this.onClose);
	            this.socket.close();
	            this.socket = null;
	            Laya.timer.clear(this, this.onTimer);
	        }
	    }
	    connect(ip, port) {
	        console.log("connecting:" + ip);
	        if (ip.indexOf("ws:") >= 0) {
	            this.socket.connectByUrl(ip);
	        }
	        else if (ip.indexOf("wss:") >= 0) {
	            this.socket.connectByUrl(ip);
	        }
	        else {
	            this.socket.connect(ip, port);
	        }
	    }
	    get connected() {
	        if (this.socket) {
	            return this.socket.connected;
	        }
	        return false;
	    }
	    onConnect(e) {
	        console.log("socket onConnect!");
	        if (this.connectCallBack) {
	            this.connectCallBack.run();
	        }
	    }
	    onError(e) {
	        console.log("socket onError!");
	        if (this.errorCallBack) {
	            this.errorCallBack.run();
	        }
	    }
	    onClose(e) {
	        console.log("socket onClose:" + e.type + "_" + e.code);
	        if (this.closeCallBack) {
	            this.closeCallBack.runWith(e);
	        }
	    }
	    onData(msg) {
	        this.dataPool.push(msg);
	    }
	    onTimer() {
	        var dataLen = this.dataPool.length;
	        if (dataLen <= 0)
	            return;
	        var total = SocketMgr.NUM;
	        if (total > dataLen)
	            total = dataLen;
	        for (var i = 0; i < total; i++) {
	            var msg = this.dataPool[i];
	            this.socketCache.writeArrayBuffer(msg);
	            this.socketCache.pos = 0;
	            this.doMsg();
	        }
	        this.dataPool.splice(0, total);
	    }
	    doMsg() {
	        var bodyBytes = this.bodyBytes;
	        while (this.socketCache.bytesAvailable >= 4) {
	            var len = this.socketCache.readInt32();
	            if (this.socketCache.bytesAvailable >= len) {
	                bodyBytes.clear();
	                var isZip = this.socketCache.readByte();
	                bodyBytes.writeArrayBuffer(this.socketCache.buffer, 5, len);
	                if (isZip == 1) {
	                    var gunzip = new Zlib.Gunzip(new Uint8Array(bodyBytes.buffer));
	                    var outbuffer = gunzip.decompress();
	                    bodyBytes.clear();
	                    bodyBytes.writeArrayBuffer(outbuffer.buffer);
	                }
	                this.socketCache.pos += len;
	                if (!this.socketCache.bytesAvailable) {
	                    this.socketCache.clear();
	                }
	                bodyBytes.pos = 0;
	                var msg = com.proto.CMsg.decode(new Uint8Array(bodyBytes.buffer));
	                if (this.updateServerTime) {
	                    this.updateServerTime.runWith(msg.serverTime);
	                }
	                console.log("server cmd:" + msg.cmd);
	                var handler = this.handleMap[msg.cmd];
	                if (!handler) {
	                    console.warn("unregister cmd:" + msg.cmd);
	                    continue;
	                }
	                handler.hand.call(handler.t, msg.body);
	            }
	            else {
	                this.socketCache.pos -= 4;
	                break;
	            }
	        }
	    }
	    testData() {
	        var mclient = new com.proto.MClient();
	        mclient.reLogin = 0;
	        mclient.channel = 1;
	        mclient.version = "1.0.0";
	        mclient.terminal = "test";
	        mclient.terminalType = "2";
	        var msg = new com.proto.Msg_2001();
	        msg.areaId = 1;
	        msg.client = mclient;
	        msg.operatorId = "1";
	        var w = com.proto.Msg_2001.encode(msg);
	        var cmd = com.proto.CMsg.create();
	        cmd.cmd = 2001;
	        cmd.body = w.finish();
	        this.send(com.proto.CMsg.encode(cmd).finish());
	    }
	    testRecive(cmd, bytes) {
	        var handler = this.handleMap[cmd];
	        if (handler) {
	            handler.hand(handler.t, bytes);
	        }
	    }
	    regHand(handid, hand, thisObj) {
	        if (this.handleMap[handid]) {
	            console.error("严重问题得解决:重复注册socket:" + handid);
	        }
	        this.handleMap[handid] = { id: handid, hand: hand, t: thisObj };
	    }
	    send(data) {
	        if (!this.socket.connected) {
	            return;
	        }
	        var ba = this.ba;
	        ba.clear();
	        var len = data.length;
	        var isZip = 0;
	        if (len > 2000) {
	            isZip = 1;
	            var gzip = new Zlib.Gzip(data);
	            data = gzip.compress();
	        }
	        ba.writeInt32(data.length);
	        ba.writeByte(isZip);
	        ba.writeArrayBuffer(data);
	        this.socket.send(ba.buffer);
	    }
	    clear() {
	        this.socketCache.clear();
	        this.bodyBytes.clear();
	    }
	}
	SocketMgr.TIMER = 33;
	SocketMgr.NUM = 10;

	class SoundMgr extends Singleton {
	    constructor() {
	        super();
	        this.bgmSound = new Laya.Sound();
	        this.sounds = {};
	        this.loadings = {};
	        this.stopFlags = [];
	        this.soundEnable = true;
	        this.counter = 0;
	        this.musicVolume = 1;
	        this.soundVolume = 1;
	        Laya.SoundManager.autoStopMusic = false;
	        Laya.SoundManager.autoReleaseSound = false;
	    }
	    setMusicEnable(v) {
	        if (v) {
	            this.removeStopFlag("enable");
	        }
	        else {
	            this.addStopFlag("enable");
	        }
	    }
	    setSoundEnable(v) {
	        this.soundEnable = v;
	    }
	    addStopFlag(key) {
	        var index = this.stopFlags.indexOf(key);
	        if (index == -1) {
	            this.stopFlags.push(key);
	            if (this.stopFlags.length == 1) {
	                this.stopCurBGM();
	            }
	        }
	    }
	    removeStopFlag(key) {
	        var index = this.stopFlags.indexOf(key);
	        if (index != -1) {
	            this.stopFlags.splice(index, 1);
	            if (!this.stopFlags.length) {
	                this.playCurMusic();
	            }
	        }
	    }
	    playMusic(id) {
	        var self = this;
	        if (!id) {
	            if (self.bgmChannel) {
	                self.bgmChannel.stop();
	                self.bgmChannel = null;
	            }
	            self.curbgmurl = null;
	            return;
	        }
	        var url = "res/sound/" + id + ".wav";
	        if (self.curbgmurl == url) {
	            return;
	        }
	        self.curbgmurl = url;
	        if (self.bgmChannel) {
	            self.bgmChannel.stop();
	            self.bgmChannel = null;
	        }
	        self.playCurMusic();
	    }
	    playMusics(ids) {
	        let id = ids[MathUtil.randInt(0, ids.length - 1)];
	        return this.playMusic(id);
	    }
	    playCurMusic() {
	        var self = this;
	        if (!self.stopFlags.length) {
	            var url = self.curbgmurl;
	            if (!url) {
	                return;
	            }
	            var sound = self.sounds[url];
	            if (sound) {
	                try {
	                    self.bgmChannel = sound.play();
	                    self.bgmChannel.volume = this.musicVolume;
	                }
	                catch (e) {
	                    console.log("playbmgError:" + url);
	                }
	            }
	            else {
	                if (!self.loadings[url]) {
	                    self.loadings[url] = true;
	                    Laya.loader.load(url, Laya.Handler.create(self, self.onBgmLoaded, [url]), null, Laya.Loader.SOUND);
	                }
	            }
	        }
	    }
	    stopCurBGM() {
	        if (this.bgmChannel) {
	            this.bgmChannel.stop();
	            this.bgmChannel = null;
	        }
	    }
	    onBgmLoaded(url) {
	        var sound = Laya.loader.getRes(url);
	        if (sound) {
	            this.sounds[url] = sound;
	            delete this.loadings[url];
	            if (url == this.curbgmurl && !this.stopFlags.length) {
	                try {
	                    this.bgmChannel = sound.play();
	                    this.bgmChannel.volume = this.musicVolume;
	                }
	                catch (e) {
	                    console.log("playBmgError:" + url);
	                }
	            }
	        }
	    }
	    playSound(id) {
	        if (!id) {
	            return;
	        }
	        var self = this;
	        if (!self.soundEnable) {
	            return;
	        }
	        if (self.counter > 3) {
	            return;
	        }
	        var url = ("res/sound/" + id + ".wav");
	        var sound = self.sounds[url];
	        if (sound) {
	            try {
	                var channel = sound.play(0, 1);
	                channel.volume = this.soundVolume;
	                self.counter++;
	                channel.once(Laya.Event.COMPLETE, self, self.onsounded);
	            }
	            catch (e) {
	                console.log("playSoundEffError:" + url);
	            }
	        }
	        else {
	            if (!self.loadings[url]) {
	                self.loadings[url] = true;
	                Laya.loader.load(url, Laya.Handler.create(self, self.onloaded, [url]), null, Laya.Loader.SOUND);
	            }
	        }
	        return channel;
	    }
	    playSounds(ids) {
	        let id = ids[MathUtil.randInt(0, ids.length - 1)];
	        return this.playSound(id);
	    }
	    onloaded(url) {
	        var sound = Laya.loader.getRes(url);
	        if (sound) {
	            delete this.loadings[url];
	            this.sounds[url] = sound;
	            var channel = sound.play(0, 1);
	            channel.volume = this.soundVolume;
	            this.counter++;
	            channel.once(Laya.Event.COMPLETE, this, this.onsounded);
	        }
	    }
	    onsounded() {
	        this.counter--;
	    }
	    killChannel(channel) {
	        if (channel && channel.hasListener(Laya.Event.COMPLETE)) {
	            channel.stop();
	            this.counter--;
	            channel.off(Laya.Event.COMPLETE, this, this.onsounded);
	        }
	    }
	    setMusicVolume(volume) {
	        if (this.bgmChannel) {
	            this.bgmChannel.volume = volume;
	        }
	        this.musicVolume = volume;
	    }
	    setSoundVolume(volume) {
	        this.soundVolume = volume;
	    }
	    hasVolume() {
	        return this.musicVolume > 0 || this.soundVolume > 0;
	    }
	}

	class RangeI extends Range {
	    random() {
	        return MathUtil.randInt(this.min, this.max);
	    }
	    static create(arr) {
	        if (!arr)
	            return null;
	        let min = arr[0];
	        let max = arr.length > 1 ? arr[1] : min;
	        return new RangeI(min, max);
	    }
	}

	var CategoryID;
	(function (CategoryID) {
	    CategoryID[CategoryID["NONE"] = 0] = "NONE";
	    CategoryID[CategoryID["ANY"] = 1] = "ANY";
	    CategoryID[CategoryID["Test"] = 2] = "Test";
	    CategoryID[CategoryID["AlreadyHasWinParticles"] = 3] = "AlreadyHasWinParticles";
	    CategoryID[CategoryID["Bushes"] = 4] = "Bushes";
	    CategoryID[CategoryID["Coins"] = 5] = "Coins";
	    CategoryID[CategoryID["CoinStorage"] = 6] = "CoinStorage";
	    CategoryID[CategoryID["Chest_Red"] = 7] = "Chest_Red";
	    CategoryID[CategoryID["Chest_Nature"] = 8] = "Chest_Nature";
	    CategoryID[CategoryID["Chest_Crystal"] = 9] = "Chest_Crystal";
	    CategoryID[CategoryID["Chest_Purple"] = 10] = "Chest_Purple";
	    CategoryID[CategoryID["Chest_SuperNest"] = 11] = "Chest_SuperNest";
	    CategoryID[CategoryID["Chest_MegaNest"] = 12] = "Chest_MegaNest";
	    CategoryID[CategoryID["Chest_ValueTest"] = 13] = "Chest_ValueTest";
	    CategoryID[CategoryID["Clouds"] = 14] = "Clouds";
	    CategoryID[CategoryID["DeadPlants"] = 15] = "DeadPlants";
	    CategoryID[CategoryID["DeadTrees"] = 16] = "DeadTrees";
	    CategoryID[CategoryID["DemonGates"] = 17] = "DemonGates";
	    CategoryID[CategoryID["Dragons"] = 18] = "Dragons";
	    CategoryID[CategoryID["DragonPortals"] = 19] = "DragonPortals";
	    CategoryID[CategoryID["DragonTrees"] = 20] = "DragonTrees";
	    CategoryID[CategoryID["Ducks"] = 21] = "Ducks";
	    CategoryID[CategoryID["Eggs"] = 22] = "Eggs";
	    CategoryID[CategoryID["EggBankDropPremium"] = 23] = "EggBankDropPremium";
	    CategoryID[CategoryID["EggBankDropRare"] = 24] = "EggBankDropRare";
	    CategoryID[CategoryID["EggChests"] = 25] = "EggChests";
	    CategoryID[CategoryID["Fruit"] = 26] = "Fruit";
	    CategoryID[CategoryID["FruitTrees"] = 27] = "FruitTrees";
	    CategoryID[CategoryID["FloatingLifeOrbs"] = 28] = "FloatingLifeOrbs";
	    CategoryID[CategoryID["Grass"] = 29] = "Grass";
	    CategoryID[CategoryID["HealingStatues"] = 30] = "HealingStatues";
	    CategoryID[CategoryID["HideLootInfoButtonInBuyConf"] = 31] = "HideLootInfoButtonInBuyConf";
	    CategoryID[CategoryID["LifeFlowers"] = 32] = "LifeFlowers";
	    CategoryID[CategoryID["LifeFlowerSeeds"] = 33] = "LifeFlowerSeeds";
	    CategoryID[CategoryID["LifeParticles"] = 34] = "LifeParticles";
	    CategoryID[CategoryID["LifeTrees"] = 35] = "LifeTrees";
	    CategoryID[CategoryID["LifelessRocks"] = 36] = "LifelessRocks";
	    CategoryID[CategoryID["LifeOrbs"] = 37] = "LifeOrbs";
	    CategoryID[CategoryID["LivingStones"] = 38] = "LivingStones";
	    CategoryID[CategoryID["Lvl1Dragons"] = 39] = "Lvl1Dragons";
	    CategoryID[CategoryID["Lvl2Dragons"] = 40] = "Lvl2Dragons";
	    CategoryID[CategoryID["Lvl3Dragons"] = 41] = "Lvl3Dragons";
	    CategoryID[CategoryID["Lvl4Dragons"] = 42] = "Lvl4Dragons";
	    CategoryID[CategoryID["Lvl7Dragons"] = 43] = "Lvl7Dragons";
	    CategoryID[CategoryID["Lvl8Dragons"] = 44] = "Lvl8Dragons";
	    CategoryID[CategoryID["Lvl9Dragons"] = 45] = "Lvl9Dragons";
	    CategoryID[CategoryID["Lvl10Dragons"] = 46] = "Lvl10Dragons";
	    CategoryID[CategoryID["LootOrbs"] = 47] = "LootOrbs";
	    CategoryID[CategoryID["MonsterHouse"] = 48] = "MonsterHouse";
	    CategoryID[CategoryID["MonsterIdol"] = 49] = "MonsterIdol";
	    CategoryID[CategoryID["Mountains"] = 50] = "Mountains";
	    CategoryID[CategoryID["Mushrooms"] = 51] = "Mushrooms";
	    CategoryID[CategoryID["MushroomCaps"] = 52] = "MushroomCaps";
	    CategoryID[CategoryID["MysteryEggs"] = 53] = "MysteryEggs";
	    CategoryID[CategoryID["Nests"] = 54] = "Nests";
	    CategoryID[CategoryID["NestVaults"] = 55] = "NestVaults";
	    CategoryID[CategoryID["NormalFallenStars"] = 56] = "NormalFallenStars";
	    CategoryID[CategoryID["NotInEvents"] = 57] = "NotInEvents";
	    CategoryID[CategoryID["PetrifiedZomblins"] = 58] = "PetrifiedZomblins";
	    CategoryID[CategoryID["PrismFlowers"] = 59] = "PrismFlowers";
	    CategoryID[CategoryID["Riches"] = 60] = "Riches";
	    CategoryID[CategoryID["Seeds"] = 61] = "Seeds";
	    CategoryID[CategoryID["StarterBundle_1"] = 62] = "StarterBundle_1";
	    CategoryID[CategoryID["StoneBricks"] = 63] = "StoneBricks";
	    CategoryID[CategoryID["StoneStorage"] = 64] = "StoneStorage";
	    CategoryID[CategoryID["TapOnDeadDrop"] = 65] = "TapOnDeadDrop";
	    CategoryID[CategoryID["TimedChests"] = 66] = "TimedChests";
	    CategoryID[CategoryID["Totems"] = 67] = "Totems";
	    CategoryID[CategoryID["TreasureChests"] = 68] = "TreasureChests";
	    CategoryID[CategoryID["MoonChests"] = 69] = "MoonChests";
	    CategoryID[CategoryID["GoldChests"] = 70] = "GoldChests";
	    CategoryID[CategoryID["DangerousChests"] = 71] = "DangerousChests";
	    CategoryID[CategoryID["OccultChests"] = 72] = "OccultChests";
	    CategoryID[CategoryID["SpectralChests"] = 73] = "SpectralChests";
	    CategoryID[CategoryID["Wonders"] = 74] = "Wonders";
	    CategoryID[CategoryID["Wood"] = 75] = "Wood";
	    CategoryID[CategoryID["Zomblins"] = 76] = "Zomblins";
	    CategoryID[CategoryID["ZomblinCaves"] = 77] = "ZomblinCaves";
	    CategoryID[CategoryID["ZomblinSpawner"] = 78] = "ZomblinSpawner";
	    CategoryID[CategoryID["AlarmBonuses"] = 79] = "AlarmBonuses";
	    CategoryID[CategoryID["ForgottenFlowers"] = 80] = "ForgottenFlowers";
	    CategoryID[CategoryID["AncientObjects"] = 81] = "AncientObjects";
	    CategoryID[CategoryID["DropTest"] = 82] = "DropTest";
	    CategoryID[CategoryID["Merge_LockedT1_A"] = 83] = "Merge_LockedT1_A";
	    CategoryID[CategoryID["Merge_LockedT1_B"] = 84] = "Merge_LockedT1_B";
	    CategoryID[CategoryID["Merge_LockedT1_C"] = 85] = "Merge_LockedT1_C";
	    CategoryID[CategoryID["Merge_LockedT1_D"] = 86] = "Merge_LockedT1_D";
	    CategoryID[CategoryID["Merge_LockedT2_A"] = 87] = "Merge_LockedT2_A";
	    CategoryID[CategoryID["Merge_LockedT2_B"] = 88] = "Merge_LockedT2_B";
	    CategoryID[CategoryID["Merge_LockedT2_C"] = 89] = "Merge_LockedT2_C";
	    CategoryID[CategoryID["Merge_LockedT2_D"] = 90] = "Merge_LockedT2_D";
	    CategoryID[CategoryID["Merge_LockedT3_A"] = 91] = "Merge_LockedT3_A";
	    CategoryID[CategoryID["Merge_LockedT3_B"] = 92] = "Merge_LockedT3_B";
	    CategoryID[CategoryID["Merge_LockedT3_C"] = 93] = "Merge_LockedT3_C";
	    CategoryID[CategoryID["Merge_LockedT3_D"] = 94] = "Merge_LockedT3_D";
	    CategoryID[CategoryID["Merge_LockedT4_A"] = 95] = "Merge_LockedT4_A";
	    CategoryID[CategoryID["Merge_LockedT4_B"] = 96] = "Merge_LockedT4_B";
	    CategoryID[CategoryID["Merge_LockedT4_C"] = 97] = "Merge_LockedT4_C";
	    CategoryID[CategoryID["Merge_LockedT4_D"] = 98] = "Merge_LockedT4_D";
	})(CategoryID || (CategoryID = {}));

	var MatchState;
	(function (MatchState) {
	    MatchState[MatchState["Idle"] = 0] = "Idle";
	    MatchState[MatchState["BeingCarried"] = 1] = "BeingCarried";
	    MatchState[MatchState["SwoopingToCell"] = 2] = "SwoopingToCell";
	    MatchState[MatchState["SwoopingToOffGridLocation"] = 3] = "SwoopingToOffGridLocation";
	    MatchState[MatchState["PostSwoopStillSelected"] = 4] = "PostSwoopStillSelected";
	    MatchState[MatchState["ReservedForMatch"] = 5] = "ReservedForMatch";
	    MatchState[MatchState["ReservedForMatchRecheck"] = 6] = "ReservedForMatchRecheck";
	    MatchState[MatchState["ReservedByEnemy"] = 7] = "ReservedByEnemy";
	    MatchState[MatchState["Matching"] = 8] = "Matching";
	    MatchState[MatchState["FlyingToUI"] = 9] = "FlyingToUI";
	    MatchState[MatchState["Dying"] = 10] = "Dying";
	    MatchState[MatchState["Death"] = 11] = "Death";
	    MatchState[MatchState["Icon"] = 12] = "Icon";
	    MatchState[MatchState["Keyhole"] = 13] = "Keyhole";
	    MatchState[MatchState["DrawOnly"] = 14] = "DrawOnly";
	})(MatchState || (MatchState = {}));
	var GameState;
	(function (GameState) {
	    GameState[GameState["GameLoad"] = 0] = "GameLoad";
	    GameState[GameState["LoadingLevel"] = 1] = "LoadingLevel";
	    GameState[GameState["LoadingWorldMap"] = 2] = "LoadingWorldMap";
	    GameState[GameState["LoadingFriendCamp"] = 3] = "LoadingFriendCamp";
	    GameState[GameState["WorldMap"] = 4] = "WorldMap";
	    GameState[GameState["InLevel"] = 5] = "InLevel";
	    GameState[GameState["InFriendCamp"] = 6] = "InFriendCamp";
	    GameState[GameState["Error"] = 7] = "Error";
	})(GameState || (GameState = {}));
	var MapTileLayerID;
	(function (MapTileLayerID) {
	    MapTileLayerID[MapTileLayerID["Ground"] = 0] = "Ground";
	    MapTileLayerID[MapTileLayerID["Death"] = 1] = "Death";
	    MapTileLayerID[MapTileLayerID["Entities"] = 2] = "Entities";
	    MapTileLayerID[MapTileLayerID["Fog"] = 3] = "Fog";
	    MapTileLayerID[MapTileLayerID["Keys"] = 4] = "Keys";
	})(MapTileLayerID || (MapTileLayerID = {}));
	var CameraState;
	(function (CameraState) {
	    CameraState[CameraState["Idle"] = 0] = "Idle";
	    CameraState[CameraState["PreDragBuffer"] = 1] = "PreDragBuffer";
	    CameraState[CameraState["Drag"] = 2] = "Drag";
	    CameraState[CameraState["DragResidual"] = 3] = "DragResidual";
	    CameraState[CameraState["GlideToFollowTarget"] = 4] = "GlideToFollowTarget";
	    CameraState[CameraState["Follow"] = 5] = "Follow";
	    CameraState[CameraState["JumpToObject"] = 6] = "JumpToObject";
	    CameraState[CameraState["JumpToPosition"] = 7] = "JumpToPosition";
	    CameraState[CameraState["GlideToPosition"] = 8] = "GlideToPosition";
	})(CameraState || (CameraState = {}));
	var MoverState;
	(function (MoverState) {
	    MoverState[MoverState["None"] = 0] = "None";
	    MoverState[MoverState["MouseDown"] = 1] = "MouseDown";
	    MoverState[MoverState["NoMouseDown"] = 2] = "NoMouseDown";
	    MoverState[MoverState["DownOnSameObject"] = 3] = "DownOnSameObject";
	    MoverState[MoverState["DownOnNothingSelectable"] = 4] = "DownOnNothingSelectable";
	    MoverState[MoverState["DownOnNewSelectableObject"] = 5] = "DownOnNewSelectableObject";
	    MoverState[MoverState["DownOnNonMonster"] = 6] = "DownOnNonMonster";
	    MoverState[MoverState["MouseStillDown"] = 7] = "MouseStillDown";
	    MoverState[MoverState["ObjectDragging"] = 8] = "ObjectDragging";
	})(MoverState || (MoverState = {}));
	var OOBErrorTypeID;
	(function (OOBErrorTypeID) {
	    OOBErrorTypeID[OOBErrorTypeID["SuppressErrors"] = 0] = "SuppressErrors";
	    OOBErrorTypeID[OOBErrorTypeID["ShowIfLowerLeftAnchorIsOOB"] = 1] = "ShowIfLowerLeftAnchorIsOOB";
	    OOBErrorTypeID[OOBErrorTypeID["ShowIfAnyOOB"] = 2] = "ShowIfAnyOOB";
	    OOBErrorTypeID[OOBErrorTypeID["ShowIfOverNullCell"] = 3] = "ShowIfOverNullCell";
	})(OOBErrorTypeID || (OOBErrorTypeID = {}));
	var CellProximitySearchTypeID;
	(function (CellProximitySearchTypeID) {
	    CellProximitySearchTypeID[CellProximitySearchTypeID["RandomFromAll"] = 0] = "RandomFromAll";
	    CellProximitySearchTypeID[CellProximitySearchTypeID["PreferCloser"] = 1] = "PreferCloser";
	})(CellProximitySearchTypeID || (CellProximitySearchTypeID = {}));
	var CellAdjacencySearchTypeID;
	(function (CellAdjacencySearchTypeID) {
	    CellAdjacencySearchTypeID[CellAdjacencySearchTypeID["PreferAdjacent"] = 0] = "PreferAdjacent";
	    CellAdjacencySearchTypeID[CellAdjacencySearchTypeID["AllowAll"] = 1] = "AllowAll";
	})(CellAdjacencySearchTypeID || (CellAdjacencySearchTypeID = {}));
	var ShoutPrefabID;
	(function (ShoutPrefabID) {
	    ShoutPrefabID[ShoutPrefabID["Red"] = 0] = "Red";
	    ShoutPrefabID[ShoutPrefabID["YelloPurple"] = 1] = "YelloPurple";
	})(ShoutPrefabID || (ShoutPrefabID = {}));
	var EnemyStateID;
	(function (EnemyStateID) {
	    EnemyStateID[EnemyStateID["Idle"] = 0] = "Idle";
	    EnemyStateID[EnemyStateID["Spawning"] = 1] = "Spawning";
	    EnemyStateID[EnemyStateID["DropItem"] = 2] = "DropItem";
	    EnemyStateID[EnemyStateID["Wander"] = 3] = "Wander";
	    EnemyStateID[EnemyStateID["KillTile"] = 4] = "KillTile";
	    EnemyStateID[EnemyStateID["StealSomething"] = 5] = "StealSomething";
	    EnemyStateID[EnemyStateID["BreakSomething"] = 6] = "BreakSomething";
	})(EnemyStateID || (EnemyStateID = {}));
	var ProjectileID;
	(function (ProjectileID) {
	    ProjectileID[ProjectileID["Off"] = 0] = "Off";
	    ProjectileID[ProjectileID["Reloading"] = 1] = "Reloading";
	    ProjectileID[ProjectileID["RoundChambered"] = 2] = "RoundChambered";
	})(ProjectileID || (ProjectileID = {}));
	var DeathReasonID;
	(function (DeathReasonID) {
	    DeathReasonID[DeathReasonID["None"] = 0] = "None";
	    DeathReasonID[DeathReasonID["LifeTimedOut"] = 1] = "LifeTimedOut";
	    DeathReasonID[DeathReasonID["HarvestedAway"] = 2] = "HarvestedAway";
	    DeathReasonID[DeathReasonID["MasterMatched"] = 3] = "MasterMatched";
	    DeathReasonID[DeathReasonID["SlaveMatched"] = 4] = "SlaveMatched";
	    DeathReasonID[DeathReasonID["ReachedTarget"] = 5] = "ReachedTarget";
	    DeathReasonID[DeathReasonID["Tapped"] = 6] = "Tapped";
	    DeathReasonID[DeathReasonID["Replaced"] = 7] = "Replaced";
	    DeathReasonID[DeathReasonID["SoldOrTrashed"] = 8] = "SoldOrTrashed";
	    DeathReasonID[DeathReasonID["PurposeFulfilled"] = 9] = "PurposeFulfilled";
	    DeathReasonID[DeathReasonID["UnSummoned"] = 10] = "UnSummoned";
	    DeathReasonID[DeathReasonID["CheatUsed"] = 11] = "CheatUsed";
	    DeathReasonID[DeathReasonID["Sold"] = 12] = "Sold";
	    DeathReasonID[DeathReasonID["NoHPLeft"] = 13] = "NoHPLeft";
	    DeathReasonID[DeathReasonID["Error"] = 14] = "Error";
	    DeathReasonID[DeathReasonID["Clear"] = 15] = "Clear";
	})(DeathReasonID || (DeathReasonID = {}));
	var DeadCellSearchID;
	(function (DeadCellSearchID) {
	    DeadCellSearchID[DeadCellSearchID["Any"] = 0] = "Any";
	    DeadCellSearchID[DeadCellSearchID["NeedsHealing"] = 1] = "NeedsHealing";
	})(DeadCellSearchID || (DeadCellSearchID = {}));
	var ShoutCategoryID;
	(function (ShoutCategoryID) {
	    ShoutCategoryID[ShoutCategoryID["EnemyAppear"] = 0] = "EnemyAppear";
	    ShoutCategoryID[ShoutCategoryID["UserDirect"] = 1] = "UserDirect";
	    ShoutCategoryID[ShoutCategoryID["BattleCry"] = 2] = "BattleCry";
	    ShoutCategoryID[ShoutCategoryID["Hi"] = 3] = "Hi";
	})(ShoutCategoryID || (ShoutCategoryID = {}));
	var EnumEconSpendType;
	(function (EnumEconSpendType) {
	    EnumEconSpendType[EnumEconSpendType["SPEEDUP"] = 0] = "SPEEDUP";
	    EnumEconSpendType[EnumEconSpendType["UNLOCK"] = 2] = "UNLOCK";
	    EnumEconSpendType[EnumEconSpendType["LEVEL_REWARD"] = 3] = "LEVEL_REWARD";
	    EnumEconSpendType[EnumEconSpendType["WAKE_UP"] = 4] = "WAKE_UP";
	    EnumEconSpendType[EnumEconSpendType["BUY_ENERGY"] = 5] = "BUY_ENERGY";
	    EnumEconSpendType[EnumEconSpendType["BUY_STONE"] = 6] = "BUY_STONE";
	    EnumEconSpendType[EnumEconSpendType["BUY_COIN"] = 7] = "BUY_COIN";
	    EnumEconSpendType[EnumEconSpendType["BUY_ITEM"] = 8] = "BUY_ITEM";
	    EnumEconSpendType[EnumEconSpendType["PLAY_LEVEL"] = 9] = "PLAY_LEVEL";
	    EnumEconSpendType[EnumEconSpendType["BUY_GACHA"] = 10] = "BUY_GACHA";
	    EnumEconSpendType[EnumEconSpendType["BUY_TIME"] = 11] = "BUY_TIME";
	    EnumEconSpendType[EnumEconSpendType["DOUBLE_REWARD"] = 12] = "DOUBLE_REWARD";
	    EnumEconSpendType[EnumEconSpendType["DUPLICATE"] = 13] = "DUPLICATE";
	    EnumEconSpendType[EnumEconSpendType["SPIN"] = 14] = "SPIN";
	    EnumEconSpendType[EnumEconSpendType["RESPIN"] = 15] = "RESPIN";
	    EnumEconSpendType[EnumEconSpendType["EVENT_FINAL_ITEM"] = 16] = "EVENT_FINAL_ITEM";
	    EnumEconSpendType[EnumEconSpendType["BUY_HEART"] = 17] = "BUY_HEART";
	    EnumEconSpendType[EnumEconSpendType["PLAY_SCORE_ATTACK"] = 18] = "PLAY_SCORE_ATTACK";
	    EnumEconSpendType[EnumEconSpendType["BOOSTER_PURCHASE"] = 19] = "BOOSTER_PURCHASE";
	    EnumEconSpendType[EnumEconSpendType["SPINNER_STANDARD"] = 20] = "SPINNER_STANDARD";
	    EnumEconSpendType[EnumEconSpendType["SPINNER_PREMIUM"] = 21] = "SPINNER_PREMIUM";
	    EnumEconSpendType[EnumEconSpendType["BUY_BUNDLE"] = 22] = "BUY_BUNDLE";
	    EnumEconSpendType[EnumEconSpendType["BUY_ITEM_KALA"] = 23] = "BUY_ITEM_KALA";
	    EnumEconSpendType[EnumEconSpendType["UPGRADE_ZEN_TEMPLE"] = 24] = "UPGRADE_ZEN_TEMPLE";
	    EnumEconSpendType[EnumEconSpendType["EGG_BANK"] = 25] = "EGG_BANK";
	    EnumEconSpendType[EnumEconSpendType["CODE_RETURN"] = 26] = "CODE_RETURN";
	    EnumEconSpendType[EnumEconSpendType["SKIP_GOAL"] = 27] = "SKIP_GOAL";
	})(EnumEconSpendType || (EnumEconSpendType = {}));
	var BeingSubState_UseObjectStateID;
	(function (BeingSubState_UseObjectStateID) {
	    BeingSubState_UseObjectStateID[BeingSubState_UseObjectStateID["NONE"] = 0] = "NONE";
	    BeingSubState_UseObjectStateID[BeingSubState_UseObjectStateID["EnRoute"] = 1] = "EnRoute";
	    BeingSubState_UseObjectStateID[BeingSubState_UseObjectStateID["JustArrivedAtObject"] = 2] = "JustArrivedAtObject";
	    BeingSubState_UseObjectStateID[BeingSubState_UseObjectStateID["StartUsingObject"] = 3] = "StartUsingObject";
	    BeingSubState_UseObjectStateID[BeingSubState_UseObjectStateID["UsingObject"] = 4] = "UsingObject";
	})(BeingSubState_UseObjectStateID || (BeingSubState_UseObjectStateID = {}));
	var BeingSubState_DropItemID;
	(function (BeingSubState_DropItemID) {
	    BeingSubState_DropItemID[BeingSubState_DropItemID["NONE"] = 0] = "NONE";
	    BeingSubState_DropItemID[BeingSubState_DropItemID["PausingToThink"] = 1] = "PausingToThink";
	    BeingSubState_DropItemID[BeingSubState_DropItemID["EnRoute"] = 2] = "EnRoute";
	    BeingSubState_DropItemID[BeingSubState_DropItemID["JustArrived"] = 3] = "JustArrived";
	})(BeingSubState_DropItemID || (BeingSubState_DropItemID = {}));
	var BeingSubState_InteractWithCellID;
	(function (BeingSubState_InteractWithCellID) {
	    BeingSubState_InteractWithCellID[BeingSubState_InteractWithCellID["NONE"] = 0] = "NONE";
	    BeingSubState_InteractWithCellID[BeingSubState_InteractWithCellID["EnRoute"] = 1] = "EnRoute";
	    BeingSubState_InteractWithCellID[BeingSubState_InteractWithCellID["JustArrived"] = 2] = "JustArrived";
	    BeingSubState_InteractWithCellID[BeingSubState_InteractWithCellID["Interacting"] = 3] = "Interacting";
	})(BeingSubState_InteractWithCellID || (BeingSubState_InteractWithCellID = {}));
	var BeingSubstate_InBattleID;
	(function (BeingSubstate_InBattleID) {
	    BeingSubstate_InBattleID[BeingSubstate_InBattleID["NONE"] = 0] = "NONE";
	    BeingSubstate_InBattleID[BeingSubstate_InBattleID["GetIntoPosition"] = 1] = "GetIntoPosition";
	    BeingSubstate_InBattleID[BeingSubstate_InBattleID["JustArrivedAtTarget"] = 2] = "JustArrivedAtTarget";
	    BeingSubstate_InBattleID[BeingSubstate_InBattleID["Attacking"] = 3] = "Attacking";
	})(BeingSubstate_InBattleID || (BeingSubstate_InBattleID = {}));
	var AutonomyLevelID;
	(function (AutonomyLevelID) {
	    AutonomyLevelID[AutonomyLevelID["Autonomous"] = 0] = "Autonomous";
	    AutonomyLevelID[AutonomyLevelID["UserDirected"] = 1] = "UserDirected";
	})(AutonomyLevelID || (AutonomyLevelID = {}));
	var ObjectPlacementMoveTypeID;
	(function (ObjectPlacementMoveTypeID) {
	    ObjectPlacementMoveTypeID[ObjectPlacementMoveTypeID["Swoop"] = 0] = "Swoop";
	    ObjectPlacementMoveTypeID[ObjectPlacementMoveTypeID["Jump"] = 1] = "Jump";
	})(ObjectPlacementMoveTypeID || (ObjectPlacementMoveTypeID = {}));
	var DiscoveryItemStateID;
	(function (DiscoveryItemStateID) {
	    DiscoveryItemStateID[DiscoveryItemStateID["NONE"] = 0] = "NONE";
	    DiscoveryItemStateID[DiscoveryItemStateID["Undiscovered"] = 1] = "Undiscovered";
	    DiscoveryItemStateID[DiscoveryItemStateID["JustDiscoveredAndUnlockable"] = 2] = "JustDiscoveredAndUnlockable";
	    DiscoveryItemStateID[DiscoveryItemStateID["Discovered"] = 3] = "Discovered";
	})(DiscoveryItemStateID || (DiscoveryItemStateID = {}));
	var FacingDirectionID;
	(function (FacingDirectionID) {
	    FacingDirectionID[FacingDirectionID["Left"] = 0] = "Left";
	    FacingDirectionID[FacingDirectionID["FlippingLeft"] = 1] = "FlippingLeft";
	    FacingDirectionID[FacingDirectionID["FlippingRight"] = 2] = "FlippingRight";
	    FacingDirectionID[FacingDirectionID["Right"] = 3] = "Right";
	})(FacingDirectionID || (FacingDirectionID = {}));
	var MonsterStateID;
	(function (MonsterStateID) {
	    MonsterStateID[MonsterStateID["Idle"] = 0] = "Idle";
	    MonsterStateID[MonsterStateID["Attack"] = 1] = "Attack";
	    MonsterStateID[MonsterStateID["Harvest"] = 2] = "Harvest";
	    MonsterStateID[MonsterStateID["Build"] = 3] = "Build";
	    MonsterStateID[MonsterStateID["WorkOn"] = 4] = "WorkOn";
	    MonsterStateID[MonsterStateID["DropItem"] = 5] = "DropItem";
	    MonsterStateID[MonsterStateID["Wander"] = 6] = "Wander";
	    MonsterStateID[MonsterStateID["Sleep"] = 7] = "Sleep";
	    MonsterStateID[MonsterStateID["Relax"] = 8] = "Relax";
	})(MonsterStateID || (MonsterStateID = {}));
	var HomeEnterReasonID;
	(function (HomeEnterReasonID) {
	    HomeEnterReasonID[HomeEnterReasonID["Sleep"] = 0] = "Sleep";
	    HomeEnterReasonID[HomeEnterReasonID["Relax"] = 1] = "Relax";
	})(HomeEnterReasonID || (HomeEnterReasonID = {}));
	var RarityID;
	(function (RarityID) {
	    RarityID[RarityID["Common"] = 0] = "Common";
	    RarityID[RarityID["Uncommon"] = 1] = "Uncommon";
	    RarityID[RarityID["Rare"] = 2] = "Rare";
	    RarityID[RarityID["Epic"] = 3] = "Epic";
	    RarityID[RarityID["Legendary"] = 4] = "Legendary";
	    RarityID[RarityID["Mythical"] = 5] = "Mythical";
	    RarityID[RarityID["Premium"] = 6] = "Premium";
	    RarityID[RarityID["Event"] = 7] = "Event";
	})(RarityID || (RarityID = {}));
	var MatchTypeID;
	(function (MatchTypeID) {
	    MatchTypeID[MatchTypeID["Base"] = 0] = "Base";
	    MatchTypeID[MatchTypeID["Monster"] = 1] = "Monster";
	    MatchTypeID[MatchTypeID["Enemy"] = 2] = "Enemy";
	})(MatchTypeID || (MatchTypeID = {}));
	var NeighborHealStateID;
	(function (NeighborHealStateID) {
	    NeighborHealStateID[NeighborHealStateID["NotStarted"] = 0] = "NotStarted";
	    NeighborHealStateID[NeighborHealStateID["CountDownBeforeVFX"] = 1] = "CountDownBeforeVFX";
	    NeighborHealStateID[NeighborHealStateID["PlayVFX"] = 2] = "PlayVFX";
	    NeighborHealStateID[NeighborHealStateID["CountDownToHeal"] = 3] = "CountDownToHeal";
	    NeighborHealStateID[NeighborHealStateID["Done"] = 4] = "Done";
	})(NeighborHealStateID || (NeighborHealStateID = {}));
	var MonsterTypeID;
	(function (MonsterTypeID) {
	    MonsterTypeID[MonsterTypeID["NONE"] = 0] = "NONE";
	    MonsterTypeID[MonsterTypeID["RANDOM"] = 1] = "RANDOM";
	    MonsterTypeID[MonsterTypeID["Normal"] = 2] = "Normal";
	    MonsterTypeID[MonsterTypeID["Harvester"] = 3] = "Harvester";
	    MonsterTypeID[MonsterTypeID["Builder"] = 4] = "Builder";
	    MonsterTypeID[MonsterTypeID["Zoomer"] = 5] = "Zoomer";
	    MonsterTypeID[MonsterTypeID["Defender"] = 6] = "Defender";
	    MonsterTypeID[MonsterTypeID["Worker"] = 7] = "Worker";
	    MonsterTypeID[MonsterTypeID["Trophy"] = 8] = "Trophy";
	    MonsterTypeID[MonsterTypeID["Miner"] = 9] = "Miner";
	    MonsterTypeID[MonsterTypeID["Attacker"] = 10] = "Attacker";
	    MonsterTypeID[MonsterTypeID["Matcher"] = 11] = "Matcher";
	    MonsterTypeID[MonsterTypeID["Bomber"] = 12] = "Bomber";
	    MonsterTypeID[MonsterTypeID["Alchemist"] = 13] = "Alchemist";
	    MonsterTypeID[MonsterTypeID["Healer"] = 14] = "Healer";
	    MonsterTypeID[MonsterTypeID["TreasureHunter"] = 15] = "TreasureHunter";
	})(MonsterTypeID || (MonsterTypeID = {}));
	var SceneID;
	(function (SceneID) {
	    SceneID[SceneID["APP_LOADER"] = 0] = "APP_LOADER";
	    SceneID[SceneID["GAME_LOADER"] = 1] = "GAME_LOADER";
	    SceneID[SceneID["SCENE_SWITCH"] = 2] = "SCENE_SWITCH";
	    SceneID[SceneID["Scene_Level"] = 3] = "Scene_Level";
	    SceneID[SceneID["Scene_WorldMap"] = 4] = "Scene_WorldMap";
	    SceneID[SceneID["Scene_Camp"] = 5] = "Scene_Camp";
	    SceneID[SceneID["Scene_Error"] = 6] = "Scene_Error";
	})(SceneID || (SceneID = {}));
	var EnumTimerStatus;
	(function (EnumTimerStatus) {
	    EnumTimerStatus[EnumTimerStatus["STOPPED"] = 0] = "STOPPED";
	    EnumTimerStatus[EnumTimerStatus["STARTED"] = 1] = "STARTED";
	    EnumTimerStatus[EnumTimerStatus["PAUSED"] = 2] = "PAUSED";
	    EnumTimerStatus[EnumTimerStatus["EXPIRED"] = 3] = "EXPIRED";
	})(EnumTimerStatus || (EnumTimerStatus = {}));
	var EnumEconEarnType;
	(function (EnumEconEarnType) {
	    EnumEconEarnType[EnumEconEarnType["COLLECT"] = 0] = "COLLECT";
	    EnumEconEarnType[EnumEconEarnType["SELL"] = 1] = "SELL";
	    EnumEconEarnType[EnumEconEarnType["IAP"] = 2] = "IAP";
	    EnumEconEarnType[EnumEconEarnType["DAILY"] = 3] = "DAILY";
	    EnumEconEarnType[EnumEconEarnType["TIME_PASS"] = 4] = "TIME_PASS";
	    EnumEconEarnType[EnumEconEarnType["BUY_ENERGY"] = 5] = "BUY_ENERGY";
	    EnumEconEarnType[EnumEconEarnType["BUY_STONE"] = 6] = "BUY_STONE";
	    EnumEconEarnType[EnumEconEarnType["BUY_COIN"] = 7] = "BUY_COIN";
	    EnumEconEarnType[EnumEconEarnType["CRM_CODE_REDEEM"] = 8] = "CRM_CODE_REDEEM";
	    EnumEconEarnType[EnumEconEarnType["CRM_GIFT_REDEEM"] = 8] = "CRM_GIFT_REDEEM";
	    EnumEconEarnType[EnumEconEarnType["REWARDED"] = 9] = "REWARDED";
	    EnumEconEarnType[EnumEconEarnType["CRM_OFFER"] = 10] = "CRM_OFFER";
	})(EnumEconEarnType || (EnumEconEarnType = {}));

	class SL_Camera {
	    constructor() {
	        this.id = SaveLoadConst.CAMERA;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValueV3("0", this.position);
	        obj.setValue("1", this.orthographicSize);
	        return obj;
	    }
	    import(data) {
	        this.position = data.getValueV3("0");
	        this.orthographicSize = data.getValue("1");
	    }
	}

	class CompShakeWatcher extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.lastFramePosition = new Laya.Vector2();
	        this.shakeAmountThisFrame = new Laya.Vector2();
	    }
	    onStart() {
	        this._owner = this.owner;
	        this.recordPosition();
	    }
	    onUpdate() {
	        let pos = this._owner.transform.localPosition;
	        this.shakeAmountThisFrame.setValue(pos.x - this.lastFramePosition.x, pos.y - this.lastFramePosition.y);
	        this.recordPosition();
	    }
	    recordPosition() {
	        let pos = this._owner.transform.localPosition;
	        this.lastFramePosition.setValue(pos.x, pos.y);
	    }
	}

	class DepObject extends Laya.Sprite {
	    constructor() {
	        super();
	        this.dep = 0;
	        this.childIndex = -1;
	    }
	}

	class AvaConst {
	    static getTurnDir(dir) {
	        return this.DIR_TURN[dir];
	    }
	    static isTurnDir(dir) {
	        let b = this.DIR_TURN[dir] != dir;
	        return b;
	    }
	    static getPath(type, name, isFight = false) {
	        return null;
	    }
	    static init() {
	        let rot = -180;
	        let dir;
	        while (rot <= 180) {
	            if (rot >= -90 && rot < -12) {
	                dir = AvaConst.D_RIGHT_UP;
	            }
	            else if (rot >= -12 && rot < 12) {
	                dir = AvaConst.D_RIGHT;
	            }
	            else if (rot >= 12 && rot < 90) {
	                dir = AvaConst.D_RIGHT_DOWN;
	            }
	            else if (rot >= 90 && rot < 168) {
	                dir = AvaConst.D_LEFT_DOWN;
	            }
	            else if (rot >= 168 || rot < -168) {
	                dir = AvaConst.D_LEFT;
	            }
	            else {
	                dir = AvaConst.D_LEFT_UP;
	            }
	            ;
	            this._dicMap[rot] = dir;
	            rot++;
	        }
	        this._rotMap[this.D_RIGHT_UP] = -45;
	        this._rotMap[this.D_RIGHT] = 0;
	        this._rotMap[this.D_RIGHT_DOWN] = 45;
	        this._rotMap[this.D_LEFT_DOWN] = 135;
	        this._rotMap[this.D_LEFT] = 180;
	        this._rotMap[this.D_LEFT_UP] = -135;
	        this.loopMap[this.A_STAND] = true;
	        this.loopMap[this.A_WALK] = true;
	        this.loopMap[this.A_ATTACK] = false;
	        this.loopMap[this.A_HIT] = false;
	        this.loopMap[this.A_DEAD] = false;
	        this.loopMap[this.A_WIN] = true;
	        this.loopMap[this.A_SKILL] = false;
	    }
	    static getDirByRadians(r) {
	        let dir = MathUtil.getAngle(r) >> 0;
	        return this._dicMap[dir];
	    }
	    static getDirByAngle(r) {
	        let dir = r >> 0;
	        return this._dicMap[dir];
	    }
	    static getDirByPos(start, over) {
	        let radians = MathUtil.getRadians(start, over);
	        return this.getDirByRadians(radians);
	    }
	    static getRotByDir(dir) {
	        return this._rotMap[dir];
	    }
	    static getPosByDis(currPos, dis, dir) {
	        var rot = this.getRotByDir(dir);
	        var moveX = (currPos.x + Math.cos(rot * Math.PI / 180) * dis * -1) >> 0;
	        var moveY = (currPos.y + Math.cos((90 - rot) * Math.PI / 180) * dis * -1) >> 0;
	        return [moveX, moveY];
	    }
	    static isLoop(action) {
	        return this.loopMap[action];
	    }
	}
	AvaConst.A_STAND = "stand";
	AvaConst.A_WALK = "walk";
	AvaConst.A_ATTACK = "attack";
	AvaConst.A_HIT = "hit";
	AvaConst.A_DEAD = "dead";
	AvaConst.A_WIN = "win";
	AvaConst.A_SKILL = "skill";
	AvaConst.F_WORLD = 2;
	AvaConst.F_UI = 1;
	AvaConst.D_UP = 1;
	AvaConst.D_RIGHT_UP = 2;
	AvaConst.D_RIGHT = 3;
	AvaConst.D_RIGHT_DOWN = 4;
	AvaConst.D_DOWN = 5;
	AvaConst.D_LEFT_DOWN = 6;
	AvaConst.D_LEFT = 7;
	AvaConst.D_LEFT_UP = 8;
	AvaConst.DIR_TURN = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 6, 5: 5, 6: 6, 7: 3, 8: 2 };
	AvaConst._dicMap = {};
	AvaConst._rotMap = {};
	AvaConst.loopMap = {};

	class Part extends DepObject {
	    constructor(v, atlas = null) {
	        super();
	        this.autoPlay = true;
	        this._currDir = 0;
	        this._isNeedUpdate = false;
	        this._isInited = false;
	        this.isStart = false;
	        this.isPlay = false;
	        this.loop = false;
	        this.forceScaleX = 0;
	        this.isDispose = false;
	        this.nid = v;
	        if (atlas) {
	            this.atlas = PartMgr.getAtlasUrl(atlas);
	        }
	        else {
	            this.atlas = PartMgr.getAtlasUrl(this.nid);
	        }
	        this.initAni();
	    }
	    initAni() {
	        Laya.loader.load(this.atlas, Laya.Handler.create(this, this.onLoaded), null, null, 4);
	    }
	    onLoaded() {
	        this.animation = new Laya.Animation();
	        this.animation.on(Laya.Event.COMPLETE, this, this.onActOver);
	        this.animation.loadAnimation(PartMgr.getUrl(this.nid), Laya.Handler.create(this, this.onAniLoaded));
	        this.addChild(this.animation);
	    }
	    onAniLoaded() {
	        this._isInited = true;
	        if (this.isDispose)
	            return;
	        this.updateAct();
	    }
	    getCurrActId() {
	        var turnDir = AvaConst.getTurnDir(this._currDir);
	        return this._currAction + "_" + turnDir;
	    }
	    updateAct() {
	        if (this.destroyed)
	            return;
	        if (this.forceScaleX == 0) {
	            if (AvaConst.isTurnDir(this._currDir)) {
	                this.scaleX = -1;
	            }
	            else {
	                this.scaleX = 1;
	            }
	        }
	        else {
	            this.scaleX = this.forceScaleX;
	        }
	        if (this.isPlay) {
	            this.play();
	        }
	    }
	    play(start = 0) {
	        this.isPlay = true;
	        if (!this._currAction)
	            return;
	        if (!this._isInited)
	            return;
	        if (!this.isStart)
	            return;
	        this.aniTimer = this.animation.scene ? this.animation.scene.timer : Laya.timer;
	        if (this.autoPlay) {
	            this.animation.play(start, this.loop, this.getCurrActId());
	        }
	        else {
	            this.startTime = this.aniTimer.currTimer;
	        }
	    }
	    set currAction(v) {
	        if (this._currAction == v)
	            return;
	        this._currAction = v;
	        this._isNeedUpdate = true;
	    }
	    get currAction() {
	        return this._currAction;
	    }
	    set currDir(v) {
	        if (this._currDir == v)
	            return;
	        this._currDir = v;
	        this._isNeedUpdate = true;
	    }
	    get currDir() {
	        return this._currDir;
	    }
	    onUpdate(spd = 1) {
	        this.checkUpdate();
	    }
	    onFrame() {
	        if (this.autoPlay)
	            return;
	        if (!this.aniTimer)
	            return;
	        var now = this.aniTimer.currTimer;
	        var perc = (now - this.startTime) / this.animation.interval;
	        if (perc > 1) {
	            if (this.loop) {
	                perc = perc - (perc >> 0);
	            }
	            else {
	                perc = 1;
	            }
	        }
	        this.setPec(perc);
	    }
	    checkUpdate() {
	        if (!this._isNeedUpdate)
	            return;
	        this._isNeedUpdate = false;
	        this.updateAct();
	    }
	    onActOver() {
	        if (this.isDispose)
	            return;
	        if (this.actOverHandler) {
	            this.actOverHandler(this._currAction);
	        }
	        if (!this.loop)
	            this.visible = false;
	    }
	    dispose() {
	        if (this.isDispose)
	            return;
	        this.isDispose = true;
	        this.stop();
	        this.visible = true;
	        this.actOverHandler = null;
	        this._currAction = null;
	        this._currDir = 0;
	        this.forceScaleX = 0;
	        this.isStart = false;
	        this.isPlay = false;
	        this.loop = false;
	        this.autoPlay = true;
	        this.aniTimer = null;
	        this.removeSelf();
	        this.pos(0, 0);
	        PartMgr.reduce(this);
	    }
	    start() {
	        this.checkUpdate();
	        this.isStart = true;
	        this.play();
	    }
	    stop() {
	        if (this.animation)
	            this.animation.stop();
	        this.isPlay = false;
	    }
	    setPec(v) {
	        if (!this.aniTimer)
	            return;
	        var curFrame = 1 + (v * this.animation.count) >> 0;
	        if (this.animation.index != curFrame) {
	            this.animation.gotoAndStop(curFrame);
	        }
	    }
	    updateTimer() {
	        if (this.animation && this.animation.isPlaying) {
	            if (this.aniTimer) {
	                this.aniTimer.clearAll(this.animation);
	            }
	            this.play(this.animation.index);
	        }
	    }
	    clear() {
	        this.destroy(true);
	    }
	}

	class PartMgr {
	    constructor() {
	    }
	    static refer(nid, atlas = null) {
	        var avas = this.map[nid];
	        if (!avas) {
	            avas = [];
	            this.map[nid] = avas;
	        }
	        var ava;
	        if (avas.length == 0) {
	            ava = new Part(nid, atlas);
	        }
	        else {
	            ava = avas.shift();
	        }
	        if (!this.refMap[nid]) {
	            this.refMap[nid] = 0;
	        }
	        this.refMap[nid]++;
	        if (!this.atlasRefMap[ava.atlas]) {
	            this.atlasRefMap[ava.atlas] = 0;
	        }
	        this.atlasRefMap[ava.atlas]++;
	        ava.isDispose = false;
	        return ava;
	    }
	    static reduce(avatar) {
	        if (avatar == null)
	            return;
	        var avas = this.map[avatar.nid];
	        if (avas) {
	            avas.push(avatar);
	        }
	        if (this.refMap[avatar.nid]) {
	            this.refMap[avatar.nid]--;
	        }
	        if (this.atlasRefMap[avatar.atlas]) {
	            this.atlasRefMap[avatar.atlas]--;
	        }
	    }
	    static clear() {
	        for (var i in this.refMap) {
	            if (this.refMap[i] > 0)
	                continue;
	            var avas = this.map[i];
	            if (avas.length == 0)
	                continue;
	            var ava = avas[0];
	            var url = this.getUrl(ava.nid);
	            var atlas = ava.atlas;
	            Laya.loader.clearRes(url);
	            Laya.Animation.clearCache(url);
	            for (var j of avas) {
	                j.clear();
	            }
	            avas.length = 0;
	            if (this.atlasRefMap[atlas] <= 0) {
	                Laya.loader.clearRes(atlas);
	            }
	        }
	    }
	    static getAtlasUrl(nid) {
	        return "res/" + nid + ".atlas";
	    }
	    static getUrl(nid) {
	        return "data/" + nid + ".ani";
	    }
	}
	PartMgr.map = {};
	PartMgr.refMap = {};
	PartMgr.atlasRefMap = {};

	class ShortLoading extends SpriteSingleton {
	    constructor() {
	        super();
	        this.init();
	    }
	    onResize() {
	        this.x = Laya.stage.width / 2;
	        this.y = Laya.stage.height / 2;
	    }
	    init() {
	        this.bg = new Laya.Sprite();
	        this.bg.graphics.drawRect(0, 0, 2048, 2048, "#000000");
	        this.bg.size(2048, 2048);
	        this.bg.alpha = 0.7;
	        this.bg.pos(-1024, -1024);
	        this.addChild(this.bg);
	        this.bg.on(Laya.Event.CLICK, this, () => {
	        });
	        this.part = PartMgr.refer("effect/jiazai");
	        this.part.currAction = "eff";
	        this.part.loop = true;
	        this.part.start();
	        this.addChild(this.part);
	        this.info = new Laya.Label("loading...");
	        this.info.align = "center";
	        this.info.width = 300;
	        this.info.pos(-150, 50);
	        this.info.color = "#ffffff";
	        this.info.fontSize = 14;
	        this.addChild(this.info);
	    }
	    show(msg = null) {
	        if (this.isShow)
	            return;
	        LayerMgr.ins().uiLoading.addChild(this);
	        this.onResize();
	        this.isShow = true;
	        if (msg) {
	            this.info.text = msg;
	        }
	        this.part.play();
	        Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
	    }
	    hide() {
	        if (!this.isShow)
	            return;
	        Laya.stage.off(Laya.Event.RESIZE, this, this.onResize);
	        this.isShow = false;
	        this.part.stop();
	        this.removeSelf();
	    }
	}

	class ViewBg extends Singleton {
	    constructor() {
	        super();
	        this.initBg();
	    }
	    initBg() {
	        this.blankBg = new Laya.Sprite();
	        this.blankBg.name = "bg";
	        this.blankBg.graphics.drawRect(0, 0, 2048, 2048, "#000000");
	        this.blankBg.size(2048, 2048);
	        this.blankBg.alpha = 0.7;
	        this.blankBg.cacheAs = "normal";
	        this.blankBg.on(Laya.Event.CLICK, this, this.onClick);
	    }
	    show(view) {
	        this.view = view;
	        var thisIndex = view.parent.getChildIndex(view);
	        thisIndex = thisIndex > 0 ? thisIndex - 1 : 0;
	        view.parent.addChildAt(this.blankBg, thisIndex);
	    }
	    hide(view) {
	        if (this.view != view)
	            return;
	        this.blankBg.removeSelf();
	        this.view = null;
	    }
	    onClick() {
	        LayerMgr.ins().closeCurWinBg();
	    }
	    setAlpha(val) {
	        this.blankBg.graphics.clear();
	        this.blankBg.graphics.drawRect(0, 0, 2048, 2048, "#000000");
	        this.blankBg.size(2048, 2048);
	        this.blankBg.alpha = val;
	    }
	}

	class UiConst {
	}
	UiConst.isWinOpening = false;
	UiConst.GmView = "GmView";
	UiConst.ReloadView = "ReloadView";
	UiConst.ModalDialogGeneric1Button = "ModalDialogGeneric1Button";
	UiConst.ModalDialogGeneric2Button = "ModalDialogGeneric2Button";
	UiConst.ModalDialogConfirmPurchase = "ModalDialogConfirmPurchase";
	UiConst.ModalProgressionDupe = "ModalProgressionDupe";
	UiConst.ModalPremiumLand = "ModalPremiumLand";
	UiConst.ModalUpgradeConfirm = "ModalUpgradeConfirm";
	UiConst.ModalFogAreaInfo = "ModalFogAreaInfo";
	UiConst.WorldView = "WorldView";
	UiConst.WorldInfoView = "WorldEnter";
	UiConst.WorldChallengeEnter = "WorldChallengeEnter";
	UiConst.WorldPropView = "WorldPropView";
	UiConst.ThingActionView = "ThingActionView";
	UiConst.LevelLootInfo = "LevelLootInfo";
	UiConst.LevelWinView = "LevelWinView";
	UiConst.LevelQuitView = "LevelQuitView";
	UiConst.LevelResetView = "LevelResetView";
	UiConst.LevelSettleView = "LevelSettleView";
	UiConst.LevelChestView = "LevelChestView";
	UiConst.LevelChestBuyView = "LevelChestBuyView";
	UiConst.MainGoalView = "MainGoalView";
	UiConst.SubGoalView = "SubGoalView";
	UiConst.ChallengeSettleView = "ChallengeSettleView";
	UiConst.ChallengeAddTimeView = "ChallengeAddTimeView";
	UiConst.ChallengeClockView = "ChallengeClockView";
	UiConst.ChallengeExitView = "ChallengeExitView";
	UiConst.HeadlineView = "HeadlineView";
	UiConst.EnergyBuyView = "EnergyBuyView";
	UiConst.EnergyInfoView = "EnergyInfoView";
	UiConst.CurrencyDetailView = "CurrencyDetailView";
	UiConst.PurchaseConfirm = "PurchaseConfirm";
	UiConst.ShopView = "ShopView";
	UiConst.TutorialView = "TutorialView";
	UiConst.TutorialFocusView = "TutorialFocusView";
	UiConst.DragonView = "DragonView";
	UiConst.DragonInfoView = "DragonInfoView";
	UiConst.DragonMergeView = "DragonMergeView";
	UiConst.DailyQuestView = "DailyQuestView";
	UiConst.AtlasView = "AtlasView";
	UiConst.FirstChargeView = "FirstChargeView";
	UiConst.PromptView = "PromptView";
	UiConst.EggTreasuryView = "EggTreasuryView";
	UiConst.SelectDragonEggView = "SelectDragonEggView";
	UiConst.DragonEggInfoView = "DragonEggInfoView";
	UiConst.SettingView = "SettingView";
	UiConst.ExchangeCodeView = "ExchangeCodeView";
	UiConst.FunctionView = "FunctionView";
	UiConst.LangView = "LangView";
	UiConst.ResetCourseView = "ResetCourseView";
	UiConst.HomeTaskView = "HomeTaskView";
	UiConst.HomeTaskInfoView = "HomeTaskInfoView";
	UiConst.ModalTimedBundle = "ModalTimedBundle";
	UiConst.ActivityView = "ActivityView";

	class BaseView extends Laya.View {
	    constructor(id) {
	        super();
	        this.isCreateUi = false;
	        this.isOpenUi = false;
	        this.isShow = false;
	        this.openAniOver = true;
	        this.playAni = true;
	        this.showBlackBG = true;
	        this.bgClickClose = true;
	        this.proFitX = 0;
	        this.proFitY = 0;
	        this.id = id;
	        this.loadScene("data/window/" + id + ".scene");
	    }
	    onAwake() {
	        super.onAwake();
	    }
	    openUi(arg) {
	        this.arg = arg;
	        this.isShow = true;
	        this.upload();
	        this.fitterPos();
	        if (this.playAni) {
	            this.showAni();
	        }
	        else {
	            this.showDone();
	        }
	        if (this.showBlackBG) {
	            ViewBg.ins().show(this);
	        }
	        SoundMgr.ins().playSound("ui_zd_naqi");
	        MsgCenter.listen(MsgConst.RESIZE_WINDOW, this.fitterPos, this);
	    }
	    fitterPos() {
	        let x = (Laya.stage.width - this.width) / 2 >> 0;
	        let y = (Laya.stage.height - this.height) / 2 >> 0;
	        let fitX = x - this.proFitX;
	        let fitY = y - this.proFitY;
	        this.pos(x, y, true);
	        this.proFitX = x;
	        this.proFitY = y;
	    }
	    showAni() {
	        if (!this.winAni) {
	            this.winAni = new Laya.Tween();
	            this.alpha = 0;
	        }
	        let tagetY = this.y;
	        this.y -= 20;
	        this.openAniOver = false;
	        this.winAni.to(this, { y: tagetY, alpha: 1 }, 150, Laya.Ease.linearNone, Laya.Handler.create(this, this.showDone));
	    }
	    showDone() {
	        this.openAniOver = true;
	    }
	    windowCloseUi(arg) {
	        this.isOpenUi = false;
	        MsgCenter.remove(MsgConst.RESIZE_WINDOW, this.fitterPos, this);
	        if (this.isCreateUi) {
	            this.closeUi(arg);
	        }
	        else {
	            ShortLoading.ins().hide();
	            this.removeSelf();
	        }
	    }
	    closeUi(arg) {
	        if (this.helpBtn) {
	            this.helpBtn.off(Laya.Event.CLICK, this, this.clickHelpEvent);
	            this.helpFun = null;
	        }
	        let aniObjY = this.y;
	        let targetY = aniObjY + 20;
	        if (this.winAni) {
	            if (arg == -1) {
	                this.y = targetY;
	                this.isShow = false;
	                this.removeSelf();
	            }
	            else {
	                this.winAni.to(this, { y: targetY, alpha: 0 }, 150, Laya.Ease.linearNone, Laya.Handler.create(this, function () {
	                    this.isShow = false;
	                    this.removeSelf();
	                }));
	            }
	        }
	        else {
	            this.isShow = false;
	            this.removeSelf();
	        }
	        if (this.showBlackBG) {
	            ViewBg.ins().hide(this);
	        }
	        this.isCreateUi = true;
	    }
	    onBgClick() {
	        if (this.openAniOver) {
	            this._closeUi();
	        }
	    }
	    _closeUi() {
	        if (this.bgClickClose) {
	            SoundMgr.ins().playSound("ui_tongyong");
	            LayerMgr.ins().closeUi(this.name);
	        }
	    }
	    setHelpMsg(fun) {
	        this.helpFun = fun;
	        this.helpBtn.visible = true;
	        this.helpBtn.on(Laya.Event.CLICK, this, this.clickHelpEvent);
	    }
	    clickHelpEvent() {
	        if (this.helpFun) {
	            this.helpFun.run();
	            SoundMgr.ins().playSound("ui_tongyong");
	        }
	    }
	    showWindow() {
	    }
	    hideWindow() {
	    }
	    upload() {
	    }
	    onEnable() {
	        ShortLoading.ins().hide();
	        UiConst.isWinOpening = false;
	        if (this.isOpenUi) {
	            this.openUi(this.arg);
	        }
	    }
	    onDisable() {
	        if (this.isShow) {
	            this.closeUi(this.arg);
	        }
	    }
	    onOpened(arg) {
	        super.onOpened(arg);
	    }
	    onClosed(arg) {
	        super.onClosed(arg);
	    }
	    onDestroy() {
	    }
	    disposeRes() {
	    }
	}

	var Handler$1 = Laya.Handler;
	class BaseModal extends BaseView {
	    setTitle(value) {
	        this.boxCom.title = value;
	    }
	    onCloseCall() {
	    }
	    onAwake() {
	        super.onAwake();
	        this.boxCom.closeHandler = Handler$1.create(this, this.onBgClick, [], false);
	        ViewBg.ins().blankBg.on(Laya.Event.CLICK, this, this.onCloseCall);
	        this.boxCom.btnClose.on(Laya.Event.CLICK, this, this.onCloseCall);
	    }
	}

	class FunOpenMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.funcList = {};
	    }
	    getOpenLv(id) {
	        let vo = this.funcList[id];
	        if (!vo) {
	            console.error("不存在这个功能：" + id);
	            return 0;
	        }
	        return vo.openLv;
	    }
	    getOpenData(id) {
	        let vo = this.funcList[id];
	        if (!vo) {
	            return;
	        }
	        return vo;
	    }
	    windowIsOpen(winId, floatMsg = true) {
	        let cfg = PConfig.getCfg("funWindow.json");
	        if (!cfg)
	            return true;
	        let data = JsonUtil.getObject(cfg, winId);
	        if (!data) {
	            return true;
	        }
	        let funId = JsonUtil.getString(data, "funId");
	        if (StringUtil.isEmpty(funId)) {
	            return true;
	        }
	        return this.isOpen(funId, floatMsg);
	    }
	    isOpen(funId, floatMsg = true) {
	        let funData = this.getOpenData(funId);
	        if (funData) {
	            if (!funData.isOpen) {
	                if (floatMsg) {
	                    let msg = StringUtil.format(LanCfg.get("10010021"), FunOpenMgr.ins().getOpenLv(funId));
	                    FloatMsgUtil.start(msg);
	                }
	            }
	            return funData.isOpen;
	        }
	        else {
	            return true;
	        }
	    }
	}

	var PopupAdditionMode;
	(function (PopupAdditionMode) {
	    PopupAdditionMode[PopupAdditionMode["ENQUEUE"] = 0] = "ENQUEUE";
	    PopupAdditionMode[PopupAdditionMode["STACK"] = 1] = "STACK";
	    PopupAdditionMode[PopupAdditionMode["REPLACE"] = 2] = "REPLACE";
	})(PopupAdditionMode || (PopupAdditionMode = {}));
	var YesNoUnsetID;
	(function (YesNoUnsetID) {
	    YesNoUnsetID[YesNoUnsetID["UNSET"] = 0] = "UNSET";
	    YesNoUnsetID[YesNoUnsetID["Yes"] = 1] = "Yes";
	    YesNoUnsetID[YesNoUnsetID["No"] = 2] = "No";
	})(YesNoUnsetID || (YesNoUnsetID = {}));
	var UIStateTransitionID;
	(function (UIStateTransitionID) {
	    UIStateTransitionID[UIStateTransitionID["DelayBeforeTransitionIn"] = 0] = "DelayBeforeTransitionIn";
	    UIStateTransitionID[UIStateTransitionID["TransitionIn"] = 1] = "TransitionIn";
	    UIStateTransitionID[UIStateTransitionID["DelayBeforeTransitionOut"] = 2] = "DelayBeforeTransitionOut";
	    UIStateTransitionID[UIStateTransitionID["TransitionOut"] = 3] = "TransitionOut";
	    UIStateTransitionID[UIStateTransitionID["FullyVisible"] = 4] = "FullyVisible";
	    UIStateTransitionID[UIStateTransitionID["FullyHidden"] = 5] = "FullyHidden";
	})(UIStateTransitionID || (UIStateTransitionID = {}));

	class ModalDialogDefinition {
	    constructor(prefabName) {
	        this.obscureScreen = true;
	        this.closeWithExternalTap = true;
	        this.hideCloseBtn = false;
	        this.noCloseWindow = false;
	        this.prefabName = prefabName;
	    }
	    static create(prefabName) {
	        return new ModalDialogDefinition(prefabName);
	    }
	    setObscureScreen(value) {
	        this.obscureScreen = value;
	        return this;
	    }
	    setExternalTapClose(value) {
	        this.closeWithExternalTap = value;
	        return this;
	    }
	    setPersist(value) {
	        this.persist = value;
	        return this;
	    }
	    setCallbacks(confirmCallback, closeCallback = null) {
	        this.confirmCallback = confirmCallback;
	        this.closeCallback = closeCallback;
	        return this;
	    }
	}

	class PopupManager {
	    static sceneExitCleanup() {
	        this.closeTopAndClearAll();
	    }
	    static closeTopAndClearAll() {
	        LayerMgr.ins().closeAllPop();
	    }
	    static show(prefabName, mode = PopupAdditionMode.STACK) {
	        this.show2(ModalDialogDefinition.create(prefabName), mode);
	    }
	    static show2(modalDef, mode = PopupAdditionMode.STACK) {
	        LayerMgr.ins().open(modalDef.prefabName, modalDef);
	    }
	}

	class ModalGeneric1ButtonDefinition extends ModalDialogDefinition {
	    constructor(prefabName) {
	        super(prefabName);
	    }
	    static create() {
	        return new ModalGeneric1ButtonDefinition(UiConst.ModalDialogGeneric1Button);
	    }
	    setTexts(headerText, bodyText) {
	        this.headerText = headerText;
	        this.bodyText = bodyText;
	        return this;
	    }
	    setConfirmLabel(value) {
	        this.confirmButtonLabel = value;
	        return this;
	    }
	    setFocalObject(value, enableRays) {
	        this.focalObjectDefinition = value;
	        this.showRaysForFocalObject = enableRays;
	        return this;
	    }
	    setFocalIcon(icon, enableRays) {
	        this.focalIcon = icon;
	        this.showRaysForFocalObject = enableRays;
	        return this;
	    }
	}

	class ModalConfirmPurchaseDefinition extends ModalGeneric1ButtonDefinition {
	    constructor(headerText, bodyText, currencyType, cost, obscureScreen, externalTapClose, focalObject, showSpinningRaysForFocalObject, eventPlayerConfirmed, eventCancelled) {
	        super(UiConst.ModalDialogConfirmPurchase);
	        this.setCost(cost, currencyType);
	        this.setTexts(headerText, bodyText);
	        this.setObscureScreen(obscureScreen);
	        this.setExternalTapClose(externalTapClose);
	        this.setFocalObject(focalObject, showSpinningRaysForFocalObject);
	        this.setCallbacks(eventPlayerConfirmed, eventCancelled);
	    }
	    setCost(value, currencyType) {
	        this.cost = value;
	        this.currencyType = currencyType;
	        return this;
	    }
	}

	class ModalConfirmStarterPackDefinition extends ModalGeneric1ButtonDefinition {
	    constructor(headerText, bodyText, localizedCost, obscureScreen, externalTapClose, focalObject, showSpinningRays, eventConfirmed, eventCancelled) {
	        super("ModalDialogConfirmStarterPackPurchase");
	        this.setLocalizedCost(localizedCost);
	        this.setTexts(headerText, bodyText);
	        this.setObscureScreen(obscureScreen);
	        this.setExternalTapClose(externalTapClose);
	        this.setFocalObject(focalObject, showSpinningRays);
	        this.setCallbacks(eventConfirmed, eventCancelled);
	    }
	    setLocalizedCost(value) {
	        this.localizedCost = value;
	        return this;
	    }
	}

	class ModalGeneric2ButtonDefinition extends ModalGeneric1ButtonDefinition {
	    constructor() {
	        super(UiConst.ModalDialogGeneric2Button);
	    }
	    static create() {
	        return new ModalGeneric2ButtonDefinition();
	    }
	    setDeclineLabel(value) {
	        this.declineButtonLabel = value;
	        return this;
	    }
	    setDeclineCallback(declineCallback) {
	        this.declineCallback = declineCallback;
	        return this;
	    }
	}

	class Presets {
	    static PurchaseConfirmation(headerText, bodyText, currencyType, cost, obscureScreen, focalObject, showSpinningRaysForFocalObject, eventPlayerConfirmed, eventCancelled) {
	        if (currencyType == ECurrency.Diamond && !Glob.CanMakePurchase()) {
	            return Presets.CanNotPurchase();
	        }
	        return new ModalConfirmPurchaseDefinition(headerText, bodyText, currencyType, cost, obscureScreen, true, focalObject, showSpinningRaysForFocalObject, eventPlayerConfirmed, eventCancelled);
	    }
	    static StarterPackPurchaseConfirmation(headerText, bodyText, localizedCost, obscureScreen, focalObject, showSpinningRaysForFocalObject, eventPlayerConfirmed, eventPlayerCancelled) {
	        if (!Glob.CanMakePurchase()) {
	            return Presets.CanNotPurchase();
	        }
	        return new ModalConfirmStarterPackDefinition(headerText, bodyText, localizedCost, obscureScreen, true, focalObject, showSpinningRaysForFocalObject, eventPlayerConfirmed, eventPlayerCancelled);
	    }
	    static CanNotPurchase() {
	        return Presets.Simple1Button(LanCfg.get("20021001"), LanCfg.get("20021002"));
	    }
	    static Scrollable1Button(headerText, bodyText) {
	        let modalDialogDefinition = Presets.Simple1Button2(headerText, bodyText, LanCfg.get("10010003"));
	        return modalDialogDefinition;
	    }
	    static Simple1Button(headerText, bodyText) {
	        return ModalGeneric1ButtonDefinition.create().setTexts(headerText, bodyText).setConfirmLabel(LanCfg.get("10010003"));
	    }
	    static Simple1Button2(headerText, bodyText, closeButtonText) {
	        return ModalGeneric1ButtonDefinition.create().setTexts(headerText, bodyText).setConfirmLabel(closeButtonText);
	    }
	    static Simple1Button3(headerText, bodyText, closeButtonText, obscureScreen) {
	        return ModalGeneric1ButtonDefinition.create().setTexts(headerText, bodyText).setConfirmLabel(closeButtonText).setObscureScreen(obscureScreen);
	    }
	    static Simple1Button4(headerText, bodyText, closeButtonText, obscureScreen, modalClosedCallback, confirmCallback = null) {
	        return ModalGeneric1ButtonDefinition.create().setTexts(headerText, bodyText).setConfirmLabel(closeButtonText).setCallbacks(confirmCallback, modalClosedCallback)
	            .setObscureScreen(obscureScreen);
	    }
	    static Simple1Button5(headerText, bodyText, closeButtonText, obscureScreen, focalObject, showSpinningRaysForFocalObject, modalClosedCallback, confirmCallback = null) {
	        return ModalGeneric1ButtonDefinition.create().setTexts(headerText, bodyText).setConfirmLabel(closeButtonText).setFocalObject(focalObject, showSpinningRaysForFocalObject)
	            .setCallbacks(confirmCallback, modalClosedCallback)
	            .setObscureScreen(obscureScreen);
	    }
	    static Simple1Button6(headerText, bodyText, closeButtonText, obscureScreen, focalIcon, showSpinningRaysForFocalObject, modalClosedCallback, confirmCallback = null) {
	        return ModalGeneric1ButtonDefinition.create().setTexts(headerText, bodyText).setConfirmLabel(closeButtonText).setFocalIcon(focalIcon, showSpinningRaysForFocalObject)
	            .setCallbacks(confirmCallback, modalClosedCallback)
	            .setObscureScreen(obscureScreen);
	    }
	    static Simple2Button(headerText, bodyText, actionButtonText, obscureScreen, confirmCallback) {
	        return ModalGeneric2ButtonDefinition.create()
	            .setDeclineLabel(LanCfg.get("10010002"))
	            .setConfirmLabel(actionButtonText)
	            .setTexts(headerText, bodyText)
	            .setCallbacks(confirmCallback)
	            .setObscureScreen(obscureScreen);
	    }
	    static Simple2Button2(headerText, bodyText, greenButtonText, redButtonText, greenButtonCallback, redButtonCallback, closedCallback, closeWithExternalTap, obscureScreen) {
	        return ModalGeneric2ButtonDefinition.create()
	            .setDeclineLabel(redButtonText)
	            .setDeclineCallback(redButtonCallback)
	            .setTexts(headerText, bodyText)
	            .setConfirmLabel(greenButtonText)
	            .setCallbacks(greenButtonCallback, closedCallback)
	            .setObscureScreen(obscureScreen)
	            .setExternalTapClose(closeWithExternalTap);
	    }
	    static Simple2Button3(headerText, bodyText, greenButtonText, redButtonText, greenButtonCallback, redButtonCallback, closedCallback, closeWithExternalTap, obscureScreen, focalObject, showSpinningRaysForFocalObject) {
	        return ModalGeneric2ButtonDefinition.create()
	            .setDeclineLabel(redButtonText)
	            .setDeclineCallback(redButtonCallback)
	            .setTexts(headerText, bodyText)
	            .setFocalObject(focalObject, showSpinningRaysForFocalObject)
	            .setConfirmLabel(greenButtonText)
	            .setCallbacks(greenButtonCallback, closedCallback)
	            .setObscureScreen(obscureScreen)
	            .setExternalTapClose(closeWithExternalTap);
	    }
	}

	class SL_Tutorial {
	    constructor() {
	        this.id = SaveLoadConst.TUTORIAL;
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.tipsShown) {
	            obj.setValue("0", SyncObj.serializeFromArray(this.tipsShown));
	        }
	        return obj;
	    }
	    import(data) {
	        if (data.hasKey("0")) {
	            this.tipsShown = SyncObj.deserializeToArray(data.getValue("0"));
	        }
	    }
	}

	var HelpArrowTypeID;
	(function (HelpArrowTypeID) {
	    HelpArrowTypeID[HelpArrowTypeID["NONE"] = 0] = "NONE";
	    HelpArrowTypeID[HelpArrowTypeID["ExitLevel"] = 1] = "ExitLevel";
	    HelpArrowTypeID[HelpArrowTypeID["LevelWinGoal"] = 2] = "LevelWinGoal";
	    HelpArrowTypeID[HelpArrowTypeID["InWorld_Generic"] = 3] = "InWorld_Generic";
	    HelpArrowTypeID[HelpArrowTypeID["TomeTipPointer"] = 4] = "TomeTipPointer";
	    HelpArrowTypeID[HelpArrowTypeID["MapButton"] = 5] = "MapButton";
	    HelpArrowTypeID[HelpArrowTypeID["QuestStar"] = 6] = "QuestStar";
	    HelpArrowTypeID[HelpArrowTypeID["ScrollLock"] = 7] = "ScrollLock";
	    HelpArrowTypeID[HelpArrowTypeID["ShopButton"] = 8] = "ShopButton";
	    HelpArrowTypeID[HelpArrowTypeID["DragonBook"] = 9] = "DragonBook";
	    HelpArrowTypeID[HelpArrowTypeID["Friends"] = 10] = "Friends";
	})(HelpArrowTypeID || (HelpArrowTypeID = {}));
	var GameTipTypeID;
	(function (GameTipTypeID) {
	    GameTipTypeID[GameTipTypeID["NONE"] = 0] = "NONE";
	    GameTipTypeID[GameTipTypeID["Tip_InfoBar"] = 1] = "Tip_InfoBar";
	    GameTipTypeID[GameTipTypeID["Tip_ImmovableObjects"] = 2] = "Tip_ImmovableObjects";
	    GameTipTypeID[GameTipTypeID["Tip_NonMatchingObjects"] = 3] = "Tip_NonMatchingObjects";
	    GameTipTypeID[GameTipTypeID["Tip_EvilFog"] = 4] = "Tip_EvilFog";
	    GameTipTypeID[GameTipTypeID["Tip_ManySleep"] = 5] = "Tip_ManySleep";
	    GameTipTypeID[GameTipTypeID["Tip_AllAsleep"] = 6] = "Tip_AllAsleep";
	    GameTipTypeID[GameTipTypeID["Tip_WakeTest_AllAsleep"] = 7] = "Tip_WakeTest_AllAsleep";
	    GameTipTypeID[GameTipTypeID["Tip_WakeTest_SendToSleepButton"] = 8] = "Tip_WakeTest_SendToSleepButton";
	    GameTipTypeID[GameTipTypeID["Tip_WakeTest_WakeButton"] = 9] = "Tip_WakeTest_WakeButton";
	    GameTipTypeID[GameTipTypeID["Tip_DragonsChill"] = 10] = "Tip_DragonsChill";
	    GameTipTypeID[GameTipTypeID["Tip_CoinsFull"] = 11] = "Tip_CoinsFull";
	    GameTipTypeID[GameTipTypeID["Tip_StoneFull"] = 12] = "Tip_StoneFull";
	    GameTipTypeID[GameTipTypeID["Tip_DragonBook"] = 13] = "Tip_DragonBook";
	    GameTipTypeID[GameTipTypeID["Tip_LandFull"] = 14] = "Tip_LandFull";
	    GameTipTypeID[GameTipTypeID["Tip_StoneCollected"] = 15] = "Tip_StoneCollected";
	    GameTipTypeID[GameTipTypeID["Tip_ScreenDragLock"] = 16] = "Tip_ScreenDragLock";
	    GameTipTypeID[GameTipTypeID["Tip_QuestGiver"] = 17] = "Tip_QuestGiver";
	    GameTipTypeID[GameTipTypeID["Tip_Challenge_Levels_Shop"] = 18] = "Tip_Challenge_Levels_Shop";
	    GameTipTypeID[GameTipTypeID["Tip_DoubleTap"] = 19] = "Tip_DoubleTap";
	    GameTipTypeID[GameTipTypeID["Tip_FirstUnfog"] = 20] = "Tip_FirstUnfog";
	    GameTipTypeID[GameTipTypeID["Tip_Challenge_Stage1"] = 21] = "Tip_Challenge_Stage1";
	    GameTipTypeID[GameTipTypeID["Tip_Challenge_Stage2"] = 22] = "Tip_Challenge_Stage2";
	    GameTipTypeID[GameTipTypeID["Tip_Challenge_Stage3"] = 23] = "Tip_Challenge_Stage3";
	    GameTipTypeID[GameTipTypeID["Tip_EggBank"] = 24] = "Tip_EggBank";
	})(GameTipTypeID || (GameTipTypeID = {}));

	class DialogsCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("Dialogs.json");
	            for (let key in cfg) {
	                let data = cfg[key];
	                this._cfg[key] = {
	                    cid: parseInt[key],
	                    dialogId: data["Dialog ID"],
	                    levelId: data["Show In World Map After Level"],
	                    isOnlyOnce: data["onceOnly"] ? true : false,
	                    isAutoWin: data["Auto Win?"] ? true : false,
	                    isLockInput: data["Lock Input?"] ? true : false,
	                    isDeleteOnDone: data["Delete on Done?"] ? true : false,
	                    isForce: data["Force?"] ? true : false,
	                    cinematicsId: data["Cinematics ID"] || "",
	                    speakerPref: data["Speaker Prefab"] ? parseInt(data["Speaker Prefab"]) : undefined,
	                    focalPref: data["Focal Object Prefab"] ? parseInt(data["Focal Object Prefab"]) : undefined,
	                    header: data["Key - Header"] || "",
	                    body: data["Key - Body"] || "",
	                    arrowID: data["Arrow ID"] ? HelpArrowTypeID[data["Arrow ID"]] : HelpArrowTypeID.NONE,
	                };
	            }
	        }
	        return this._cfg;
	    }
	    static get(cid) {
	        return this.cfg[cid];
	    }
	    static has(cid) {
	        return !!this.cfg[cid];
	    }
	}

	var EventTypeID;
	(function (EventTypeID) {
	    EventTypeID[EventTypeID["NONE"] = 0] = "NONE";
	    EventTypeID[EventTypeID["Type1_ResourceCollection"] = 1] = "Type1_ResourceCollection";
	    EventTypeID[EventTypeID["Type2_ScorePuzzle"] = 2] = "Type2_ScorePuzzle";
	})(EventTypeID || (EventTypeID = {}));
	var ChallengeLevelV2VariantID;
	(function (ChallengeLevelV2VariantID) {
	    ChallengeLevelV2VariantID[ChallengeLevelV2VariantID["Variant1_Easier"] = 0] = "Variant1_Easier";
	    ChallengeLevelV2VariantID[ChallengeLevelV2VariantID["Variant2_Normal"] = 1] = "Variant2_Normal";
	    ChallengeLevelV2VariantID[ChallengeLevelV2VariantID["Variant3_Harder"] = 2] = "Variant3_Harder";
	    ChallengeLevelV2VariantID[ChallengeLevelV2VariantID["Variant4_EasierFirstPartOnly"] = 3] = "Variant4_EasierFirstPartOnly";
	    ChallengeLevelV2VariantID[ChallengeLevelV2VariantID["Variant5_V1TimesPlus2Levels"] = 4] = "Variant5_V1TimesPlus2Levels";
	})(ChallengeLevelV2VariantID || (ChallengeLevelV2VariantID = {}));
	var ChallengeLevelDifficultyID;
	(function (ChallengeLevelDifficultyID) {
	    ChallengeLevelDifficultyID[ChallengeLevelDifficultyID["Level1"] = 0] = "Level1";
	    ChallengeLevelDifficultyID[ChallengeLevelDifficultyID["Level2"] = 1] = "Level2";
	    ChallengeLevelDifficultyID[ChallengeLevelDifficultyID["Level3"] = 2] = "Level3";
	})(ChallengeLevelDifficultyID || (ChallengeLevelDifficultyID = {}));
	var EnumLevelEndStatus;
	(function (EnumLevelEndStatus) {
	    EnumLevelEndStatus[EnumLevelEndStatus["SUCCESS"] = 1] = "SUCCESS";
	    EnumLevelEndStatus[EnumLevelEndStatus["LOSE"] = 2] = "LOSE";
	    EnumLevelEndStatus[EnumLevelEndStatus["LEAVE"] = 3] = "LEAVE";
	    EnumLevelEndStatus[EnumLevelEndStatus["CAMP"] = 4] = "CAMP";
	    EnumLevelEndStatus[EnumLevelEndStatus["RESTART"] = 5] = "RESTART";
	})(EnumLevelEndStatus || (EnumLevelEndStatus = {}));
	var LevelStateID;
	(function (LevelStateID) {
	    LevelStateID[LevelStateID["NONE"] = 0] = "NONE";
	    LevelStateID[LevelStateID["Playing"] = 1] = "Playing";
	    LevelStateID[LevelStateID["Complete"] = 2] = "Complete";
	    LevelStateID[LevelStateID["Defeat"] = 3] = "Defeat";
	    LevelStateID[LevelStateID["Resetting"] = 4] = "Resetting";
	})(LevelStateID || (LevelStateID = {}));
	var LevelCompleteStateID;
	(function (LevelCompleteStateID) {
	    LevelCompleteStateID[LevelCompleteStateID["NONE"] = 0] = "NONE";
	    LevelCompleteStateID[LevelCompleteStateID["PauseBeforeHealDeadLand"] = 1] = "PauseBeforeHealDeadLand";
	    LevelCompleteStateID[LevelCompleteStateID["HealDeadLand"] = 2] = "HealDeadLand";
	    LevelCompleteStateID[LevelCompleteStateID["BringDeadThingsToLife"] = 3] = "BringDeadThingsToLife";
	    LevelCompleteStateID[LevelCompleteStateID["CreateLifeOnEmptyTiles"] = 4] = "CreateLifeOnEmptyTiles";
	    LevelCompleteStateID[LevelCompleteStateID["UnSummon"] = 5] = "UnSummon";
	    LevelCompleteStateID[LevelCompleteStateID["LevelWinBanner"] = 6] = "LevelWinBanner";
	    LevelCompleteStateID[LevelCompleteStateID["PauseBeforeLevelStatsScreen"] = 7] = "PauseBeforeLevelStatsScreen";
	    LevelCompleteStateID[LevelCompleteStateID["StarTally"] = 8] = "StarTally";
	    LevelCompleteStateID[LevelCompleteStateID["TimeTally"] = 9] = "TimeTally";
	    LevelCompleteStateID[LevelCompleteStateID["PointsTally"] = 10] = "PointsTally";
	    LevelCompleteStateID[LevelCompleteStateID["BringHomeMenu"] = 11] = "BringHomeMenu";
	    LevelCompleteStateID[LevelCompleteStateID["ReturnToWorldMap"] = 12] = "ReturnToWorldMap";
	})(LevelCompleteStateID || (LevelCompleteStateID = {}));
	var LevelDefeatedStateID;
	(function (LevelDefeatedStateID) {
	    LevelDefeatedStateID[LevelDefeatedStateID["NONE"] = 0] = "NONE";
	    LevelDefeatedStateID[LevelDefeatedStateID["SummonOnslaught"] = 1] = "SummonOnslaught";
	    LevelDefeatedStateID[LevelDefeatedStateID["ShowDefeatHeadline"] = 2] = "ShowDefeatHeadline";
	    LevelDefeatedStateID[LevelDefeatedStateID["CameraFade"] = 3] = "CameraFade";
	    LevelDefeatedStateID[LevelDefeatedStateID["ReturnToWorldMap"] = 4] = "ReturnToWorldMap";
	})(LevelDefeatedStateID || (LevelDefeatedStateID = {}));
	var StarTallyStateID;
	(function (StarTallyStateID) {
	    StarTallyStateID[StarTallyStateID["NONE"] = 0] = "NONE";
	    StarTallyStateID[StarTallyStateID["Star1"] = 1] = "Star1";
	    StarTallyStateID[StarTallyStateID["Star2"] = 2] = "Star2";
	    StarTallyStateID[StarTallyStateID["Star3"] = 3] = "Star3";
	})(StarTallyStateID || (StarTallyStateID = {}));
	var TimeTallySateID;
	(function (TimeTallySateID) {
	    TimeTallySateID[TimeTallySateID["NONE"] = 0] = "NONE";
	    TimeTallySateID[TimeTallySateID["PlayerTimeTickUp"] = 1] = "PlayerTimeTickUp";
	    TimeTallySateID[TimeTallySateID["TimeQualityStamp"] = 2] = "TimeQualityStamp";
	    TimeTallySateID[TimeTallySateID["NewTimeRecord"] = 3] = "NewTimeRecord";
	    TimeTallySateID[TimeTallySateID["DelayBeforeTransToPoints"] = 4] = "DelayBeforeTransToPoints";
	})(TimeTallySateID || (TimeTallySateID = {}));
	var PointsTallyStateID;
	(function (PointsTallyStateID) {
	    PointsTallyStateID[PointsTallyStateID["NONE"] = 0] = "NONE";
	    PointsTallyStateID[PointsTallyStateID["SpeedBonusTickUp"] = 1] = "SpeedBonusTickUp";
	    PointsTallyStateID[PointsTallyStateID["SpeedBonusQualityStamp"] = 2] = "SpeedBonusQualityStamp";
	    PointsTallyStateID[PointsTallyStateID["PlayerScoreTickUp"] = 3] = "PlayerScoreTickUp";
	    PointsTallyStateID[PointsTallyStateID["PlayerScoreQualityStamp"] = 4] = "PlayerScoreQualityStamp";
	    PointsTallyStateID[PointsTallyStateID["NewHighScoreRecord"] = 5] = "NewHighScoreRecord";
	    PointsTallyStateID[PointsTallyStateID["WaitForContinueTap"] = 6] = "WaitForContinueTap";
	})(PointsTallyStateID || (PointsTallyStateID = {}));
	var ResettingStateID;
	(function (ResettingStateID) {
	    ResettingStateID[ResettingStateID["NONE"] = 0] = "NONE";
	    ResettingStateID[ResettingStateID["StartReset"] = 1] = "StartReset";
	    ResettingStateID[ResettingStateID["PauseBeforeExit"] = 2] = "PauseBeforeExit";
	    ResettingStateID[ResettingStateID["ResetAndExit"] = 3] = "ResetAndExit";
	})(ResettingStateID || (ResettingStateID = {}));
	var SpecialStateID;
	(function (SpecialStateID) {
	    SpecialStateID[SpecialStateID["NONE"] = 0] = "NONE";
	    SpecialStateID[SpecialStateID["ResetIsASuccess"] = 1] = "ResetIsASuccess";
	})(SpecialStateID || (SpecialStateID = {}));
	var WinStampTierID;
	(function (WinStampTierID) {
	    WinStampTierID[WinStampTierID["NONE"] = 0] = "NONE";
	    WinStampTierID[WinStampTierID["Good"] = 1] = "Good";
	    WinStampTierID[WinStampTierID["Great"] = 2] = "Great";
	    WinStampTierID[WinStampTierID["Epic"] = 3] = "Epic";
	})(WinStampTierID || (WinStampTierID = {}));

	class TomeTipStep {
	    constructor(speakerPrefab, focalObjectPrefab, arrowID, locKeyHeader, locKeyText, pageNumber) {
	        this.headerKey = "";
	        this.bodyKey = "";
	        this.speakerPref = 0;
	        this.focalPref = 0;
	        this.arrowId = arrowID;
	        this.pageNumber = pageNumber;
	        this.headerKey = locKeyHeader;
	        this.speakerPref = speakerPrefab;
	        this.focalPref = focalObjectPrefab;
	        this.bodyKey = (!(locKeyText == "CINEMATIC_ONLY")) ? locKeyText : "";
	    }
	    get body() {
	        return this.bodyKey ? LanCfg.get(this.bodyKey) : "";
	    }
	    get hasSpeaker() {
	        return !!this.speakerPref;
	    }
	    get speakerPrefName() {
	        return PropsCfg.getPref(this.speakerPref);
	    }
	    get hasFocal() {
	        return !!this.focalPref;
	    }
	    get focalPrefName() {
	        return PropsCfg.getPref(this.focalPref);
	    }
	}

	class TomeTipVo {
	    constructor(dialogId, showInWorldMapAfterLevel, speakerPrefab, focalObjectPrefab, arrowID, locKeyHeader, locKeytext, cinematicsId, autoWin, onlyOnce, lockInput, deleteOnDone, force) {
	        this.EverViewed = false;
	        this.DialogComplete = false;
	        this.currStep = null;
	        this.id = dialogId;
	        this.numSteps = 1;
	        this.isAutoWin = autoWin;
	        this.isOnlyOnce = onlyOnce;
	        this.isLockInput = lockInput;
	        this.isDeleteOnDone = deleteOnDone;
	        this.cinematicsId = cinematicsId;
	        this.keyHeader = locKeyHeader;
	        this.isForceEvenIfTutorialIsOff = force;
	        this.showInWorldMapAfterLevel = showInWorldMapAfterLevel;
	        this.currStep = new TomeTipStep(speakerPrefab, focalObjectPrefab, arrowID, locKeyHeader, locKeytext, this.numSteps);
	    }
	    clearProgress() {
	        this.EverViewed = false;
	    }
	    addStep(speakerPrefab, focalObjectPrefab, arrowID, locKeyHeader, locKeyText) {
	        if (!this.steps) {
	            this.steps = [];
	            this.steps.push(this.currStep);
	        }
	        this.numSteps++;
	        let item = new TomeTipStep(speakerPrefab, focalObjectPrefab, arrowID, locKeyHeader, locKeyText, this.numSteps);
	        this.steps.push(item);
	    }
	    get hasMultiplePages() {
	        return !!this.steps;
	    }
	    get numPages() {
	        if (this.hasMultiplePages) {
	            return this.steps.length;
	        }
	        return 1;
	    }
	    get onLastPage() {
	        return this.currStep.pageNumber === this.numPages;
	    }
	    show(tomeTipObjectComponent = null, tipRequestedManuallyByPlayer = false) {
	        if (!Glob.tutorialOn && !tipRequestedManuallyByPlayer && !this.isForceEvenIfTutorialIsOff) {
	            return false;
	        }
	        if (this.isOnlyOnce && TomeTip.hasShown(this.id)) {
	            return false;
	        }
	        if (Glob.inLevelOrHome && LayerMgr.ins().winIsShow(UiConst.TutorialView)) {
	            return false;
	        }
	        if (Glob.inWorld && LayerMgr.ins().winIsShow(UiConst.TutorialView)) {
	            return false;
	        }
	        TomeTip.s_mostRecentTomeTipObjectComponent = tomeTipObjectComponent;
	        this.DialogComplete = false;
	        if (this.hasMultiplePages) {
	            this.currStep = this.steps[0];
	        }
	        LayerMgr.ins().open(UiConst.TutorialView, this);
	        return true;
	    }
	    advance() {
	        if (this.onLastPage) {
	            this.EverViewed = true;
	            this.DialogComplete = true;
	            if (Glob.currLevelData) {
	                Glob.currentLevel.tomeTipFinishedShowing();
	            }
	            TomeTip.saveCompletedState(this.id);
	            if (TomeTip.s_mostRecentTomeTipObjectComponent != null) {
	                TomeTip.s_mostRecentTomeTipObjectComponent.UpdateQuestionMarkAndEffectsState();
	                TomeTip.s_mostRecentTomeTipObjectComponent.CompletedTheTip();
	            }
	            if (this.isAutoWin && Glob.currLevelData) {
	                Glob.currentLevel.setState(LevelStateID.Complete);
	            }
	        }
	        else {
	            this.currStep = this.steps[this.currStep.pageNumber];
	            if (this.currStep.headerKey) {
	                this.keyHeader = this.currStep.headerKey;
	            }
	        }
	    }
	    GoBackOnePage() {
	        if (this.currStep.pageNumber > 1) {
	            this.currStep = this.steps[this.currStep.pageNumber - 2];
	            if (this.currStep.headerKey) {
	                this.keyHeader = this.currStep.headerKey;
	            }
	        }
	    }
	    TomeTipFinishedShowing() {
	        if (Glob.inLevel && Glob.currLevelData.cid == WorldMgr.ins().Level_Grasslands_1 && GameTipTypeID[GameTipTypeID.Tip_DoubleTap] === this.id) {
	            this.ShowDoubleTapArrowOnFlower();
	        }
	    }
	    ShowDoubleTapArrowOnFlower() {
	    }
	}

	class TomeTip {
	    static init() {
	        this.tips = {};
	        let cfg = DialogsCfg.cfg;
	        let lastCreated = null;
	        for (let key in cfg) {
	            let cfgItem = cfg[key];
	            if (cfgItem.dialogId) {
	                lastCreated = new TomeTipVo(cfgItem.dialogId, cfgItem.levelId, cfgItem.speakerPref, cfgItem.focalPref, cfgItem.arrowID, cfgItem.header, cfgItem.body, cfgItem.cinematicsId, cfgItem.isAutoWin, cfgItem.isOnlyOnce, cfgItem.isLockInput, cfgItem.isDeleteOnDone, cfgItem.isForce);
	                this.tips[cfgItem.dialogId] = lastCreated;
	            }
	            else {
	                lastCreated.addStep(cfgItem.speakerPref, cfgItem.focalPref, cfgItem.arrowID, cfgItem.header, cfgItem.body);
	            }
	        }
	    }
	    static resetAllProgress() {
	        this.tipsShown = [];
	        for (let key in this.tips) {
	            let tip = this.tips[key];
	            tip.clearProgress();
	        }
	    }
	    static hasAnyTutorialShowing() {
	        return LayerMgr.ins().winIsShow(UiConst.TutorialView);
	    }
	    static save() {
	        let saveData_Tutorial = new SL_Tutorial();
	        saveData_Tutorial.tipsShown = this.tipsShown;
	        return saveData_Tutorial;
	    }
	    static load(data) {
	        this.tipsShown = data ? data.tipsShown : [];
	        this.tipsShown.forEach(id => {
	            let tip = this.tips[id];
	            tip && (tip.EverViewed = true);
	        });
	    }
	    static showDialog(id) {
	        if (id === "Dialog_IntroHelpThanks" && LayerMgr.ins().winIsShow(UiConst.TutorialView)) {
	            LayerMgr.ins().close(UiConst.TutorialView);
	        }
	        let tip = this.tips[id];
	        if (!tip) {
	            return false;
	        }
	        if (!Glob.tutorialOn && !tip.isForceEvenIfTutorialIsOff) {
	            return false;
	        }
	        return tip.show();
	    }
	    static getTipById(id) {
	        let idKey = GameTipTypeID[id];
	        let tip = this.tips[idKey];
	        if (!tip) {
	            console.error("Trying to show gameTip that isn't in the Tips Dictionary: " + id);
	            return null;
	        }
	        return tip;
	    }
	    static getTipByKey(key) {
	        let tip = this.tips[key];
	        if (!tip) {
	            console.error("Trying to show gameTip that isn't in the Tips Dictionary: " + key);
	            return null;
	        }
	        return tip;
	    }
	    static everShown(id) {
	        let tip = this.getTipById(id);
	        if (tip == null) {
	            return false;
	        }
	        return this.hasShown(tip.id);
	    }
	    static showGameTip(id) {
	        if (typeof id === "string") {
	            this.showDialog(id);
	        }
	        else {
	            let tip = this.getTipById(id);
	            if (!tip) {
	                console.error("Trying to show gameTip that isn't in the Tips Dictionary: " + id);
	                return false;
	            }
	            if (!Glob.tutorialOn && !tip.isForceEvenIfTutorialIsOff) {
	                return false;
	            }
	            return tip.show();
	        }
	    }
	    static hasShown(id) {
	        return this.tipsShown.some(item => item === id);
	    }
	    static hasShownByGameTipTypeID(id) {
	        let idKey = GameTipTypeID[id];
	        return this.hasShown(idKey);
	    }
	    static saveCompletedState(id) {
	        if (!this.hasShown(id)) {
	            this.tipsShown.push(id);
	        }
	    }
	    static checkForTomeTip(levelId) {
	        for (let key in this.tips) {
	            let tip = this.tips[key];
	            if (tip.showInWorldMapAfterLevel == levelId) {
	                TomeTip.showDialog(tip.id);
	                return true;
	            }
	        }
	        return false;
	    }
	}
	TomeTip.tipsShown = [];
	TomeTip.s_mostRecentTomeTipObjectComponent = null;
	TomeTip.Hero_Magic_Tome = 10880;

	class ScrollScript extends Laya.Script {
	    constructor() {
	        super(...arguments);
	        this._lastOffset = 0;
	        this._checkElastic = false;
	        this._clickOnly = true;
	        this._isElastic = false;
	        this.rollRatio = 0.97;
	        this.elasticDistance = 0;
	        this.elasticBackTime = 500;
	    }
	    onTargetMouseDown(e) {
	        this.owner.event(Laya.Event.END);
	        this._clickOnly = true;
	        this._lastOffset = 0;
	        this._checkElastic = false;
	        this._lastPoint || (this._lastPoint = new Laya.Point());
	        this._lastPoint.setTo(Laya.stage.mouseX, Laya.stage.mouseY);
	        Laya.timer.clear(this, this.tweenMove);
	        Laya.Tween.clearTween(this);
	        Laya.stage.once(Laya.Event.MOUSE_UP, this, this.onStageMouseUp2);
	        Laya.stage.once(Laya.Event.MOUSE_OUT, this, this.onStageMouseUp2);
	        Laya.timer.frameLoop(1, this, this.loop);
	    }
	    loop() {
	        let mouseY = Laya.stage.mouseY;
	        let mouseX = Laya.stage.mouseX;
	        this._lastOffset = mouseX - this._lastPoint.x;
	        if (this._clickOnly) {
	            if (Math.abs(this._lastOffset * Laya.stage["_canvasTransform"].getScaleX()) > 1) {
	                this._clickOnly = false;
	                this._offsets || (this._offsets = []);
	                this._offsets.length = 0;
	                this.owner.mouseEnabled = false;
	                this.owner.event(Laya.Event.START);
	            }
	            else {
	                return;
	            }
	            ;
	        }
	        this._offsets.push(this._lastOffset);
	        this._lastPoint.x = mouseX;
	        this._lastPoint.y = mouseY;
	        if (this._lastOffset === 0)
	            return;
	        if (!this._checkElastic) {
	            if (this.elasticDistance > 0) {
	                if (!this._checkElastic && this._lastOffset != 0) {
	                    if ((this._lastOffset > 0 && this._value <= this.min) || (this._lastOffset < 0 && this._value >= this.max)) {
	                        this._isElastic = true;
	                        this._checkElastic = true;
	                    }
	                    else {
	                        this._isElastic = false;
	                    }
	                }
	            }
	            else {
	                this._checkElastic = true;
	            }
	        }
	        if (this._isElastic) {
	            if (this._value <= this.min) {
	                if (this._lastOffset > 0) {
	                    this.value -= this._lastOffset * Math.max(0, (1 - ((this.min - this._value) / this.elasticDistance)));
	                }
	                else {
	                    this.value -= this._lastOffset * 0.5;
	                    if (this._value >= this.min)
	                        this._checkElastic = false;
	                }
	            }
	            else if (this._value >= this.max) {
	                if (this._lastOffset < 0) {
	                    this.value -= this._lastOffset * Math.max(0, (1 - ((this._value - this.max) / this.elasticDistance)));
	                }
	                else {
	                    this.value -= this._lastOffset * 0.5;
	                    if (this._value <= this.max)
	                        this._checkElastic = false;
	                }
	            }
	        }
	        else {
	            this.value -= this._lastOffset;
	        }
	    }
	    onStageMouseUp2() {
	        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onStageMouseUp2);
	        Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.onStageMouseUp2);
	        Laya.timer.clear(this, this.loop);
	        if (this._clickOnly) {
	            if (this._value >= this.min && this._value <= this.max)
	                return;
	        }
	        this.owner.mouseEnabled = true;
	        if (this._isElastic) {
	            if (this._value < this.min) {
	                Laya.Tween.to(this, { value: this.min }, this.elasticBackTime, Laya.Ease.sineOut, Handler.create(this, this.elasticOver));
	            }
	            else if (this._value > this.max) {
	                Laya.Tween.to(this, { value: this.max }, this.elasticBackTime, Laya.Ease.sineOut, Handler.create(this, this.elasticOver));
	            }
	        }
	        else {
	            if (!this._offsets)
	                return;
	            if (this._offsets.length < 1) {
	                this._offsets[0] = Laya.stage.mouseX - this._lastPoint.x;
	            }
	            let offset = 0;
	            let n = Math.min(this._offsets.length, 3);
	            for (let i = 0; i < n; i++) {
	                offset += this._offsets[this._offsets.length - 1 - i];
	            }
	            this._lastOffset = offset / n;
	            offset = Math.abs(this._lastOffset);
	            if (offset < 2) {
	                this.owner.event(Laya.Event.END);
	                return;
	            }
	            if (offset > 250)
	                this._lastOffset = this._lastOffset > 0 ? 250 : -250;
	            let dis = Math.round(Math.abs(this.elasticDistance * (this._lastOffset / 150)));
	            Laya.timer.frameLoop(1, this, this.tweenMove, [dis]);
	        }
	    }
	    elasticOver() {
	        this._isElastic = false;
	        this.owner.event(Laya.Event.END);
	    }
	    tweenMove(maxDistance) {
	        this._lastOffset *= this.rollRatio;
	        let tarSpeed;
	        if (maxDistance > 0) {
	            if (this._lastOffset > 0 && this.value <= this.min) {
	                this._isElastic = true;
	                tarSpeed = -(this.min - maxDistance - this.value) * 0.5;
	                if (this._lastOffset > tarSpeed)
	                    this._lastOffset = tarSpeed;
	            }
	            else if (this._lastOffset < 0 && this.value >= this.max) {
	                this._isElastic = true;
	                tarSpeed = -(this.max + maxDistance - this.value) * 0.5;
	                if (this._lastOffset < tarSpeed)
	                    this._lastOffset = tarSpeed;
	            }
	        }
	        this.value -= this._lastOffset;
	        if (Math.abs(this._lastOffset) < 0.1) {
	            Laya.timer.clear(this, this.tweenMove);
	            if (this._isElastic) {
	                if (this._value < this.min) {
	                    Laya.Tween.to(this, { value: this.min }, this.elasticBackTime, Laya.Ease.sineOut, Handler.create(this, this.elasticOver));
	                }
	                else if (this._value > this.max) {
	                    Laya.Tween.to(this, { value: this.max }, this.elasticBackTime, Laya.Ease.sineOut, Handler.create(this, this.elasticOver));
	                }
	                else {
	                    this.elasticOver();
	                }
	                return;
	            }
	            this.owner.event(Laya.Event.END);
	        }
	    }
	    get max() {
	        return this._max;
	    }
	    set max(value) {
	        this._max = value;
	    }
	    get min() {
	        return this._min;
	    }
	    set min(value) {
	        this._min = value;
	    }
	    get value() {
	        return this._value;
	    }
	    set value(v) {
	        if (v !== this._value) {
	            this._value = v > this._max ? this._max : v < this._min ? this._min : v;
	            this.changeHandler && this.changeHandler.runWith(this._value);
	        }
	    }
	    get lastOffset() {
	        return this._lastOffset;
	    }
	    onAwake() {
	        this._max = this._min = this._value = 0;
	    }
	    onDestroy() {
	        this.stopScroll();
	        this.changeHandler = null;
	        this._offsets = null;
	    }
	    onEnable() {
	        this.owner.on(Laya.Event.MOUSE_DOWN, this, this.onTargetMouseDown);
	    }
	    onDisable() {
	    }
	    setScroll(min, max, value) {
	        this.min = min;
	        this.max = max;
	        this.value = value;
	    }
	    stopScroll() {
	        this.onStageMouseUp2();
	        Laya.timer.clear(this, this.tweenMove);
	        Laya.Tween.clearTween(this);
	    }
	}

	class UiCamera extends Laya.Camera {
	    constructor() {
	        super();
	        this.gid = 0;
	        this.isRecovered = false;
	        this._renderPosition = new Laya.Vector3();
	        this.orthographic = true;
	        this.orthographicVerticalSize = 1.0;
	        this.transform.rotation = new Laya.Quaternion(0, 1, 0, 0);
	        this.clearFlag = Laya.CameraClearFlags.SolidColor;
	        this.clearColor = UiCamera.COLOR_NORMAL;
	        this.gid = ++UiCamera.GID;
	        this._renderPosition.y = 10 * this.gid;
	    }
	    static create(w = 100, h = 100) {
	        let camera = Laya.Pool.getItemByClass("UiCamera", UiCamera);
	        camera.isRecovered = false;
	        camera.setRenderSize(w, h);
	        return camera;
	    }
	    static clearAll() {
	        let poolList = Laya.Pool.getPoolBySign("UiCamera");
	        poolList.forEach(item => {
	            item.destroy();
	        });
	        Laya.Pool.clearBySign("UiCamera");
	    }
	    get renderW() {
	        return this.renderTarget ? this.renderTarget.width : 0;
	    }
	    get renderH() {
	        return this.renderTarget ? this.renderTarget.height : 0;
	    }
	    get renderPosition() {
	        return this._renderPosition;
	    }
	    setRenderSize(w, h) {
	        let isChange = false;
	        if (this.renderTarget != null) {
	            if (this.renderTarget.width !== w || this.renderTarget.height !== h) {
	                Laya.RenderTexture.recoverToPool(this.renderTarget);
	                isChange = true;
	                this.renderTarget = Laya.RenderTexture.createFromPool(w, h, Laya.RenderTextureFormat.R8G8B8A8);
	            }
	        }
	        else {
	            isChange = true;
	            this.renderTarget = Laya.RenderTexture.createFromPool(w, h, Laya.RenderTextureFormat.R8G8B8A8);
	        }
	        return isChange;
	    }
	    recover() {
	        if (this.isRecovered) {
	            return;
	        }
	        this.isRecovered = true;
	        this.parent && this.removeSelf();
	        Laya.Pool.recover("UiCamera", this);
	    }
	    destroy(destroyChild) {
	        super.destroy(destroyChild);
	        this._renderPosition = null;
	        if (this.renderTarget) {
	            Laya.RenderTexture.recoverToPool(this.renderTarget);
	            this.renderTarget = null;
	        }
	    }
	}
	UiCamera.GID = 0;
	UiCamera.COLOR_DEBUG = new Laya.Vector4(100, 0, 0, 0.3);
	UiCamera.COLOR_NORMAL = new Laya.Vector4(0, 0, 0, 0);

	class UiPref extends Laya.UIComponent {
	    constructor(nameId, w = 100, h = 100, size = 0.1) {
	        super();
	        this.autoDisposePref = true;
	        this.addSize = 0.1;
	        this.isDispose = false;
	        this.addSize = size;
	        this.img = new Laya.Image();
	        this.addChild(this.img);
	        this.camera = UiCamera.create(w, h);
	        UiPrefMgr.scene.addChild(this.camera);
	        this.setNid(nameId);
	        this.size(w, h);
	    }
	    getImg(sp) {
	        let target = sp.getChildByName("Img");
	        if (!target && sp.numChildren > 0) {
	            for (let i = 0; i < sp.numChildren; i++) {
	                let child = sp.getChildAt(i);
	                target = this.getImg(child);
	                if (target) {
	                    break;
	                }
	            }
	        }
	        return target;
	    }
	    adjustCarema() {
	        let bounds = null;
	        let imgSp = this.getImg(this.pref.sp);
	        if (imgSp) {
	            bounds = imgSp.meshRenderer.bounds;
	        }
	        else {
	            console.log("warning: uipref focus to a no bounds sp, id: ", this.nid);
	            bounds = new Laya.Bounds(new Laya.Vector3(), new Laya.Vector3());
	        }
	        let center = bounds.getCenter();
	        let extent = bounds.getExtent();
	        this.camera.transform.position = new Laya.Vector3(center.x, center.y, -2);
	        let size = Math.max(extent.x, extent.y) * 2 + this.addSize;
	        this.camera.orthographicVerticalSize = size;
	    }
	    _sizeChanged() {
	        super._sizeChanged();
	        this.setRenderSize(this.width, this.height);
	    }
	    setRenderSize(w, h) {
	        if (!this.camera)
	            return;
	        let isChange = this.camera.setRenderSize(w, h);
	        if (isChange) {
	            this.img.source = new Laya.Texture(this.camera.renderTarget);
	        }
	    }
	    disposePref() {
	        if (this.pref != null) {
	            this.pref.dispose();
	        }
	    }
	    renderPrefToImage(nameId) {
	        this.pref = PrefMgr.get(nameId);
	        this.pref.transform.translate(this.camera.renderPosition);
	        UiPrefMgr.scene.addChild(this.pref);
	        if (!this.pref.sp) {
	            this.pref.loadedHand = Laya.Handler.create(this, this.adjustCarema);
	        }
	        else {
	            this.adjustCarema();
	        }
	        this.img.source = new Laya.Texture(this.camera.renderTarget);
	    }
	    setNid(nameId) {
	        if (!nameId)
	            return;
	        if (this.pref && this.pref.nid === nameId)
	            return;
	        this.disposePref();
	        this.nid = nameId;
	        this.renderPrefToImage(nameId);
	    }
	    dispose() {
	        if (this.isDispose)
	            return;
	        this.isDispose = true;
	        this.removeSelf();
	        UiPrefMgr.rec(this);
	    }
	    clear() {
	        if (this.isDispose)
	            return;
	        this.removeSelf();
	        this.destroy();
	    }
	    onEnable() {
	        if (this.autoDisposePref && this.nid && this.pref === null) {
	            this.renderPrefToImage(this.nid);
	        }
	    }
	    onDisable() {
	        if (this.autoDisposePref && this.nid && !this.pref.isDispose) {
	            this.disposePref();
	            this.pref = null;
	        }
	    }
	    onDestroy() {
	        this.disposePref();
	        this.camera.recover();
	        this.img.source = null;
	        this.img = this.camera = this.pref = null;
	    }
	}

	class UiPrefMgr {
	    static init() {
	        this.scene = new Laya.Scene3D();
	        this.scene.addChild(new Laya.DirectionLight());
	        Laya.stage.addChildAt(this.scene, 0);
	    }
	    static destroy() {
	        UiCamera.clearAll();
	        for (let key in this.prebsMap) {
	            let prefs = this.prebsMap[key];
	            prefs.forEach(pref => {
	                pref.destroy();
	            });
	        }
	        this.scene.removeChildren();
	        this.scene.removeSelf();
	        this.prebsMap = this.scene = null;
	    }
	    static get(nid, w = 100, h = 100, size = 0.1) {
	        let pref = null;
	        let prefs = this.prebsMap[nid];
	        if (prefs && prefs.length > 0) {
	            pref = prefs.shift();
	            pref.size(w, h);
	        }
	        else {
	            pref = new UiPref(nid, w, h, size);
	            this.count++;
	        }
	        pref.isDispose = false;
	        return pref;
	    }
	    static rec(pref) {
	        if (!pref)
	            return;
	        this.prebsMap[pref.nid] = this.prebsMap[pref.nid] || [];
	        this.prebsMap[pref.nid].push(pref);
	    }
	}
	UiPrefMgr.count = 0;
	UiPrefMgr.prebsMap = {};

	class WorldGuider extends Laya.UIComponent {
	    onAwake() {
	        let w = 150;
	        let h = 150;
	        this.width = w;
	        this.height = h;
	        this.anchorX = 0.5;
	        this.anchorY = 1.0;
	        let monster = PropsCfg.get(50000);
	        this.marker = UiPrefMgr.get(monster.pref, w, h, 0.3);
	        this.marker.scaleX = -1;
	        this.marker.anchorX = 0.5;
	        this.addChild(this.marker);
	        let timeLine = new Laya.TimeLine();
	        timeLine.to(this.marker, { y: 20 }, 700);
	        timeLine.to(this.marker, { y: 0 }, 700);
	        this.timeLine = timeLine;
	    }
	    onEnable() {
	        this.marker.y = 0;
	        this.timeLine.play(0, true);
	    }
	    onDisable() {
	        this.marker.y = 0;
	        this.timeLine.pause();
	    }
	    onDestroy() {
	        this.timeLine.destroy();
	        this.marker = this.timeLine = null;
	    }
	}

	class WorldHomeEnter extends ui.data.module.world.WorldHomeEnterUI {
	    recover() {
	        this.removeSelf();
	        Laya.Pool.recover(WorldHomeEnter.name, this);
	    }
	    arrowTween() {
	        Laya.Tween.to(this.imgArraw, { y: -63 }, 800, null, Laya.Handler.create(this, () => {
	            Laya.Tween.to(this.imgArraw, { y: -43 }, 800, null, Laya.Handler.create(this, this.arrowTween));
	        }));
	    }
	    showArrow() {
	        Laya.Tween.clearAll(this.imgArraw);
	        this.imgArraw.visible = true;
	        this.imgArraw.y = -43;
	        this.arrowTween();
	    }
	    hideArrow() {
	        this.imgArraw.visible = false;
	        Laya.Tween.clearAll(this.imgArraw);
	    }
	    onClick(e) {
	        this.clickHandler && this.clickHandler.runWith(e);
	    }
	    onClickStar() {
	        LayerMgr.ins().open(UiConst.HomeTaskView, true);
	    }
	    updateStar() {
	        let num = WorldMgr.ins().TotalStarsEarned;
	        if (num < 1) {
	            this.imgStar.visible = false;
	        }
	        else {
	            this.imgStar.visible = true;
	            this.lblStar.text = num.toString();
	        }
	    }
	    setData(data) {
	        this.data = data;
	        this.updateStar();
	        this.pos(data.x, data.y, true);
	        if (data.arrow) {
	            this.showArrow();
	        }
	        else {
	            this.hideArrow();
	        }
	    }
	    onAwake() {
	        this.on(Laya.Event.CLICK, this, this.onClick);
	        this.imgStar.on(Laya.Event.CLICK, this, this.onClickStar);
	    }
	}

	class UIUtil extends Laya.UIUtils {
	    static gray2(traget, isGray = true) {
	        if (isGray) {
	            this.addFilter(traget, UIUtil.grayFilter2);
	        }
	        else {
	            this.clearFilter(traget, Laya.ColorFilter);
	        }
	    }
	}
	UIUtil.grayFilter2 = new Laya.ColorFilter([
	    0.3086 * 0.5, 0.6094 * 0.5, 0.082 * 0.5, 0, 0,
	    0.3086 * 0.5, 0.6094 * 0.5, 0.082 * 0.5, 0, 0,
	    0.3086 * 0.5, 0.6094 * 0.5, 0.082 * 0.5, 0, 0,
	    0, 0, 0, 1, 0
	]);

	class WorldLevelEnter extends ui.data.module.world.WorldLevelEnterUI {
	    updateStars(vo) {
	        let starAmount = 0;
	        if (vo.cfg.isChallenge) {
	            starAmount = 3;
	        }
	        else if (vo.cfg.isLevel) {
	            starAmount = vo.ActiveStarGoals.length;
	        }
	        else {
	            starAmount = 0;
	        }
	        this.boxStars.visible = starAmount > 0;
	        for (let i = 0; i < this.boxStars.numChildren; i++) {
	            let imgStar = this.boxStars.getChildAt(i);
	            imgStar.visible = i < starAmount;
	            if (imgStar.visible) {
	                let isFill = i < vo.DisplayStars;
	                imgStar.skin = isFill ? "res/comp/zjm_xingji3.png" : "res/comp/zjm_xingji2.png";
	            }
	        }
	    }
	    updatePref(pref, gray = false) {
	        if (this.uiPref) {
	            this.uiPref.setNid(pref);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(pref);
	            this.uiPref.centerX = 0;
	            this.uiPref.centerY = 0;
	            this.addChildAt(this.uiPref, 1);
	        }
	        UIUtil.gray2(this.uiPref, false);
	        UIUtil.gray2(this.boxStars, false);
	        UIUtil.gray2(this.imgBottom, false);
	        UIUtil.gray2(this.lblName, false);
	        UIUtil.gray2(this.uiPref, gray);
	        UIUtil.gray2(this.boxStars, gray);
	        UIUtil.gray2(this.imgBottom, gray);
	        UIUtil.gray2(this.lblName, gray);
	    }
	    arrowTween() {
	        Laya.Tween.to(this.imgArraw, { y: 50 }, 800, null, Laya.Handler.create(this, () => {
	            Laya.Tween.to(this.imgArraw, { y: 28 }, 800, null, Laya.Handler.create(this, this.arrowTween));
	        }));
	    }
	    onClick(e) {
	        this.clickHandler && this.clickHandler.runWith(e);
	    }
	    recover() {
	        this.removeSelf();
	        Laya.Pool.recover(WorldLevelEnter.name, this);
	    }
	    showArrow() {
	        Laya.Tween.clearAll(this.imgArraw);
	        this.imgArraw.visible = true;
	        this.imgArraw.y = 29;
	        this.arrowTween();
	    }
	    hideArrow() {
	        this.imgArraw.visible = false;
	        Laya.Tween.clearAll(this.imgArraw);
	    }
	    updateProgressText(vo) {
	        let active = Level.levelSaveFileExists(vo.cid);
	        this.lblInProgress.visible = active;
	    }
	    getData() {
	        return this.data;
	    }
	    setData(data) {
	        this.data = data;
	        this.pos(data.x, data.y, true);
	        let cid = parseInt(data.name);
	        let vo = WorldMgr.ins().getLevelVo(cid);
	        this.updateStars(vo);
	        this.lblName.text = vo.bannerText;
	        this.lblName.visible = !vo.cfg.isSecret;
	        let enterPref = vo.cfg.enterPref;
	        let prefCfg = PropsCfg.get(enterPref);
	        this.updatePref(prefCfg.pref, !vo.EverCompleted());
	        if (data.arrow) {
	            this.showArrow();
	        }
	        else {
	            this.hideArrow();
	        }
	        this.updateProgressText(vo);
	    }
	    onAwake() {
	        this.on(Laya.Event.CLICK, this, this.onClick);
	    }
	}

	class WorldNode extends Laya.Image {
	    setData(data) {
	        this.skin = data.res;
	        this.size(data.width, data.height);
	        this.pos(data.x, data.y, true);
	    }
	    recover() {
	        this.removeSelf();
	        Laya.Pool.recover(WorldNode.name, this);
	    }
	}

	var ETileObject;
	(function (ETileObject) {
	    ETileObject[ETileObject["Node"] = 1] = "Node";
	    ETileObject[ETileObject["LevelEntrance"] = 2] = "LevelEntrance";
	    ETileObject[ETileObject["HomeEntrance"] = 3] = "HomeEntrance";
	})(ETileObject || (ETileObject = {}));
	class WorldTileCfg {
	    static get map() {
	        if (!this._map) {
	            this._map = PConfig.getCfg("WorldMap.json");
	        }
	        return this._map;
	    }
	    static get mapW() {
	        return this.map.tilewidth * this.map.width;
	    }
	    static get mapH() {
	        return this.map.tileheight * this.map.height;
	    }
	    static get layers() {
	        if (!this._layers) {
	            let map = this.map;
	            let layers = map.layers;
	            let tilesets = map.tilesets;
	            let tilesetMap = {};
	            tilesets.forEach(tileset => {
	                let img = tileset.tiles[0].image;
	                tilesetMap[tileset.firstgid] = img.replace("res", "res/map");
	            });
	            this._layers = layers.filter(layer => layer.type === "objectgroup");
	            this._layers.forEach(layer => {
	                layer.objects.forEach(obj => {
	                    obj.y = obj.y - obj.height;
	                    obj.res = tilesetMap[obj.gid];
	                    obj.type = !obj["point"] ? ETileObject.Node : (parseInt(obj.name) === WorldCfg.HomeId) ? ETileObject.HomeEntrance : ETileObject.LevelEntrance;
	                });
	            });
	        }
	        return this._layers;
	    }
	    static getEnterTileObj(cid) {
	        let layers = this.layers;
	        let entrance = layers.find(layer => layer.name === "entrance");
	        if (entrance) {
	            let obj = entrance.objects.find(obj => obj.name === cid.toString());
	            return obj;
	        }
	        return null;
	    }
	}
	class WorldNodeFactory {
	    static init() {
	        this.register(ETileObject.Node, WorldNode);
	        this.register(ETileObject.HomeEntrance, WorldHomeEnter);
	        this.register(ETileObject.LevelEntrance, WorldLevelEnter);
	    }
	    static clear() {
	        this._dict = {};
	    }
	    static register(key, cls) {
	        this._dict[key] = cls;
	    }
	    static get(key) {
	        let cls = this._dict[key];
	        if (!cls) {
	            return null;
	        }
	        return Laya.Pool.getItemByClass(cls.name, cls);
	    }
	}
	WorldNodeFactory._dict = {};

	class WorldListItem extends Laya.Box {
	    constructor(data) {
	        super();
	        this.array = [];
	        this.showItems = [];
	        this.data = data;
	    }
	    clickEnter(levelId, event) {
	        event.stopPropagation();
	        MsgCenter.notify(MsgConst.LEVEL_ENTER_CLICK, levelId);
	    }
	    setArray(val) {
	        let isEqual = true;
	        if (this.array.length !== val.length) {
	            isEqual = false;
	        }
	        else {
	            for (let i = 0; i < val.length; i++) {
	                if (val[i].gid !== this.array[i].gid || val[i].name !== this.array[i].name) {
	                    isEqual = false;
	                    break;
	                }
	            }
	        }
	        if (!isEqual) {
	            this.array = val;
	            this.onArrayChanged();
	        }
	    }
	    getShowObjects(left, right) {
	        return this.data.objects.filter(object => {
	            let objectL = object.x;
	            let objectR = object.x + object.width;
	            return (left < objectL && objectL < right) || (left < objectR && objectR < right);
	        });
	    }
	    clearItems() {
	        this.showItems.forEach(item => item.recover());
	        this.showItems = [];
	    }
	    onArrayChanged() {
	        this.clearItems();
	        for (let data of this.array) {
	            if (data.type === ETileObject.LevelEntrance || data.type === ETileObject.HomeEntrance) {
	                let cid = parseInt(data.name);
	                let vo = WorldMgr.ins().getLevelVo(cid);
	                if (!vo.IsUnlocked()) {
	                    continue;
	                }
	            }
	            let item = WorldNodeFactory.get(data.type);
	            item.setData(data);
	            if (data.type === ETileObject.LevelEntrance || data.type === ETileObject.HomeEntrance) {
	                let cid = parseInt(data.name);
	                item.clickHandler = Laya.Handler.create(this, this.clickEnter, [cid], false);
	            }
	            this.showItems.push(item);
	            this.addChild(item);
	        }
	    }
	    resetViewport(rect) {
	        let startX = rect.x;
	        let endX = startX + rect.width;
	        let array = this.getShowObjects(startX, endX);
	        this.setArray(array);
	    }
	    getItems() {
	        return this.showItems;
	    }
	}

	class WorldList extends Laya.Box {
	    constructor() {
	        super(...arguments);
	        this.sourX = 0;
	        this.timePass = 0;
	    }
	    setContentSize(width, height) {
	        let content = this._content;
	        content.width = width;
	        content.height = height;
	        content.getStyle().scrollRect || (content.scrollRect = Laya.Rectangle.create());
	        content.getStyle().scrollRect.setTo(0, 0, width, height);
	        content.scrollRect = content.scrollRect;
	        this.repaintItems();
	        this._setScrollChanged();
	    }
	    _setScrollChanged() {
	        if (!this._scrollChanged) {
	            this._scrollChanged = true;
	            this.callLater(this.changeScroll);
	        }
	    }
	    changeScroll() {
	        this._scrollChanged = false;
	        this._scrollSp.setScroll(0, WorldTileCfg.mapW - this.width, this._scrollSp.value);
	    }
	    repaintItems() {
	        let rect = this._content.getStyle().scrollRect;
	        if (!rect)
	            return;
	        for (let i = 1; i < this._content.numChildren; i++) {
	            let layer = this._content.getChildAt(i);
	            if (layer instanceof WorldListItem) {
	                layer.resetViewport(rect);
	            }
	        }
	    }
	    onScrollBarChange(val) {
	        let start = Math.round(val);
	        let rect = this._content.getStyle().scrollRect;
	        if (rect && rect.x != start) {
	            rect.x = start;
	            this._content.scrollRect = rect;
	            this.repaintItems();
	        }
	    }
	    initLayers() {
	        let layers = WorldTileCfg.layers;
	        layers.forEach((layer, index) => {
	            let node = new WorldListItem(layer);
	            this._content.addChild(node);
	            if (index == 2) {
	                this._enterList = node;
	            }
	        });
	    }
	    createChildren() {
	        this._content = new Laya.Box();
	        this._content.bgColor = "#aaaaaa";
	        super.addChild(this._content);
	        this.repeatTexture = new Laya.Image();
	        Laya.loader.load("res/map/water.jpg", Laya.Handler.create(this, (texture) => {
	            this.repeatTexture.graphics.fillTexture(texture, 0, 0, WorldTileCfg.mapW, 750);
	        }));
	        this.repeatTexture.left = 0;
	        this.repeatTexture.right = 0;
	        this.repeatTexture.top = 0;
	        this.repeatTexture.bottom = 0;
	        this._content.addChild(this.repeatTexture);
	        this.initLayers();
	        this.addComponent(ScrollScript);
	        this._scrollSp = this.getComponent(ScrollScript);
	        this._scrollSp.elasticDistance = 200;
	        this._scrollSp.changeHandler = Laya.Handler.create(this, this.onScrollBarChange, null, false);
	        this.guider = new WorldGuider();
	        this._content.addChild(this.guider);
	    }
	    _sizeChanged() {
	        super._sizeChanged();
	        this.setContentSize(this.width, this.height);
	    }
	    onDataChanged() {
	        this._enterList && this._enterList.onArrayChanged();
	    }
	    scrollTo(x) {
	        let time = 700;
	        this.timePass = 0;
	        this.sourX = this._scrollSp.value;
	        this.tweenTo(x, time);
	        this.timerLoop(10, this, this.tweenTo, [x, time], true);
	    }
	    tweenTo(destX, timeTotal) {
	        if (this.timePass > timeTotal) {
	            this.timePass = 0;
	            this.sourX = destX;
	            this.clearTimer(this, this.tweenTo);
	        }
	        this._scrollSp.value = this.sourX + (destX - this.sourX) * (this.timePass / timeTotal);
	        this.timePass += this.timer.delta;
	    }
	    scrollToLevel(id) {
	        let obj = WorldTileCfg.getEnterTileObj(id);
	        if (obj) {
	            let stageW = Laya.stage.width;
	            let x = Math.max(obj.x - stageW / 2, 0);
	            this.scrollTo(x);
	            WorldMgr.ins().openInfoPanel(id);
	        }
	    }
	    showArrow(id) {
	        let obj = WorldTileCfg.getEnterTileObj(id);
	        if (obj) {
	            obj.arrow = true;
	            this.onDataChanged();
	        }
	    }
	    hideArrow(id) {
	        let obj = WorldTileCfg.getEnterTileObj(id);
	        if (obj) {
	            obj.arrow = false;
	            this.onDataChanged();
	        }
	    }
	    destroy(destroyChild = true) {
	        super.destroy(destroyChild);
	        this._content && this._content.destroy(destroyChild);
	        this._content = this._scrollSp = this._enterList = null;
	    }
	    movePawnTo(x, y) {
	        Laya.Tween.to(this.guider, { x, y }, 500);
	    }
	}

	class WorldView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.currLv = null;
	    }
	    onClickNext(e) {
	        WorldMgr.ins().JumpToHighestUnlockedLevel();
	        e.stopPropagation();
	    }
	    dragonFlyAndOpenInfo(levelId) {
	        if (this.currLv === levelId) {
	            WorldMgr.ins().openInfoPanel(levelId);
	        }
	        else {
	            if (this.currLv) {
	                WorldMgr.ins().clostInfoPanel();
	                this.hideArrow(this.currLv);
	            }
	            this.currLv = levelId;
	            this.movePawnTo(levelId);
	            this.showArrow(levelId);
	            this.list.scrollToLevel(levelId);
	        }
	    }
	    onLevelRepeatReward(rewardId) {
	        this.timerOnce(1000, this, () => {
	            let prop = PropsCfg.get(rewardId);
	            PopupManager.show2(Presets.Simple1Button5(LanCfg.get("20020060"), StringUtil.format(LanCfg.get("20020059")), LanCfg.get("20020061"), false, prop, false, null));
	            SoundMgr.ins().playSound("m67");
	        });
	    }
	    onLevelFirstPass(levelId) {
	        let levelVo = WorldMgr.ins().getLevelVo(levelId);
	        if (!levelVo.Children || levelVo.Children.length == 0) {
	            Glob.levelIDJustCompletedForFirstTime = 0;
	            let levels = [];
	            let parents = levelVo.Parents;
	            parents.forEach(parent => {
	                levels = levels.concat(parent.Children);
	            });
	            levels.sort((a, b) => a.cid - b.cid);
	            let next = levels.find(level => (level.cid > levelVo.cid && !level.EverCompleted()));
	            if (next) {
	                this.dragonFlyAndOpenInfo(next.cid);
	            }
	            return;
	        }
	        this.addNewlyCompletedParticles(levelId);
	        this.timerOnce(500, this, () => {
	            if (Glob.inWorld) {
	                let tomeTipActivated = TomeTip.checkForTomeTip(levelId);
	                this.triggerLocationChildrenAppearance(levelVo, tomeTipActivated);
	                Glob.levelIDJustCompletedForFirstTime = 0;
	            }
	        });
	    }
	    triggerLocationChildrenAppearance(levelVo, tomeTipActive) {
	        let flag = true;
	        let childList = levelVo.Children.concat();
	        childList.sort((a, b) => a.cid - b.cid);
	        for (let child of childList) {
	            if (!child.cfg.isSecret) {
	                if (flag) {
	                    child.isHome && (WorldMgr.ins().shouldShowHomeEnterGuide = true);
	                    this.dragonFlyAndOpenInfo(child.cid);
	                    flag = false;
	                }
	            }
	        }
	        SoundMgr.ins().playSound("m26");
	        flag && this.checkShouldOpen();
	    }
	    checkShouldOpen() {
	        if (Glob.mostRecentLevelID && Glob.mostRecentLevelID !== WorldMgr.ins().homeLevelId) {
	            this.dragonFlyAndOpenInfo(Glob.mostRecentLevelID);
	        }
	        else {
	            WorldMgr.ins().JumpToHighestUnlockedLevel();
	        }
	    }
	    onListChange(data) {
	        if (data.state == GameState.WorldMap) {
	            this.list.onDataChanged();
	        }
	    }
	    showArrow(levelId) {
	        this.list.showArrow(levelId);
	    }
	    hideArrow(levelId) {
	        this.list.hideArrow(levelId);
	    }
	    setPawnActive(val) {
	        this.list.guider.visible = val;
	    }
	    movePawnTo(levelID) {
	        let cfg = WorldTileCfg.getEnterTileObj(levelID);
	        this.movePawnTo2(cfg.x - 40, cfg.y);
	    }
	    movePawnTo2(x, y) {
	        this.list.movePawnTo(x, y);
	    }
	    addNewlyCompletedParticles(levelId) {
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    initList() {
	        let list = new WorldList();
	        list.top = 0;
	        list.left = 0;
	        list.right = 0;
	        list.bottom = 0;
	        this.addChildAt(list, 0);
	        this.list = list;
	    }
	    onAwake() {
	        this.playAni = false;
	        this.bgClickClose = false;
	        WorldNodeFactory.init();
	        this.initList();
	        if (WorldMgr.ins().isShowFirstArrow()) {
	            this.showArrow(WorldMgr.ins().firstLevelId);
	        }
	        if (WorldMgr.ins().isShowHomeArrow()) {
	            this.showArrow(WorldMgr.ins().homeLevelId);
	        }
	        this.btnNext.on(Laya.Event.CLICK, this, this.onClickNext);
	        this.on(Laya.Event.CLICK, this, () => {
	            WorldMgr.ins().clostInfoPanel();
	        });
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        MsgCenter.listen(MsgConst.CLICK_HOME_ENTER, this.dragonFlyAndOpenInfo, this);
	        MsgCenter.listen(MsgConst.SCENE_STATE_CHANGED, this.onListChange, this);
	        MsgCenter.listen(MsgConst.LEVEL_JUMP_HIGH, this.dragonFlyAndOpenInfo, this);
	        MsgCenter.listen(MsgConst.LEVEL_ENTER_CLICK, this.dragonFlyAndOpenInfo, this);
	        MsgCenter.listen(MsgConst.LEVEL_REPEAT_REWARD, this.onLevelRepeatReward, this);
	        MsgCenter.listen(MsgConst.LEVEL_FIRST_PASS, this.onLevelFirstPass, this);
	        MsgCenter.listen(MsgConst.NOT_LEVEL_FIRST_PASS, this.checkShouldOpen, this);
	        WorldMgr.ins().onLevelComplete();
	        this.setPawnActive(WorldMgr.ins().getLevelVo(WorldMgr.ins().firstLevelId).EverCompleted());
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.CLICK_HOME_ENTER, this.dragonFlyAndOpenInfo, this);
	        MsgCenter.remove(MsgConst.SCENE_STATE_CHANGED, this.onListChange, this);
	        MsgCenter.remove(MsgConst.LEVEL_JUMP_HIGH, this.dragonFlyAndOpenInfo, this);
	        MsgCenter.remove(MsgConst.LEVEL_ENTER_CLICK, this.dragonFlyAndOpenInfo, this);
	        MsgCenter.remove(MsgConst.LEVEL_REPEAT_REWARD, this.onLevelRepeatReward, this);
	        MsgCenter.remove(MsgConst.LEVEL_FIRST_PASS, this.onLevelFirstPass, this);
	        MsgCenter.remove(MsgConst.NOT_LEVEL_FIRST_PASS, this.checkShouldOpen, this);
	    }
	}

	class WorldEnterBase extends BaseView {
	    updateInfo() {
	        this.setLevelTitle();
	        this.setEnterTxt();
	        this.setPower();
	        this.checkAnim();
	    }
	    updateStatus() {
	        let isHome = this.cfg.isHome;
	        this.boxPower.visible = !isHome;
	    }
	    setLevelTitle() {
	        this.lblTitle.text = this.vo.bannerText;
	    }
	    setEnterTxt() {
	        this.btnEnter.label = this.vo.enterText;
	    }
	    setPower() {
	        this.lblPower.text = this.vo.energy.toString();
	    }
	    checkAnim() {
	        if (CurrencyMgr.ins().CanAfford(ECurrency.Energy, this.vo.energy)) {
	            this.timeLine.play(0, true);
	        }
	    }
	    onClickEnter() {
	        WorldMgr.ins().shouldShowHomeEnterGuide = false;
	        if (WorldMgr.ins().TryEnterLevelAndChargeProperEnergyCost(this.vo.cid)) {
	            LayerMgr.ins().closeUi(this.name);
	            LayerMgr.ins().closeUi(UiConst.WorldView);
	        }
	    }
	    onClickPower() {
	        LayerMgr.ins().open(UiConst.EnergyInfoView);
	    }
	    closeView(event) {
	        LayerMgr.ins().closeUi(this.name);
	    }
	    updateCurrency(data) {
	        let amount = data.amount;
	        let currency = data.currency;
	        if (currency === ECurrency.Energy) {
	            this.lblEnergy.text = amount.toString();
	            this.checkAnim();
	        }
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	        this._widget.resetLayout();
	    }
	    onAwake() {
	        super.onAwake();
	        this.playAni = false;
	        this.showBlackBG = false;
	        this.bgClickClose = false;
	        this.boxMask.visible = false;
	        this.boxMask.on(Laya.Event.CLICK, this, this.closeView);
	        this.btnPower.on(Laya.Event.CLICK, this, this.onClickPower);
	        this.btnEnter.on(Laya.Event.CLICK, this, this.onClickEnter);
	        let timeLine = new Laya.TimeLine();
	        timeLine.to(this.btnEnter, { scaleX: 1.05, scaleY: 1.05 }, 800);
	        timeLine.to(this.btnEnter, { scaleX: 1, scaleY: 1 }, 800);
	        this.timeLine = timeLine;
	    }
	    openUi(levelId) {
	        super.openUi(levelId);
	        this.vo = WorldMgr.ins().getLevelVo(levelId);
	        this.cfg = this.vo.cfg;
	        this.updateStatus();
	        this.updateInfo();
	        this.updateCurrency({ currency: ECurrency.Energy, amount: CurrencyMgr.ins().getAmount(ECurrency.Energy) });
	        MsgCenter.listen(MsgConst.CURRENCY_CHANGE, this.updateCurrency, this);
	        if (!WorldMgr.ins().isPassFirst() && !Level.levelSaveFileExists(this.vo.cid)) {
	            LayerMgr.ins().open(UiConst.TutorialFocusView, {
	                showGuider: true,
	                target: this.btnEnter,
	                handler: Laya.Handler.create(this, this.onClickEnter),
	            });
	        }
	        if (this.vo.isHome && WorldMgr.ins().shouldShowHomeEnterGuide) {
	            LayerMgr.ins().open(UiConst.TutorialFocusView, {
	                showGuider: true,
	                target: this.btnEnter,
	                handler: Laya.Handler.create(this, this.onClickEnter),
	            });
	        }
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.btnEnter.scale(1, 1);
	        this.timeLine.pause();
	        this.vo = this.cfg = null;
	        MsgCenter.remove(MsgConst.CURRENCY_CHANGE, this.updateCurrency, this);
	    }
	    onDestroy() {
	        super.onDestroy();
	        this.timeLine.destroy();
	    }
	}

	class WorldEnterReward extends ui.data.module.world.WorldEnterRewardUI {
	    setData(prefId) {
	        let prefCfg = PropsCfg.get(prefId);
	        let prefName = prefCfg.pref;
	        let rarity = prefCfg.Rarity;
	        this.lblQuality.text = rarity.Name;
	        this.lblQuality.color = rarity.TextColor;
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(prefName, 60, 60);
	            this.uiPref.y = 0;
	            this.uiPref.centerX = 0;
	            this.addChildAt(this.uiPref, 0);
	        }
	    }
	}

	class WorldInfoView extends WorldEnterBase {
	    updateInfo() {
	        super.updateInfo();
	        let vo = this.vo;
	        let isHome = this.cfg.isHome;
	        if (isHome) {
	            this.setDragons();
	            let homeStats = this.vo.HomeStats;
	            this.setInfoItem(this.boxInfo1, WorldCfg.ICON_DRAGON, homeStats ? StringUtil.formatNum(homeStats.m_dragonPower) : "-");
	            this.setInfoItem(this.boxInfo2, WorldCfg.ICON_SCORE, homeStats ? StringUtil.formatNum(homeStats.m_runningScore) : "-");
	            if (homeStats) {
	                this.setInfoBar(this.boxInfo3, WorldCfg.ICON_CELL, homeStats.m_healedLand, homeStats.m_unhealedLand + homeStats.m_healedLand);
	            }
	        }
	        else {
	            this.setRewards();
	            let time = TimeMgr.ins().formatTimer2(Math.round(vo.BestTime));
	            this.setInfoItem(this.boxInfo1, WorldCfg.ICON_TIME, vo.EverCompleted() ? time : "-");
	            this.setInfoItem(this.boxInfo2, WorldCfg.ICON_SCORE, vo.EverCompleted() ? StringUtil.formatNum(vo.HighScore) : "-");
	            this.cfg.isProgressReward() && this.setInfoBar(this.boxInfo3, WorldCfg.ICON_CHEST, vo.TimesWonSinceLastReward, vo.GetTotalWinsNeededForThisProgressReward());
	        }
	    }
	    updateStatus() {
	        super.updateStatus();
	        let isHome = this.cfg.isHome;
	        if (isHome) {
	            this.boxHome.visible = true;
	            this.boxLevel.visible = false;
	            this.boxInfo3.visible = this.vo.HomeStats != null;
	        }
	        else {
	            this.boxHome.visible = false;
	            this.boxLevel.visible = true;
	            if (WorldMgr.ins().UnlockedRewardsYet()) {
	                this.imgLocked.visible = false;
	                this.boxChest.visible = this.cfg.isExistReward();
	                this.lblRandom.visible = true;
	                this.hboxRewards.visible = true;
	                this.lblNo.visible = !this.cfg.isExistReward();
	            }
	            else {
	                this.imgLocked.visible = true;
	                this.boxChest.visible = false;
	                this.lblRandom.visible = false;
	                this.lblNo.visible = true;
	                this.hboxRewards.visible = false;
	            }
	            if (this.cfg.isProgressReward()) {
	                this.boxInfo3.visible = true;
	            }
	            else {
	                this.boxInfo3.visible = false;
	            }
	        }
	    }
	    setDragons() {
	    }
	    hideRewards() {
	        for (let i = this.hboxRewards.numChildren; i > 0; i--) {
	            let child = this.hboxRewards.getChildAt(i - 1);
	            child.visible = false;
	        }
	    }
	    setChest() {
	        if (this.chestPref) {
	            this.chestPref.dispose();
	            this.chestPref = null;
	        }
	        this.lblLevel.text = LanCfg.get("20020066");
	        let name = this.vo.getChest();
	        let chestCfg = PropsCfg.getByPrefName(name);
	        this.chestPref = UiPrefMgr.get(name);
	        this.chestPref.top = 40;
	        this.chestPref.centerX = 0;
	        this.boxChest.addChild(this.chestPref);
	        this.lblChestTimer.text = StringUtil.format("{0}\n{1}", chestCfg.name, chestCfg.getTimeStr());
	    }
	    setRewards() {
	        this.hideRewards();
	        if (WorldMgr.ins().UnlockedRewardsYet()) {
	            let cfg = this.cfg;
	            if (cfg.isExistReward()) {
	                this.setChest();
	                cfg.freeRewardChance1 && this.setReward(cfg.freeRewardChance1, 0);
	                this.setReward(cfg.basicEgg, 1);
	                cfg.rareEgg && this.setReward(cfg.rareEgg, 2);
	                if (!cfg.rareEgg && cfg.freeRewardChance2) {
	                    this.setReward(cfg.freeRewardChance2, 2);
	                }
	            }
	        }
	        else {
	            this.lblNo.text = LanCfg.get("20020065");
	        }
	    }
	    setReward(prefId, index) {
	        let child = this.hboxRewards.getChildAt(index);
	        if (child) {
	            child.setData(prefId);
	            child.visible = true;
	        }
	        else {
	            child = new WorldEnterReward();
	            child.setData(prefId);
	            this.hboxRewards.addChildAt(child, index);
	        }
	    }
	    setInfoItem(box, iconSkin, text) {
	        let icon = box.getChildByName("imgIconBg").getChildByName("imgIcon");
	        icon.once(Laya.Event.RESIZE, this, () => {
	            let scale = 50 / icon.height;
	            icon.scale(scale, scale);
	        });
	        icon.skin = iconSkin;
	        let label = box.getChildByName("lblAmount");
	        label.text = text;
	    }
	    setInfoBar(box, iconSkin, value, max) {
	        let bar = box.getChildByName("bar");
	        let icon = box.getChildByName("imgIconBg").getChildByName("imgIcon");
	        let label = box.getChildByName("lblAmount");
	        icon.once(Laya.Event.RESIZE, this, () => {
	            let scale = 50 / icon.height;
	            icon.scale(scale, scale);
	        });
	        icon.skin = iconSkin;
	        label.text = StringUtil.formatNum(value) + "/" + StringUtil.formatNum(max);
	        bar.value = max === 0 ? 0 : value / max;
	    }
	    onClickInfo1() {
	        let vo = this.vo;
	        let arg = { title: "", desc: "", prefName: "" };
	        if (vo.isHome) {
	            arg.title = LanCfg.get("20020048");
	            arg.prefName = WorldCfg.ICON_DRAGON;
	            if (vo.HomeStats != null) {
	                let formatStr = LanCfg.get("20020050") + LanCfg.get("20020051");
	                arg.desc = StringUtil.format(formatStr, StringUtil.formatNum(vo.HomeStats.m_dragonPower));
	            }
	            else {
	                arg.desc = LanCfg.get("20020049");
	            }
	        }
	        else {
	            arg.title = LanCfg.get("20020040");
	            arg.prefName = WorldCfg.ICON_TIME;
	            if (vo.EverCompleted()) {
	                arg.desc = LanCfg.get("20020041") + Math.round(vo.BestTime);
	            }
	            else {
	                arg.desc = LanCfg.get("20020042");
	            }
	        }
	        LayerMgr.ins().open(UiConst.WorldPropView, arg);
	    }
	    onClickInfo2() {
	        let vo = this.vo;
	        let arg = { title: "", desc: "", prefName: "" };
	        if (vo.isHome) {
	            arg.title = LanCfg.get("20020052");
	            arg.prefName = WorldCfg.ICON_SCORE;
	            if (vo.HomeStats != null) {
	                arg.desc = StringUtil.format(LanCfg.get("20020054"), StringUtil.formatNum(vo.HomeStats.m_runningScore));
	            }
	            else {
	                arg.desc = LanCfg.get("20020053");
	            }
	        }
	        else {
	            arg.title = LanCfg.get("20020043");
	            arg.prefName = WorldCfg.ICON_SCORE;
	            if (vo.EverCompleted()) {
	                arg.desc = StringUtil.format(LanCfg.get("20020045"), StringUtil.formatNum(vo.HighScore));
	            }
	            else {
	                arg.desc = LanCfg.get("20020044");
	            }
	        }
	        LayerMgr.ins().open(UiConst.WorldPropView, arg);
	    }
	    onClickInfo3() {
	        let vo = this.vo;
	        let arg = { title: "", desc: "", prefName: "" };
	        if (vo.isHome) {
	            arg.title = LanCfg.get("20020055");
	            arg.prefName = WorldCfg.ICON_CELL;
	            if (vo.HomeStats != null) {
	                arg.desc = StringUtil.format(LanCfg.get("20020057"), StringUtil.formatNum(vo.HomeStats.m_healedLand));
	            }
	            else {
	                arg.desc = LanCfg.get("20020056");
	            }
	        }
	        else {
	            arg.title = LanCfg.get("20020046");
	            arg.prefName = WorldCfg.ICON_CHEST;
	            let winsNeededForNextReward = vo.GetWinsNeededForNextReward();
	            let progressRewardPrefabName = vo.GetProgressRewardPrefabName();
	            let progressRewardPrefabCfg = PropsCfg.get(progressRewardPrefabName);
	            arg.desc = StringUtil.format(LanCfg.get("20020047"), winsNeededForNextReward, progressRewardPrefabCfg.name);
	        }
	        LayerMgr.ins().open(UiConst.WorldPropView, arg);
	    }
	    onAwake() {
	        super.onAwake();
	        this.boxInfo1.on(Laya.Event.CLICK, this, this.onClickInfo1);
	        this.boxInfo2.on(Laya.Event.CLICK, this, this.onClickInfo2);
	        this.boxInfo3.on(Laya.Event.CLICK, this, this.onClickInfo3);
	    }
	}

	class CurrencyCfg {
	    static get energyReplyTime() {
	        if (!this._energyReplyTime) {
	            let cfgVal = ConstCfg.getValue("10");
	            this._energyReplyTime = (cfgVal ? parseInt(cfgVal) : 60) * 60 * 1000;
	        }
	        return this._energyReplyTime;
	    }
	    static get defaultEnergy() {
	        if (!this._defaultEnergy) {
	            let cfgVal = ConstCfg.getValue("7");
	            this._defaultEnergy = cfgVal ? parseInt(cfgVal) : 15;
	        }
	        return this._defaultEnergy;
	    }
	    static get capEnergy() {
	        if (!this._capEnergy) {
	            let cfgVal = ConstCfg.getValue("3");
	            this._capEnergy = cfgVal ? parseInt(cfgVal) : 7;
	        }
	        return this._capEnergy;
	    }
	    static get costPerEnergy() {
	        if (!this._costPerEnergy) {
	            let cfgVal = ConstCfg.getValue("9");
	            this._costPerEnergy = cfgVal ? parseInt(cfgVal) : 8;
	        }
	        return this._costPerEnergy;
	    }
	    static get costPerLife() {
	        if (!this._costPerLife) {
	            this._costPerLife = 20;
	        }
	        return this._costPerLife;
	    }
	    static get costRefillLife() {
	        if (!this._costRefillLife) {
	            this._costRefillLife = 50;
	        }
	        return this._costRefillLife;
	    }
	    static get costPerShovel() {
	        if (!this._costPerShovel) {
	            this._costPerShovel = 10;
	        }
	        return this._costPerShovel;
	    }
	    static get costPerBomb() {
	        if (!this._costPerBomb) {
	            this._costPerBomb = 12;
	        }
	        return this._costPerBomb;
	    }
	    static get costPerSwapper() {
	        if (!this._costPerSwapper) {
	            this._costPerSwapper = 10;
	        }
	        return this._costPerSwapper;
	    }
	    static get costManyShovel() {
	        if (!this._costManyShovel) {
	            this._costManyShovel = 25;
	        }
	        return this._costManyShovel;
	    }
	    static get costManyBomb() {
	        if (!this._costManyBomb) {
	            this._costManyBomb = 30;
	        }
	        return this._costManyBomb;
	    }
	    static get costManySwapper() {
	        if (!this._costManySwapper) {
	            this._costManySwapper = 25;
	        }
	        return this._costManySwapper;
	    }
	    static get shovelBundleSize() {
	        if (!this._shovelBundleSize) {
	            this._shovelBundleSize = 5;
	        }
	        return this._shovelBundleSize;
	    }
	    static get bombBundleSize() {
	        if (!this._bombBundleSize) {
	            this._bombBundleSize = 5;
	        }
	        return this._bombBundleSize;
	    }
	    static get swapperBundleSize() {
	        if (!this._swapperBundleSize) {
	            this._swapperBundleSize = 5;
	        }
	        return this._swapperBundleSize;
	    }
	    static get initValueBomb() {
	        if (!this._initValueBomb) {
	            this._initValueBomb = 5;
	        }
	        return this._initValueBomb;
	    }
	    static get initValueShovel() {
	        if (!this._initValueShovel) {
	            this._initValueShovel = 5;
	        }
	        return this._initValueShovel;
	    }
	    static get initValueSwapper() {
	        if (!this._initValueSwapper) {
	            this._initValueSwapper = 5;
	        }
	        return this._initValueSwapper;
	    }
	    static getInfoCfg(type) {
	        if (!this.infoCfg) {
	            let itemEgg = { icon: GameUtil.getModuleSkin("home", "jy_longdan"), name: LanCfg.get("20010014"), type: 0 };
	            let itemBuild = { icon: GameUtil.getModuleSkin("home", "jy_jianzao"), name: LanCfg.get("20010015"), type: 1 };
	            let itemShop = { icon: GameUtil.getModuleSkin("home", "jy_shangdian"), name: LanCfg.get("20010013"), type: 2 };
	            this.infoCfg = {
	                [ECurrency.Gold]: {
	                    title: LanCfg.get("20010004"),
	                    icon: GameUtil.getCompPngSkin("zjm_jinbi"),
	                    barSkin: GameUtil.getCompPngSkin("progress_1$bar"),
	                    wayText: LanCfg.get("20010006"),
	                    funcText: LanCfg.get("20010008"),
	                    wayIcons: [itemShop],
	                    funcIcons: [itemEgg, itemBuild],
	                },
	                [ECurrency.Stone]: {
	                    title: LanCfg.get("20010012"),
	                    icon: GameUtil.getCompPngSkin("zjm_shitou"),
	                    barSkin: GameUtil.getCompPngSkin("progress_1$bar2"),
	                    wayText: LanCfg.get("20010009"),
	                    funcText: LanCfg.get("20010010"),
	                    wayIcons: [itemShop],
	                    funcIcons: [itemBuild],
	                },
	            };
	        }
	        return this.infoCfg[type];
	    }
	    static formatInfo(conf) {
	        let way = LanCfg.get("20010005");
	        let fun = LanCfg.get("20010007");
	        let list = [{
	                title: way,
	                desc: conf.wayText,
	                icons: conf.wayIcons,
	            }, {
	                title: fun,
	                desc: conf.funcText,
	                icons: conf.funcIcons,
	            }];
	        return list;
	    }
	    static transform(val) {
	        let result = ECurrency[val];
	        if (result == null) {
	            console.warn("warn!!! the currency type is invalid!!!", val, result);
	        }
	        return result;
	    }
	    static icon(val) {
	        let skin = "";
	        skin = GameUtil.getCompPngSkin("zjm_zhuanshi");
	        switch (val) {
	            case ECurrency.Diamond:
	                skin = GameUtil.getCompPngSkin("zjm_zhuanshi");
	                break;
	            case ECurrency.Gold:
	                skin = GameUtil.getCompPngSkin("zjm_jinbi");
	                break;
	            case ECurrency.Stone:
	                skin = GameUtil.getCompPngSkin("zjm_shitou");
	                break;
	            default:
	                skin = GameUtil.getCompPngSkin("zjm_xingji1");
	                break;
	        }
	        return skin;
	    }
	}

	class MoverMgr {
	    static update() {
	        if (InputMgr.uiHas) {
	            return;
	        }
	        if (Glob.isSimulationPaused()) {
	            return;
	        }
	        if (CameraMgr.state == CameraState.Drag || (InputMgr.touches && InputMgr.touches.length > 1)) {
	            this.playerRecentlyDraggedOrScaled = true;
	        }
	        else if (this.activeObj || CameraMgr.state != CameraState.PreDragBuffer) {
	            if (this.state == MoverState.None) {
	                this.updateNone();
	            }
	            else if (this.state == MoverState.MouseDown) {
	                this.updateMouseDown();
	            }
	            else if (this.state == MoverState.NoMouseDown) {
	                this.updateNoMouseDown();
	            }
	            else if (this.state == MoverState.MouseStillDown) {
	                this.updateMouseStillDown();
	            }
	            else if (this.state == MoverState.DownOnSameObject) {
	                this.updateDownOnSameObject();
	            }
	            else if (this.state == MoverState.DownOnNothingSelectable) {
	                this.updateDownOnNothingSelectable();
	            }
	            else if (this.state == MoverState.DownOnNewSelectableObject) {
	                this.updateDownOnNewSelectableObject();
	            }
	            else if (this.state == MoverState.DownOnNonMonster) {
	                this.updateDownOnNonMonster();
	            }
	            else if (this.state == MoverState.ObjectDragging) {
	                this.updateObjectDragging();
	            }
	            else {
	                console.error("ERROR. Unhandled state in MasterObjectMover: " + this.state);
	            }
	        }
	    }
	    static updateNone() {
	        this.tapTimer.update(Glob.deltaTime);
	        if (this.downInSelectionArea()) {
	            let objectUnderCursor = InputMgr.underCursor;
	            if (objectUnderCursor) {
	                this.trySelectObject(objectUnderCursor);
	            }
	            this.checkForTouchingDeadLand();
	        }
	    }
	    static updateMouseDown() {
	        if (!this.verifyActiveObject()) {
	            return;
	        }
	        this.tapTimer.update(Glob.deltaTime);
	        if (InputMgr.isDown()) {
	            if (this.activeObj.isInADraggableState()) {
	                this.tryInitiatingObjectDrag();
	            }
	            return;
	        }
	        this.state = MoverState.NoMouseDown;
	        if (!this.movedFarEnoughToInitiateDrag() && !this.tapTimer.done) {
	            this.numTaps++;
	            let flag = false;
	            if (this.activeObj == this.prevObj) {
	                flag = this.checkForDoubleTapOn(this.activeObj);
	            }
	            if (!flag) {
	                this.numTaps = 1;
	                this.activeObj.tapped();
	            }
	            this.tapTimer.reset();
	        }
	    }
	    static updateNoMouseDown() {
	        this.tapTimer.update(Glob.deltaTime);
	        if (!this.verifyActiveObject() || !InputMgr.isDown()) {
	            return;
	        }
	        let drawnObject = this.downInSelectionArea() ? InputMgr.underCursor : null;
	        if (this.activeObj == drawnObject) {
	            this.recordOriginalClickPointAndOffset();
	            this.state = MoverState.DownOnSameObject;
	        }
	        else if (!this.mouseDownOnNewObjectAlwaysSelectsNewObject && this.activeObj.isMonster && drawnObject != null && !drawnObject.isMonster) {
	            this.state = MoverState.DownOnNonMonster;
	            this.playerRecentlyDraggedOrScaled = false;
	            this.resetTapCountAndTimer();
	        }
	        else if (drawnObject != null && drawnObject.isInASelectableState()) {
	            if (this.mouseDownOnNewObjectAlwaysSelectsNewObject) {
	                this.trySelectObject(drawnObject);
	            }
	            else {
	                this.state = MoverState.DownOnNewSelectableObject;
	            }
	            this.playerRecentlyDraggedOrScaled = false;
	            this.resetTapCountAndTimer();
	        }
	        else {
	            this.state = MoverState.DownOnNothingSelectable;
	            this.playerRecentlyDraggedOrScaled = false;
	            this.resetTapCountAndTimer();
	        }
	    }
	    static updateDownOnSameObject() {
	        this.tapTimer.update(Glob.deltaTime);
	        if (InputMgr.isDown()) {
	            if (this.activeObj.isInADraggableState()) {
	                this.tryInitiatingObjectDrag();
	            }
	            return;
	        }
	        if (!this.tapTimer.done) {
	            this.numTaps++;
	            if (!this.checkForDoubleTapOn(this.activeObj)) {
	                this.activeObj.tapped();
	            }
	        }
	        this.deselectActiveObject();
	    }
	    static updateDownOnNothingSelectable() {
	        if (this.verifyActiveObject() && !InputMgr.isDown()) {
	            if (this.playerRecentlyDraggedOrScaled) {
	                this.playerRecentlyDraggedOrScaled = false;
	                this.state = MoverState.NoMouseDown;
	                this.resetTapCountAndTimer();
	            }
	            else {
	                this.updateTryRelocateObject();
	            }
	        }
	    }
	    static updateDownOnNewSelectableObject() {
	        if (!this.verifyActiveObject() || InputMgr.isDown()) {
	            return;
	        }
	        if (this.playerRecentlyDraggedOrScaled) {
	            this.playerRecentlyDraggedOrScaled = false;
	            this.state = MoverState.NoMouseDown;
	            this.resetTapCountAndTimer();
	            return;
	        }
	        if (this.allowTapTapToSwapObjects) {
	            this.downAndUpOnNewSelectableObject();
	            return;
	        }
	        let objectUnderCursor = InputMgr.underCursor;
	        if (objectUnderCursor == null) {
	            this.state = MoverState.DownOnNothingSelectable;
	        }
	        else {
	            this.trySelectObject(objectUnderCursor);
	        }
	    }
	    static updateDownOnNonMonster() {
	        if (!this.verifyActiveObject()) {
	            return;
	        }
	        let underCursor = InputMgr.underCursor;
	        if (underCursor != null && underCursor.isEnemy) {
	            this.activeObj.asMonster.initiatePlayerDirectedAttackOn(underCursor.asEnemy);
	            this.activeObj.deselect();
	            this.state = MoverState.None;
	        }
	        else if (!InputMgr.isDown()) {
	            if (this.playerRecentlyDraggedOrScaled) {
	                this.playerRecentlyDraggedOrScaled = false;
	                this.state = MoverState.NoMouseDown;
	                this.resetTapCountAndTimer();
	            }
	            else {
	                this.updateTryRelocateObject();
	            }
	        }
	    }
	    static updateObjectDragging() {
	        if (!this.verifyActiveObject()) {
	            return;
	        }
	        if (InputMgr.isDown()) {
	            let vector = CameraMgr.toCameraPos(InputMgr.mouseX, InputMgr.mouseY);
	            if (this.useOffsetMousePosition) {
	                vector = CameraMgr.toCameraPos(InputMgr.mouseX + this.originalClickPointOffset.x, InputMgr.mouseY + this.originalClickPointOffset.y);
	            }
	            if (this.activeObj.requiresCellPlacement && Glob.map.inBoundsBy(vector.x, vector.y, true)) {
	                let metaCell_CenteredOn = Glob.map.getMetaCell(vector.x, vector.y, this.activeObj.cfg.widthCell, this.activeObj.cfg.heightCell, false);
	                this.activeObj.updateDragOrClickTargetCell(metaCell_CenteredOn);
	                if (this.activeObj.matchState == MatchState.SwoopingToCell) {
	                    this.activeObj.userDirectedOnGridSwoop = true;
	                }
	            }
	            if (this.activeObj.draggingCanBeMovedMOM()) {
	                let dragDeltaX = vector.x - this.activeObj.x;
	                let dragDeltaY = vector.y - this.activeObj.y;
	                this.activeObj.setRootPosition(vector.x, vector.y);
	                this.activeObj.onDrag(dragDeltaX, dragDeltaY);
	            }
	        }
	        else {
	            this.activeObj.playerDroppedFromDrag();
	            this.deselectActiveObject();
	        }
	    }
	    static downAndUpOnNewSelectableObject() {
	        let underCursor = InputMgr.underCursor;
	        if (underCursor == null || underCursor == this.activeObj) {
	            this.playerRecentlyDraggedOrScaled = false;
	            this.state = MoverState.NoMouseDown;
	            this.resetTapCountAndTimer();
	            return;
	        }
	        let flag = false;
	        if (underCursor.cfg.draggable && this.activeObj.cfg.requiresCellPlacement && underCursor.cfg.requiresCellPlacement) {
	            flag = this.activeObj.trySwapObjectWith_OrMatchOverlap(underCursor);
	        }
	        if (flag) {
	            this.deselectActiveObject();
	            this.state = MoverState.MouseStillDown;
	        }
	        else {
	            this.trySelectObject(underCursor);
	        }
	    }
	    static updateTryRelocateObject() {
	        let vector = CameraMgr.toCameraPos(InputMgr.mouseX, InputMgr.mouseY, 0);
	        if (!Glob.map.inBoundsBy(vector.x, vector.y, true)) {
	            this.state = MoverState.NoMouseDown;
	            this.resetTapCountAndTimer();
	        }
	        else if (this.activeObj.requiresCellPlacement) {
	            let metaCell_CenteredOn = Glob.map.getMetaCell(vector.x, vector.y, this.activeObj.cfg.widthCell, this.activeObj.cfg.heightCell, false);
	            if (this.activeObj.isInADraggableState() && metaCell_CenteredOn.canBeOccupiedBy(this.activeObj) && !metaCell_CenteredOn.isFullyOccupiedBy(this.activeObj, true)) {
	                this.activeObj.updateDragOrClickTargetCell(metaCell_CenteredOn, true);
	                if (this.activeObj.matchState == MatchState.SwoopingToCell) {
	                    this.activeObj.userDirectedOnGridSwoop = true;
	                }
	                this.deselectActiveObject();
	                this.state = MoverState.None;
	            }
	            else {
	                this.deselectActiveObject();
	                this.state = MoverState.None;
	                this.resetTapCountAndTimer();
	            }
	        }
	        else {
	            if (this.activeObj.isInADraggableState() && this.activeObj.dragging_CanBeMovedMOM()) {
	                this.activeObj.swoopOffGridTo(vector.x, vector.y, true, true);
	            }
	            this.deselectActiveObject();
	            this.state = MoverState.None;
	        }
	    }
	    static tryInitiatingObjectDrag() {
	        if (this.movedFarEnoughToInitiateDrag()) {
	            this.state = MoverState.ObjectDragging;
	            this.activeObj.startingDrag();
	        }
	    }
	    static movedFarEnoughToInitiateDrag() {
	        let a = new Laya.Vector3(InputMgr.mouseX, InputMgr.mouseY);
	        let b = new Laya.Vector3(this.originalClickPoint.x, this.originalClickPoint.y);
	        let screenPixelAmount = Laya.Vector3.distance(a, b);
	        let num = InputMgr.screenToInches(screenPixelAmount);
	        return num > 0.1;
	    }
	    static verifyActiveObject() {
	        if (this.activeObj == null || this.activeObj.isDying() || this.activeObj.isFlyingToUI()) {
	            this.deselectActiveObject();
	            this.state = MoverState.None;
	            return false;
	        }
	        return true;
	    }
	    static checkForTouchingDeadLand() {
	        let cellUnderCursor = InputMgr.cellUnderCursor;
	        if (cellUnderCursor && cellUnderCursor.dead && (Glob.inHome || Glob.inAnEventArea || Glob.inAChallengeArea || cellUnderCursor.deathComponent.isImmune())) {
	            cellUnderCursor.deathComponent.tryShowMeterFromPlayerTouch();
	        }
	    }
	    static trySelectObject(target) {
	        if (target.isInASelectableState()) {
	            if (this.activeObj != null && this.activeObj != target) {
	                this.deselectActiveObject();
	            }
	            this.activeObj = target;
	            this.recordOriginalClickPointAndOffset();
	            this.activeObj.select();
	            this.tapTimer.reset();
	            this.state = MoverState.MouseDown;
	        }
	    }
	    static recordOriginalClickPointAndOffset() {
	        this.originalClickPoint.setValue(InputMgr.mouseX, InputMgr.mouseY);
	        if (this.activeObj == null) {
	            console.error("MoverMgr::recordOriginalClickPointAndOffset() was called with a null m_activeObject. This should not happen. If you have any details about what happened, please send them to Ray.");
	            return;
	        }
	        let camera = CameraMgr.camera;
	        let vector = CameraMgr.toScreenPos(this.activeObj.transform.position);
	        vector.x -= this.originalClickPoint.x;
	        vector.y -= this.originalClickPoint.y;
	        this.originalClickPointOffset = vector;
	    }
	    static deselectIfActiveObject(toDeselect, calledFromDrawnObjectDeselect) {
	        if (!(toDeselect == null) && !(toDeselect != this.activeObj)) {
	            this.deselectActiveObject(calledFromDrawnObjectDeselect);
	        }
	    }
	    static deselectActiveObject(calledFromDrawnObjectDeselect = false) {
	        this.state = MoverState.None;
	        if (this.activeObj) {
	            this.prevObj = this.activeObj;
	            this.activeObj = null;
	            if (!calledFromDrawnObjectDeselect) {
	                this.prevObj.deselect();
	            }
	        }
	    }
	    static downInSelectionArea() {
	        if (!InputMgr.isDown()) {
	            return false;
	        }
	        if (!this.residesInSelectionArea()) {
	            return false;
	        }
	        return true;
	    }
	    static residesInSelectionArea() {
	        if (InputMgr.mouseXPer < 0.035) {
	            return false;
	        }
	        if (InputMgr.mouseXPer > 0.965) {
	            return false;
	        }
	        if (InputMgr.mouseYPer < 0.035) {
	            return false;
	        }
	        if (InputMgr.mouseYPer > 0.965) {
	            return false;
	        }
	        return true;
	    }
	    static clear() {
	        this.activeObj = null;
	        this.prevObj = null;
	    }
	    static isDraggingObj() {
	        if (this.activeObj == null) {
	            return false;
	        }
	        return this.state == MoverState.ObjectDragging;
	    }
	    static hasSelectedObjectAndClickOnDifferentObject() {
	        if (this.activeObj == null) {
	            return false;
	        }
	        if (!InputMgr.isDown()) {
	            return false;
	        }
	        return InputMgr.underCursor != this.activeObj;
	    }
	    static sceneChangeCleanup() {
	        this.activeObj = null;
	        this.prevObj = null;
	        this.playerRecentlyDraggedOrScaled = false;
	        this.numTaps = 0;
	        this.state = MoverState.None;
	    }
	    static resetTapCountAndTimer() {
	        this.numTaps = 0;
	        this.tapTimer.reset();
	    }
	    static checkForDoubleTapOn(tapped) {
	        let result = false;
	        if (this.tapTimer.done) {
	            this.numTaps = 0;
	        }
	        else if (this.numTaps == 2) {
	            tapped.doubleTapped();
	            result = true;
	            this.numTaps = 0;
	        }
	        this.tapTimer.reset();
	        return result;
	    }
	    static updateMouseStillDown() {
	        if (!InputMgr.isDown()) {
	            this.state = MoverState.None;
	        }
	    }
	}
	MoverMgr.state = MoverState.None;
	MoverMgr.tapTimer = new Clock(0.6);
	MoverMgr.originalClickPoint = new Laya.Vector2();
	MoverMgr.numTaps = 0;
	MoverMgr.mouseDownOnNewObjectAlwaysSelectsNewObject = true;
	MoverMgr.useOffsetMousePosition = true;

	class LootTablesVo {
	    static create(id, data) {
	        let vo = new LootTablesVo();
	        vo.id = id;
	        vo.isPref = false;
	        vo.defaultId = data["default"];
	        if (data["gkid"])
	            vo.gkid = data["gkid"];
	        vo.chanceDrops = [];
	        for (let i = 1; i < 6; i++) {
	            let itemId = data["item" + i];
	            if (itemId) {
	                let chance = data["chance" + i];
	                vo.chanceDrops.push({ id: itemId, chance });
	            }
	        }
	        return vo;
	    }
	    static createFromPref(prefId) {
	        let vo = new LootTablesVo();
	        vo.id = prefId;
	        vo.isPref = true;
	        vo.defaultId = prefId;
	        vo.chanceDrops = [];
	        return vo;
	    }
	    tryDrop(drop) {
	        return MathUtil.chance(drop.chance);
	    }
	    getDropId(dropId) {
	        dropId = LootTablesMgr.ins().formatIfLevel(dropId);
	        let vo = LootTablesMgr.ins().get(dropId);
	        if (vo) {
	            if (vo.isPref) {
	                return vo.defaultId;
	            }
	            else {
	                return vo.dropPrefabId();
	            }
	        }
	        else {
	            return dropId;
	        }
	    }
	    dropPrefabId() {
	        if (!this.isSingle()) {
	            for (let i = 0; i < this.chanceDrops.length; i++) {
	                let drop = this.chanceDrops[i];
	                if (this.tryDrop(drop)) {
	                    return this.getDropId(drop.id);
	                }
	            }
	        }
	        return this.getDefaultDropPrefId();
	    }
	    isSingle() {
	        return this.chanceDrops.length === 0;
	    }
	    getDefaultDropPrefId() {
	        return this.getDropId(this.defaultId);
	    }
	    getAllDrops() {
	        return this.chanceDrops.concat([{ id: this.defaultId, chance: 1 }]);
	    }
	    getAllLoots() {
	        let list = [];
	        let defaultId = this.getDefaultDropPrefId();
	        defaultId != null && list.push(defaultId);
	        this.chanceDrops.forEach(drop => list.push(this.getDropId(drop.id)));
	        return list;
	    }
	    randomLoot() {
	        let allLoots = this.getAllLoots();
	        return allLoots[MathUtil.randInt(0, allLoots.length - 1)];
	    }
	    drop() {
	        return Thing.create(this.dropPrefabId());
	    }
	    tryDrop_CheckFreeCells() {
	        let text = this.dropPrefabId();
	        if (Glob.cellLayer.boardTooFullFor(text)) {
	            return null;
	        }
	        return Thing.create(text);
	    }
	    tryDropWithinRadius(originator, cellRadius, useSwoop) {
	        let text = this.dropPrefabId();
	        let matchObjectDefinition = PropsCfg.get(text);
	        if (matchObjectDefinition.requiresCellPlacement) {
	            if (Glob.cellLayer.boardTooFullFor(text)) {
	                return null;
	            }
	            let allowOverlapOfCenter = cellRadius <= 0;
	            let position = originator.transform.position;
	            let emptyMetaCellNear = Glob.map.getMetaCellNear(position.x, position.y, originator.cfg.widthCell, originator.cfg.heightCell, allowOverlapOfCenter, cellRadius, matchObjectDefinition.widthCell, matchObjectDefinition.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.AllowAll, false, false, true);
	            if (emptyMetaCellNear == null) {
	                return null;
	            }
	            if (useSwoop) {
	                return matchObjectDefinition.createInMetaCell_SwoopFrom(emptyMetaCellNear, false, originator.x, originator.y);
	            }
	            return matchObjectDefinition.createInMetaCell(emptyMetaCellNear);
	        }
	        let drawnObject = Thing.create(text);
	        if (useSwoop) {
	            drawnObject.setRootPosition(originator.x, originator.y);
	            Globals.swoopDropToFreeMetaCell(drawnObject);
	        }
	        else {
	            let emptyWorldPointNear = Glob.map.getEmptyWorldPointNear(originator.x, originator.y, -1, CellProximitySearchTypeID.PreferCloser, false);
	            drawnObject.setRootPosition(emptyWorldPointNear.x, emptyWorldPointNear.y);
	        }
	        return drawnObject;
	    }
	}

	class LootTablesCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            this._gkcfg = {};
	            let json = PConfig.getCfg("LootTables.json");
	            for (let key in json) {
	                let vo = LootTablesVo.create(parseInt(key), json[key]);
	                this._cfg[key] = vo;
	                if (vo.gkid) {
	                    this._gkcfg[vo.gkid] = vo;
	                }
	            }
	        }
	        return this._cfg;
	    }
	    static init() {
	        this.cfg;
	    }
	    static get(id) {
	        return this.cfg[id];
	    }
	    static getByLevel(name) {
	        return this._gkcfg[name];
	    }
	}

	class SoundConst {
	}
	SoundConst.SelectObject = "m6";

	class TiScript3D extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.slowDelay = 500;
	        this.lastTime = 0;
	    }
	    onUpdate() {
	        super.onUpdate();
	        this.lastTime += Laya.timer.delta;
	        if (this.lastTime >= this.slowDelay) {
	            this.lastTime = 0;
	            this.onSlowUpate();
	        }
	    }
	    onSlowUpate() {
	    }
	}

	class CRMModuleRedeeemProductKeys {
	    constructor() {
	        this.GEM = "merge_dragons_gem";
	        this.EMBLEM = "merge_dragons_coin";
	        this.STONE = "merge_dragons_stone";
	        this.GEM_PACK_30_DAY = "merge_dragons_gempack30day";
	        this.ITEM = "merge_dragons_item";
	    }
	}
	class CRMModuleReturnProductKeys {
	    constructor() {
	        this.GEM = "merge_dragons_gem_return";
	        this.EMBLEM = "merge_dragons_coin_return";
	        this.STONE = "merge_dragons_stone_return";
	        this.GEM_PACK_30_DAY = "merge_dragons_gempack30day_return";
	        this.ITEM = "merge_dragons_item_return";
	    }
	}
	class MDConsts {
	    constructor() {
	        this.EVENT_POPUP_DRAGON_POWER = 7;
	        this.GEM_COST_PER_EVENT_CURRENCY_EVENT_OVER_OFFER = 0.15;
	        this.NUMBER_OF_REWARDS_TO_UNLOCK_EVENT_OVER_OFFER = 3;
	        this.AUTO_SAVE_INTERVAL_DEFAULT = 300;
	        this.AUTO_SAVE_INTERVAL_FIELD = "autoSaveInterval";
	        this.BABY_DRAGON_PACK_TWO_FIELD = "enableBabyDragonPackTwo";
	        this.BABY_DRAGON_PACK_TWO_TOGGLE = "baby_dragon_pack_two_enabled";
	        this.BABY_DRAGON_PACK_THREE_TOGGLE = "baby_dragon_pack_three_enabled";
	        this.ASSET_BUNDLE_ENABLED = "asset_bundle_enabled";
	        this.MINUTE_TRACKING_ENABLED = "minute_tracking_enabled";
	        this.PROGRESS_LOSS_DETECTION_ENABLED = "ploss_detection_enabled";
	        this.USE_EOS_FOR_EVENTS = "use_eos_for_events";
	        this.RV_CHALICE_REWARD = "rv_chalice_reward";
	        this.RV_CHALICE_COOLDOWN = "rv_chalice_cooldown";
	        this.RV_CHALICE_DAILY_THRESHOLD = "rv_chalice_daily_limit";
	        this.RV_DRAGON_SLEEP_COOLDOWN = "rv_dragon_sleep_cooldown";
	        this.RV_DRAGON_SLEEP_DAILY_THRESHOLD = "rv_dragon_sleep_limit";
	        this.FRIENDS_INVITE_URL = "friends_invite_url";
	        this.FRIENDS_REPORT_MIN_CHARACTER = 1;
	        this.SYNC_DATA_VERSION_KEY = -1;
	        this.PROGRESSION_DUPE_DURATION_HOME_DEFAULT = 3600;
	        this.PROGRESSION_DUPE_DURATION_HOME_FIELD = "progressionDupeDurationHome";
	        this.PROGRESSION_DUPE_DURATION_EVENT_DEFAULT = 600;
	        this.PROGRESSION_DUPE_DURATION_EVENT_FIELD = "progressionDupeDurationEvent";
	        this.RIGGED_VICTORY_MIN = 0;
	        this.RIGGED_VICTORY_MAX = 5;
	        this.RIGGED_VICTORY_SLOT = 4;
	        this.GOOGLE_PLAY_LINK = "market://details?id=com.gramgames.mergedragons";
	        this.APPLE_STORE_LINK = "itms-apps://itunes.apple.com/app/id1208952944";
	        this.STORE_TYPE__EGG = "egg_shop";
	        this.STORE_TYPE__IAP = "iap";
	        this.STORE_TYPE__BUILD = "build_shop";
	        this.STORE_TYPE__SHOP = "shop";
	        this.STORE_TYPE__PREMIUM_LAND = "premium_land";
	        this.STORE_TYPE__PREMIUM_LAND_2 = "premium_land_2";
	        this.STORE_TYPE__PREMIUM_LAND_2a = "premium_land_2a";
	        this.STORE_TYPE__PREMIUM_LAND_2b = "premium_land_2b";
	        this.STORE_TYPE__PREMIUM_LAND_2c = "premium_land_2c";
	        this.STORE_TYPE__PREMIUM_LAND_3 = "premium_land_3";
	        this.STORE_TYPE__CRM_PREMIUM_LAND_BUNDLE = "crm_premium_land_bundle";
	        this.STORE_TYPE__STARTER_PACK = "starter_pack";
	        this.STORE_TYPE__GACHA = "gacha";
	        this.STORE_TYPE__EVENT_TIMED_OFFER = "event_offer";
	        this.STORE_TYPE__TIMEDBUNDLECHEST = "timedbundlechest";
	        this.STORE_FUNNEL_EVENT_TYPE__STORE_OPEN = "storeOpen";
	        this.STORE_FUNNEL_EVENT_TYPE__ITEM_CLICKED = "itemClicked";
	        this.STORE_FUNNEL_EVENT_TYPE__CANCEL = "cancel";
	        this.STORE_FUNNEL_EVENT_TYPE__FAIL = "fail";
	        this.STORE_FUNNEL_EVENT_TYPE__SUCCESS = "success";
	        this.STORE_FUNNEL_EVENT_TYPE__RESTORE = "restore";
	        this.STORE_FUNNEL_EVENT_TYPE__ACHIEVE = "achieve";
	        this.STORE_FUNNEL_EVENT_TYPE__STARTER_PACK_CLICKED = "starterPackClicked";
	        this.CLOUD_FUNNEL_EVENT_TYPE__OPEN_SETTINGS = "open";
	        this.CLOUD_FUNNEL_EVENT_TYPE__FB_CONNECT = "connect";
	        this.CLOUD_FUNNEL_EVENT_TYPE__FB_SUCCESS = "fb_success";
	        this.CLOUD_FUNNEL_EVENT_TYPE__FB_FAIL = "fb_fail";
	        this.CLOUD_FUNNEL_EVENT_TYPE__CLOUD_SUCCESS = "cloud_success";
	        this.CLOUD_FUNNEL_EVENT_TYPE__CLOUD_FAIL = "cloud_fail";
	        this.CLOUD_FUNNEL_EVENT_TYPE__GIFT_REWARDED = "claim_gift";
	        this.CLOUD_FUNNEL_EVENT_TYPE__CLOUD_LOGOUT = "cloud_logout";
	        this.CLOUD_FUNNEL_EVENT_TYPE__CLOUD_DEACTIVATE = "deactivate";
	        this.CLOUD_FUNNEL_EVENT_TYPE__REMOTE_SAVE_FOUND = "save_found";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_SAVE = "retrieve_save";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_SAVE_CONFIRM = "retrieve_save_confirm";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_SAVE_CONFIRM2 = "retrieve_save_confirm2";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_SAVE_CANCEL = "retrieve_save_cancel";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_SAVE_CANCEL2 = "retrieve_save_cancel2";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_SUCCESS = "retrieve_success";
	        this.CLOUD_FUNNEL_EVENT_TYPE__RETRIEVE_REMOTE_FAIL = "retrieve_fail";
	        this.CLOUD_FUNNEL_EVENT_TYPE__KEEP_LOCAL_SAVE = "keep_current";
	        this.CLOUD_FUNNEL_EVENT_TYPE__UPLOAD_LOCAL_TO_REMOTE = "upload_save";
	        this.CLOUD_FUNNEL_EVENT_TYPE__UPLOAD_LOCAL_TO_REMOTE_CONFIRM = "upload_save_confirm";
	        this.CLOUD_FUNNEL_EVENT_TYPE__UPLOAD_LOCAL_TO_REMOTE_CANCEL = "upload_save_cancel";
	        this.CLOUD_FUNNEL_EVENT_TYPE__DONT_UPLOAD_LOCAL_TO_REMOTE = "dont_upload";
	        this.CLOUD_FUNNEL_SCREEN__MAP = "map";
	        this.CLOUD_FUNNEL_SCREEN__SETTINGS = "cloud_settings";
	        this.CLOUD_FUNNEL_SCREEN__SAVE_FOUND = "cloud_save_found";
	        this.CLOUD_FUNNEL_SCREEN__UPLOAD_CHOICE = "cloud_upload_choice";
	        this.SETTINGS__CONTEXT_KEY = "mdsettingsctx";
	        this.SETTINGS__KEY__IAP_VERIFICATION_POLICY = "sttg/iapvpolicy";
	        this.SETTINGS__KEY__IAP_ACTIVE_ITEMS_FILTER_ENABLED = "sttg/iapitemfilterenabled";
	        this.SETTINGS__KEY__IAP_ACTIVE_ITEMS_LIST = "sttg/iapactiveilist";
	        this.SETTINGS__KEY__STARTER_PACK_ENABLED = "sttg/starterpackenabled";
	        this.SETTINGS__KEY__PREMIUM_LAND_ENABLED = "sttg/premiumlandenabled";
	        this.SETTINGS__KEY__LOCAL_NOTIF_ENABLED = "sttg/localnotifenabled";
	        this.SETTINGS__KEY__REWARDED_VIDEO_ENABLED = "sttg/rewardedenabled";
	        this.SETTINGS__KEY__CHALICE_DATA = "sttg/chalicedata";
	        this.SETTINGS__KEY__ALARM_BONUSES_ENABLED = "sttg/alarmbonusenabled";
	        this.SETTINGS__KEY__RETENTION_CHESTS_ENABLED = "sttg/retentionchestsenabled";
	        this.SETTINGS__KEY__QUEST_ENABLED = "sttg/questenabled";
	        this.SETTINGS__KEY__TIMED_BUNDLES_ENABLED = "sttg/timedchestbundlesenabled";
	        this.SETTINGS__KEY__PREMIUM_TIMED_BUNDLE_CHESTS_STATE = "sttg/premiumtimedbundlecheststate";
	        this.SETTINGS__KEY__CHALLENGE_LEVELS_ENABLED = "sttg/challengelevelsenabled";
	        this.SETTINGS__KEY__PREMIUM_LAND_2_STATE = "sttg/premiumland2state";
	        this.SETTINGS__KEY__PREMIUM_SHOP_2_STATE = "sttg/premiumshop2state";
	        this.SETTINGS__KEY__CHALLENGE_LEVEL_2_VARIANT = "sttg/challengeversion2";
	        this.SETTINGS__KEY__LOCKED_CHEST_MERGE_VARIANT = "sttg/lockedchestmerge";
	        this.SETTINGS__KEY__PURPLE_STAR_DROP_RATE = "sttg/purplestardroprate";
	        this.SETTINGS__KEY__DOWNLOAD_ASSET_BUNDLES = "sttg/downloadassetbundles";
	        this.SETTINGS__KEY__PEPPE_ENABLED = "sttg/peppeenabled";
	        this.SETTINGS__KEY__MANUAL_WAKE_SLEEP_ENABLED = "sttg/manualwakesleepenabled";
	        this.SETTINGS__KEY__REMOTE_TIMED_BUNDLES_ENABLED = "sttg/remotetimedbundlesenabled";
	        this.SETTINGS__KEY__HOME_CAP_VALUE_FIX_EXECUTED = "sttg/homecapvaluefixexecuted";
	        this.SETTINGS__KEY__INITIAL_GEM_AMOUNT = "sttg/initialgemamount";
	        this.SETTINGS__KEY___LOCKED_CHEST_APPEARANCE = "sttg/lockedchestappearance";
	        this.SETTINGS__KEY___LOCKED_CHEST_FREQUENCY = "sttg/lockedchestfrequency";
	        this.SETTINGS__KEY___LOCKED_CHEST_TIER = "sttg/lockedchesttier";
	        this.SETTINGS__KEY___LOCKED_CHEST_COST = "sttg/lockedchestcost";
	        this.SETTINGS__KEY___KALA_REFRESH_TIME = "sttg/kalarefreshtime";
	        this.SETTINGS__KEY___EGG_BANK_DATA = "sttg/eggbankenabled";
	        this.SETTINGS__KEY___NEST_DROP_VARIANT = "sttg/nestdropvariant";
	        this.SETTINGS__KEY___SKIP_CAMP_QUEST_VARIANT = "sttg/skipcampquestvariant";
	        this.PERSISTENCY_KEY__BUNDLE_STATUS_KEY_PREFIX = "bundlestatus/";
	        this.BUNDLE__STARTER_PACK__ID = "starter_pack_bundle";
	        this.BUNDLE__STARTER_PACK__PREMIUM_PACK_ID = "starter_pack";
	        this.BUNDLE__STARTER_PACK_EXPIRED__ID = "starter_pack_expired_bundle";
	        this.BUNDLE__STARTER_PACK_GOLDCHEST__ID = "starter_pack_goldchest_bundle";
	        this.BUNDLE__TIMED_BUNDLE_1__ID = "TimedBundleChest_1";
	        this.BUNDLE__TIMED_BUNDLE_2__ID = "TimedBundleChest_2";
	        this.BUNDLE__TIMED_BUNDLE_3__ID = "TimedBundleChest_3";
	        this.BUNDLE__TIMED_BUNDLE_4__ID = "TimedBundleChest_4";
	        this.BUNDLE__TIMED_BUNDLE_5__ID = "TimedBundleChest_5";
	        this.BUNDLE__TIMED_BUNDLE_6__ID = "TimedBundleChest_6";
	        this.BUNDLE__TIMED_BUNDLE_7__ID = "TimedBundleChest_7";
	        this.BUNDLE__TIMED_BUNDLE_8__ID = "TimedBundleChest_8";
	        this.BUNDLE__TIMED_BUNDLE_9__ID = "TimedBundleChest_9";
	        this.BUNDLE__TIMED_REMOTE_TEST_ID = "remotetimedbundle_test";
	        this.BUNDLE__PREMIUM_BUNDLE_TEST__ID = "PremiumBundleTest_1";
	        this.BUNDLE__BABY_DRAGON_PACK = "baby_dragons_1";
	        this.BUNDLE__BABY_DRAGON_PACK_2 = "baby_dragons_2";
	        this.BUNDLE__BABY_DRAGON_PACK_3 = "baby_dragons_3";
	        this.PERSISTENCY_KEY__TIMER_MANAGER_DATA = "md__timermanager";
	        this.AB_TEST_KEY__STARTER_PACK_ENABLED = "sp_enabled";
	        this.AB_TEST_KEY__PREMIUM_LAND_ENABLED = "pl_enabled";
	        this.AB_TEST_KEY__LOCAL_NOTIF_ENABLED = "ln_enabled";
	        this.AB_TEST_KEY__REWARDED_VIDEO_ENABLED = "rv_enabled";
	        this.AB_TEST_KEY__CHALICE_DATA = "chalice_data";
	        this.AB_TEST_KEY__ALARM_BONUSES_ENABLED = "abonus_enabled";
	        this.AB_TEST_KEY__RETENTION_CHESTS_ENABLED = "retention_chests_enabled";
	        this.AB_TEST_KEY__QUEST_ENABLED = "dq_enabled";
	        this.AB_TEST_KEY__TIMED_BUNDLES_ENABLED = "timed_bundle_chests_enabled";
	        this.AB_TEST_KEY__PREMIUM_TIMED_BUNDLE_CHESTS_STATE = "premium_timed_bundle_chests_state";
	        this.AB_TEST_KEY__CHALLENGE_LEVELS_ENABLED = "challenge_levels_enabled";
	        this.AB_TEST_KEY__CHALLENGE_LEVELS_OPTIONAL = "challenge_levels_optional";
	        this.AB_TEST_KEY__PREMIUM_LAND_2_STATE = "premium_land_2_state";
	        this.AB_TEST_KEY__PREMIUM_SHOP_2_STATE = "premium_shop_2_state";
	        this.AB_TEST_KEY__CHALLENGE_VERSION_2 = "challenge_version_2";
	        this.AB_TEST_KEY__LOCKED_CHEST_MERGE_VARIANT = "local_chest_merge_variant";
	        this.AB_TEST_KEY__PURPLE_STAR_DROP_RATE = "purple_star_drop_rate";
	        this.AB_TEST_KEY__PEPPE_ENABLED = "peppe_enabled";
	        this.AB_TEST_KEY__DRAGON_SLEEP_MANUAL_CONTROL_ENABLED = "dragon_sleep_manual_control_enabled";
	        this.AB_TEST_KEY__REMOTE_TIMED_BUNDLES_ENABLED = "remote_bundles_enabled";
	        this.AB_TEST_KEY__DOWNLOAD_ASSET_BUNDLES = "download_asset_bundles";
	        this.AB_TEST_KEY__LOCKED_CHEST_APPEARANCE = "locked_chest_appearance";
	        this.AB_TEST_KEY__LOCKED_CHEST_FREQUENCY = "locked_chest_frequency";
	        this.AB_TEST_KEY__LOCKED_CHEST_TIER = "locked_chest_tier";
	        this.AB_TEST_KEY__LOCKED_CHEST_COST = "locked_chest_cost";
	        this.AB_TEST_KEY__NEST_DROP_VARIANT = "nest_drop_variant";
	        this.AB_TEST_KEY__SKIP_CAMP_QUEST_VARIANT = "skip_camp_quest_variant";
	        this.AB_TEST_KEY__KALA_REFRESH_TIME = "kala_refresh_time";
	        this.AB_TEST_KEY__INITIAL_GEM_AMOUNT = "initial_gem_amount";
	        this.AB_TEST_KEY__EGG_BANK = "egg_bank";
	        this.TAG_FIELD_DEFAULT = "default";
	        this.IAP_AB_TEST_DATA_KEY = "iap_tags";
	        this.BABY_DRAGON_PACK_2_SHOWN = "did_present_baby_dragon_bundle_2";
	        this.BABY_DRAGON_PACK_3_SHOWN = "did_present_baby_dragon_bundle_3";
	    }
	}
	MDConsts.EVENT_DOUBLE_SPIN_COSTS = [
	    170,
	    20,
	    40,
	    80,
	    160,
	    320
	];
	MDConsts.LOOT_BOX_INFO_ENABLED_FIELD = "lootBoxInfoEnabled";
	MDConsts.FRIENDS_NOTIFICATIONS_POLLING_INTERVAL_FIELD = "friendsNotificationsPollingInterval_v2";
	MDConsts.FRIENDS_NOTIFICATIONS_POLLING_INTERVAL_DEFAULT = 30;
	MDConsts.FRIENDS_ENABLED_FIELD = "friendsEnabledField";
	MDConsts.FRIENDS_ENABLED_DEFAULT = true;
	MDConsts.UPLOAD_CAMP_TO_NAKAMA = "upload_camp_to_nakama_enabled";
	MDConsts.REPORTING_ENABLED = "reporting_enabled";
	MDConsts.UPDATE_OPTIMISATION_ENABLED = "update_optimisation_enabled";
	MDConsts.CRM_SERVER_ATTRIBUTES_ENABLED = "crm_server_attributes_enabled";
	MDConsts.crmUseServerAttributes = false;

	class ProtUtil {
	    static ltn(v) {
	        var protobuf = Laya.Browser.window.protobuf;
	        return protobuf.util.LongBits.from(v).toNumber();
	    }
	}

	class MallData {
	}
	class WeChatUserData {
	}
	var ShopDataLoadType;
	(function (ShopDataLoadType) {
	    ShopDataLoadType[ShopDataLoadType["Mall"] = 0] = "Mall";
	    ShopDataLoadType[ShopDataLoadType["Land"] = 1] = "Land";
	    ShopDataLoadType[ShopDataLoadType["Mall2"] = 2] = "Mall2";
	})(ShopDataLoadType || (ShopDataLoadType = {}));
	var PayResultState;
	(function (PayResultState) {
	    PayResultState[PayResultState["Succeed"] = 0] = "Succeed";
	    PayResultState[PayResultState["Fail"] = -1] = "Fail";
	    PayResultState[PayResultState["Cancel"] = -2] = "Cancel";
	})(PayResultState || (PayResultState = {}));
	class ShopData {
	}
	ShopData.mallDatas = {};
	var PayWay;
	(function (PayWay) {
	    PayWay[PayWay["Wechat"] = 0] = "Wechat";
	    PayWay[PayWay["Alipay"] = 1] = "Alipay";
	    PayWay[PayWay["WanYu"] = 2] = "WanYu";
	    PayWay[PayWay["AiWan"] = 3] = "AiWan";
	})(PayWay || (PayWay = {}));
	var SignState;
	(function (SignState) {
	    SignState[SignState["eNoSign"] = 0] = "eNoSign";
	    SignState[SignState["eFinish"] = 1] = "eFinish";
	    SignState[SignState["eReSign"] = 2] = "eReSign";
	})(SignState || (SignState = {}));
	var GiftType;
	(function (GiftType) {
	    GiftType[GiftType["eNull"] = 0] = "eNull";
	    GiftType[GiftType["eLimit"] = 1] = "eLimit";
	    GiftType[GiftType["eDiscounts"] = 2] = "eDiscounts";
	})(GiftType || (GiftType = {}));
	class SGiftBagItem {
	    constructor(fCostVar, nPremiumCountVar, strIconNameVar, arrID, arrCount) {
	        this.fCost = fCostVar;
	        this.nPremiumCount = nPremiumCountVar;
	        this.strIconName = strIconNameVar;
	        this.arrGoodsID = arrID;
	        this.arrGoodsCount = arrCount;
	    }
	}
	class SGiftBagLimit {
	}
	class SGiftBagDiscount {
	}
	class SSignItem {
	    constructor(nGoodsIDVar, nGoodCountVar, strIconNameVar) {
	        this.nGoodID = nGoodsIDVar;
	        this.nGoodCount = nGoodCountVar;
	        this.strIconName = strIconNameVar;
	    }
	}
	class UserData {
	    static get nPremiumCount() {
	        return CurrencyMgr.ins().getAmount(ECurrency.Diamond);
	    }
	    static get IsTestChannel() {
	        return (UserData.nUserType == 5);
	    }
	    static initData(data) {
	        this.loginData = data;
	        this.player = data.player;
	        this.playerId = ProtUtil.ltn(this.player.id);
	        this.createTime = ProtUtil.ltn(this.player.createTime);
	        if (this.player.channel)
	            LoginData.channel = this.player.channel;
	        if (this.player.isInternal && LoginData.gm == 0)
	            LoginData.gm = this.player.isInternal;
	        MsgCenter.notify(MsgConst.R_BAG_LIST, data.bagGirdList);
	    }
	    static get playerLevel() {
	        if (this.player)
	            return this.player.level;
	        return 1;
	    }
	    static get playerName() {
	        if (this.player)
	            return this.player.name;
	        return "";
	    }
	    static get logToken() {
	        return this.loginData.logToken;
	    }
	    static set logToken(v) {
	        this.loginData.logToken = v;
	    }
	    static get isInternal() {
	        return this.player.isInternal;
	    }
	}
	UserData.nVersion = 16;
	UserData.nCloudUploadPeriod = 5 * 60;
	UserData.nADCount = 2;
	UserData.nADTime = 1;
	UserData.playerId = 0;
	UserData.bIsAutoOpenGift = true;
	UserData.sGiftActive = [];
	UserData.nReSignCost = 99;
	UserData.nTotalDay = 0;
	UserData.arrOrgSignState = [];
	UserData.arrSignState = [];
	UserData.arrSignTotalState = [];
	UserData.arrTotalSignCountConfig = [3, 7, 12, 20];
	UserData.sSignConfig = [];
	UserData.sSignTotalConfig = [];
	UserData.arrSevenOrgSignState = [];
	UserData.arrSevenSignState = [];
	UserData.sSevenSignConfig = [];
	UserData.payingWay = PayWay.Wechat;

	var NestDropVariant;
	(function (NestDropVariant) {
	    NestDropVariant[NestDropVariant["Control"] = 0] = "Control";
	    NestDropVariant[NestDropVariant["Balanced"] = 1] = "Balanced";
	    NestDropVariant[NestDropVariant["High"] = 2] = "High";
	})(NestDropVariant || (NestDropVariant = {}));
	class MergeDragonsAppConfig {
	    constructor() {
	        this.APPLICATION_ID_SERVOGRAM = "mergedragonsa";
	        this.APPLICATION_TOKEN_ADJUST = "yht8pxu6kge8";
	        this.ZYNGA_APP_ID = "5004763";
	    }
	    static get CHALLENGE_LEVEL_VERSION_2_ACTIVE() {
	        return this.CHALLENGE_LEVEL_VERSION_2_VARIANT != 0;
	    }
	    static get CHALLENGE_LEVEL_VARIANT() {
	        if (this.CHALLENGE_LEVEL_VERSION_2_ACTIVE) {
	            return (this.CHALLENGE_LEVEL_VERSION_2_VARIANT - 1);
	        }
	        return ChallengeLevelV2VariantID.Variant2_Normal;
	    }
	}
	MergeDragonsAppConfig.COMPLETE_TRANSACTIONS = true;
	MergeDragonsAppConfig.CHILD_MODE_ON = false;
	MergeDragonsAppConfig.PREMIUM_LAND_ENABLED = true;
	MergeDragonsAppConfig.STARTER_PACK_ENABLED = true;
	MergeDragonsAppConfig.LOCAL_NOTIFICATIONS_ENABLED = true;
	MergeDragonsAppConfig.REWARDED_VIDEO_ENABLED = true;
	MergeDragonsAppConfig.ALARM_BONUSES_ENABLED = false;
	MergeDragonsAppConfig.CUSTOM_CHALICE_DATA = null;
	MergeDragonsAppConfig.RETENTION_CHESTS_ENABLED = true;
	MergeDragonsAppConfig.EGG_BANK_DATA = {
	    isEnabled: true,
	    pricing: {
	        isFlat: true,
	        value: 150,
	    }
	};
	MergeDragonsAppConfig.DAILY_QUEST_ENABLED = true;
	MergeDragonsAppConfig.TIMED_BUNDLE_CHESTS_ENABLED = false;
	MergeDragonsAppConfig.PREMIUM_TIMED_BUNDLE_CHESTS_STATE = 0;
	MergeDragonsAppConfig.RV_CHALICE_REWARD = 1;
	MergeDragonsAppConfig.RV_CHALICE_COOLDOWN = UserData.nADTime;
	MergeDragonsAppConfig.RV_CHALICE_DAILY_THRESHOLD = UserData.nADCount;
	MergeDragonsAppConfig.RV_DRAGON_SLEEP_COOLDOWN = 1440;
	MergeDragonsAppConfig.RV_DRAGON_SLEEP_DAILY_THRESHOLD = UserData.nADCount;
	MergeDragonsAppConfig.FRIENDS_INVITE_URL = "http://mergedragons.com/invite";
	MergeDragonsAppConfig.CHALLENGE_LEVELS_ENABLED = true;
	MergeDragonsAppConfig.CHALLENGE_LEVELS_OPTIONAL = false;
	MergeDragonsAppConfig.PREMIUM_LAND_2_STATE = 2;
	MergeDragonsAppConfig.BABY_DRAGON_PACK_2_ENABLED = false;
	MergeDragonsAppConfig.BABY_DRAGON_PACK_3_ENABLED = false;
	MergeDragonsAppConfig.MANUAL_WAKE_SLEEP_ENABLED = false;
	MergeDragonsAppConfig.PREMIUM_SHOP_2_STATE = 1;
	MergeDragonsAppConfig.CHALLENGE_LEVEL_VERSION_2_VARIANT = 1;
	MergeDragonsAppConfig.PURPLE_STARS_AB_TEST = 0;
	MergeDragonsAppConfig.ASSET_BUNDLE_ENABLED = true;
	MergeDragonsAppConfig.PROGRESS_LOSS_DETECTION_ENABLED = true;
	MergeDragonsAppConfig.LOOT_BOX_INFO_ENABLED = false;
	MergeDragonsAppConfig.UPDATE_OPTIMISATION_ENABLED = true;
	MergeDragonsAppConfig.FRIENDS_NOTIFICATIONS_POLLING_INTERVAL = MDConsts.FRIENDS_NOTIFICATIONS_POLLING_INTERVAL_DEFAULT;
	MergeDragonsAppConfig.UPLOAD_CAMP_TO_NAKAMA_ENABLED = false;
	MergeDragonsAppConfig.FRIEND_REPORTING_ENABLED = true;
	MergeDragonsAppConfig.CRM_SERVER_ATTRIBUTES_ENABLED = MDConsts.crmUseServerAttributes;
	MergeDragonsAppConfig.IN_BUNDLE_TEST = false;
	MergeDragonsAppConfig.REMOTE_TIMED_BUNDLES_ENABLED = false;
	MergeDragonsAppConfig.LOCKED_CHEST_APPEARANCE_MULTIPLIER = 1;
	MergeDragonsAppConfig.LOCKED_CHEST_FREQUENCY_MULTIPLIER = 1;
	MergeDragonsAppConfig.LOCKED_CHEST_TIER_CONST = 2;
	MergeDragonsAppConfig.KALA_REFRESH_TIME = 24;
	MergeDragonsAppConfig.AUTO_SAVE_INTERVAL = 60;
	MergeDragonsAppConfig.PROGRESSION_HOME_DUPE_DURATION = 3600;
	MergeDragonsAppConfig.PROGRESSION_EVENT_DUPE_DURATION = 600;
	MergeDragonsAppConfig.CHEST_PRICE_MULTIPLIER = 1;
	MergeDragonsAppConfig.NEST_DROP_TEST_VARIANT = NestDropVariant.Control;
	MergeDragonsAppConfig.LOW_COST_SKIP_CAMP_QUEST_MULTIPLIER = 1;

	class PrefabDB {
	    static prefabExists(prefabName) {
	        if (PropsCfg.has(prefabName)) {
	            return true;
	        }
	        return false;
	    }
	}
	PrefabDB.kPrefabNames_DeathToLife = [60209, 60210, 60211, 60212];
	PrefabDB.kPrefabName_DynamicLifeParticle = 10039;
	PrefabDB.kPrefabNames_LifeParticles = [10034, 10035, 10036, 10037, 10038];
	PrefabDB.kPrefabNames_LootOrbs = [10277, 10278, 10279, 10280, 10281, 10282];

	class LootOrb extends TiScript3D {
	    constructor() {
	        super();
	        this.lootSpriteIndex = 0;
	        this.lootSpriteTimer = new Clock(6);
	    }
	    static createLT(lootTable, numItems) {
	        let drawnObject = Thing.create(10277);
	        let component = drawnObject.getComponent(LootOrb);
	        for (let i = 0; i < numItems; i++) {
	            component.addTreasure(lootTable.dropPrefabId());
	        }
	        return drawnObject;
	    }
	    static createLB(lootBundle) {
	        let drawnObject = Thing.create(10277);
	        let component = drawnObject.getComponent(LootOrb);
	        if (lootBundle.hasLoot) {
	            component.addAllTreasures(lootBundle);
	            lootBundle.clear();
	        }
	        return drawnObject;
	    }
	    static createSL(drawnObjsSaveData) {
	        let drawnObject = Thing.create(10277);
	        let component = drawnObject.getComponent(LootOrb);
	        component.addTreasures(drawnObjsSaveData);
	        return drawnObject;
	    }
	    static create(soloDropPrefab) {
	        let drawnObject = Thing.create(10277);
	        let component = drawnObject.getComponent(LootOrb);
	        component.addTreasure(soloDropPrefab);
	        return drawnObject;
	    }
	    static createFromInstance(existingObjectToCopy) {
	        let drawnObject = Thing.create(10277);
	        let component = drawnObject.getComponent(LootOrb);
	        component.addTreasureSL(existingObjectToCopy.getSaveDataObject());
	        component.drawnObject.setRootPosition(existingObjectToCopy.x, existingObjectToCopy.y, existingObjectToCopy.z);
	        Globals.createFromPrefabAt("ParticleRoot_OpenChest1", existingObjectToCopy.transform.position);
	        SoundMgr.ins().playSound("m9");
	        return drawnObject;
	    }
	    onAwake() {
	        this.drawnObject = this.owner;
	        this.drawnObject.makeImmuneToDeathOnCreation = true;
	    }
	    onStart() {
	        this.setDefaultLootIfNeeded();
	        let id = PropsCfg.getPref(this.drawnObject.customLootBundle.getPrefabAtIndex(this.lootSpriteIndex));
	        this.setTreasureSprite(id);
	        this.refreshDynamicSellValue();
	        if (MergeDragonsAppConfig.UPDATE_OPTIMISATION_ENABLED) {
	        }
	    }
	    onDestroy() {
	        this.clearLastRend();
	        if (this.updateCoroutine != null) {
	        }
	    }
	    addTreasure(treasureInsidePrefab) {
	        this.drawnObject.customLootBundle.addLoot(treasureInsidePrefab);
	        this.refreshDynamicSellValue();
	    }
	    addTreasureSL(drawnObjsSaveData) {
	        this.drawnObject.customLootBundle.addLootSL(drawnObjsSaveData);
	        this.refreshDynamicSellValue();
	    }
	    addAllTreasures(lootBundle) {
	        this.drawnObject.customLootBundle.addLootB(lootBundle);
	        this.refreshDynamicSellValue();
	    }
	    addTreasures(drawnObjsSaveData) {
	        this.drawnObject.customLootBundle.addLootSLs(drawnObjsSaveData);
	        this.refreshDynamicSellValue();
	    }
	    setDefaultLootIfNeeded() {
	        if (this.drawnObject.customLootBundle == null || !this.drawnObject.customLootBundle.hasLoot) {
	            let createOnTap = this.drawnObject.cfg.tapBehavior.createOnTap;
	            let num = this.drawnObject.cfg.tapBehavior.creationCount_Range.random();
	            for (let i = 0; i < num; i++) {
	                this.addTreasure(createOnTap.dropPrefabId());
	            }
	            this.refreshDynamicSellValue();
	        }
	    }
	    onSlowUpate() {
	        if (this.hook)
	            return;
	        if (!this.drawnObject.sp)
	            return;
	        this.hook = this.drawnObject.sp.getChildByName("Body").getChildByName("Box");
	        if (this.lastRendId)
	            this.setTreasureSprite(this.lastRendId);
	    }
	    clearLastRend() {
	        if (!this.lastRend)
	            return;
	        this.lastRend.dispose();
	        this.lastRend = null;
	    }
	    setTreasureSprite(lootRenderer) {
	        this.lastRendId = lootRenderer;
	        if (!this.hook)
	            return;
	        this.clearLastRend();
	        this.lastRend = Globals.createFromPrefab(lootRenderer);
	        this.hook.addChild(this.lastRend);
	        this.lastRend.transform.localPositionZ = 1;
	        this.isInitScale = true;
	    }
	    refreshLootSprite() {
	        if (this.drawnObject.customLootBundle.count >= 2) {
	            this.lootSpriteIndex++;
	            this.lootSpriteIndex %= this.drawnObject.customLootBundle.count;
	            let id = PropsCfg.getPref(this.drawnObject.customLootBundle.getPrefabAtIndex(this.lootSpriteIndex));
	            this.setTreasureSprite(id);
	        }
	    }
	    refreshOrbSprite() {
	        let des = this.getDes();
	        let id = des;
	        this.drawnObject.setCid(id);
	        this.hook = null;
	    }
	    getDes() {
	        let itemLevelSumOfLoot = this.drawnObject.customLootBundle.getItemLevelSumOfLoot();
	        let text = 0;
	        let i = 0;
	        for (i = 0; i < LootOrb.itemLevelMaxesForLootOrbSprites.length; i++) {
	            if (itemLevelSumOfLoot <= LootOrb.itemLevelMaxesForLootOrbSprites[i]) {
	                text = PrefabDB.kPrefabNames_LootOrbs[i];
	                break;
	            }
	        }
	        if (i > 1) {
	            this.drawnObject.onTapAudioOverride = "m105";
	        }
	        if (text == 0) {
	            text = PrefabDB.kPrefabNames_LootOrbs[PrefabDB.kPrefabNames_LootOrbs.length - 1];
	        }
	        return text;
	    }
	    refreshDynamicSellValue() {
	        if (!(this.drawnObject == null) && this.drawnObject.hasCustomLoot) {
	            this.drawnObject.setDynamicSellValue(this.drawnObject.customLootBundle.getSellValueOfLoot());
	        }
	    }
	    onUpdate() {
	        super.onUpdate();
	        if (this.drawnObject.customLootBundle.count > 1) {
	            this.lootSpriteTimer.update(Glob.deltaTime);
	            if (this.lootSpriteTimer.done) {
	                this.refreshLootSprite();
	                this.lootSpriteTimer.reset();
	            }
	            if (!this.orbSpriteRefreshed) {
	                this.refreshOrbSprite();
	                this.orbSpriteRefreshed = true;
	            }
	        }
	        this.updateRend();
	    }
	    updateRend() {
	        if (this.isInitScale && this.lastRend && this.lastRend.sp) {
	            let bound = Globals.getTotalBounds(this.lastRend);
	            let max = bound.getMax();
	            let min = bound.getMin();
	            let w = max.x - min.x;
	            let h = max.y - min.y;
	            let t = w > h ? w : h;
	            let s = 0.5 / t;
	            if (s > 1)
	                s = 1;
	            this.lastRend.transform.localScale = new Laya.Vector3(s, s, s);
	            this.isInitScale = false;
	        }
	    }
	}
	LootOrb.itemLevelMaxesForLootOrbSprites = [
	    2,
	    4,
	    7,
	    12,
	    16,
	    20
	];
	LootOrb.sacleV3 = new Laya.Vector3(0.8, 0.8, 0.8);

	var EaseType;
	(function (EaseType) {
	    EaseType[EaseType["easeInQuad"] = 0] = "easeInQuad";
	    EaseType[EaseType["easeOutQuad"] = 1] = "easeOutQuad";
	    EaseType[EaseType["easeInOutQuad"] = 2] = "easeInOutQuad";
	    EaseType[EaseType["easeInCubic"] = 3] = "easeInCubic";
	    EaseType[EaseType["easeOutCubic"] = 4] = "easeOutCubic";
	    EaseType[EaseType["easeInOutCubic"] = 5] = "easeInOutCubic";
	    EaseType[EaseType["easeInQuart"] = 6] = "easeInQuart";
	    EaseType[EaseType["easeOutQuart"] = 7] = "easeOutQuart";
	    EaseType[EaseType["easeInOutQuart"] = 8] = "easeInOutQuart";
	    EaseType[EaseType["easeInQuint"] = 9] = "easeInQuint";
	    EaseType[EaseType["easeOutQuint"] = 10] = "easeOutQuint";
	    EaseType[EaseType["easeInOutQuint"] = 11] = "easeInOutQuint";
	    EaseType[EaseType["easeInSine"] = 12] = "easeInSine";
	    EaseType[EaseType["easeOutSine"] = 13] = "easeOutSine";
	    EaseType[EaseType["easeInOutSine"] = 14] = "easeInOutSine";
	    EaseType[EaseType["easeInExpo"] = 15] = "easeInExpo";
	    EaseType[EaseType["easeOutExpo"] = 16] = "easeOutExpo";
	    EaseType[EaseType["easeInOutExpo"] = 17] = "easeInOutExpo";
	    EaseType[EaseType["easeInCirc"] = 18] = "easeInCirc";
	    EaseType[EaseType["easeOutCirc"] = 19] = "easeOutCirc";
	    EaseType[EaseType["easeInOutCirc"] = 20] = "easeInOutCirc";
	    EaseType[EaseType["linear"] = 21] = "linear";
	    EaseType[EaseType["spring"] = 22] = "spring";
	    EaseType[EaseType["easeInBounce"] = 23] = "easeInBounce";
	    EaseType[EaseType["easeOutBounce"] = 24] = "easeOutBounce";
	    EaseType[EaseType["easeInOutBounce"] = 25] = "easeInOutBounce";
	    EaseType[EaseType["easeInBack"] = 26] = "easeInBack";
	    EaseType[EaseType["easeOutBack"] = 27] = "easeOutBack";
	    EaseType[EaseType["easeInOutBack"] = 28] = "easeInOutBack";
	    EaseType[EaseType["easeInElastic"] = 29] = "easeInElastic";
	    EaseType[EaseType["easeOutElastic"] = 30] = "easeOutElastic";
	    EaseType[EaseType["easeInOutElastic"] = 31] = "easeInOutElastic";
	    EaseType[EaseType["punch"] = 32] = "punch";
	})(EaseType || (EaseType = {}));
	var LoopType;
	(function (LoopType) {
	    LoopType[LoopType["none"] = 0] = "none";
	    LoopType[LoopType["loop"] = 1] = "loop";
	    LoopType[LoopType["pingPong"] = 2] = "pingPong";
	})(LoopType || (LoopType = {}));
	var NamedValueColor;
	(function (NamedValueColor) {
	    NamedValueColor[NamedValueColor["_Color"] = 0] = "_Color";
	    NamedValueColor[NamedValueColor["_SpecColor"] = 1] = "_SpecColor";
	    NamedValueColor[NamedValueColor["_Emission"] = 2] = "_Emission";
	    NamedValueColor[NamedValueColor["_ReflectColor"] = 3] = "_ReflectColor";
	})(NamedValueColor || (NamedValueColor = {}));
	var Space;
	(function (Space) {
	    Space[Space["World"] = 0] = "World";
	    Space[Space["Self"] = 1] = "Self";
	})(Space || (Space = {}));
	class MathExpand {
	    static Lerp(a, b, t) {
	        return a + (b - a) * t;
	    }
	    static Clamp(val, min, max) {
	        return val > max ? max : val < min ? min : val;
	    }
	    static Clamp01(val) {
	        return MathExpand.Clamp(val, 0, 1);
	    }
	}
	class Defaults {
	}
	Defaults.time = 1.0;
	Defaults.delay = 0.0;
	Defaults.namedColorValue = NamedValueColor._Color;
	Defaults.loopType = LoopType.none;
	Defaults.easeType = EaseType.easeOutExpo;
	Defaults.lookSpeed = 3.0;
	Defaults.isLocal = false;
	Defaults.space = Space.Self;
	Defaults.orientToPath = false;
	Defaults.color = Laya.Color.WHITE;
	Defaults.updateTimePercentage = 0.05;
	Defaults.updateTime = 1.0 * Defaults.updateTimePercentage;
	Defaults.cameraFadeDepth = 999999;
	Defaults.lookAhead = 0.05;
	Defaults.useRealTime = false;
	Defaults.up = new Laya.Vector3(0, 1, 0);
	class CRSpline {
	    constructor(pts) {
	        this.pts = pts.concat();
	    }
	    Interp(t) {
	        let len = this.pts.length - 3;
	        let num2 = Math.min(t * len, len - 1);
	        let num3 = t * len - num2;
	        let v0 = this.pts[num2];
	        let v1 = this.pts[num2 + 1];
	        let v2 = this.pts[num2 + 2];
	        let v3 = this.pts[num2 + 3];
	        return Helper.v3Scale(Helper.v3Add(Helper.v3Scale(Helper.v3Add(Helper.v3Scale(v0, -1), Helper.v3Scale(v1, 3), Helper.v3Scale(v2, -3), v3), (num3 * num3 * num3)), Helper.v3Scale(Helper.v3Add(Helper.v3Scale(v0, 2), Helper.v3Scale(v1, -5), Helper.v3Scale(v2, 4), Helper.v3Scale(v3, -1)), (num3 * num3)), Helper.v3Scale(Helper.v3Add(Helper.v3Scale(v0, -1), v2), num3), Helper.v3Scale(v1, 2)), 0.5);
	    }
	}
	class Helper {
	    static v3Add(...vectors) {
	        let out = new Laya.Vector3();
	        vectors.forEach(v => Laya.Vector3.add(v, out, out));
	        return out;
	    }
	    static v3Sub(va, vb) {
	        let out = Helper.v3Scale(vb, -1);
	        return Helper.v3Add(va, out);
	    }
	    static v3Scale(a, s) {
	        let out = new Laya.Vector3();
	        Laya.Vector3.scale(a, s, out);
	        return out;
	    }
	    static ArrayCopy(source, sourceIndex, dest, destIndex, length) {
	        let sourcePart = [];
	        for (let i = sourceIndex; i < sourceIndex + length; i++) {
	            sourcePart.push(source[i]);
	        }
	        sourcePart.unshift(length);
	        sourcePart.unshift(destIndex);
	        dest.splice.apply(dest, sourcePart);
	    }
	    static ArrayCopy2(source, dest, length) {
	        Helper.ArrayCopy(source, 0, dest, 0, length);
	    }
	}
	class iTween extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.time = 0;
	        this.delay = 0;
	        this.space = Space.Self;
	        this.runningTime = 0;
	        this.lastRealTime = 0;
	        this.percentage = 0;
	        this.path = new CRSpline([]);
	    }
	    static CountAnyWithStringInFunctionCallName(sprite, toCheck) {
	        let count = 0;
	        toCheck = toCheck.toLowerCase();
	        let tweens = sprite.getComponents(iTween);
	        if (!tweens)
	            return count;
	        tweens.forEach(tween => {
	            let value = tween.type + tween.method;
	            if (!value || value["toLowerCase"] == null) {
	                console.log("itween CountAnyWithStringInFunctionCallName    ", toCheck, tween.type, tween.method, value, sprite);
	            }
	            if (value.toLowerCase().indexOf(toCheck)) {
	                count++;
	            }
	        });
	        return count;
	    }
	    static CountByName(sprite, name) {
	        let count = 0;
	        let tweens = sprite.getComponents(iTween);
	        if (!tweens)
	            return count;
	        tweens.forEach(tween => {
	            if (tween._name === name) {
	                count++;
	            }
	        });
	        return count;
	    }
	    static Count(target) {
	        if (this.OPTIMIZED) {
	        }
	        let components = target.getComponents(iTween);
	        if (!components)
	            return 0;
	        return components.length;
	    }
	    static StopAllExceptForName(sprite, nameToLeavePlaying) {
	        let tweens = sprite.getComponents(iTween);
	        tweens.forEach(tween => {
	            if (tween._name !== nameToLeavePlaying) {
	                tween.Dispose();
	            }
	        });
	    }
	    GenerateShakePositionTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.localRotationEuler.cloneTo(this.vector3s[3]);
	        if (this.isLocal) {
	            this.ownerSp.transform.localPosition.cloneTo(this.vector3s[0]);
	        }
	        else {
	            this.ownerSp.transform.position.cloneTo(this.vector3s[0]);
	        }
	        if (this.tweenArguments["amount"]) {
	            this.tweenArguments["amount"].cloneTo(this.vector3s[1]);
	            return;
	        }
	        if (this.tweenArguments["x"] != null) {
	            this.vector3s[1].x = this.tweenArguments["x"];
	        }
	        if (this.tweenArguments["y"] != null) {
	            this.vector3s[1].y = this.tweenArguments["y"];
	        }
	        if (this.tweenArguments["z"] != null) {
	            this.vector3s[1].z = this.tweenArguments["z"];
	        }
	    }
	    ApplyShakePositionTargets() {
	        let eulerAngles = new Laya.Vector3();
	        if (this.tweenArguments["looktarget"]) {
	            this.thisTransform.rotationEuler.cloneTo(eulerAngles);
	            this.thisTransform.rotationEuler = this.vector3s[3].clone();
	        }
	        if (this.percentage == 0) {
	            this.thisTransform.translate(this.vector3s[1], this.space === Space.Self);
	        }
	        if (this.isLocal) {
	            this.thisTransform.localPosition = this.vector3s[0];
	        }
	        else {
	            this.thisTransform.position = this.vector3s[0];
	        }
	        let num = 1 - this.percentage;
	        this.vector3s[2].x = Math.random() * (this.vector3s[1].x * num - (0 - this.vector3s[1].x) * num) + (0 - this.vector3s[1].x) * num;
	        this.vector3s[2].y = Math.random() * (this.vector3s[1].y * num - (0 - this.vector3s[1].y) * num) + (0 - this.vector3s[1].y) * num;
	        this.vector3s[2].z = Math.random() * (this.vector3s[1].z * num - (0 - this.vector3s[1].z) * num) + (0 - this.vector3s[1].z) * num;
	        if (this.isLocal) {
	            this.thisTransform.localPosition = Helper.v3Add(this.vector3s[2], this.thisTransform.localPosition);
	        }
	        else {
	            this.thisTransform.position = Helper.v3Add(this.vector3s[2], this.thisTransform.position);
	        }
	        if (this.tweenArguments["looktarget"]) {
	            this.thisTransform.rotationEuler = eulerAngles;
	        }
	    }
	    GeneratePunchScaleTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.localScale.cloneTo(this.vector3s[0]);
	        if (this.tweenArguments["amount"]) {
	            this.tweenArguments["amount"].cloneTo(this.vector3s[1]);
	            return;
	        }
	        if (this.tweenArguments["x"] != null) {
	            this.vector3s[1].x = this.tweenArguments["x"];
	        }
	        if (this.tweenArguments["y"] != null) {
	            this.vector3s[1].y = this.tweenArguments["y"];
	        }
	        if (this.tweenArguments["z"] != null) {
	            this.vector3s[1].z = this.tweenArguments["z"];
	        }
	    }
	    ApplyPunchScaleTargets() {
	        if (this.vector3s[1].x > 0) {
	            this.vector3s[2].x = this.punch(this.vector3s[1].x, this.percentage);
	        }
	        else if (this.vector3s[1].x < 0) {
	            this.vector3s[2].x = 0 - this.punch(Math.abs(this.vector3s[1].x), this.percentage);
	        }
	        if (this.vector3s[1].y > 0) {
	            this.vector3s[2].y = this.punch(this.vector3s[1].y, this.percentage);
	        }
	        else if (this.vector3s[1].y < 0) {
	            this.vector3s[2].y = 0 - this.punch(Math.abs(this.vector3s[1].y), this.percentage);
	        }
	        if (this.vector3s[1].z > 0) {
	            this.vector3s[2].z = this.punch(this.vector3s[1].z, this.percentage);
	        }
	        else if (this.vector3s[1].z < 0) {
	            this.vector3s[2].z = 0 - this.punch(Math.abs(this.vector3s[1].z), this.percentage);
	        }
	        this.thisTransform.localScale = Helper.v3Add(this.vector3s[0], this.vector3s[2]);
	    }
	    GeneratePunchRotationTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[0]);
	        if (this.tweenArguments["amount"]) {
	            this.tweenArguments["amount"].clone(this.vector3s[1]);
	            return;
	        }
	        if (this.tweenArguments["x"] != null) {
	            this.vector3s[1].x = this.tweenArguments["x"];
	        }
	        if (this.tweenArguments["y"] != null) {
	            this.vector3s[1].y = this.tweenArguments["y"];
	        }
	        if (this.tweenArguments["z"] != null) {
	            this.vector3s[1].z = this.tweenArguments["z"];
	        }
	    }
	    ApplyPunchRotationTargets() {
	        if (this.vector3s[1].x > 0) {
	            this.vector3s[2].x = this.punch(this.vector3s[1].x, this.percentage);
	        }
	        else if (this.vector3s[1].x < 0) {
	            this.vector3s[2].x = 0 - this.punch(Math.abs(this.vector3s[1].x), this.percentage);
	        }
	        if (this.vector3s[1].y > 0) {
	            this.vector3s[2].y = this.punch(this.vector3s[1].y, this.percentage);
	        }
	        else if (this.vector3s[1].y < 0) {
	            this.vector3s[2].y = 0 - this.punch(Math.abs(this.vector3s[1].y), this.percentage);
	        }
	        if (this.vector3s[1].z > 0) {
	            this.vector3s[2].z = this.punch(this.vector3s[1].z, this.percentage);
	        }
	        else if (this.vector3s[1].z < 0) {
	            this.vector3s[2].z = 0 - this.punch(Math.abs(this.vector3s[1].z), this.percentage);
	        }
	        this.thisTransform.rotate(Helper.v3Sub(this.vector3s[2], this.vector3s[3]), this.space === Space.Self);
	        this.vector3s[2].cloneTo(this.vector3s[3]);
	    }
	    GeneratePunchPositionTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.position.cloneTo(this.vector3s[0]);
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[4]);
	        if (this.tweenArguments["amount"]) {
	            this.tweenArguments["amount"].cloneTo(this.vector3s[1]);
	            return;
	        }
	        if (this.tweenArguments["x"] != null) {
	            this.vector3s[1].x = this.tweenArguments["x"];
	        }
	        if (this.tweenArguments["y"] != null) {
	            this.vector3s[1].y = this.tweenArguments["y"];
	        }
	        if (this.tweenArguments["z"] != null) {
	            this.vector3s[1].z = this.tweenArguments["z"];
	        }
	    }
	    ApplyPunchPositionTargets() {
	        let eulerAngles = new Laya.Vector3();
	        if (this.tweenArguments["looktarget"]) {
	            this.thisTransform.rotationEuler.cloneTo(eulerAngles);
	            this.thisTransform.rotationEuler = this.vector3s[4].clone();
	        }
	        if (this.vector3s[1].x > 0) {
	            this.vector3s[2].x = this.punch(this.vector3s[1].x, this.percentage);
	        }
	        else if (this.vector3s[1].x < 0) {
	            this.vector3s[2].x = 0 - this.punch(Math.abs(this.vector3s[1].x), this.percentage);
	        }
	        if (this.vector3s[1].y > 0) {
	            this.vector3s[2].y = this.punch(this.vector3s[1].y, this.percentage);
	        }
	        else if (this.vector3s[1].y < 0) {
	            this.vector3s[2].y = 0 - this.punch(Math.abs(this.vector3s[1].y), this.percentage);
	        }
	        if (this.vector3s[1].z > 0) {
	            this.vector3s[2].z = this.punch(this.vector3s[1].z, this.percentage);
	        }
	        else if (this.vector3s[1].z < 0) {
	            this.vector3s[2].z = 0 - this.punch(Math.abs(this.vector3s[1].z), this.percentage);
	        }
	        this.thisTransform.translate(Helper.v3Sub(this.vector3s[2], this.vector3s[3]), this.space === Space.Self);
	        this.vector3s[3] = this.vector3s[2];
	        if (this.tweenArguments["looktarget"]) {
	            this.thisTransform.rotationEuler = eulerAngles.clone();
	        }
	    }
	    GenerateLookToTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[0]);
	        if (this.tweenArguments["looktarget"]) {
	            if (this.tweenArguments["looktarget"] instanceof Laya.Transform3D) {
	                let transform = this.thisTransform;
	                let target = this.tweenArguments["looktarget"];
	                let vector = this.tweenArguments["up"];
	                transform.lookAt(target.position, (!vector) ? Defaults.up : vector);
	            }
	            else if (this.tweenArguments["looktarget"] instanceof Laya.Vector3) {
	                let transform2 = this.thisTransform;
	                let worldPosition = this.tweenArguments["looktarget"];
	                let vector2 = this.tweenArguments["up"];
	                transform2.lookAt(worldPosition, (!vector2) ? Defaults.up : vector2);
	            }
	        }
	        else {
	            console.error("iTween Error: LookTo needs a 'looktarget' property!");
	            this.Dispose();
	        }
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[1]);
	        this.thisTransform.rotationEuler = this.vector3s[0];
	        if (this.tweenArguments["axis"]) {
	            switch (this.tweenArguments["axis"]) {
	                case "x":
	                    this.vector3s[1].y = this.vector3s[0].y;
	                    this.vector3s[1].z = this.vector3s[0].z;
	                    break;
	                case "y":
	                    this.vector3s[1].x = this.vector3s[0].x;
	                    this.vector3s[1].z = this.vector3s[0].z;
	                    break;
	                case "z":
	                    this.vector3s[1].x = this.vector3s[0].x;
	                    this.vector3s[1].y = this.vector3s[0].y;
	                    break;
	            }
	        }
	        this.vector3s[1] = new Laya.Vector3(this.clerp(this.vector3s[0].x, this.vector3s[1].x, 1), this.clerp(this.vector3s[0].y, this.vector3s[1].y, 1), this.clerp(this.vector3s[0].z, this.vector3s[1].z, 1));
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyLookToTargets() {
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        if (this.isLocal) {
	        }
	        else {
	        }
	    }
	    GenerateStabTargets() {
	    }
	    ApplyStabTargets() {
	    }
	    static Init(target) {
	        let zero = new Laya.Vector3();
	        iTween.MoveBy(target, zero, 0);
	    }
	    static CameraFadeFrom(amount, time) {
	        if (iTween.cameraFade) {
	            iTween.CameraFadeFrom2(iTween.Hash("amount", amount, "time", time));
	        }
	        else {
	            console.error("iTween Error: You must first add a camera fade object with CameraFadeAdd() before atttempting to use camera fading.");
	        }
	    }
	    static CameraFadeFrom2(args) {
	        if (iTween.cameraFade) {
	            iTween.ColorFrom2(iTween.cameraFade, args);
	        }
	        else {
	            console.error("iTween Error: You must first add a camera fade object with CameraFadeAdd() before atttempting to use camera fading.");
	        }
	    }
	    static CameraFadeTo(amount, time) {
	        if (iTween.cameraFade) {
	            iTween.CameraFadeTo2(iTween.Hash("amount", amount, "time", time));
	        }
	        else {
	            console.error("iTween Error: You must first add a camera fade object with CameraFadeAdd() before atttempting to use camera fading.");
	        }
	    }
	    static CameraFadeTo2(args) {
	        if (iTween.cameraFade) {
	            iTween.ColorTo2(iTween.cameraFade, args);
	        }
	        else {
	            console.error("iTween Error: You must first add a camera fade object with CameraFadeAdd() before atttempting to use camera fading.");
	        }
	    }
	    static CameraFadeAdd() {
	        if (this.cameraFade) {
	            return null;
	        }
	        console.error("CameraFade is no longer supported in iTween!");
	        return null;
	    }
	    static CameraFadeDepth(depth) {
	        if (this.cameraFade) {
	            let transform = this.cameraFade.transform;
	            let position = this.cameraFade.transform.position;
	            let x = position.x;
	            let y = position.y;
	            transform.position = new Laya.Vector3(x, y, depth);
	        }
	    }
	    static ValueTo(target, args) {
	        args = iTween.CleanArgs(args);
	        if (!args["onupdate"] || !args["from"] || !args["to"]) {
	            console.error("iTween Error: ValueTo() requires an 'onupdate' callback function and a 'from' and 'to' property.  The supplied 'onupdate' callback must accept a single argument that is the same type as the supplied 'from' and 'to' properties!");
	            return;
	        }
	        args["type"] = "value";
	        if (args["from"] instanceof Laya.Vector2) {
	            args["method"] = "vector2";
	        }
	        else if (args["from"] instanceof Laya.Vector3) {
	            args["method"] = "vector3";
	        }
	        else if (args["from"] instanceof Laya.Rectangle) {
	            args["method"] = "rect";
	        }
	        else if (typeof args["from"] === "number") {
	            args["method"] = "float";
	        }
	        else {
	            if (!(args["from"] instanceof Laya.Color)) {
	                console.error("iTween Error: ValueTo() only works with interpolating Vector3s, Vector2s, floats, ints, Rects and Colors!");
	                return;
	            }
	            args["method"] = "color";
	        }
	        if (!("easetype" in args)) {
	            args["easetype"] = EaseType.linear;
	        }
	        iTween.Launch(target, args);
	    }
	    static FadeFrom(target, alpha, time) {
	        iTween.FadeFrom2(target, iTween.Hash("alpha", alpha, "time", time));
	    }
	    static FadeFrom2(target, args) {
	        iTween.ColorFrom2(target, args);
	    }
	    static FadeTo(target, alpha, time) {
	        iTween.FadeTo2(target, iTween.Hash("alpha", alpha, "time", time));
	    }
	    static FadeTo2(target, args) {
	        iTween.ColorTo2(target, args);
	    }
	    static ColorFrom(target, color, time) {
	        iTween.ColorFrom2(target, iTween.Hash("color", color, "time", time));
	    }
	    static ColorFrom2(target, args) {
	        let color = new Laya.Color();
	        let color2 = new Laya.Color();
	        args = iTween.CleanArgs(args);
	        if (!args["includechildren"] || args["includechildren"]) {
	        }
	        if (!args["easetype"]) {
	            args["easetype"] = EaseType.linear;
	        }
	        if (args["color"]) {
	            color = args["color"];
	        }
	        else {
	            if (args["r"] != null) {
	                color.r = args["r"];
	            }
	            if (args["g"] != null) {
	                color.g = args["g"];
	            }
	            if (args["b"] != null) {
	                color.b = args["b"];
	            }
	            if (args["a"] != null) {
	                color.a = args["a"];
	            }
	        }
	        if (args["amount"] != null) {
	            color.a = args["amount"];
	            delete args["amount"];
	        }
	        else if (args["alpha"] != null) {
	            color.a = args["alpha"];
	            delete args["alpha"];
	        }
	        args["color"] = color2;
	        args["type"] = "color";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static ColorTo(target, color, time) {
	        iTween.ColorTo2(target, iTween.Hash("color", color, "time", time));
	    }
	    static ColorTo2(target, args) {
	        args = iTween.CleanArgs(args);
	        if (!("includechildren" in args) || args["includechildren"]) {
	        }
	        if (!("easetype" in args)) {
	            args["easetype"] = EaseType.linear;
	        }
	        args["type"] = "color";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static LookFrom(target, looktarget, time) {
	        iTween.LookFrom2(target, iTween.Hash("looktarget", looktarget, "time", time));
	    }
	    static LookFrom2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "rotate";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static LookTo(target, looktarget, time) {
	        iTween.LookTo2(target, iTween.Hash("looktarget", looktarget, "time", time));
	    }
	    static LookTo2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "look";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static MoveTo(target, position, time) {
	        iTween.MoveTo2(target, this.Hash("position", position, "time", time));
	    }
	    static MoveTo2(target, args) {
	        args = this.CleanArgs(args);
	        if (args["position"] && args["position"] == Laya.Transform3D) {
	            let transform = args["position"];
	            args["scale"] = transform.localScale.clone();
	            args["position"] = transform.position.clone();
	            args["rotation"] = transform.rotationEuler.clone();
	        }
	        args["type"] = "move";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static ScaleTo(target, scale, time) {
	        iTween.ScaleTo2(target, iTween.Hash("scale", scale, "time", time));
	    }
	    static ScaleTo2(target, args) {
	        if (!target || target.destroyed)
	            return;
	        args = this.CleanArgs(args);
	        if (args["scale"] && (args["scale"] instanceof Laya.Transform3D)) {
	            let transform = args["scale"];
	            args["position"] = transform.position.clone();
	            args["rotation"] = transform.rotationEuler.clone();
	            args["scale"] = transform.localScale.clone();
	        }
	        args["type"] = "scale";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static ScaleFrom(target, scale, time) {
	        iTween.ScaleFrom2(target, iTween.Hash("scale", scale, "time", time));
	    }
	    static ScaleFrom2(target, args) {
	        args = this.CleanArgs(args);
	        let localScale = target.transform.localScale.clone();
	        let vector = target.transform.localScale.clone();
	        if (args["scale"]) {
	            if (args["scale"] instanceof Laya.Transform3D) {
	                let transform = args["scale"];
	                localScale = transform.localScale.clone();
	            }
	            else if (args["scale"] instanceof Laya.Vector3) {
	                localScale = args["scale"].clone();
	            }
	        }
	        else {
	            if (args["x"] != null) {
	                localScale.x = args["x"];
	            }
	            if (args["y"] != null) {
	                localScale.y = args["y"];
	            }
	            if (args["z"] != null) {
	                localScale.z = args["z"];
	            }
	        }
	        target.transform.localScale = localScale;
	        args["scale"] = vector;
	        args["type"] = "scale";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static ScaleAdd(target, amount, time) {
	        iTween.ScaleAdd2(target, iTween.Hash("amount", amount, "time", time));
	    }
	    static ScaleAdd2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "scale";
	        args["method"] = "add";
	        iTween.Launch(target, args);
	    }
	    static ScaleBy(target, amount, time) {
	        iTween.ScaleBy2(target, iTween.Hash("amount", amount, "time", time));
	    }
	    static ScaleBy2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "scale";
	        args["method"] = "by";
	        iTween.Launch(target, args);
	    }
	    static RotateTo(target, rotation, time) {
	        iTween.RotateTo2(target, iTween.Hash("rotation", rotation, "time", time));
	    }
	    static RotateTo2(target, args) {
	        args = iTween.CleanArgs(args);
	        if (args["rotation"] && args["rotation"] instanceof Laya.Transform3D) {
	            let transform = args["rotation"];
	            args["position"] = transform.position.clone();
	            args["rotation"] = transform.rotationEuler.clone();
	            args["scale"] = transform.localScale.clone();
	        }
	        args["type"] = "rotate";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static RotateFrom(target, rotation, time) {
	        iTween.RotateFrom2(target, iTween.Hash("rotation", rotation, "time", time));
	    }
	    static RotateFrom2(target, args) {
	        args = iTween.CleanArgs(args);
	        let flag = (!args["islocal"]) ? Defaults.isLocal : (args["islocal"]);
	        let vector = (!flag) ? target.transform.rotationEuler.clone() : target.transform.localRotationEuler.clone();
	        let vector2 = vector.clone();
	        if (args["rotation"]) {
	            if (args["rotation"] instanceof Laya.Transform3D) {
	                let transform = args["rotation"];
	                vector = transform.rotationEuler.clone();
	            }
	            else if (args["rotation"] instanceof Laya.Vector3) {
	                vector = args["rotation"].clone();
	            }
	        }
	        else {
	            if (args["x"] != null) {
	                vector.x = args["x"];
	            }
	            if (args["y"] != null) {
	                vector.y = args["y"];
	            }
	            if (args["z"] != null) {
	                vector.z = args["z"];
	            }
	        }
	        if (flag) {
	            target.transform.localRotationEuler = vector;
	        }
	        else {
	            target.transform.rotationEuler = vector;
	        }
	        args["rotation"] = vector2;
	        args["type"] = "rotate";
	        args["method"] = "to";
	        iTween.Launch(target, args);
	    }
	    static RotateAdd(target, amount, time) {
	        iTween.RotateAdd2(target, iTween.Hash("amount", amount, "time", time));
	    }
	    static RotateAdd2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "rotate";
	        args["method"] = "add";
	        iTween.Launch(target, args);
	    }
	    static RotateBy(target, amount, time) {
	        iTween.RotateBy2(target, iTween.Hash("amount", amount, "time", time));
	    }
	    static RotateBy2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "rotate";
	        args["method"] = "by";
	        iTween.Launch(target, args);
	    }
	    Dispose() {
	        let tweens = iTween.tweens;
	        for (let i = tweens.length - 1; i > -1; i--) {
	            let tween = tweens[i];
	            if (tween["id"] === this.id) {
	                tweens.splice(i, 1);
	                break;
	            }
	        }
	        this.destroy();
	    }
	    static MoveBy(target, amount, time) {
	        iTween.MoveBy2(target, iTween.Hash("amount", amount, "time", time));
	    }
	    static MoveBy2(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "move";
	        args["method"] = "by";
	        iTween.Launch(target, args);
	    }
	    static Hash(...args) {
	        let table = {};
	        if (args.length % 2 !== 0) {
	            console.error("Tween Error: Hash requires an even number of arguments!");
	            return null;
	        }
	        for (let i = 0; i < args.length - 1; i += 2) {
	            table[args[i]] = args[i + 1];
	        }
	        let d = [1, 2];
	        d.entries();
	        return table;
	    }
	    static CleanArgs(args) {
	        for (let key in args) {
	            let keyLow = key.toLowerCase();
	            args[keyLow] = args[key];
	        }
	        return args;
	    }
	    static Launch(target, args) {
	        if (!args["id"]) {
	            args["id"] = iTween.GenerateID();
	        }
	        if (!args["target"]) {
	            args["target"] = target;
	        }
	        this.tweens.unshift(args);
	        target.addComponent(iTween);
	    }
	    static GenerateID() {
	        return (iTween.gid++).toString();
	    }
	    static Resume(target) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => tween.enabled = true);
	    }
	    static Resume2(target, includechildren) {
	        iTween.Resume(target);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.Resume2(child, includechildren);
	            }
	        }
	    }
	    static Resume3(target, type) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => {
	            let text = tween.type + tween.method;
	            if (text.toLowerCase() === type.toLowerCase()) {
	                tween.enabled = true;
	            }
	        });
	    }
	    static Resume4(target, type, includechildren) {
	        iTween.Resume3(target, type);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.Resume4(child, type, includechildren);
	            }
	        }
	    }
	    static Resume5() {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.Resume(target);
	        });
	    }
	    static Resume6(type) {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.Resume3(target, type);
	        });
	    }
	    static Pause(target) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => {
	            if (tween.delay > 0) {
	                tween.delay -= Laya.timer.currTimer - tween.delayStarted;
	                Laya.timer.clearAll(tween);
	            }
	            tween.isPaused = true;
	            tween.enabled = false;
	        });
	    }
	    static Pause2(target, includechildren) {
	        iTween.Pause(target);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.Pause2(child, includechildren);
	            }
	        }
	    }
	    static Pause3(target, type) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => {
	            let text = tween.type + tween.method;
	            if (text.toLowerCase() === type.toLowerCase()) {
	                if (tween.delay > 0) {
	                    tween.delay -= Laya.timer.currTimer - tween.delayStarted;
	                    Laya.timer.clearAll(tween);
	                }
	                tween.isPaused = true;
	                tween.enabled = false;
	            }
	        });
	    }
	    static Pause4(target, type, includechildren) {
	        iTween.Pause3(target, type);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.Pause4(child, type, includechildren);
	            }
	        }
	    }
	    static Pause5() {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.Pause(target);
	        });
	    }
	    static Pause6(type) {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.Pause3(target, type);
	        });
	    }
	    static Stop() {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.Stop3(target);
	        });
	        iTween.tweens = [];
	    }
	    static Stop2(type) {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.Stop5(target, type);
	        });
	    }
	    static Stop3(target) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => tween.Dispose());
	    }
	    static Stop4(target, includechildren) {
	        iTween.Stop3(target);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.Stop4(child, includechildren);
	            }
	        }
	    }
	    static Stop5(target, type) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => {
	            let text = tween.type + tween.method;
	            if (text.toLowerCase() === type.toLowerCase()) {
	                tween.Dispose();
	            }
	        });
	    }
	    static Stop6(target, type, includechildren) {
	        iTween.Stop5(target, type);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.Stop6(child, type, includechildren);
	            }
	        }
	    }
	    static StopByName(name) {
	        iTween.tweens.forEach(tween => {
	            let target = tween["target"];
	            iTween.StopByName2(target, name);
	        });
	    }
	    static StopByName2(target, name) {
	        let tweens = target.getComponents(iTween) || [];
	        tweens.forEach(tween => {
	            if (tween._name === name) {
	                tween.Dispose();
	            }
	        });
	    }
	    static StopByName3(target, name, includechildren) {
	        iTween.StopByName2(target, name);
	        if (includechildren) {
	            for (let i = 0; i < target.numChildren - 1; i++) {
	                let child = target.getChildAt(i);
	                iTween.StopByName3(child, name, includechildren);
	            }
	        }
	    }
	    onAwake() {
	        this.ownerSp = this.owner;
	        this.thisTransform = this.ownerSp.transform;
	        this.RetrieveArgs();
	        this.lastRealTime = 0;
	        if (iTween.OPTIMIZED) {
	        }
	    }
	    onStart() {
	        if (this.delay > 0) {
	            this.TweenDelay(Laya.Handler.create(this, this.TweenStart));
	        }
	        else {
	            this.TweenStart();
	        }
	    }
	    onUpdate() {
	        if (!this.isRunning) {
	            return;
	        }
	        if (!this.reverse) {
	            if (this.percentage < 1) {
	                this.TweenUpdate();
	            }
	            else {
	                this.TweenComplete();
	            }
	        }
	        else if (this.percentage > 0) {
	            this.TweenUpdate();
	        }
	        else {
	            this.TweenComplete();
	        }
	    }
	    onLateUpdate() {
	        if (this.tweenArguments["looktarget"] &&
	            this.isRunning &&
	            (this.type === "move" ||
	                this.type === "shake" ||
	                this.type === "punch")) {
	            iTween.LookUpdate(this.ownerSp, this.tweenArguments);
	        }
	    }
	    onEnable() {
	        if (this.isRunning) {
	            this.EnableKinematic();
	        }
	        if (this.isPaused) {
	            this.isPaused = false;
	            if (this.delay > 0) {
	                this.wasPaused = true;
	                this.ResumeDelay();
	            }
	        }
	    }
	    onDisable() {
	        this.DisableKinematic();
	    }
	    TweenStart() {
	        this.CallBack("onstart");
	        if (!this.loop) {
	            this.ConflictCheck();
	            this.GenerateTargets();
	        }
	        if (this.type == "stab") {
	            this.audioSource.PlayOneShot(this.audioSource.clip);
	        }
	        if (this.type == "move" ||
	            this.type == "scale" ||
	            this.type == "rotate" ||
	            this.type == "punch" ||
	            this.type == "shake" ||
	            this.type == "curve" ||
	            this.type == "look") {
	            this.EnableKinematic();
	        }
	        this.isRunning = true;
	    }
	    ResumeDelay() {
	        this.TweenDelay();
	    }
	    TweenRestart() {
	        if (this.delay > 0) {
	        }
	        this.loop = true;
	        this.TweenStart();
	    }
	    TweenUpdate() {
	        this.apply();
	        this.CallBack("onupdate");
	        this.UpdatePercentage();
	    }
	    UpdatePercentage() {
	        if (this.useRealTime) {
	            this.runningTime += Laya.Timer.gSysTimer.currTimer - this.lastRealTime;
	        }
	        else {
	            this.runningTime += (Laya.Timer.gSysTimer.delta / 1000);
	        }
	        if (this.reverse) {
	            this.percentage = 1 - this.runningTime / this.time;
	        }
	        else {
	            this.percentage = this.runningTime / this.time;
	        }
	        this.lastRealTime = Laya.Timer.gSysTimer.currTimer;
	    }
	    TweenComplete() {
	        this.isRunning = false;
	        if (this.percentage > 0.5) {
	            this.percentage = 1;
	        }
	        else {
	            this.percentage = 0;
	        }
	        this.apply();
	        if (this.type == "value") {
	            this.CallBack("onupdate");
	        }
	        if (this.loopType == LoopType.none) {
	            this.Dispose();
	        }
	        else {
	            this.TweenLoop();
	        }
	        this.CallBack("oncomplete");
	    }
	    TweenLoop() {
	        this.DisableKinematic();
	        switch (this.loopType) {
	            case LoopType.loop:
	                this.percentage = 0;
	                this.runningTime = 0;
	                this.apply();
	                this.TweenRestart();
	                break;
	            case LoopType.pingPong:
	                this.reverse = !this.reverse;
	                this.runningTime = 0;
	                this.TweenRestart();
	                break;
	        }
	    }
	    TweenDelay(handler) {
	        this.delayStarted = Laya.timer.currTimer;
	        Laya.timer.once(this.delay, this, () => {
	            if (this.wasPaused) {
	                this.wasPaused = false;
	                this.TweenStart();
	            }
	            handler && handler.run();
	        });
	    }
	    static LookUpdate(target, args) {
	    }
	    GenerateRectTargets() {
	        this.rects = [];
	        this.rects[0] = this.tweenArguments["from"];
	        this.rects[1] = this.tweenArguments["to"];
	    }
	    ApplyRectTargets() {
	        this.rects[2].x = this.ease(this.rects[0].x, this.rects[1].x, this.percentage);
	        this.rects[2].y = this.ease(this.rects[0].y, this.rects[1].y, this.percentage);
	        this.rects[2].width = this.ease(this.rects[0].width, this.rects[1].width, this.percentage);
	        this.rects[2].height = this.ease(this.rects[0].height, this.rects[1].height, this.percentage);
	        this.tweenArguments["onupdateparams"] = this.rects[2];
	        if (this.percentage == 1) {
	            this.tweenArguments["onupdateparams"] = this.rects[1];
	        }
	    }
	    GenerateColorTargets() {
	        this.colors = [[], [], []];
	        this.colors[0][0] = this.tweenArguments["from"];
	        this.colors[0][1] = this.tweenArguments["to"];
	    }
	    ApplyColorTargets() {
	        this.colors[0][2].r = this.ease(this.colors[0][0].r, this.colors[0][1].r, this.percentage);
	        this.colors[0][2].g = this.ease(this.colors[0][0].g, this.colors[0][1].g, this.percentage);
	        this.colors[0][2].b = this.ease(this.colors[0][0].b, this.colors[0][1].b, this.percentage);
	        this.colors[0][2].a = this.ease(this.colors[0][0].a, this.colors[0][1].a, this.percentage);
	        this.tweenArguments["onupdateparams"] = this.colors[0][2];
	        if (this.percentage == 1) {
	            this.tweenArguments["onupdateparams"] = this.colors[0][1];
	        }
	    }
	    GenerateVector3Targets() {
	        this.vector3s = [];
	        this.vector3s[0] = this.tweenArguments["from"];
	        this.vector3s[1] = this.tweenArguments["to"];
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyVector3Targets() {
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        this.tweenArguments["onupdateparams"] = this.vector3s[2];
	        if (this.percentage == 1) {
	            this.tweenArguments["onupdateparams"] = this.vector3s[1];
	        }
	    }
	    GenerateVector2Targets() {
	        this.vector2s = [];
	        this.vector2s[0] = this.tweenArguments["from"];
	        this.vector2s[1] = this.tweenArguments["to"];
	        if (this.tweenArguments["speed"] != null) {
	            let a = new Laya.Vector3(this.vector2s[0].x, this.vector2s[0].y, 0);
	            let b = new Laya.Vector3(this.vector2s[1].x, this.vector2s[1].y, 0);
	            let num = Math.abs(Laya.Vector3.distance(a, b));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyVector2Targets() {
	        this.vector2s[2].x = this.ease(this.vector2s[0].x, this.vector2s[1].x, this.percentage);
	        this.vector2s[2].y = this.ease(this.vector2s[0].y, this.vector2s[1].y, this.percentage);
	        this.tweenArguments["onupdateparams"] = this.vector2s[2];
	        if (this.percentage == 1) {
	            this.tweenArguments["onupdateparams"] = this.vector2s[1];
	        }
	    }
	    GenerateFloatTargets() {
	        this.floats = [];
	        this.floats[0] = this.tweenArguments["from"];
	        this.floats[1] = this.tweenArguments["to"];
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(this.floats[0] - this.floats[1]);
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyFloatTargets() {
	        this.floats[2] = this.ease(this.floats[0], this.floats[1], this.percentage);
	        this.tweenArguments["onupdateparams"] = this.floats[2];
	        if (this.percentage == 1) {
	            this.tweenArguments["onupdateparams"] = this.floats[1];
	        }
	    }
	    GenerateMoveToTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        if (this.isLocal) {
	            this.thisTransform.localPosition.cloneTo(this.vector3s[0]);
	        }
	        else {
	            this.thisTransform.position.cloneTo(this.vector3s[0]);
	        }
	        if (this.tweenArguments["position"]) {
	            if (this.tweenArguments["position"] instanceof Laya.Transform3D) {
	                let transform = this.tweenArguments["position"];
	                transform.position.cloneTo(this.vector3s[1]);
	            }
	            else if (this.tweenArguments["position"] instanceof Laya.Vector3) {
	                this.tweenArguments["position"].cloneTo(this.vector3s[1]);
	            }
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x = this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y = this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z = this.tweenArguments["z"];
	            }
	            else {
	                this.vector3s[1].z = this.vector3s[0].z;
	            }
	        }
	        if (this.tweenArguments["orienttopath"]) {
	            this.tweenArguments["looktarget"] = this.vector3s[1];
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyMoveToTargets() {
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        if (this.isLocal) {
	            this.thisTransform.localPosition = this.vector3s[2];
	        }
	        else {
	            this.thisTransform.position = this.vector3s[2];
	        }
	        if (this.percentage == 1) {
	            if (this.isLocal) {
	                this.thisTransform.localPosition = this.vector3s[1];
	            }
	            else {
	                this.thisTransform.position = this.vector3s[1];
	            }
	        }
	    }
	    GenerateMoveByTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.position.cloneTo(this.vector3s[0]);
	        this.thisTransform.position.cloneTo(this.vector3s[1]);
	        this.thisTransform.position.cloneTo(this.vector3s[3]);
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[4]);
	        if (this.tweenArguments["amount"]) {
	            this.vector3s[1] = Helper.v3Add(this.vector3s[0], this.tweenArguments["amount"]);
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x = this.vector3s[0].x + this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y = this.vector3s[0].y + this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z = this.vector3s[0].z + this.tweenArguments["z"];
	            }
	            else {
	                this.vector3s[1].z = this.vector3s[0].z;
	            }
	        }
	        this.thisTransform.translate(this.vector3s[1], this.space === Space.Self);
	        this.thisTransform.position.cloneTo(this.vector3s[5]);
	        this.thisTransform.position = this.vector3s[0];
	        if (this.tweenArguments["orienttopath"] && this.tweenArguments["orienttopath"]) {
	            this.tweenArguments["looktarget"] = this.vector3s[1].clone();
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyMoveByTargets() {
	        let eulerAngles = new Laya.Vector3();
	        if (this.tweenArguments["looktarget"]) {
	            this.thisTransform.rotationEuler.cloneTo(eulerAngles);
	            this.thisTransform.rotationEuler = this.vector3s[4];
	        }
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        this.thisTransform.translate(Helper.v3Sub(this.vector3s[2], this.vector3s[3]), this.space === Space.Self);
	        this.vector3s[3] = this.vector3s[2].clone();
	        if (this.tweenArguments["looktarget"]) {
	            this.thisTransform.rotationEuler = eulerAngles;
	        }
	    }
	    GenerateMoveToPathTargets() {
	        let array2 = [];
	        let temp = this.tweenArguments["path"];
	        if (temp.length > 0) {
	            let first = temp[0];
	            if (first instanceof Laya.Vector3) {
	                let array = this.tweenArguments["path"];
	                if (array.length === 1) {
	                    console.error("iTween Error: Attempting a path movement with MoveTo requires an array of more than 1 entry!");
	                    this.Dispose();
	                }
	                array2 = array.map(item => item.clone());
	            }
	            else {
	                let array3 = this.tweenArguments["path"];
	                if (array3.length == 1) {
	                    console.error("iTween Error: Attempting a path movement with MoveTo requires an array of more than 1 entry!");
	                    this.Dispose();
	                }
	                array2 = array3.map(item => item.position.clone());
	            }
	        }
	        let flag = false;
	        let num = 0;
	        if (!Laya.Vector3.equals(this.thisTransform.position, array2[0])) {
	            if (!this.tweenArguments["movetopath"] || this.tweenArguments["movetopath"]) {
	                flag = true;
	                num = 3;
	            }
	            else {
	                flag = false;
	                num = 2;
	            }
	        }
	        else {
	            flag = false;
	            num = 2;
	        }
	        this.vector3s = [];
	        for (let i = 0; i < (array2.length + num); i++) {
	            this.vector3s.push(new Laya.Vector3());
	        }
	        if (flag) {
	            this.vector3s[1] = this.thisTransform.position.clone();
	            num = 2;
	        }
	        else {
	            num = 1;
	        }
	        Helper.ArrayCopy(array2, 0, this.vector3s, num, array2.length);
	        this.vector3s[0] = Helper.v3Add(this.vector3s[1], Helper.v3Sub(this.vector3s[1], this.vector3s[2]));
	        this.vector3s[this.vector3s.length - 1] = Helper.v3Add(this.vector3s[this.vector3s.length - 2], Helper.v3Sub(this.vector3s[this.vector3s.length - 2], this.vector3s[this.vector3s.length - 3]));
	        if (this.vector3s[1] == this.vector3s[this.vector3s.length - 2]) {
	            let array4 = [];
	            Helper.ArrayCopy2(this.vector3s, array4, this.vector3s.length);
	            array4[0] = array4[array4.length - 3];
	            array4[array4.length - 1] = array4[2];
	            this.vector3s = [];
	            Helper.ArrayCopy2(array4, this.vector3s, array4.length);
	        }
	        this.path = new CRSpline(this.vector3s);
	        if (this.tweenArguments["speed"] != null) {
	            let num2 = iTween.PathLength(this.vector3s);
	            this.time = num2 / this.tweenArguments["speed"];
	        }
	    }
	    static PathLength(path) {
	        let num = 0;
	        let pts = iTween.PathControlPointGenerator(path);
	        let a = iTween.Interp(pts, 0);
	        let num2 = path.length * 20;
	        for (let i = 1; i <= num2; i++) {
	            let t = i / num2;
	            let vector = iTween.Interp(pts, t);
	            num += Laya.Vector3.distance(a, vector);
	            a = vector;
	        }
	        return num;
	    }
	    static PathControlPointGenerator(path) {
	        let num = 2;
	        let array = [];
	        for (let i = 0; i < path.length + num; i++) {
	            array.push(new Laya.Vector3());
	        }
	        Helper.ArrayCopy(path, 0, array, 1, path.length);
	        array[0] = Helper.v3Add(array[1], Helper.v3Sub(array[1], array[2]));
	        array[array.length - 1] = Helper.v3Add(array[array.length - 2], Helper.v3Sub(array[array.length - 2], array[array.length - 3]));
	        if (Laya.Vector3.equals(array[1], array[array.length - 2])) {
	            let array2 = [];
	            Helper.ArrayCopy2(array, array2, array.length);
	            array2[0] = array2[array2.length - 3];
	            array2[array2.length - 1] = array2[2];
	            array = [];
	            Helper.ArrayCopy2(array2, array, array2.length);
	        }
	        return array;
	    }
	    static Interp(pts, t) {
	        let num = pts.length - 3;
	        let num2 = Math.min(Math.floor(t * num), num - 1);
	        let num3 = t * num - num2;
	        let v0 = pts[num2];
	        let v1 = pts[num2 + 1];
	        let v2 = pts[num2 + 2];
	        let v3 = pts[num2 + 3];
	        return Helper.v3Scale(Helper.v3Add(Helper.v3Scale(Helper.v3Add(Helper.v3Scale(v0, -1), Helper.v3Scale(v1, 3), Helper.v3Scale(v2, -3), v3), num3 * num3 * num3), Helper.v3Scale(Helper.v3Add(Helper.v3Scale(v0, 2), Helper.v3Scale(v1, -5), Helper.v3Scale(v2, 4), Helper.v3Scale(v3, -1)), num3 * num3), Helper.v3Scale(Helper.v3Sub(v2, v0), num3), Helper.v3Scale(v1, 2)), 0.5);
	    }
	    ApplyMoveToPathTargets() {
	        let value = this.ease(0, 1, this.percentage);
	        if (this.isLocal) {
	            this.thisTransform.localPosition = this.path.Interp(MathExpand.Clamp01(value));
	        }
	        else {
	            this.thisTransform.position = this.path.Interp(MathExpand.Clamp01(value));
	        }
	        if (this.tweenArguments["orienttopath"] && this.tweenArguments["orienttopath"]) {
	            let num = (!this.tweenArguments["lookahead"]) ? Defaults.lookAhead : (this.tweenArguments["lookahead"]);
	            let value2 = this.ease(0, 1, Math.min(1, this.percentage + num));
	            this.tweenArguments["looktarget"] = this.path.Interp(MathExpand.Clamp01(value2));
	        }
	    }
	    GenerateScaleToTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.localScale.cloneTo(this.vector3s[0]);
	        this.thisTransform.localScale.cloneTo(this.vector3s[1]);
	        if (this.tweenArguments["scale"]) {
	            if (this.tweenArguments["scale"] instanceof Laya.Transform3D) {
	                let transform = this.tweenArguments["scale"];
	                transform.localScale.cloneTo(this.vector3s[1]);
	            }
	            else if (this.tweenArguments["scale"] instanceof Laya.Vector3) {
	                this.tweenArguments["scale"].cloneTo(this.vector3s[1]);
	            }
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x = this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y = this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z = this.tweenArguments["z"];
	            }
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    GenerateScaleAddTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.localScale.cloneTo(this.vector3s[0]);
	        this.thisTransform.localScale.cloneTo(this.vector3s[1]);
	        if (this.tweenArguments["amount"]) {
	            Laya.Vector3.add(this.vector3s[1], this.tweenArguments["amount"], this.vector3s[1]);
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x += this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y += this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z += this.tweenArguments["z"];
	            }
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    GenerateScaleByTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.localScale.cloneTo(this.vector3s[0]);
	        this.thisTransform.localScale.cloneTo(this.vector3s[1]);
	        if (this.tweenArguments["amount"]) {
	            Laya.Vector3.scale(this.vector3s[1], this.tweenArguments["amount"], this.vector3s[1]);
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x *= this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y *= this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z *= this.tweenArguments["z"];
	            }
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyScaleToTargets() {
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        this.thisTransform.localScale = this.vector3s[2].clone();
	        if (this.percentage == 1) {
	            this.thisTransform.localScale = this.vector3s[1].clone();
	        }
	    }
	    GenerateRotateByTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[0]);
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[1]);
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[3]);
	        if (this.tweenArguments["amount"]) {
	            let v3 = new Laya.Vector3();
	            Laya.Vector3.multiply(this.tweenArguments["amount"], new Laya.Vector3(360, 360, 360), v3);
	            Laya.Vector3.add(v3, this.vector3s[1], this.vector3s[1]);
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x += 360 * this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y += 360 * this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z += 360 * this.tweenArguments["z"];
	            }
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyRotateAddTargets() {
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        this.thisTransform.rotate(Helper.v3Sub(this.vector3s[2], this.vector3s[3]), this.space === Space.Self, false);
	        this.vector3s[2].cloneTo(this.vector3s[3]);
	    }
	    GenerateRotateAddTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[0]);
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[1]);
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[3]);
	        if (this.tweenArguments["amount"]) {
	            Laya.Vector3.add(this.tweenArguments["amount"], this.vector3s[1], this.vector3s[1]);
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x += this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y += this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z += this.tweenArguments["z"];
	            }
	        }
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    GenerateRotateToTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        if (this.isLocal) {
	            this.thisTransform.localRotationEuler.cloneTo(this.vector3s[0]);
	            this.thisTransform.localRotationEuler.cloneTo(this.vector3s[1]);
	        }
	        else {
	            this.thisTransform.rotationEuler.cloneTo(this.vector3s[0]);
	            this.thisTransform.rotationEuler.cloneTo(this.vector3s[1]);
	        }
	        if (this.tweenArguments["rotation"]) {
	            if (this.tweenArguments["rotation"] instanceof Laya.Transform3D) {
	                let transform = this.tweenArguments["rotation"];
	                transform.rotationEuler.cloneTo(this.vector3s[1]);
	            }
	            else if (this.tweenArguments["rotation"] instanceof Laya.Vector3) {
	                this.tweenArguments["rotation"].cloneTo(this.vector3s[1]);
	            }
	        }
	        else {
	            if (this.tweenArguments["x"] != null) {
	                this.vector3s[1].x = this.tweenArguments["x"];
	            }
	            if (this.tweenArguments["y"] != null) {
	                this.vector3s[1].y = this.tweenArguments["y"];
	            }
	            if (this.tweenArguments["z"] != null) {
	                this.vector3s[1].z = this.tweenArguments["z"];
	            }
	        }
	        this.vector3s[1] = new Laya.Vector3(this.clerp(this.vector3s[0].x, this.vector3s[1].x, 1), this.clerp(this.vector3s[0].y, this.vector3s[1].y, 1), this.clerp(this.vector3s[0].z, this.vector3s[1].z, 1));
	        if (this.tweenArguments["speed"] != null) {
	            let num = Math.abs(Laya.Vector3.distance(this.vector3s[0], this.vector3s[1]));
	            this.time = num / this.tweenArguments["speed"];
	        }
	    }
	    ApplyRotateToTargets() {
	        this.vector3s[2].x = this.ease(this.vector3s[0].x, this.vector3s[1].x, this.percentage);
	        this.vector3s[2].y = this.ease(this.vector3s[0].y, this.vector3s[1].y, this.percentage);
	        this.vector3s[2].z = this.ease(this.vector3s[0].z, this.vector3s[1].z, this.percentage);
	        if (this.isLocal) {
	            this.thisTransform.localRotationEuler = this.vector3s[2];
	        }
	        else {
	            this.thisTransform.rotationEuler = this.vector3s[2];
	        }
	        if (this.percentage == 1) {
	            if (this.isLocal) {
	                this.thisTransform.localRotationEuler = this.vector3s[1];
	            }
	            else {
	                this.thisTransform.rotationEuler = this.vector3s[1];
	            }
	        }
	    }
	    GenerateShakeRotationTargets() {
	        this.vector3s = [];
	        for (let i = 0; i < 3; i++) {
	            this.vector3s.push(new Laya.Vector3());
	        }
	        this.thisTransform.rotationEuler.cloneTo(this.vector3s[0]);
	        if (this.tweenArguments["amount"]) {
	            this.tweenArguments["amount"].cloneTo(this.vector3s[1]);
	            return;
	        }
	        if (this.tweenArguments["x"] != null) {
	            this.vector3s[1].x = this.tweenArguments["x"];
	        }
	        if (this.tweenArguments["y"] != null) {
	            this.vector3s[1].y = this.tweenArguments["y"];
	        }
	        if (this.tweenArguments["z"] != null) {
	            this.vector3s[1].z = this.tweenArguments["z"];
	        }
	    }
	    ApplyShakeRotationTargets() {
	        if (this.percentage == 0) {
	            this.thisTransform.rotate(this.vector3s[1], this.space === Space.Self, false);
	        }
	        this.thisTransform.rotationEuler = this.vector3s[0];
	        let num = 1 - this.percentage;
	        this.vector3s[2].x = Math.random() * (this.vector3s[1].x * num - (0 - this.vector3s[1].x) * num) + (0 - this.vector3s[1].x) * num;
	        this.vector3s[2].y = Math.random() * (this.vector3s[1].y * num - (0 - this.vector3s[1].y) * num) + (0 - this.vector3s[1].y) * num;
	        this.vector3s[2].z = Math.random() * (this.vector3s[1].z * num - (0 - this.vector3s[1].z) * num) + (0 - this.vector3s[1].z) * num;
	        this.thisTransform.rotate(this.vector3s[2], this.space === Space.Self, false);
	    }
	    GenerateShakeScaleTargets() {
	        this.vector3s = [
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	            new Laya.Vector3(),
	        ];
	        this.thisTransform.localScale.cloneTo(this.vector3s[0]);
	        if (this.tweenArguments["amount"]) {
	            this.tweenArguments["amount"].cloneTo(this.vector3s[1]);
	            return;
	        }
	        if (this.tweenArguments["x"] != null) {
	            this.vector3s[1].x = this.tweenArguments["x"];
	        }
	        if (this.tweenArguments["y"] != null) {
	            this.vector3s[1].y = this.tweenArguments["y"];
	        }
	        if (this.tweenArguments["z"] != null) {
	            this.vector3s[1].z = this.tweenArguments["z"];
	        }
	    }
	    ApplyShakeScaleTargets() {
	        if (this.percentage == 0) {
	            this.thisTransform.localScale = this.vector3s[1].clone();
	        }
	        this.thisTransform.localScale = this.vector3s[0].clone();
	        let num = 1 - this.percentage;
	        this.vector3s[2].x = Math.random() * (this.vector3s[1].x * num - (0 - this.vector3s[1].x) * num) + (0 - this.vector3s[1].x) * num;
	        this.vector3s[2].y = Math.random() * (this.vector3s[1].y * num - (0 - this.vector3s[1].y) * num) + (0 - this.vector3s[1].y) * num;
	        this.vector3s[2].z = Math.random() * (this.vector3s[1].z * num - (0 - this.vector3s[1].z) * num) + (0 - this.vector3s[1].z) * num;
	        this.thisTransform.localScale = Helper.v3Add(this.thisTransform.localScale, this.vector3s[2]);
	    }
	    static PunchScale(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "punch";
	        args["method"] = "scale";
	        args["easetype"] = EaseType.punch;
	        iTween.Launch(target, args);
	    }
	    static PunchPosition(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "punch";
	        args["method"] = "position";
	        args["easetype"] = EaseType.punch;
	        iTween.Launch(target, args);
	    }
	    static ShakePosition(target, args) {
	        args = iTween.CleanArgs(args);
	        args["type"] = "shake";
	        args["method"] = "position";
	        iTween.Launch(target, args);
	    }
	    static ShakePosition2(target, amount, time) {
	        iTween.ShakePosition(target, iTween.Hash("amount", amount, "time", time));
	    }
	    GenerateTargets() {
	        switch (this.type) {
	            case "value":
	                {
	                    let text7 = this.method;
	                    if (text7 == null) {
	                        break;
	                    }
	                    if (!(text7 == "float")) {
	                        if (!(text7 == "vector2")) {
	                            if (!(text7 == "vector3")) {
	                                if (!(text7 == "color")) {
	                                    if (text7 == "rect") {
	                                        this.GenerateRectTargets();
	                                        this.apply = this.ApplyRectTargets;
	                                    }
	                                }
	                                else {
	                                    this.GenerateColorTargets();
	                                    this.apply = this.ApplyColorTargets;
	                                }
	                            }
	                            else {
	                                this.GenerateVector3Targets();
	                                this.apply = this.ApplyVector3Targets;
	                            }
	                        }
	                        else {
	                            this.GenerateVector2Targets();
	                            this.apply = this.ApplyVector2Targets;
	                        }
	                    }
	                    else {
	                        this.GenerateFloatTargets();
	                        this.apply = this.ApplyFloatTargets;
	                    }
	                    break;
	                }
	            case "color":
	                {
	                    let text6 = this.method;
	                    if (text6 != null && text6 == "to") {
	                    }
	                    break;
	                }
	            case "audio":
	                {
	                    console.warn("Tween TODO: audio to is not supported.");
	                    break;
	                }
	            case "move":
	                {
	                    let text2 = this.method;
	                    if (text2 == null) {
	                        break;
	                    }
	                    if (!(text2 == "to")) {
	                        if (text2 == "by" || text2 == "add") {
	                            this.GenerateMoveByTargets();
	                            this.apply = this.ApplyMoveByTargets;
	                        }
	                    }
	                    else if (this.tweenArguments["path"]) {
	                        console.warn("Tween TODO: move path is not supported.");
	                        this.GenerateMoveToPathTargets();
	                        this.apply = this.ApplyMoveToPathTargets;
	                    }
	                    else {
	                        this.GenerateMoveToTargets();
	                        this.apply = this.ApplyMoveToTargets;
	                    }
	                    break;
	                }
	            case "scale":
	                {
	                    let text8 = this.method;
	                    if (text8 == null) {
	                        break;
	                    }
	                    if (!(text8 == "to")) {
	                        if (!(text8 == "by")) {
	                            if (text8 == "add") {
	                                this.GenerateScaleAddTargets();
	                                this.apply = this.ApplyScaleToTargets;
	                            }
	                        }
	                        else {
	                            this.GenerateScaleByTargets();
	                            this.apply = this.ApplyScaleToTargets;
	                        }
	                    }
	                    else {
	                        this.GenerateScaleToTargets();
	                        this.apply = this.ApplyScaleToTargets;
	                    }
	                    break;
	                }
	            case "rotate":
	                {
	                    let text5 = this.method;
	                    if (text5 == null) {
	                        break;
	                    }
	                    if (!(text5 == "to")) {
	                        if (!(text5 == "add")) {
	                            if (text5 == "by") {
	                                this.GenerateRotateByTargets();
	                                this.apply = this.ApplyRotateAddTargets;
	                            }
	                        }
	                        else {
	                            this.GenerateRotateAddTargets();
	                            this.apply = this.ApplyRotateAddTargets;
	                        }
	                    }
	                    else {
	                        this.GenerateRotateToTargets();
	                        this.apply = this.ApplyRotateToTargets;
	                    }
	                    break;
	                }
	            case "shake":
	                {
	                    let text3 = this.method;
	                    if (text3 == null) {
	                        break;
	                    }
	                    if (!(text3 == "position")) {
	                        if (!(text3 == "scale")) {
	                            if (text3 == "rotation") {
	                                this.GenerateShakeRotationTargets();
	                                this.apply = this.ApplyShakeRotationTargets;
	                            }
	                        }
	                        else {
	                            this.GenerateShakeScaleTargets();
	                            this.apply = this.ApplyShakeScaleTargets;
	                        }
	                    }
	                    else {
	                        this.GenerateShakePositionTargets();
	                        this.apply = this.ApplyShakePositionTargets;
	                    }
	                    break;
	                }
	            case "punch":
	                {
	                    let text4 = this.method;
	                    if (text4 == null) {
	                        break;
	                    }
	                    if (!(text4 == "position")) {
	                        if (!(text4 == "rotation")) {
	                            if (text4 == "scale") {
	                                this.GeneratePunchScaleTargets();
	                                this.apply = this.ApplyPunchScaleTargets;
	                            }
	                        }
	                        else {
	                            this.GeneratePunchRotationTargets();
	                            this.apply = this.ApplyPunchRotationTargets;
	                        }
	                    }
	                    else {
	                        this.GeneratePunchPositionTargets();
	                        this.apply = this.ApplyPunchPositionTargets;
	                    }
	                    break;
	                }
	            case "look":
	                {
	                    let text = this.method;
	                    if (text != null && text == "to") {
	                        this.GenerateLookToTargets();
	                        this.apply = this.ApplyLookToTargets;
	                    }
	                    break;
	                }
	            case "stab":
	                this.GenerateStabTargets();
	                this.apply = this.ApplyStabTargets;
	                break;
	        }
	    }
	    EnableKinematic() {
	    }
	    DisableKinematic() {
	    }
	    ConflictCheck() {
	        let tweens = this.ownerSp.getComponents(iTween);
	        let index = 0;
	        let tween;
	        while (true) {
	            if (index >= tweens.length) {
	                return;
	            }
	            tween = tweens[index];
	            if (tween.type == "value") {
	                return;
	            }
	            if (tween.isRunning && tween.type == this.type) {
	                if (tween.method != this.method) {
	                    return;
	                }
	                if (Object.keys(tween.tweenArguments).length != Object.keys(this.tweenArguments).length) {
	                    break;
	                }
	            }
	            index++;
	        }
	        tween.Dispose();
	    }
	    CallBack(callbackType) {
	        let type = this.tweenArguments[callbackType];
	        if (type && !this.tweenArguments["ischild"]) {
	            type.call(this.tweenArguments[callbackType + "target"], [this.tweenArguments[callbackType + "params"]]);
	        }
	    }
	    RetrieveArgs() {
	        for (let tween of iTween.tweens) {
	            if (tween["target"] == this.owner) {
	                this.tweenArguments = tween;
	                break;
	            }
	        }
	        this.tweenId = this.tweenArguments["id"];
	        this.type = this.tweenArguments["type"];
	        this._name = this.tweenArguments["name"];
	        this.method = this.tweenArguments["method"];
	        if (this.tweenArguments["time"] != null) {
	            this.time = this.tweenArguments["time"];
	        }
	        else {
	            this.time = Defaults.time;
	        }
	        if (this.tweenArguments["delay"] != null) {
	            this.delay = this.tweenArguments["delay"];
	        }
	        else {
	            this.delay = Defaults.delay;
	        }
	        if (this.tweenArguments["namedcolorvalue"] != null) {
	            this.namedcolorvalue = this.tweenArguments["namedcolorvalue"];
	        }
	        else {
	            this.namedcolorvalue = Defaults.namedColorValue;
	        }
	        if (this.tweenArguments["looptype"] != null) {
	            this.loopType = this.tweenArguments["looptype"];
	        }
	        else {
	            this.loopType = LoopType.none;
	        }
	        if (this.tweenArguments["easetype"] != null) {
	            this.easeType = this.tweenArguments["easetype"];
	        }
	        else {
	            this.easeType = Defaults.easeType;
	        }
	        if (this.tweenArguments["space"] != null) {
	            this.space = this.tweenArguments["space"];
	        }
	        else {
	            this.space = Defaults.space;
	        }
	        if (this.tweenArguments["islocal"] != null) {
	            this.isLocal = this.tweenArguments["islocal"];
	        }
	        else {
	            this.isLocal = Defaults.isLocal;
	        }
	        if (this.tweenArguments["ignoretimescale"]) {
	            this.useRealTime = this.tweenArguments["ignoretimescale"];
	        }
	        else {
	            this.useRealTime = Defaults.useRealTime;
	        }
	        this.GetEasingFunction();
	    }
	    GetEasingFunction() {
	        switch (this.easeType) {
	            case EaseType.easeInQuad:
	                this.ease = this.easeInQuad;
	                break;
	            case EaseType.easeOutQuad:
	                this.ease = this.easeOutQuad;
	                break;
	            case EaseType.easeInOutQuad:
	                this.ease = this.easeInOutQuad;
	                break;
	            case EaseType.easeInCubic:
	                this.ease = this.easeInCubic;
	                break;
	            case EaseType.easeOutCubic:
	                this.ease = this.easeOutCubic;
	                break;
	            case EaseType.easeInOutCubic:
	                this.ease = this.easeInOutCubic;
	                break;
	            case EaseType.easeInQuart:
	                this.ease = this.easeInQuart;
	                break;
	            case EaseType.easeOutQuart:
	                this.ease = this.easeOutQuart;
	                break;
	            case EaseType.easeInOutQuart:
	                this.ease = this.easeInOutQuart;
	                break;
	            case EaseType.easeInQuint:
	                this.ease = this.easeInQuint;
	                break;
	            case EaseType.easeOutQuint:
	                this.ease = this.easeOutQuint;
	                break;
	            case EaseType.easeInOutQuint:
	                this.ease = this.easeInOutQuint;
	                break;
	            case EaseType.easeInSine:
	                this.ease = this.easeInSine;
	                break;
	            case EaseType.easeOutSine:
	                this.ease = this.easeOutSine;
	                break;
	            case EaseType.easeInOutSine:
	                this.ease = this.easeInOutSine;
	                break;
	            case EaseType.easeInExpo:
	                this.ease = this.easeInExpo;
	                break;
	            case EaseType.easeOutExpo:
	                this.ease = this.easeOutExpo;
	                break;
	            case EaseType.easeInOutExpo:
	                this.ease = this.easeInOutExpo;
	                break;
	            case EaseType.easeInCirc:
	                this.ease = this.easeInCirc;
	                break;
	            case EaseType.easeOutCirc:
	                this.ease = this.easeOutCirc;
	                break;
	            case EaseType.easeInOutCirc:
	                this.ease = this.easeInOutCirc;
	                break;
	            case EaseType.linear:
	                this.ease = this.linear;
	                break;
	            case EaseType.spring:
	                this.ease = this.spring;
	                break;
	            case EaseType.easeInBounce:
	                this.ease = this.easeInBounce;
	                break;
	            case EaseType.easeOutBounce:
	                this.ease = this.easeOutBounce;
	                break;
	            case EaseType.easeInOutBounce:
	                this.ease = this.easeInOutBounce;
	                break;
	            case EaseType.easeInBack:
	                this.ease = this.easeInBack;
	                break;
	            case EaseType.easeOutBack:
	                this.ease = this.easeOutBack;
	                break;
	            case EaseType.easeInOutBack:
	                this.ease = this.easeInOutBack;
	                break;
	            case EaseType.easeInElastic:
	                this.ease = this.easeInElastic;
	                break;
	            case EaseType.easeOutElastic:
	                this.ease = this.easeOutElastic;
	                break;
	            case EaseType.easeInOutElastic:
	                this.ease = this.easeInOutElastic;
	                break;
	        }
	    }
	    linear(start, end, value) {
	        return MathExpand.Lerp(start, end, value);
	    }
	    clerp(start, end, value) {
	        let num = 0;
	        let num2 = 360;
	        let num3 = Math.abs((num2 - num) * 0.5);
	        let num4 = 0;
	        let num5 = 0;
	        if (end - start < 0 - num3) {
	            num5 = (num2 - start + end) * value;
	            return start + num5;
	        }
	        if (end - start > num3) {
	            num5 = (0 - (num2 - end + start)) * value;
	            return start + num5;
	        }
	        return start + (end - start) * value;
	    }
	    spring(start, end, value) {
	        value = MathExpand.Clamp01(value);
	        value = (Math.sin(value * 3.14159274 * (0.2 + 2.5 * value * value * value)) * Math.pow(1 - value, 2.2) + value) * (1 + 1.2 * (1 - value));
	        return start + (end - start) * value;
	    }
	    easeInQuad(start, end, value) {
	        end -= start;
	        return end * value * value + start;
	    }
	    easeOutQuad(start, end, value) {
	        end -= start;
	        return (0 - end) * value * (value - 2) + start;
	    }
	    easeInOutQuad(start, end, value) {
	        value /= 0.5;
	        end -= start;
	        if (value < 1) {
	            return end * 0.5 * value * value + start;
	        }
	        value -= 1;
	        return (0 - end) * 0.5 * (value * (value - 2) - 1) + start;
	    }
	    easeInCubic(start, end, value) {
	        end -= start;
	        return end * value * value * value + start;
	    }
	    easeOutCubic(start, end, value) {
	        value -= 1;
	        end -= start;
	        return end * (value * value * value + 1) + start;
	    }
	    easeInOutCubic(start, end, value) {
	        value /= 0.5;
	        end -= start;
	        if (value < 1) {
	            return end * 0.5 * value * value * value + start;
	        }
	        value -= 2;
	        return end * 0.5 * (value * value * value + 2) + start;
	    }
	    easeInQuart(start, end, value) {
	        end -= start;
	        return end * value * value * value * value + start;
	    }
	    easeOutQuart(start, end, value) {
	        value -= 1;
	        end -= start;
	        return (0 - end) * (value * value * value * value - 1) + start;
	    }
	    easeInOutQuart(start, end, value) {
	        value /= 0.5;
	        end -= start;
	        if (value < 1) {
	            return end * 0.5 * value * value * value * value + start;
	        }
	        value -= 2;
	        return (0 - end) * 0.5 * (value * value * value * value - 2) + start;
	    }
	    easeInQuint(start, end, value) {
	        end -= start;
	        return end * value * value * value * value * value + start;
	    }
	    easeOutQuint(start, end, value) {
	        value -= 1;
	        end -= start;
	        return end * (value * value * value * value * value + 1) + start;
	    }
	    easeInOutQuint(start, end, value) {
	        value /= 0.5;
	        end -= start;
	        if (value < 1) {
	            return end * 0.5 * value * value * value * value * value + start;
	        }
	        value -= 2;
	        return end * 0.5 * (value * value * value * value * value + 2) + start;
	    }
	    easeInSine(start, end, value) {
	        end -= start;
	        return (0 - end) * Math.cos(value * 1.57079637) + end + start;
	    }
	    easeOutSine(start, end, value) {
	        end -= start;
	        return end * Math.sin(value * 1.57079637) + start;
	    }
	    easeInOutSine(start, end, value) {
	        end -= start;
	        return (0 - end) * 0.5 * (Math.cos(3.14159274 * value) - 1) + start;
	    }
	    easeInExpo(start, end, value) {
	        end -= start;
	        return end * Math.pow(2, 10 * (value - 1)) + start;
	    }
	    easeOutExpo(start, end, value) {
	        end -= start;
	        return end * (0 - Math.pow(2, -10 * value) + 1) + start;
	    }
	    easeInOutExpo(start, end, value) {
	        value /= 0.5;
	        end -= start;
	        if (value < 1) {
	            return end * 0.5 * Math.pow(2, 10 * (value - 1)) + start;
	        }
	        value -= 1;
	        return end * 0.5 * (0 - Math.pow(2, -10 * value) + 2) + start;
	    }
	    easeInCirc(start, end, value) {
	        end -= start;
	        return (0 - end) * (Math.sqrt(1 - value * value) - 1) + start;
	    }
	    easeOutCirc(start, end, value) {
	        value -= 1;
	        end -= start;
	        return end * Math.sqrt(1 - value * value) + start;
	    }
	    easeInOutCirc(start, end, value) {
	        value /= 0.5;
	        end -= start;
	        if (value < 1) {
	            return (0 - end) * 0.5 * (Math.sqrt(1 - value * value) - 1) + start;
	        }
	        value -= 2;
	        return end * 0.5 * (Math.sqrt(1 - value * value) + 1) + start;
	    }
	    easeInBounce(start, end, value) {
	        end -= start;
	        let num = 1;
	        return end - this.easeOutBounce(0, end, num - value) + start;
	    }
	    easeOutBounce(start, end, value) {
	        value /= 1;
	        end -= start;
	        if (value < 0.363636374) {
	            return end * (7.5625 * value * value) + start;
	        }
	        if (value < 0.727272749) {
	            value -= 0.545454562;
	            return end * (7.5625 * value * value + 0.75) + start;
	        }
	        if (value < 0.90909090909090906) {
	            value -= 0.8181818;
	            return end * (7.5625 * value * value + 0.9375) + start;
	        }
	        value -= 21 / 22;
	        return end * (7.5625 * value * value + 63 / 64) + start;
	    }
	    easeInOutBounce(start, end, value) {
	        end -= start;
	        let num = 1;
	        if (value < num * 0.5) {
	            return this.easeInBounce(0, end, value * 2) * 0.5 + start;
	        }
	        return this.easeOutBounce(0, end, value * 2 - num) * 0.5 + end * 0.5 + start;
	    }
	    easeInBack(start, end, value) {
	        end -= start;
	        value /= 1;
	        let num = 1.70158;
	        return end * value * value * ((num + 1) * value - num) + start;
	    }
	    easeOutBack(start, end, value) {
	        let num = 1.70158;
	        end -= start;
	        value -= 1;
	        return end * (value * value * ((num + 1) * value + num) + 1) + start;
	    }
	    easeInOutBack(start, end, value) {
	        let num = 1.70158;
	        end -= start;
	        value /= 0.5;
	        if (value < 1) {
	            num *= 1.525;
	            return end * 0.5 * (value * value * ((num + 1) * value - num)) + start;
	        }
	        value -= 2;
	        num *= 1.525;
	        return end * 0.5 * (value * value * ((num + 1) * value + num) + 2) + start;
	    }
	    punch(amplitude, value) {
	        let num = 9;
	        if (value == 0) {
	            return 0;
	        }
	        if (value == 1) {
	            return 0;
	        }
	        let num2 = 0.3;
	        num = num2 / 6.28318548 * Math.asin(0);
	        return amplitude * Math.pow(2, -10 * value) * Math.sin((value * 1 - num) * 6.28318548 / num2);
	    }
	    easeInElastic(start, end, value) {
	        end -= start;
	        let num = 1;
	        let num2 = num * 0.3;
	        let num3 = 0;
	        let num4 = 0;
	        if (value == 0) {
	            return start;
	        }
	        if ((value /= num) == 1) {
	            return start + end;
	        }
	        if (num4 == 0 || num4 < Math.abs(end)) {
	            num4 = end;
	            num3 = num2 / 4;
	        }
	        else {
	            num3 = num2 / 6.28318548 * Math.asin(end / num4);
	        }
	        return 0 - num4 * Math.pow(2, 10 * (value -= 1)) * Math.sin((value * num - num3) * 6.28318548 / num2) + start;
	    }
	    easeOutElastic(start, end, value) {
	        end -= start;
	        let num = 1;
	        let num2 = num * 0.3;
	        let num3 = 0;
	        let num4 = 0;
	        if (value == 0) {
	            return start;
	        }
	        if ((value /= num) == 1) {
	            return start + end;
	        }
	        if (num4 == 0 || num4 < Math.abs(end)) {
	            num4 = end;
	            num3 = num2 * 0.25;
	        }
	        else {
	            num3 = num2 / 6.28318548 * Math.asin(end / num4);
	        }
	        return num4 * Math.pow(2, -10 * value) * Math.sin((value * num - num3) * 6.28318548 / num2) + end + start;
	    }
	    easeInOutElastic(start, end, value) {
	        end -= start;
	        let num = 1;
	        let num2 = num * 0.3;
	        let num3 = 0;
	        let num4 = 0;
	        if (value == 0) {
	            return start;
	        }
	        if ((value /= num * 0.5) == 2) {
	            return start + end;
	        }
	        if (num4 == 0 || num4 < Math.abs(end)) {
	            num4 = end;
	            num3 = num2 / 4;
	        }
	        else {
	            num3 = num2 / 6.28318548 * Math.asin(end / num4);
	        }
	        if (value < 1) {
	            return -0.5 * (num4 * Math.pow(2, 10 * (value -= 1)) * Math.sin((value * num - num3) * 6.28318548 / num2)) + start;
	        }
	        return num4 * Math.pow(2, -10 * (value -= 1)) * Math.sin((value * num - num3) * 6.28318548 / num2) * 0.5 + end + start;
	    }
	}
	iTween.tweens = [];
	iTween.gid = 1;

	class RotatesWithMovement extends Laya.Script3D {
	    constructor() {
	        super();
	        this.previousPosition = new Laya.Vector3();
	        this.enableda = true;
	    }
	    get inTheMiddleOfAFlip() {
	        return this.facing == FacingDirectionID.FlippingLeft || this.facing == FacingDirectionID.FlippingRight;
	    }
	    onAwake() {
	        this.drawnObject = this.owner;
	        this.drawnObject.body.transform.position.cloneTo(this.previousPosition);
	        this.unflippedRotation = this.drawnObject.body.transform.localRotationEuler.clone();
	    }
	    flipIfNeeded() {
	        if (this.drawnObject && this.drawnObject.shouldCheckForSpriteFlip()) {
	            if (this.flipTarget != null) {
	                this.flipIfNeeded_BasedOnTarget();
	            }
	            else {
	                this.flipIfNeeded_BasedOnMovement();
	            }
	        }
	    }
	    flipIfNeeded_BasedOnMovement() {
	        let x = this.drawnObject.x - this.previousPosition.x;
	        if (x < 0) {
	            if (this.facing != FacingDirectionID.Right) {
	                this.facing = FacingDirectionID.FlippingRight;
	            }
	        }
	        else if (x > 0 && this.facing != 0) {
	            this.facing = FacingDirectionID.FlippingLeft;
	        }
	    }
	    flipIfNeeded_BasedOnTarget() {
	        let x = this.flipTarget.x - this.drawnObject.x;
	        if (x < 0) {
	            if (this.facing != FacingDirectionID.Right) {
	                this.facing = FacingDirectionID.FlippingRight;
	            }
	        }
	        else if (x > 0 && this.facing != 0) {
	            this.facing = FacingDirectionID.FlippingLeft;
	        }
	    }
	    continueFlip() {
	        let sp = this.drawnObject.body.sp;
	        if (!sp)
	            return;
	        sp = sp.getChildByName("Body");
	        if (!sp)
	            return;
	        this.drawnObject.body.resetBodyScale = true;
	        let x = sp.transform.localScaleX;
	        let num = 20 * Glob.deltaTime;
	        let flag = false;
	        if (this.facing == FacingDirectionID.FlippingRight) {
	            num *= -1;
	            if (x + num <= -1) {
	                sp.transform.localScaleX = -1;
	                this.facing = FacingDirectionID.Right;
	                flag = true;
	            }
	        }
	        else {
	            if (this.facing != FacingDirectionID.FlippingLeft) {
	                console.log("We are in Component_RotatesWithMovement::ContinueFlip() and the current flipping direction isn't Right or Left!. One of those is expected.");
	                return;
	            }
	            if (x + num >= 1) {
	                sp.transform.localScaleX = 1;
	                this.facing = FacingDirectionID.Left;
	                flag = true;
	            }
	        }
	        if (!flag) {
	            let x = sp.transform.localScaleX + num;
	            sp.transform.localScaleX = x;
	        }
	    }
	    onLateUpdate() {
	        this.verifyFlipTarget();
	        if (this.enableda) {
	            this.flipIfNeeded();
	        }
	        if (this.inTheMiddleOfAFlip) {
	            this.continueFlip();
	        }
	        this.drawnObject.transform.position.cloneTo(this.previousPosition);
	    }
	    verifyFlipTarget() {
	        if (this.flipTarget != null && this.flipTarget.isDispose) {
	            this.flipTarget = null;
	        }
	    }
	}

	;
	class ThingAnim {
	    constructor() {
	        this.k_BuildMonsterAnimName = "Build_MonsterAnim";
	    }
	    static playPotentialMatch(drawnObject, partner, targetCell) {
	        let x, y;
	        if (targetCell) {
	            x = targetCell.center.x;
	            y = targetCell.center.y;
	        }
	        else {
	            x = drawnObject.x;
	            y = drawnObject.y;
	        }
	        x = x - partner.x;
	        y = y - partner.y;
	        let v = MathUtil.normalize(x, y);
	        x = v[0] * 0.4;
	        y = v[1] * 0.4;
	        Tween.StopBaseAnims(partner);
	        partner.restoreLocalRotation();
	        Tween.MoveBy(partner, "PotentialMatch_ObjectAnim", 0.5, x, y, LoopType.pingPong);
	        Tween.ScaleBy(partner.body, "PotentialMatch_ObjectAnim", 0.5, 1.15, LoopType.pingPong);
	    }
	    static stopPotentialMatch(partner) {
	        iTween.StopByName2(partner.localPositionAnimTarget, "PotentialMatch_ObjectAnim");
	        iTween.StopByName2(partner.body, "PotentialMatch_ObjectAnim");
	        Tween.EaseBackToOriginalPosition(partner);
	        Tween.EaseBackToOriginalScale(partner);
	    }
	    static playGrabbed(drawnObject) {
	        if (!Tween.ObjectHasScaleAnimPlaying(drawnObject)) {
	            Tween.PunchScale3(drawnObject, "Grabbed_ObjectAnim", 0.2, true);
	        }
	    }
	    static playPushed(pushedObj, pushZone) {
	        if (pushedObj.metaCell == null || pushedObj.metaCell.overlapsLeftwardOn(pushZone)) {
	            Tween.MoveBy(pushedObj, "Push", 0.3, this.pushLeft.x, this.pushLeft.y, LoopType.none);
	        }
	        else {
	            Tween.MoveBy(pushedObj, "Push", 0.3, this.pushRight.x, this.pushRight.y, LoopType.none);
	        }
	    }
	    static stopPushed(pushedObj) {
	        if (pushedObj != null) {
	            Tween.EaseBackToOriginalPosition(pushedObj);
	        }
	    }
	    static playNewObjectAppear(drawnObject, resetToRestingScaleFirst = true) {
	        if (!Tween.ObjectHasScaleAnimPlaying(drawnObject)) {
	            Tween.PunchScale2(drawnObject, "NewObjectAppear_Scale_ObjectAnim", resetToRestingScaleFirst);
	        }
	    }
	    static playNewEnemyAppear(drawnObject) {
	        if (!Tween.ObjectHasScaleAnimPlaying2(drawnObject)) {
	            drawnObject.transform.localScale = new Laya.Vector3(0.7, 0, 1);
	            Tween.ScaleTo_Root(drawnObject, "NewEnemyAppear_Scale_ObjectAnim", 0.6, 1, 1, LoopType.none);
	        }
	    }
	    static playNewUIIconObjectAppear(obj) {
	        if (!Tween.ObjectHasScaleAnimPlaying2(obj)) {
	            Tween.PunchScale8(obj, "NewUIIconObjectAppear_Scale_ObjectAnim", 1.5, 0.05);
	        }
	    }
	    static playGreenArrowAppear(greenDownArrow) {
	        Tween.ScaleTo(greenDownArrow.body, "GreenArrowAppear", 0.25, 0, 0, LoopType.none);
	    }
	    static playObjectHitByProjectile(target) {
	        if (iTween.CountByName(target.localPositionAnimTarget, "ObjectTargettedByEnemy") <= 0) {
	            Tween.PunchPosition(target.localPositionAnimTarget, "ObjectTargettedByEnemy", 0.3, MathUtil.randNum(0, 0.3), MathUtil.randNum(0, 0.2), LoopType.none);
	        }
	    }
	    static playBeingFiredProjectile(being, firedAt) {
	        if (iTween.CountByName(being.localPositionAnimTarget, "BeingFiredProjectile") <= 0) {
	            let x = being.drawnX - firedAt.drawnX;
	            let y = being.drawnY - firedAt.drawnY;
	            let v = MathUtil.normalize(x, y);
	            let num = MathUtil.randNum(0.2, 0.4);
	            Tween.PunchPosition(being.localPositionAnimTarget, "BeingFiredProjectile", 1.5, v[0] * num, v[1] * num, LoopType.none);
	        }
	    }
	    static playCellAppears(xCellIndex, yCellIndex) {
	        let cell = Glob.cellLayer.getCellGxy(xCellIndex, yCellIndex);
	        if (cell) {
	            let y = 0.3;
	            Tween.PunchPosition(cell.body, "CellAppear", 1.5, 0, y, LoopType.none);
	            if (cell.occupied) {
	                Tween.PunchPosition(cell.occupant.localPositionAnimTarget, "CellAppear_EntityOccupant", 1.5, 0, y, LoopType.none);
	            }
	        }
	    }
	    static playTapBehaviorJitter(target) {
	        Tween.PunchPosition(target.localPositionAnimTarget, "ObjectOnTapBehaviorSuccess", 0.3, MathUtil.randNum(0, 0.6), MathUtil.randNum(0, 0.2), LoopType.none);
	    }
	    static playPotentialMatch_OnOwner(owner) {
	        Tween.DisableBaseAnims(owner);
	        owner.restoreLocalPositionScaleRotation();
	    }
	    static stopPotentialMatch_OnOwner(owner) {
	        Tween.EnableBaseAnims(owner);
	    }
	    static playHitBoundary(drawnObject) {
	        if (!Tween.ObjectHasScaleAnimPlaying(drawnObject)) {
	            Tween.PunchScale(drawnObject, "HitABoundary_ObjectAnim");
	        }
	    }
	    static playSpawnedSomething(drawnObject) {
	        Tween.PunchScale5(drawnObject, "SpawnedSomething", 1.5, 0.5, 0, true);
	    }
	    static playDieFromTimeout(drawnObject) {
	        Tween.ScaleTo(drawnObject, "DieFromTimeout", 0.6, 0.001, 0.001, LoopType.none);
	    }
	    static playDropFromCarry(drawnObject, worldSpaceDestination) {
	        Tween.MoveTo_Root(drawnObject, "DropFromCarry", 0.5, worldSpaceDestination.x, worldSpaceDestination.y);
	        this.playDropFromCarry_ScaleUpOnly(drawnObject);
	    }
	    static playDropFromCarry_ScaleUpOnly(drawnObject) {
	        if (Tween.ObjectHasScaleAnimPlaying(drawnObject)) {
	            iTween.StopByName2(drawnObject.body, "NewObjectAppear_Scale_ObjectAnim");
	            Tween.EaseBackToOriginalScale(drawnObject);
	        }
	        else {
	            iTween.ScaleTo2(drawnObject.body, iTween.Hash("name", "EaseScaleHome", "delay", 0.75, "islocal", true, "time", 0.25, "x", drawnObject.restingScale.x, "y", drawnObject.restingScale.y, "EaseType", EaseType.easeOutQuad));
	        }
	    }
	    static playHarvest(drawnObject) {
	        let r = drawnObject.flipController.facing == FacingDirectionID.Right ? 1 : -1;
	        Tween.RotateByWithCallback(drawnObject, "Harvest_MonsterAnim", 0.35, 45 * r, LoopType.pingPong, EaseType.easeOutQuad);
	    }
	    static stopHarvest(drawnObject) {
	        iTween.StopByName2(drawnObject.body, "Harvest_MonsterAnim");
	        Tween.EaseBackToOriginalRotation(drawnObject);
	    }
	    static playGoInside(monster, home) {
	    }
	    static playBuild(drawnObject) {
	        let num = MathUtil.randNum(-0.75, 0.75);
	        let num2 = MathUtil.randNum(0.5, 0.7);
	        let component = drawnObject.getComponent(RotatesWithMovement);
	        if (component) {
	            component.enableda = false;
	            num = MathUtil.randNum(-0.5, 0.5);
	            if (component.facing == FacingDirectionID.Right) {
	                num = 0 - num;
	            }
	        }
	        drawnObject.tweenBuildVFXThrottle = 0;
	        iTween.MoveBy2(drawnObject.localPositionAnimTarget, iTween.Hash("name", "Build_MonsterAnim", "islocal", true, "time", 0.35, "x", num, "y", num2, "looptype", LoopType.pingPong, "EaseType", EaseType.easeOutQuad, "oncompletetarget", drawnObject, "oncomplete", drawnObject.tweenBuildOnUpdateCallback, "oncompleteparams", "Build_MonsterAnim"));
	    }
	    static stopBuild(drawnObject) {
	        iTween.StopByName2(drawnObject.localPositionAnimTarget, "Build_MonsterAnim");
	        Tween.EaseBackToOriginalPosition(drawnObject);
	        let component = drawnObject.getComponent(RotatesWithMovement);
	        if (component) {
	            component.enableda = true;
	        }
	    }
	}
	ThingAnim.k_PlayGoInside_AnimTime = 0.5;
	ThingAnim.pushLeft = new Laya.Vector2(0.3606321, 0);
	ThingAnim.pushRight = new Laya.Vector2(-0.3606321, 0);

	class ThingList {
	    static sceneChangeCleanup() {
	        this.harvestables.length = 0;
	        this.offGridObjects.length = 0;
	        this.buildables.length = 0;
	        this.enemyBreakables.length = 0;
	        this.livingDragonBreakables.length = 0;
	        this.stealables.length = 0;
	        this.categories = {};
	        this.lists = {};
	        this.removeThings();
	        this.guidMap = {};
	        Thing.dropTargetHighlight = null;
	        Thing.dropTargetMostRecentTarget = null;
	    }
	    static tryGetFromGuidMap(guid) {
	        let drawnObject = this.guidMap[guid];
	        if (drawnObject == null) {
	            return null;
	        }
	        return drawnObject;
	    }
	    static removeThings() {
	        for (let i in this.guidMap) {
	            let thing = this.guidMap[i];
	            thing.destroyDrawnObject(DeathReasonID.Clear);
	        }
	    }
	}
	ThingList.harvestables = [];
	ThingList.offGridObjects = [];
	ThingList.buildables = [];
	ThingList.stealables = [];
	ThingList.enemyBreakables = [];
	ThingList.livingDragonBreakables = [];
	ThingList.categories = {};
	ThingList.lists = {};
	ThingList.guidMap = {};

	class Unit extends Laya.Sprite3D {
	    constructor() {
	        super();
	        this.isBodyLoaded = false;
	        this.isDispose = false;
	    }
	    get sp() {
	        return this.body.sp;
	    }
	    setNid(nid) {
	        this.nid = nid;
	        this.name = nid;
	        this.updateBody();
	    }
	    addBody() {
	        this.addChild(this.body);
	    }
	    updateBody() {
	        if (this.body) {
	            if (this.body.nid == this.nid) {
	                return;
	            }
	            this.body.dispose();
	        }
	        this.body = PrefMgr.get(this.nid);
	        if (this.body.sp) {
	            this.bodyLoaded();
	        }
	        else {
	            this.isBodyLoaded = false;
	            this.body.loadedHand = Laya.Handler.create(this, this.onBodyLoaded);
	        }
	        this.addBody();
	    }
	    bodyLoaded() {
	        this.isBodyLoaded = true;
	    }
	    onBodyLoaded() {
	        if (this.isDispose)
	            return;
	        this.body.loadedHand = null;
	        this.bodyLoaded();
	    }
	    clearBody() {
	        if (this.body) {
	            this.body.dispose();
	            this.body = null;
	        }
	        this.isBodyLoaded = false;
	    }
	    release() {
	    }
	    dispose() {
	        if (this.isDispose)
	            return;
	        this.clearBody();
	        this.release();
	        this.removeSelf();
	        this.isDispose = true;
	    }
	}

	class DiscoveryChain {
	    constructor() {
	        this.chain = [];
	        this.chainSize = 0;
	    }
	    static getChainSiblingAtIndex(def, chainOrder1Based) {
	        let discoveryChain = DiscoveryChain.discoveryChains[def.breedId];
	        if (def == null || !discoveryChain) {
	            return null;
	        }
	        let num = chainOrder1Based - 1;
	        if (num < 0) {
	            console.log("DiscoveryChain::GetChainSiblingAtIndex() was given a chainOrder1Based that was 0, which is not allowed. These are 1-based. In chain: " + def.breedId);
	            return null;
	        }
	        if (num >= discoveryChain.chainSize) {
	            console.log("DiscoveryChain::GetChainSiblingAtIndex() was given a chainOrder1Based that was greater than the size of the chain: " + chainOrder1Based + " in chain: " + def.breedId);
	            return null;
	        }
	        return discoveryChain.chain[num];
	    }
	    getNextAfter(afterThisObject) {
	        let num = afterThisObject.chainPosition;
	        if (num >= this.chainSize) {
	            return null;
	        }
	        return this.chain[num];
	    }
	    static addToChain(def) {
	        if (!def.hasChain) {
	            return null;
	        }
	        let discoveryChain = DiscoveryChain.discoveryChains[def.breedId];
	        if (!discoveryChain) {
	            discoveryChain = new DiscoveryChain();
	            DiscoveryChain.discoveryChains[def.breedId] = discoveryChain;
	        }
	        discoveryChain.add(def);
	        return discoveryChain;
	    }
	    static isDiscoveredBreed(chainLocKey) {
	        let english = LanCfg.get(chainLocKey);
	        let discoveryChain = DiscoveryChain.discoveryChains[english];
	        if (!discoveryChain) {
	            return false;
	        }
	        for (let i = 0; i < discoveryChain.chainSize; i++) {
	            let matchObjectDefinition = discoveryChain.chain[i];
	            if ((!matchObjectDefinition.isEgg && matchObjectDefinition.discoveryState == DiscoveryItemStateID.Discovered) || matchObjectDefinition.discoveryState == DiscoveryItemStateID.JustDiscoveredAndUnlockable) {
	                return true;
	            }
	        }
	        return false;
	    }
	    add(def) {
	        if (this.chain[def.chainPosition - 1] != null) {
	            console.log("An object wants to have the same position in a discovery chain as another object: " + def.name + ". Fix this error in Object Definition data!");
	            return;
	        }
	        this.chain[def.chainPosition - 1] = def;
	        this.chainSize++;
	    }
	    static getDiscoveryChainsById(breedId) {
	        let data = DiscoveryChain.discoveryChains;
	        if (!data)
	            return;
	        for (let key in data) {
	            if (Number(key) == breedId) {
	                return data[key];
	            }
	        }
	    }
	}
	DiscoveryChain.MAX_CHAIN_PLANNED_FOR = 18;
	DiscoveryChain.discoveryChains = {};

	class BreedVo {
	    constructor(cid, data) {
	        this.cid = cid;
	        this.order = data[this.order];
	        this.shortName = data["shortName"];
	        this.isMonster = cid < 500;
	        this.rarity = RarityID[data["rarity"]];
	        this.type = MonsterTypeID[data["type"]];
	    }
	}

	class BreedsCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("Breeds.json");
	            for (let key in cfg) {
	                let vo = new BreedVo(parseInt(key), cfg[key]);
	                this._cfg[key] = vo;
	            }
	        }
	        return this._cfg;
	    }
	    static get(cid) {
	        return this.cfg[cid];
	    }
	    static has(cid) {
	        return !!this.get(cid);
	    }
	    static getPref(cid) {
	        let breedInfo = DiscoveryChain.discoveryChains[cid];
	        if (breedInfo) {
	            return breedInfo.chain[0].pref;
	        }
	        return "";
	    }
	}

	class SL_Constructible {
	    constructor() {
	        this.id = "Constructible";
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.targetPrefabName);
	        if (this.timeLeft) {
	            obj.setValueISL("1", this.timeLeft);
	        }
	        obj.setValue("2", this.speedUpCost);
	        return obj;
	    }
	    import(data) {
	        this.targetPrefabName = data.getValue("0");
	        if (data.hasKey("1")) {
	            this.timeLeft = data.getValueISL("1", SL_Clock);
	        }
	        this.speedUpCost = data.getValue("2");
	    }
	}

	class SL_EnemyNexus {
	    constructor() {
	        this.id = "EnemyNexus";
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.enemyPrefabName);
	        obj.setValue("1", this.spawned);
	        return obj;
	    }
	    import(data) {
	        this.enemyPrefabName = data.getValue("0");
	        this.spawned = data.getValue("1");
	    }
	}

	class SL_LootBundle {
	    constructor() {
	        this.id = "LootBundle";
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.lootPrefabNames) {
	            obj.setValue("0", SyncObj.serializeFromArray(this.lootPrefabNames));
	        }
	        if (this.instanceLoot) {
	            obj.setValueISLArr("1", this.instanceLoot);
	        }
	        return obj;
	    }
	    import(data) {
	        this.lootPrefabNames = SyncObj.deserializeToArray(data.getValue("0"));
	        this.instanceLoot = data.getValueISLArr("1", SL_Thing);
	    }
	}

	class SL_Monster {
	    constructor() {
	        this.id = "Monster";
	        this.homeLevelID = 0;
	        this.currentLevelID = 0;
	        this.workCapacityLeft = 0;
	        this.name = "";
	    }
	    get isAtHome() {
	        return this.homeLevelID != 0 && this.homeLevelID == this.currentLevelID;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.homeLevelID);
	        obj.setValue("1", this.currentLevelID);
	        if (this.exists_carryObject && this.carryObject) {
	            obj.setValueISL("2", this.carryObject);
	        }
	        obj.setValue("3", this.workCapacityLeft);
	        obj.setValue("4", this.name);
	        return obj;
	    }
	    import(data) {
	        this.homeLevelID = data.getValue("0");
	        this.currentLevelID = data.getValue("1");
	        if (data.hasKey("2")) {
	            this.exists_carryObject = true;
	            this.carryObject = data.getValueISL("2", SL_Thing);
	        }
	        this.workCapacityLeft = data.getValue("3");
	        this.name = data.getValue("4");
	    }
	}

	class SL_TimeStamp {
	    constructor() {
	        this.id = "TimeStamp";
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.timestamp);
	        return obj;
	    }
	    import(data) {
	        this.timestamp = data.getValue("0");
	    }
	}

	class SL_MonsterHome {
	    constructor() {
	        this.id = "MonsterHome";
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.sleeperGuids && this.sleeperGuids.length > 0) {
	            obj.setValue("0", SyncObj.serializeFromArray(this.sleeperGuids));
	        }
	        if (this.relaxerGuids && this.relaxerGuids.length > 0) {
	            obj.setValue("1", SyncObj.serializeFromArray(this.relaxerGuids));
	        }
	        if (this.existsSleepAppt && this.sleepTimeAppointment) {
	            obj.setValueISL("2", this.sleepTimeAppointment);
	        }
	        return obj;
	    }
	    import(data) {
	        if (data.hasKey("0")) {
	            this.sleeperGuids = SyncObj.deserializeToArray(data.getValue("0"));
	        }
	        if (data.hasKey("1")) {
	            this.relaxerGuids = SyncObj.deserializeToArray(data.getValue("1"));
	        }
	        this.existsSleepAppt = data.hasKey("2");
	        if (this.existsSleepAppt) {
	            this.sleepTimeAppointment = data.getValueISL("2", SL_TimeStamp);
	        }
	    }
	}

	class SL_Thing {
	    constructor() {
	        this.id = SaveLoadConst.PLAYER_EXPAND_DATA;
	    }
	    static validateDrawnObjectGuid(drawnObj) {
	        if (drawnObj.isEmpty()) {
	            return true;
	        }
	        let str = drawnObj.getValue("0");
	        return !isNaN(parseInt(str));
	    }
	    get definition() {
	        if (!this._definition)
	            this._definition = PropsCfg.get(this.prefabName);
	        if (!this._definition) {
	            console.error("Couldn't find definition for " + this.prefabName);
	        }
	        return this._definition;
	    }
	    set definition(value) {
	        this._definition = value;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.guid);
	        obj.setValue("1", this.prefabName);
	        if (this.exists_position) {
	            obj.setValueV3("2", this.position);
	        }
	        if (this.exists_tapsLeft) {
	            obj.setValue("3", this.tapsLeft);
	            obj.setValue("4", this.startingTaps);
	        }
	        if (this.exists_tapRechargeTimer && this.tapRechargeTimer != null) {
	            obj.setValueISL("6", this.tapRechargeTimer);
	        }
	        obj.setValue("5", this.onTapCostPaid);
	        if (this.exists_harvestCharges) {
	            obj.setValue("7", this.harvestChargesLeft);
	            obj.setValue("8", this.startingHarvestCharges);
	        }
	        if (this.exists_deathTimer && this.deathTimerData != null) {
	            obj.setValueISL("9", this.deathTimerData);
	        }
	        if (this.exists_constructible && this.constructibleData != null) {
	            obj.setValueISL("10", this.constructibleData);
	        }
	        if (this.exists_customLootBundle && this.customLootData != null) {
	            obj.setValueISL("11", this.customLootData);
	        }
	        if (this.exists_spawnChargesLeft) {
	            obj.setValue("12", this.spawnChargesLeft);
	        }
	        if (this.exists_dynamicStrength) {
	            obj.setValue("13", this.dynamicStrength);
	        }
	        if (this.exists_objectLabelComponent && this.objectLabelComponent != null) {
	            obj.setValueISL("14", this.objectLabelComponent);
	        }
	        if (this.exists_monsterData && this.monsterData != null) {
	            obj.setValueISL("15", this.monsterData);
	        }
	        if (this.exists_enemyNexus && this.enemyNexus != null) {
	            obj.setValueISL("16", this.enemyNexus);
	        }
	        if (this.exists_monsterHome && this.monsterHomeComponent != null) {
	            obj.setValueISL("17", this.monsterHomeComponent);
	        }
	        obj.setValue("18", this.hp);
	        obj.setValue("19", this.isBeingCarried);
	        obj.setValue("20", this.wasDeadWhenSaved);
	        if (this.exists_alarmBonus) {
	            obj.setValue("21", this.alarmBonusId);
	            obj.setValue("22", this.alarmBonusStartingTime);
	        }
	        obj.setValue("23", this.widthInTiles);
	        obj.setValue("24", this.heightInTiles);
	        obj.setValue("25", this.requiresCellPlacement);
	        obj.setValue("26", this.isOriginalObjectInitialized);
	        obj.setValue("27", 6);
	        return obj;
	    }
	    import(data) {
	        this.guid = data.getValue("0");
	        this.prefabName = data.getValue("1");
	        this.setDefFromLoadedPrefabNameIfValid();
	        this.exists_position = data.hasKey("2");
	        if (this.exists_position) {
	            this.position = data.getValueV3("2");
	        }
	        this.exists_tapsLeft = data.hasKey("3");
	        if (this.exists_tapsLeft) {
	            this.tapsLeft = data.getValue("3");
	            this.startingTaps = data.getValue("4");
	        }
	        this.onTapCostPaid = data.getValue("5");
	        this.exists_tapRechargeTimer = data.hasKey("6");
	        if (this.exists_tapRechargeTimer) {
	            this.tapRechargeTimer = data.getValueISL("6", SL_Clock);
	        }
	        this.exists_harvestCharges = data.hasKey("7");
	        if (this.exists_harvestCharges) {
	            this.harvestChargesLeft = data.getValue("7");
	            this.startingHarvestCharges = data.getValue("8");
	        }
	        this.exists_deathTimer = data.hasKey("9");
	        if (this.exists_deathTimer) {
	            this.deathTimerData = data.getValueISL("9", SL_Clock);
	        }
	        this.exists_constructible = data.hasKey("10");
	        if (this.exists_constructible) {
	            this.constructibleData = data.getValueISL("10", SL_Constructible);
	        }
	        this.exists_customLootBundle = data.hasKey("11");
	        if (this.exists_customLootBundle) {
	            this.customLootData = data.getValueISL("11", SL_LootBundle);
	        }
	        this.exists_spawnChargesLeft = data.hasKey("12");
	        if (this.exists_spawnChargesLeft) {
	            this.spawnChargesLeft = data.getValue("12");
	        }
	        this.exists_dynamicStrength = data.hasKey("13");
	        if (this.exists_dynamicStrength) {
	            this.dynamicStrength = data.getValue("13");
	        }
	        this.exists_objectLabelComponent = data.hasKey("14");
	        if (this.exists_objectLabelComponent) {
	            this.objectLabelComponent = data.getValueISL("14", SL_Monster);
	        }
	        this.exists_monsterData = data.hasKey("15");
	        if (this.exists_monsterData) {
	            this.monsterData = data.getValueISL("15", SL_Monster);
	        }
	        this.exists_enemyNexus = data.hasKey("16");
	        if (this.exists_enemyNexus) {
	            this.enemyNexus = data.getValueISL("16", SL_EnemyNexus);
	        }
	        this.exists_monsterHome = data.hasKey("17");
	        if (this.exists_monsterHome) {
	            this.monsterHomeComponent = data.getValueISL("17", SL_MonsterHome);
	        }
	        this.hp = data.getValue("18");
	        this.isBeingCarried = data.getValue("19");
	        this.wasDeadWhenSaved = data.getValue("20");
	        this.exists_alarmBonus = data.hasKey("21");
	        if (this.exists_alarmBonus) {
	            this.alarmBonusId = data.getValue("21");
	            let result = data.getValue("22");
	            this.alarmBonusStartingTime = result <= 0 ? 0 : result;
	        }
	        this.widthInTiles = data.getValue("23");
	        this.heightInTiles = data.getValue("24");
	        this.requiresCellPlacement = data.getValue("25");
	        if (!data.hasKey("27")) {
	            this.isOriginalObjectInitialized = true;
	        }
	        else {
	            this.isOriginalObjectInitialized = data.getValue("26");
	        }
	    }
	    isValid() {
	        if (PropsCfg.get(this.prefabName)) {
	            return true;
	        }
	        return false;
	    }
	    getDefIfValid() {
	        return this.definition;
	    }
	    setDefFromLoadedPrefabNameIfValid() {
	        this.definition = PropsCfg.get(this.prefabName);
	    }
	}

	class LootBundle {
	    constructor() {
	        this.prefabLoot = [];
	        this.instanceLoot = [];
	    }
	    get count() {
	        return this.prefabLoot.length + this.instanceLoot.length;
	    }
	    get hasLoot() {
	        return this.hasPrefabLoot || this.hasInstanceLoot;
	    }
	    get hasPrefabLoot() {
	        return this.prefabLoot.length > 0;
	    }
	    get hasInstanceLoot() {
	        return this.instanceLoot.length > 0;
	    }
	    addLoot(lootItemPrefabName) {
	        let value = PropsCfg.get(lootItemPrefabName);
	        if (value && value.disallowAsPrefabLoot) {
	            let drawnObjsSaveData = Thing.create_SaveData(value);
	            this.addLootSL(drawnObjsSaveData);
	        }
	        else {
	            this.prefabLoot.push(lootItemPrefabName);
	        }
	    }
	    addLoots(lootItemPrefabName, count) {
	        for (let i = 0; i < count; i++) {
	            this.addLoot(lootItemPrefabName);
	        }
	    }
	    addLootB(bundle) {
	        if (bundle.prefabLoot.length > 0) {
	            for (let item of bundle.prefabLoot) {
	                this.addLoot(item);
	            }
	        }
	        if (bundle.instanceLoot.length > 0) {
	            this.instanceLoot = this.instanceLoot.concat(bundle.instanceLoot);
	        }
	    }
	    addLootL(lootList) {
	        for (let item of lootList.items) {
	            if (item.itemID) {
	                this.addLoots(item.itemID, item.count);
	            }
	        }
	    }
	    addLootSLs(drawnObjsSaveData) {
	        if (drawnObjsSaveData != null && drawnObjsSaveData.length > 0) {
	            this.instanceLoot = this.instanceLoot.concat(drawnObjsSaveData);
	        }
	    }
	    addLootSL(drawnObjsSaveData) {
	        if (drawnObjsSaveData) {
	            this.instanceLoot.push(drawnObjsSaveData);
	        }
	    }
	    addLootT(lootTable, numDropsToAdd) {
	        for (let i = 0; i < numDropsToAdd; i++) {
	            this.prefabLoot.push(lootTable.dropPrefabId());
	        }
	    }
	    getPrefabAtIndex(index) {
	        if (index < 0 || index >= this.count) {
	            let num = this.count - 1;
	            console.log("Index out of range in LootBundle.GetPrefabAtIndex() with index: " + index + " when max index allowed is " + num);
	            index = 0;
	        }
	        if (index < this.prefabLoot.length) {
	            return this.prefabLoot[index];
	        }
	        return this.instanceLoot[index - this.prefabLoot.length].prefabName;
	    }
	    getItemLevelSumOfLoot() {
	        let num = 0;
	        let value;
	        for (let item of this.prefabLoot) {
	            value = PropsCfg.get(item);
	            if (value) {
	                num += value.itemLevel;
	            }
	        }
	        for (let item2 of this.instanceLoot) {
	            value = PropsCfg.get(item2.prefabName);
	            if (value) {
	                num += value.itemLevel;
	            }
	        }
	        return num;
	    }
	    clear() {
	        this.prefabLoot.length = 0;
	        this.instanceLoot.length = 0;
	    }
	    tryDrop_CheckFreeCells() {
	        let text;
	        let saveData_DrawnObject = null;
	        if (this.hasPrefabLoot) {
	            text = this.prefabLoot[0];
	            if (Thing.shouldSpawnIntoLootOrb(text)) {
	                return null;
	            }
	            if (Glob.cellLayer.boardTooFullFor(text)) {
	                return null;
	            }
	        }
	        else {
	            if (!this.hasInstanceLoot) {
	                return null;
	            }
	            saveData_DrawnObject = this.instanceLoot[0];
	            if (Thing.shouldSpawnIntoLootOrb(saveData_DrawnObject.prefabName)) {
	                return null;
	            }
	            if (Glob.cellLayer.boardTooFullFor(saveData_DrawnObject.prefabName)) {
	                return null;
	            }
	        }
	        if (text) {
	            ArrayUtil.remove(this.prefabLoot, text);
	            return Thing.create(text);
	        }
	        if (saveData_DrawnObject) {
	            ArrayUtil.remove(this.instanceLoot, saveData_DrawnObject);
	            return Thing.loadFromSave_Entity(saveData_DrawnObject, true);
	        }
	        return null;
	    }
	    dropPrefabLoot() {
	        let text = null;
	        if (this.hasPrefabLoot) {
	            text = this.prefabLoot[0];
	            if (text) {
	                ArrayUtil.remove(this.prefabLoot, text);
	                return Thing.create(text);
	            }
	            return null;
	        }
	        return null;
	    }
	    getSellValueOfLoot() {
	        let num = 0;
	        for (let item of this.prefabLoot) {
	            let vo = PropsCfg.get(item);
	            if (vo) {
	                num = (vo.categories == null || !(vo.categories.indexOf(CategoryID.Coins) >= 0)) ? (num + vo.getSellValue(Glob.inAnEventArea)) : (num + vo.strength);
	            }
	        }
	        for (let item of this.instanceLoot) {
	            if (item != null && item.definition != null) {
	                num = (item.definition.categories == null || !(item.definition.categories.indexOf(CategoryID.Coins) >= 0)) ? (num + item.definition.getSellValue(Glob.inAnEventArea)) : (num + item.definition.strength);
	            }
	        }
	        return num;
	    }
	    checkContentsFor_Tier2Nest_AndGetDef() {
	        for (let item of this.prefabLoot) {
	            let vo = PropsCfg.get(item);
	            if (vo && vo.hasCategory(CategoryID.Nests) && vo.itemLevel == 6) {
	                return vo;
	            }
	        }
	        for (let item of this.instanceLoot) {
	            if (item.definition.hasCategory(CategoryID.Nests) && item.definition.itemLevel == 6) {
	                return item.definition;
	            }
	        }
	        return null;
	    }
	    checkContentsFor_Tier2Nest() {
	        return this.checkContentsFor_Tier2Nest_AndGetDef() != null;
	    }
	    checkContentsFor_Category_AndGetDef(category) {
	        for (let item of this.prefabLoot) {
	            let vo = PropsCfg.get(item);
	            if (vo && vo.hasCategory(category)) {
	                return vo;
	            }
	        }
	        for (let item of this.instanceLoot) {
	            if (item.definition.hasCategory(category)) {
	                return item.definition;
	            }
	        }
	        return null;
	    }
	    checkContentsFor_Category(category) {
	        return this.checkContentsFor_Category_AndGetDef(category) != null;
	    }
	    getSaveDataObject() {
	        let saveData_LootBundle = new SL_LootBundle();
	        saveData_LootBundle.lootPrefabNames = this.getLootListPrefabNames();
	        saveData_LootBundle.instanceLoot = this.instanceLoot;
	        return saveData_LootBundle;
	    }
	    initFromSaveData(data) {
	        let lootPrefabNames = data.lootPrefabNames;
	        for (let item of lootPrefabNames) {
	            this.addLoot(item);
	        }
	        this.instanceLoot = data.instanceLoot;
	    }
	    getLootListPrefabNames() {
	        let list = this.prefabLoot.concat();
	        return list;
	    }
	}

	class Component_RenderQueueModifier extends Laya.Script3D {
	    static GetComponentsInChildrenRenderer() {
	        return [];
	    }
	    Init(widgetToSortRelativeTo, renderModifier) {
	        this.m_relativeWidget = widgetToSortRelativeTo;
	        this.m_renderModifierType = renderModifier;
	    }
	    Start() {
	        this._renderers = Component_RenderQueueModifier.GetComponentsInChildrenRenderer();
	    }
	    FixedUpdate() {
	        if (this.owner == null || this.m_relativeWidget == null) {
	            return;
	        }
	        let renderQueue = 0;
	        renderQueue += ((this.m_renderModifierType == RenderQueueModifierID.FRONT) ? 1 : (-1));
	        if (this._lastQueue == renderQueue) {
	            return;
	        }
	        this._lastQueue = renderQueue;
	        let renderers = this._renderers;
	        renderers.forEach(renderer => {
	            if (renderer != null) {
	                renderer.material.renderQueue = this._lastQueue;
	            }
	        });
	    }
	}

	class FloatingTextManager extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.chainTextPrefabs = [
	            Text3DMgr.ins().create(),
	            Text3DMgr.ins().create(),
	            Text3DMgr.ins().create(),
	            Text3DMgr.ins().create(),
	            Text3DMgr.ins().create(),
	        ];
	        this.pointsAmountPrefabs = [
	            Text3DMgr.ins().create(),
	        ];
	        this.currencyFloatingTextPrefabNames = {
	            [ECurrency.Stone]: "FloatingTextPro_Stone1",
	            [ECurrency.Gold]: "FloatingTextPro_Emblems1",
	            [ECurrency.Energy]: "FloatingTextPro_Energy1",
	            [ECurrency.Diamond]: "FloatingTextPro_Premium1",
	        };
	    }
	    static getCurrencyFloatingText(currencyID) {
	        if (!FloatingTextManager.ins().currencyFloatingTextPrefabNames[currencyID]) {
	            console.error("Could not find a floating text prefab for currency ID: " + currencyID);
	            return null;
	        }
	        return Text3DMgr.ins().create();
	    }
	}

	class FloatingText extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.k_secondsToLive = 2;
	        this.k_pointsScale = 0.85;
	        this.k_fadeOverSeconds = 0.15;
	        this.k_maxPointsPossible = 525000;
	        this.k_maxScaleIncreasePointsText = 2;
	        this._UITarget = null;
	        this.m_initialized = false;
	        this._callback = null;
	        this.m_lifetime = new Clock();
	        this.m_startedScaleOut = false;
	        this._additionalTravelTime = 0;
	    }
	    static Random(min, max) {
	        let num = max - min;
	        return Math.random() * num + min;
	    }
	    static RandomInt(min, max) {
	        let num = FloatingText.Random(min, max + 0.9999);
	        if (num > max) {
	            console.error("Error in RandomInt()");
	            num = max;
	        }
	        return num;
	    }
	    static log(v, n) {
	        return Math.log(v) / Math.log(n);
	    }
	    static CreateDragonPowerUp2(dragonPowerOwner, overrideAmount) {
	        if (!(dragonPowerOwner == null) && dragonPowerOwner.verify()) {
	            let num = FloatingText.log(overrideAmount, 3) / FloatingText.k_log3MaxDragonPower * FloatingText.k_maxScaleIncreaseDragonPower;
	            let growToScale = 1 + num;
	            FloatingText.Create("+" + overrideAmount, TextTypeID.Text, PrefMgr.get("FloatingTextPro_DragonPower_Up"), dragonPowerOwner.transform.position, 1, 0.1, 0, growToScale);
	        }
	    }
	    static TotalSeconds() {
	        return Math.floor(TimeMgr.ins().getTime() * 0.001);
	    }
	    static GetPositionForText(t3, relativeToObj, appearLocation) {
	        let totalBounds = relativeToObj.bounds;
	        let totalBounds2 = t3.meshRenderer.bounds;
	        switch (appearLocation) {
	            case TextAppearLocationID.Above: {
	                let max2 = totalBounds.getMax();
	                let y3 = max2.y;
	                let size4 = totalBounds2.getExtent();
	                let y4 = y3 + size4.y;
	                return new Laya.Vector3(relativeToObj.x, y4, relativeToObj.z);
	            }
	            case TextAppearLocationID.Below: {
	                let min2 = totalBounds.getMin();
	                let y = min2.y;
	                let size3 = totalBounds2.getExtent();
	                let y2 = y - size3.y;
	                return new Laya.Vector3(relativeToObj.x, y2, relativeToObj.z);
	            }
	            case TextAppearLocationID.Right: {
	                let max = totalBounds.getMax();
	                let x3 = max.x;
	                let size2 = totalBounds2.getExtent();
	                let x4 = x3 + size2.x;
	                return new Laya.Vector3(x4, relativeToObj.y, relativeToObj.z);
	            }
	            case TextAppearLocationID.Left: {
	                let min = totalBounds.getMin();
	                let x = min.x;
	                let size = totalBounds2.getExtent();
	                let x2 = x - size.x;
	                return new Laya.Vector3(x2, relativeToObj.y, relativeToObj.z);
	            }
	            default:
	                return new Laya.Vector3(relativeToObj.x, relativeToObj.y, relativeToObj.z);
	        }
	    }
	    static Create(textOrLocKey, textType, textPrefab, position, riseYDistance, randomXMovement, rotationRandomDegrees, growToScale) {
	        let text3D = Text3DMgr.ins().create();
	        text3D.transform.position = position;
	        Glob.scene["scene3D"].addChild(text3D);
	        return FloatingText.FinishCreation(text3D, textOrLocKey, textType, position, riseYDistance, randomXMovement, rotationRandomDegrees, growToScale, true);
	    }
	    static CreateOverheadSpeech(text, textPrefab, position, attachTo) {
	        let floatingText = FloatingText.Create(text, TextTypeID.Text, textPrefab, position, 0.25, 0.1, 2, 1);
	        attachTo.addChild(floatingText.owner);
	    }
	    static CreateChainText(textLocKey, chainCount, mostRecentMatchLeaderPosition) {
	        let num = chainCount;
	        if (num >= FloatingTextManager.ins().chainTextPrefabs.length) {
	            num = FloatingTextManager.ins().chainTextPrefabs.length - 1;
	        }
	        FloatingText.Create(textLocKey, TextTypeID.LocKey, FloatingTextManager.ins().chainTextPrefabs[num], mostRecentMatchLeaderPosition, 1.5, 0.2, 22, 1.2);
	    }
	    static CreateCelebrationText(positionOfThingToCelebrate) {
	        let textOrLocKey = FloatingText.K_CELEBRATION_TEXT_KEYS[FloatingText.RandomInt(0, FloatingText.K_CELEBRATION_TEXT_KEYS.length - 1)];
	        let textPrefab = FloatingTextManager.ins().chainTextPrefabs[FloatingText.RandomInt(0, FloatingTextManager.ins().chainTextPrefabs.length - 1)];
	        FloatingText.Create(textOrLocKey, TextTypeID.LocKey, textPrefab, positionOfThingToCelebrate, 1.5, 0.2, 22, 1.2);
	    }
	    static CreateDragonPowerUp(dragonPowerOwner) {
	        if (!(dragonPowerOwner == null) && dragonPowerOwner.verify()) {
	            FloatingText.CreateDragonPowerUp2(dragonPowerOwner, dragonPowerOwner.cfg.dragonPower);
	        }
	    }
	    static CreateDragonPowerUpAtLocation(locationToShow, deltaToShow) {
	        let num = this.log(deltaToShow, 3) / this.k_log3MaxDragonPower * this.k_maxScaleIncreaseDragonPower;
	        let growToScale = 1 + num;
	        this.Create("+" + deltaToShow, TextTypeID.Text, Text3DMgr.ins().create(), locationToShow, 1, 0.1, 0, growToScale);
	    }
	    static CreateEventCurrencyAtLocation(locationToShow, deltaToShow) {
	        let floatingText = FloatingText.Create("+" + deltaToShow, TextTypeID.Text, PrefMgr.get("FloatingTextPro_EngagementEventCurrency"), locationToShow, 1, 0.1, 0, 1.5);
	        return floatingText;
	    }
	    static CreateCurrencyFloatingText(text, currencyID, position, itemLevelForScale) {
	        let growToScale = 1 + (itemLevelForScale - 1) * 0.2;
	        FloatingText.Create(text, TextTypeID.Text, FloatingTextManager.getCurrencyFloatingText(currencyID), position, 0.5, 0.1, 6, growToScale);
	    }
	    static CreateBonusPointsText(text, points, prefab, position, pointsItemLevel) {
	        let num = FloatingText.log(points, 3) / this.k_log3MaxPoints * 2;
	        let growToScale = 1 + num;
	        FloatingText.Create(text, TextTypeID.Text, prefab, position, 0.5, 0.1, 6, growToScale);
	    }
	    static MuteFor(time) {
	        this._muteUntil = FloatingText.TotalSeconds() + time;
	    }
	    static CreateObjectMatchedPointsText(points, prefab, overObject) {
	        if (this._muteUntil <= FloatingText.TotalSeconds()) {
	            let num = FloatingText.log(points, 3) / FloatingText.k_log3MaxPoints * 2;
	            let num2 = 1 + num;
	            num2 *= 0.85;
	            FloatingText.Create("+" + points, TextTypeID.Text, prefab, overObject.positionTopCenter, FloatingText.Random(0.5, 0.5 * num2), 0.5 * num2, 6, num2);
	        }
	    }
	    static CreateDeathHealedPointsText(points, prefab, position) {
	        FloatingText.Create("+" + points, TextTypeID.Text, prefab, position, FloatingText.Random(0.5, 1), 0.5, 6, 1);
	    }
	    static CreateInfoText(text, infoColor, showOver) {
	        return FloatingText.CreateInfoText3(text, infoColor, showOver, false, false, false, false, TextAppearLocationID.Above);
	    }
	    static CreateInfoText2(text, infoColor, showOver, textAppearLocation) {
	        return FloatingText.CreateInfoText3(text, infoColor, showOver, false, false, false, false, textAppearLocation);
	    }
	    static CreateInfoText3(text, infoColor, showOver, parentToObject, moveX, moveY, rotate, textAppearLocation) {
	        let t3 = FloatingText.CreateGameObject(infoColor);
	        Glob.scene["scene3D"].addChild(t3);
	        t3.label = text;
	        let positionForText = FloatingText.GetPositionForText(t3, showOver, textAppearLocation);
	        if (parentToObject) {
	            showOver.localPositionAnimTarget.addChild(t3);
	        }
	        let randomXMovement = moveX ? 0.5 : 0;
	        let riseYDistance = moveY ? FloatingText.Random(0.5, 1) : 0.2;
	        let rotationRandomDegrees = rotate ? 6 : 0;
	        return FloatingText.FinishCreation(t3, text, TextTypeID.Text, positionForText, riseYDistance, randomXMovement, rotationRandomDegrees, 1, false);
	    }
	    static FinishCreation(text3D, textOrLocKey, textType, position, riseYDistance, randomXMovement, rotationRandomDegrees, growToScale, putBottomAtSpecifiedPosition) {
	        if (text3D == null) {
	            console.error("Could not instantiate Text from FloatingText::Create(): " + textOrLocKey);
	            return null;
	        }
	        text3D.transform.position = position;
	        let num = 0;
	        if (putBottomAtSpecifiedPosition) {
	            let extent = text3D.meshRenderer.bounds.getExtent();
	            num = extent.y;
	        }
	        let position2 = text3D.transform.position;
	        text3D.transform.position = new Laya.Vector3(position2.x, position2.y + num, position2.z);
	        text3D.label = textOrLocKey;
	        let floatingText = text3D.addComponent(FloatingText);
	        floatingText.Init(riseYDistance, randomXMovement, rotationRandomDegrees, growToScale);
	        return floatingText;
	    }
	    static CreateGameObject(infoColor) {
	        return Text3DMgr.ins().createByColor(infoColor);
	    }
	    FlyToUIElement(uiTarget, time) {
	        this._UITarget = uiTarget;
	        this.m_lifetime.addTime(time);
	        this._additionalTravelTime = time;
	        return this;
	    }
	    Init(riseYDistance, randomXMovement, rotationRandomDegrees, growToScale) {
	        this.m_lifetime = new Clock(2);
	        this.owner.transform.localScale = new Laya.Vector3(0, 0, 1);
	        Tween.ScaleTo(this.owner, "Floating Text - Scale Up", 0.5, growToScale, growToScale, LoopType.none);
	        Tween.MoveBy3(this.owner, "Floating Text - Rise", 2, FloatingText.Random(0 - randomXMovement, randomXMovement), riseYDistance, LoopType.none, EaseType.easeOutQuint);
	        this.m_initialized = true;
	    }
	    Update_MoveToPosition() {
	        let worldPositionOfGUI = new Laya.Vector3();
	        let a = new Laya.Vector2(worldPositionOfGUI.x, worldPositionOfGUI.y);
	        let orgP = this.owner.transform.position;
	        let newP = new Laya.Vector3((a.x - orgP.x) * 10 * Glob.deltaTime, (a.y - orgP.y) * 10 * Glob.deltaTime, 0);
	        Laya.Vector3.add(orgP, newP, newP);
	        this.owner.transform.position = newP;
	    }
	    Update_ScaleOut() {
	        if (!this.m_startedScaleOut) {
	            this.m_startedScaleOut = true;
	            Tween.ScaleTo(this.owner, "Floating Text - Scale Out", 0.15, 1, 0, LoopType.none);
	        }
	    }
	    DestroyFloatingText() {
	        this._callback && this._callback.run();
	        let text3D = this.owner;
	        iTween.Stop3(text3D);
	        let floatingText = this.owner.getComponent(FloatingText);
	        floatingText.destroy();
	        text3D.recover();
	    }
	    onUpdate() {
	        if (!this.m_initialized) {
	            console.error("Somehow floating text was made without being initialized.");
	            this.destroy();
	            return;
	        }
	        this.m_lifetime.update(Glob.deltaTime);
	        if (this.m_lifetime.timeLeft <= this._additionalTravelTime && this._UITarget != null) {
	            this.Update_MoveToPosition();
	        }
	        if (this.m_lifetime.timeLeft <= 0.15) {
	            this.Update_ScaleOut();
	        }
	        if (this.m_lifetime.done) {
	            this.DestroyFloatingText();
	        }
	    }
	    OverUI(value) {
	        this.owner.transform.localPosition = new Laya.Vector3();
	        this.owner.meshRenderer.material.renderQueue;
	        let component_RenderQueueModifier = this.owner.addComponent(Component_RenderQueueModifier);
	        component_RenderQueueModifier.Init(value, RenderQueueModifierID.FRONT);
	        return this;
	    }
	    AddCompleteCallback(callback) {
	        this._callback = callback;
	        return this;
	    }
	    Reparent(parent) {
	        parent.addChild(this.owner);
	        this.owner.transform.localPosition = new Laya.Vector3();
	        return this;
	    }
	}
	FloatingText.k_maxDragonPower = 4200;
	FloatingText.k_log3MaxPoints = FloatingText.log(525000, 3);
	FloatingText.k_log3MaxDragonPower = FloatingText.log(FloatingText.k_maxDragonPower, 3);
	FloatingText.k_maxScaleIncreaseDragonPower = 3;
	FloatingText._muteUntil = 0;
	FloatingText.K_CELEBRATION_TEXT_KEYS = [
	    "Misc/Combo_3B",
	    "Misc/Combo_3C",
	    "Misc/Combo_4B",
	    "Misc/Combo_4C",
	    "Misc/Combo_5B",
	    "Misc/Combo_6B",
	    "Misc/Combo_8A",
	    "Misc/Combo_8C",
	];

	class BaseProxy extends MsgCenter {
	    constructor(mgr) {
	        super();
	        if (mgr)
	            this.socket = mgr;
	        else
	            this.socket = BaseProxy.defalutSocket;
	    }
	    reg(cmd, hand, thisObj) {
	        this.socket.regHand(cmd, hand, thisObj);
	    }
	    send(cmd, writer) {
	        if (!this.socket.connected) {
	            return;
	        }
	        BaseProxy.cmsg.cmd = cmd;
	        BaseProxy.cmsg.body = writer.finish();
	        var w = com.proto.CMsg.encode(BaseProxy.cmsg);
	        this.socket.send(w.finish());
	    }
	}
	BaseProxy.cmsg = com.proto.CMsg.create();

	class SL_RechargeDiamonds {
	    constructor() {
	        this.id = SaveLoadConst.BUYDIAMONDS;
	        this.gearIds = [];
	        this.monthCard = [];
	        this.hasReceivedId = [];
	        this.giftData = [];
	        this.orderNumber = 0;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", SyncObj.serializeFromArray(this.gearIds));
	        obj.setValue("1", SyncObj.serializeFromArray(this.monthCard));
	        obj.setValue("2", SyncObj.serializeFromArray(this.hasReceivedId));
	        obj.setValue("3", SyncObj.serializeFromArray(this.giftData));
	        obj.setValue("4", this.orderNumber);
	        obj.setValue("5", this.isBuyOneGift);
	        return obj;
	    }
	    import(data) {
	        this.gearIds = SyncObj.deserializeToArray(data.getValue("0"));
	        this.monthCard = SyncObj.deserializeToArray(data.getValue("1"));
	        this.hasReceivedId = SyncObj.deserializeToArray(data.getValue("2"));
	        this.giftData = SyncObj.deserializeToArray(data.getValue("3"));
	        this.orderNumber = data.getValue("4");
	        this.isBuyOneGift = data.getValue("5");
	    }
	    static save() {
	        SaveLoad.save(SL_RechargeDiamonds.getSaveData());
	    }
	    static getSaveData() {
	        let obj = new SL_RechargeDiamonds();
	        obj.gearIds = BuyDiamondsMgr.buyIds.concat();
	        obj.monthCard = BuyDiamondsMgr.monCard.concat();
	        obj.hasReceivedId = BuyDiamondsMgr.hasWardIds.concat();
	        obj.giftData = BuyDiamondsMgr.giftArr.concat();
	        obj.orderNumber = BuyDiamondsMgr.orderNumber;
	        obj.isBuyOneGift = BuyDiamondsMgr.isBuyOneGift;
	        return obj;
	    }
	    static generateNewGame() {
	        return SL_RechargeDiamonds.getSaveData();
	    }
	}

	class PayShopVo {
	    constructor(key, cfg) {
	        this.cid = parseInt(key);
	        this.name = cfg.name;
	        this.type = cfg.type ? parseInt(cfg.type) : 0;
	        this.award = PayShopVo.setAwardFormat(cfg.award);
	        this.extraGift = PayShopVo.setAwardFormat(cfg.extraGift);
	        this.price = cfg.price ? cfg.price / 100 : 0;
	        this.des = cfg.desc;
	        this.icon = cfg.icon;
	        this.limitCount = cfg.limitedCount ? parseInt(cfg.limitedCount) : 0;
	        this.limitType = cfg.limitedType ? parseInt(cfg.limitedType) : 1;
	        this.valueTxt = cfg.value;
	        this.standard = Number(cfg.standard);
	        this.additional = Number(cfg.additional);
	    }
	    static setAwardFormat(data) {
	        if (!data)
	            return;
	        let arr = [];
	        let srt_Arr = data.split("_");
	        for (let i = 0; i < srt_Arr.length; i++) {
	            let vo = srt_Arr[i];
	            let vo_Arr = vo.split(",");
	            if (vo_Arr.length <= 1) {
	                srt_Arr[i] = "3," + vo_Arr + ",1";
	            }
	            else if (vo_Arr.length <= 2) {
	                if (Number(vo_Arr[0]) >= 10000) {
	                    srt_Arr[i] = "3," + vo;
	                }
	                else {
	                    srt_Arr[i] = vo + ",1";
	                }
	            }
	            arr.push(srt_Arr[i]);
	        }
	        let str = arr.join("_");
	        return str;
	    }
	}

	class PaySHopCfg {
	    static getPayShopCfg() {
	        if (!this.cfg) {
	            this.cfg = {};
	            let data = PConfig.getCfg("PayShop.json");
	            for (let key in data) {
	                this.cfg[key] = new PayShopVo(key, data[key]);
	            }
	        }
	        return this.cfg;
	    }
	    static getDataByType(type) {
	        let _cfg = this.getPayShopCfg();
	        let arr = [];
	        if (_cfg) {
	            for (let key in _cfg) {
	                if (type == _cfg[key].type) {
	                    arr.push(_cfg[key]);
	                }
	            }
	        }
	        return arr;
	    }
	    static getAwardById(id) {
	        let vo = this.cfg[id];
	        if (vo) {
	            let str;
	            if (vo.award && vo.extraGift) {
	                str = vo.award + "_" + vo.extraGift;
	            }
	            else {
	                if (vo.award && !vo.extraGift) {
	                    str = vo.award;
	                }
	                else {
	                    str = vo.extraGift;
	                }
	            }
	            return str;
	        }
	        return "";
	    }
	    static getCommonAward(id) {
	        let data = this.cfg[id];
	        return data ? data.award : "";
	    }
	    static getRechargeType(id) {
	        let data = this.cfg[id];
	        return data ? data.type : null;
	    }
	    static getRechargeName(id) {
	        return this.cfg[id] ? this.cfg[id].name : "";
	    }
	    static getRechargeIcon(id) {
	        return this.cfg[id] ? this.cfg[id].icon : "";
	    }
	    static getRechargePrice(id) {
	        let data = this.cfg[id];
	        return data ? data.price : null;
	    }
	    static getGoodsNameById(id) {
	        return this.cfg[id] ? this.cfg[id].name : "";
	    }
	    static getCfg(id) {
	        let data = this.cfg[id];
	        return data ? data : null;
	    }
	}

	class SL_FirstCharge {
	    constructor() {
	        this.id = SaveLoadConst.FIRSTCHARGE;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.isBuy);
	        obj.setValue("1", this.isRecived);
	        return obj;
	    }
	    import(data) {
	        this.isBuy = data.getValue("0");
	        this.isRecived = data.getValue("1");
	    }
	    static save() {
	        SaveLoad.save(SL_FirstCharge.getFirstChargeData());
	    }
	    static getFirstChargeData() {
	        let obj = new SL_FirstCharge();
	        obj.isRecived = FirstChargeMgr.getReceivedState();
	        obj.isBuy = FirstChargeMgr.getBuyState();
	        return obj;
	    }
	    static generateNewGame() {
	        return SL_FirstCharge.getFirstChargeData();
	    }
	}

	class UI_NormalTxtTips extends ui.data.module.tips.NormalTxtTipsUI {
	    constructor() {
	        super();
	    }
	    static get ins() {
	        if (!this._ins) {
	            this._ins = new UI_NormalTxtTips();
	        }
	        return this._ins;
	    }
	    setValue(msg) {
	        this.desLb.text = msg;
	        let textH = this.desLb.textField.textHeight + 30;
	        let w = this.desLb.textField.textWidth;
	        let width_ = w + 35;
	        this.desLb.height = textH;
	        this.tipsBg.size(width_, textH);
	        this.size(width_, textH);
	    }
	    showPanel() {
	        LayerMgr.ins().uiTop.addChild(this);
	    }
	    hidePanel() {
	        LayerMgr.ins().uiTop.removeChild(this);
	    }
	    setPos(x, y) {
	        this.x = 0;
	        this.y = 0;
	        let uiX = this.x + x;
	        let uiY = this.y + y;
	        uiX = uiX < 0 ? 0 : uiX + 5;
	        uiY = uiY < 0 ? 0 : uiY + 5;
	        let maxX = Laya.stage.width - this.width;
	        let maxY = Laya.stage.height - this.height;
	        uiX = uiX > maxX ? maxX : uiX;
	        uiY = uiY > maxY ? maxY : uiY;
	        this.pos(uiX, uiY, true);
	    }
	}

	class PropItemMgr extends Singleton {
	    getTypeItem(type, isShowTips = false) {
	        let proType = Number(type);
	        if (proType == 1) {
	            this.img = new Laya.Image();
	            this.img.skin = "res/comp/zjm_zhuanshi.png";
	            this.tips = LanCfg.get("20030306");
	        }
	        else if (proType == 2) {
	            this.img = new Laya.Image();
	            this.img.skin = "res/comp/btn_tili.png";
	            this.tips = LanCfg.get("20020022");
	            ;
	        }
	        if (isShowTips) {
	            this.img.on(Laya.Event.MOUSE_DOWN, this, this.showTips);
	        }
	        else {
	            this.img.off(Laya.Event.MOUSE_DOWN, this, this.showTips);
	        }
	        return this.img;
	    }
	    showTips(e) {
	        let uiX = e.stageX;
	        let uiY = e.stageY;
	        UI_NormalTxtTips.ins.setPos(uiX, uiY);
	        UI_NormalTxtTips.ins.setValue(this.tips);
	        UI_NormalTxtTips.ins.showPanel();
	        this.img.on(Laya.Event.MOUSE_UP, this, this.removeTips);
	        this.img.on(Laya.Event.MOUSE_OUT, this, this.removeTips);
	    }
	    removeTips() {
	        UI_NormalTxtTips.ins.hidePanel();
	        this.img.off(Laya.Event.MOUSE_UP, this, this.removeTips);
	        this.img.off(Laya.Event.MOUSE_OUT, this, this.removeTips);
	    }
	    static popFloatMsg(data) {
	        let giftData = data;
	        if (giftData) {
	            let giftArr = giftData.split("_");
	            let awardStr = "";
	            let time = 100;
	            for (let i = 0; i < giftArr.length; i++) {
	                let msg = "";
	                let vo = giftArr[i].split(",");
	                let id = Number(vo[1]);
	                let type = Number(vo[0]);
	                let num = Number(vo[2]);
	                let cfg;
	                if (type == 1) {
	                    awardStr = StringUtil.formatNum(vo[1]) + LanCfg.get("20030306");
	                }
	                else if (type == 2) {
	                    awardStr = StringUtil.formatNum(vo[1]) + LanCfg.get("20020022");
	                }
	                else {
	                    cfg = PropsCfg.get(id);
	                    let modelName = cfg ? LanCfg.get(cfg.name) : "";
	                    awardStr = modelName + "x" + StringUtil.formatNum(vo[2]);
	                }
	                msg = StringUtil.format(LanCfg.get("20090001"), awardStr);
	                if (i > 0) {
	                    time += 1800;
	                }
	                if (Glob.inHome) {
	                    FloatMsgUtil.start(msg);
	                    if (type != 1 && type != 2) {
	                        for (let i = 0; i < num; i++) {
	                            let searchCenterOverride = new Laya.Vector3(0, 0, 0);
	                            let drawnObject = Thing.createInFreeCell(id, "ParticleRoot_ShopBuyImpact", true, true, true, searchCenterOverride, 0.5);
	                            FloatingText.CreateInfoText2("+" + cfg.name + "!", InfoTextColorID.Green, drawnObject, TextAppearLocationID.Above);
	                            CameraMgr.setFollowTarget(drawnObject, true);
	                        }
	                    }
	                    else if (type == 2) {
	                        CurrencyMgr.ins().credit(ECurrency.Energy, id, true);
	                    }
	                }
	                else {
	                    if (type != 1 && type != 2) {
	                        for (let i = 0; i < num; i++) {
	                            SaveLoad.AddItemToSavedBringHomeRewards(id);
	                        }
	                    }
	                    else if (type == 2) {
	                        CurrencyMgr.ins().credit(ECurrency.Energy, id, true);
	                    }
	                }
	            }
	        }
	    }
	}

	class FirstChargeMgr extends Singleton {
	    static getCfg() {
	        let data = PaySHopCfg.getDataByType(1);
	        return data;
	    }
	    static getFirstGift() {
	        let cfg = this.getCfg()[0];
	        return cfg;
	    }
	    static getAwardData() {
	        let data = this.getCfg()[0];
	        let str = data.extraGift.split("_");
	        return str;
	    }
	    static init() {
	        let slObj = new SL_FirstCharge();
	        if (SaveLoad.has(SaveLoadConst.FIRSTCHARGE)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveFirstCharge(slObj);
	        }
	        this.bought = slObj.isBuy;
	        this.isCanReceived = slObj.isRecived;
	    }
	    static saveFirstCharge(data) {
	        data.isRecived = false;
	        data.isBuy = false;
	        SaveLoad.save(data);
	    }
	    static isBuyGift(flag) {
	        this.bought = flag;
	        SL_FirstCharge.save();
	        MsgCenter.notify(MsgConst.FIRSTCHARGE_HASBUY);
	    }
	    static getBuyState() {
	        return this.bought;
	    }
	    static isGetAward(flag, getNum) {
	        this.isCanReceived = flag;
	        SL_FirstCharge.save();
	        CurrencyMgr.ins().credit(ECurrency.Diamond, getNum);
	        ApiMgr.addYbRecord(getNum, LogEarnType.First);
	        let awardStr = PaySHopCfg.getAwardById(1);
	        PropItemMgr.popFloatMsg(awardStr);
	        MsgCenter.notify(MsgConst.FIRSTCHARG_GETAWARD);
	    }
	    static getReceivedState() {
	        return this.isCanReceived;
	    }
	}
	FirstChargeMgr.bought = false;
	FirstChargeMgr.isCanReceived = false;

	var GoalChainID;
	(function (GoalChainID) {
	    GoalChainID[GoalChainID["NONE"] = -1] = "NONE";
	    GoalChainID[GoalChainID["A"] = 0] = "A";
	    GoalChainID[GoalChainID["B"] = 1] = "B";
	    GoalChainID[GoalChainID["C"] = 2] = "C";
	})(GoalChainID || (GoalChainID = {}));
	var FogGroupID;
	(function (FogGroupID) {
	    FogGroupID[FogGroupID["NONE"] = 0] = "NONE";
	    FogGroupID[FogGroupID["A"] = 1] = "A";
	    FogGroupID[FogGroupID["B"] = 2] = "B";
	    FogGroupID[FogGroupID["C"] = 3] = "C";
	    FogGroupID[FogGroupID["D"] = 4] = "D";
	    FogGroupID[FogGroupID["E"] = 5] = "E";
	    FogGroupID[FogGroupID["F"] = 6] = "F";
	    FogGroupID[FogGroupID["G"] = 7] = "G";
	    FogGroupID[FogGroupID["H"] = 8] = "H";
	    FogGroupID[FogGroupID["I"] = 9] = "I";
	    FogGroupID[FogGroupID["J"] = 10] = "J";
	    FogGroupID[FogGroupID["K"] = 11] = "K";
	    FogGroupID[FogGroupID["L"] = 12] = "L";
	    FogGroupID[FogGroupID["M"] = 13] = "M";
	    FogGroupID[FogGroupID["N"] = 14] = "N";
	    FogGroupID[FogGroupID["O"] = 15] = "O";
	    FogGroupID[FogGroupID["P"] = 16] = "P";
	    FogGroupID[FogGroupID["Q"] = 17] = "Q";
	    FogGroupID[FogGroupID["R"] = 18] = "R";
	    FogGroupID[FogGroupID["S"] = 19] = "S";
	    FogGroupID[FogGroupID["T"] = 20] = "T";
	    FogGroupID[FogGroupID["U"] = 21] = "U";
	    FogGroupID[FogGroupID["V"] = 22] = "V";
	    FogGroupID[FogGroupID["W"] = 23] = "W";
	    FogGroupID[FogGroupID["X"] = 24] = "X";
	    FogGroupID[FogGroupID["Y"] = 25] = "Y";
	    FogGroupID[FogGroupID["Z"] = 26] = "Z";
	    FogGroupID[FogGroupID["A2"] = 27] = "A2";
	    FogGroupID[FogGroupID["B2"] = 28] = "B2";
	    FogGroupID[FogGroupID["C2"] = 29] = "C2";
	    FogGroupID[FogGroupID["D2"] = 30] = "D2";
	    FogGroupID[FogGroupID["E2"] = 31] = "E2";
	    FogGroupID[FogGroupID["F2"] = 32] = "F2";
	    FogGroupID[FogGroupID["G2"] = 33] = "G2";
	    FogGroupID[FogGroupID["H2"] = 34] = "H2";
	    FogGroupID[FogGroupID["I2"] = 35] = "I2";
	    FogGroupID[FogGroupID["J2"] = 36] = "J2";
	    FogGroupID[FogGroupID["K2"] = 37] = "K2";
	    FogGroupID[FogGroupID["L2"] = 38] = "L2";
	    FogGroupID[FogGroupID["M2"] = 39] = "M2";
	    FogGroupID[FogGroupID["N2"] = 40] = "N2";
	    FogGroupID[FogGroupID["O2"] = 41] = "O2";
	    FogGroupID[FogGroupID["P2"] = 42] = "P2";
	    FogGroupID[FogGroupID["Q2"] = 43] = "Q2";
	    FogGroupID[FogGroupID["R2"] = 44] = "R2";
	    FogGroupID[FogGroupID["S2"] = 45] = "S2";
	    FogGroupID[FogGroupID["T2"] = 46] = "T2";
	    FogGroupID[FogGroupID["U2"] = 47] = "U2";
	    FogGroupID[FogGroupID["V2"] = 48] = "V2";
	    FogGroupID[FogGroupID["W2"] = 49] = "W2";
	    FogGroupID[FogGroupID["X2"] = 50] = "X2";
	    FogGroupID[FogGroupID["Y2"] = 51] = "Y2";
	    FogGroupID[FogGroupID["Z2"] = 52] = "Z2";
	    FogGroupID[FogGroupID["A3"] = 53] = "A3";
	    FogGroupID[FogGroupID["B3"] = 54] = "B3";
	    FogGroupID[FogGroupID["C3"] = 55] = "C3";
	    FogGroupID[FogGroupID["D3"] = 56] = "D3";
	    FogGroupID[FogGroupID["E3"] = 57] = "E3";
	    FogGroupID[FogGroupID["F3"] = 58] = "F3";
	    FogGroupID[FogGroupID["G3"] = 59] = "G3";
	    FogGroupID[FogGroupID["H3"] = 60] = "H3";
	    FogGroupID[FogGroupID["I3"] = 61] = "I3";
	    FogGroupID[FogGroupID["J3"] = 62] = "J3";
	    FogGroupID[FogGroupID["K3"] = 63] = "K3";
	    FogGroupID[FogGroupID["L3"] = 64] = "L3";
	    FogGroupID[FogGroupID["M3"] = 65] = "M3";
	    FogGroupID[FogGroupID["N3"] = 66] = "N3";
	    FogGroupID[FogGroupID["O3"] = 67] = "O3";
	    FogGroupID[FogGroupID["P3"] = 68] = "P3";
	    FogGroupID[FogGroupID["Q3"] = 69] = "Q3";
	    FogGroupID[FogGroupID["R3"] = 70] = "R3";
	    FogGroupID[FogGroupID["S3"] = 71] = "S3";
	    FogGroupID[FogGroupID["T3"] = 72] = "T3";
	    FogGroupID[FogGroupID["U3"] = 73] = "U3";
	    FogGroupID[FogGroupID["V3"] = 74] = "V3";
	    FogGroupID[FogGroupID["W3"] = 75] = "W3";
	    FogGroupID[FogGroupID["X3"] = 76] = "X3";
	    FogGroupID[FogGroupID["Y3"] = 77] = "Y3";
	    FogGroupID[FogGroupID["Z3"] = 78] = "Z3";
	    FogGroupID[FogGroupID["Key_A"] = 79] = "Key_A";
	    FogGroupID[FogGroupID["Key_B"] = 80] = "Key_B";
	    FogGroupID[FogGroupID["Key_C"] = 81] = "Key_C";
	    FogGroupID[FogGroupID["Key_D"] = 82] = "Key_D";
	    FogGroupID[FogGroupID["Key_E"] = 83] = "Key_E";
	    FogGroupID[FogGroupID["Key_F"] = 84] = "Key_F";
	    FogGroupID[FogGroupID["Key_G"] = 85] = "Key_G";
	    FogGroupID[FogGroupID["Key_H"] = 86] = "Key_H";
	    FogGroupID[FogGroupID["Key_I"] = 87] = "Key_I";
	    FogGroupID[FogGroupID["Key_J"] = 88] = "Key_J";
	    FogGroupID[FogGroupID["Key_K"] = 89] = "Key_K";
	    FogGroupID[FogGroupID["Key_L"] = 90] = "Key_L";
	    FogGroupID[FogGroupID["Key_M"] = 91] = "Key_M";
	    FogGroupID[FogGroupID["Key_N"] = 92] = "Key_N";
	    FogGroupID[FogGroupID["Key_O"] = 93] = "Key_O";
	})(FogGroupID || (FogGroupID = {}));
	var CloudDungeonFogGroupID;
	(function (CloudDungeonFogGroupID) {
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_A"] = 0] = "Key_A";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_B"] = 1] = "Key_B";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_C"] = 2] = "Key_C";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_D"] = 3] = "Key_D";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_E"] = 4] = "Key_E";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_F"] = 5] = "Key_F";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_G"] = 6] = "Key_G";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_H"] = 7] = "Key_H";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_I"] = 8] = "Key_I";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_J"] = 9] = "Key_J";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_K"] = 10] = "Key_K";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_L"] = 11] = "Key_L";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_M"] = 12] = "Key_M";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_N"] = 13] = "Key_N";
	    CloudDungeonFogGroupID[CloudDungeonFogGroupID["Key_O"] = 14] = "Key_O";
	})(CloudDungeonFogGroupID || (CloudDungeonFogGroupID = {}));
	var GameActionTypeID;
	(function (GameActionTypeID) {
	    GameActionTypeID[GameActionTypeID["None"] = 0] = "None";
	    GameActionTypeID[GameActionTypeID["Create"] = 1] = "Create";
	    GameActionTypeID[GameActionTypeID["Match"] = 2] = "Match";
	    GameActionTypeID[GameActionTypeID["Match5Plus"] = 3] = "Match5Plus";
	    GameActionTypeID[GameActionTypeID["Activate"] = 4] = "Activate";
	    GameActionTypeID[GameActionTypeID["DieFromTimeout"] = 5] = "DieFromTimeout";
	    GameActionTypeID[GameActionTypeID["HealLandCell"] = 6] = "HealLandCell";
	    GameActionTypeID[GameActionTypeID["HarvestFrom"] = 7] = "HarvestFrom";
	    GameActionTypeID[GameActionTypeID["DropDragonOn"] = 8] = "DropDragonOn";
	    GameActionTypeID[GameActionTypeID["HealDeadLandWithMatch"] = 9] = "HealDeadLandWithMatch";
	    GameActionTypeID[GameActionTypeID["MatchOnDeadLand"] = 10] = "MatchOnDeadLand";
	    GameActionTypeID[GameActionTypeID["KillZomblins"] = 11] = "KillZomblins";
	    GameActionTypeID[GameActionTypeID["DestroyFromNoHP"] = 12] = "DestroyFromNoHP";
	    GameActionTypeID[GameActionTypeID["HaveHealedLand"] = 13] = "HaveHealedLand";
	    GameActionTypeID[GameActionTypeID["HealAllLand"] = 14] = "HealAllLand";
	    GameActionTypeID[GameActionTypeID["Have"] = 15] = "Have";
	    GameActionTypeID[GameActionTypeID["Score"] = 16] = "Score";
	    GameActionTypeID[GameActionTypeID["DragonPower"] = 17] = "DragonPower";
	    GameActionTypeID[GameActionTypeID["PremiumLand"] = 18] = "PremiumLand";
	    GameActionTypeID[GameActionTypeID["CloudDungeon"] = 19] = "CloudDungeon";
	    GameActionTypeID[GameActionTypeID["PremiumLand2"] = 20] = "PremiumLand2";
	    GameActionTypeID[GameActionTypeID["PremiumLand3"] = 21] = "PremiumLand3";
	    GameActionTypeID[GameActionTypeID["Match5Groups"] = 22] = "Match5Groups";
	    GameActionTypeID[GameActionTypeID["MatchCombo"] = 23] = "MatchCombo";
	})(GameActionTypeID || (GameActionTypeID = {}));

	class LevelStats {
	    constructor() {
	        this.reset();
	    }
	    reset() {
	        this.mergeCount = 0;
	        this.movesCount = 0;
	        this.orderCount = 0;
	        this.comboCount = 0;
	        this.coinsEarned = 0;
	        this.gemsEarned = 0;
	        this.stonesEarned = 0;
	        this.lifeEarned = 0;
	        this.noOfTilesHealedByMerge = 0;
	        this.noOfTilesHealedByHearts = 0;
	        this.noOfTilesHealedByBoosts = 0;
	        this.noOfTilesHealedByAutomaticallyAtEnd = 0;
	        this.allTilesHealed = false;
	        this.totalDeadLandLeft = 0;
	        this.totalSuperDeadLandLeft = 0;
	        this.totalHealAmountNeededForDeadTilesAtEnd = 0;
	    }
	}

	class LevelUtils {
	    static get stats() {
	        return this.levelStats;
	    }
	    static startLevel(i_level) {
	        if (i_level != null) {
	        }
	    }
	    static endLevel(i_level, i_levelEndStatus) {
	        if (i_level != null) {
	            let i_quest1Completed = false;
	            let i_quest2Completed = false;
	            let i_quest3Completed = false;
	            let starGoals = GoalMgr.ins().StarGoals;
	            for (let item of starGoals) {
	                if (item.Complete) {
	                    if (item.chain == GoalChainID.A) {
	                        i_quest1Completed = true;
	                    }
	                    else if (item.chain == GoalChainID.B) {
	                        i_quest2Completed = true;
	                    }
	                    else if (item.chain == GoalChainID.C) {
	                        i_quest3Completed = true;
	                    }
	                }
	            }
	            if (i_level.data.isHome) {
	                i_levelEndStatus = EnumLevelEndStatus.CAMP;
	            }
	        }
	    }
	}
	LevelUtils.levelStats = new LevelStats();

	class SL_DeathComponent {
	    constructor() {
	        this.id = "DeathComponent";
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.deadLevel);
	        obj.setValue("1", this.HP_Target);
	        obj.setValue("2", this.maxHP);
	        obj.setValue("3", this.revivalPoints);
	        obj.setValue("4", this.revivalPointsMultiplier);
	        return obj;
	    }
	    import(data) {
	        this.deadLevel = data.getValue("0");
	        this.HP_Target = data.getValue("1");
	        this.maxHP = data.getValue("2");
	        this.revivalPoints = data.getValue("3");
	        this.revivalPointsMultiplier = data.getValue("4");
	    }
	}

	class DeadLevel {
	    constructor(level, deadHP, saturation, brightness, revivalScore) {
	        this.level = level;
	        this.HP = deadHP;
	        this.deadSaturation = saturation;
	        this.deadBrightness = brightness;
	        this.revivalScore = revivalScore;
	        if (level > DeadLevel.maxDeadLevel) {
	            DeadLevel.maxDeadLevel = level;
	        }
	    }
	}
	DeadLevel.maxDeadLevel = 0;

	class Sprite2D extends Laya.Sprite {
	    constructor() {
	        super();
	        this.tmpPos = new Laya.Vector2();
	        this.lastHookPos = new Laya.Vector3(-99999, -99999, -99999);
	        this.lastCameraPos = new Laya.Vector3(-99999, -99999, -99999);
	        this.lastCameraSize = 0;
	    }
	    setHook(hook, offsetY = 0, offsetX = 0) {
	        this.hook = hook;
	        this.offsetY = offsetY;
	        this.offsetX = offsetX;
	        LayerMgr.ins().uiWorld.addChild(this);
	        this.frameLoop(1, this, this.onUpdate);
	        this.onUpdate();
	    }
	    updateHookPos(offsetY = 0, offsetX = 0) {
	        this.offsetY = offsetY;
	        this.offsetX = offsetX;
	        this.updatePos(true);
	    }
	    dispose() {
	        this.removeSelf();
	        this.clearTimer(this, this.onUpdate);
	        this.active = true;
	        this.lastCameraSize = 0;
	    }
	    onDestroy() {
	        this.dispose();
	    }
	    onUpdate() {
	        if (!this.active)
	            return;
	        if (!this.hook)
	            return;
	        if (!this.hook.transform)
	            return;
	        let isScale = this.updateScale();
	        this.updatePos(isScale);
	    }
	    updatePos(force = false) {
	        let hpos = this.hook.transform.position;
	        let cpos = CameraMgr.camera.transform.position;
	        if (!force && Laya.Vector3.equals(this.lastHookPos, hpos) && Laya.Vector3.equals(this.lastCameraPos, cpos))
	            return;
	        hpos.cloneTo(this.lastHookPos);
	        cpos.cloneTo(this.lastCameraPos);
	        this.lastHookPos.x += this.offsetX;
	        this.lastHookPos.y += this.offsetY;
	        let pos = CameraMgr.toScreenPos(this.lastHookPos, this.tmpPos);
	        hpos.cloneTo(this.lastHookPos);
	        if (this.x == pos.x && this.y == pos.y)
	            return;
	        this.pos(pos.x, pos.y);
	    }
	    updateScale() {
	        let cameraSize = CameraMgr.camera.orthographicVerticalSize;
	        if (this.lastCameraSize == cameraSize)
	            return false;
	        this.lastCameraSize = cameraSize;
	        let size = 1 + (6.67 - cameraSize) * (cameraSize < 6.67 ? 1 : 0.02);
	        if (size <= 0)
	            size = 0.1;
	        this.scale(size, size);
	        return true;
	    }
	}

	class ProgressMeter extends Sprite2D {
	    constructor() {
	        super();
	    }
	    setOwner(v) {
	        this._owner = v;
	    }
	    setValue(v) {
	    }
	    get hasLabel() {
	        return true;
	    }
	    setLabel(v) {
	    }
	    setWidth(v) {
	    }
	    dispose() {
	        if (this._owner && this._owner.meter == this) {
	            this._owner.meter = null;
	        }
	        this._owner = null;
	        super.dispose();
	    }
	    detachProgressBar(thing = null) {
	        if (thing) {
	            if (thing != this._owner)
	                return;
	        }
	        this.dispose();
	    }
	}

	var ProgHealUI = ui.data.module.progress.ProgHealUI;
	class ProgHeal extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgHealUI();
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    setLabel(v) {
	        this.prog.lbl.text = v;
	    }
	    setWidth(v) {
	        this.prog.bar.width = v;
	        this.prog.lbl.width = v;
	        this.prog.x = v * -0.5;
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	    static create() {
	        return Laya.Pool.createByClass(ProgHeal);
	    }
	}

	class CompFilledWithDeath extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.HPOverheal = 0;
	        this.revivalPointsMultiplier = 1;
	        this.meterTimeoutTimer = new Clock(0.75);
	        this.defaultColors = {};
	        this.flashFrameTimer = new Clock(0.25);
	    }
	    get needsMoreHealing() {
	        return this.HP_Target > 0;
	    }
	    get isShowingInfoPopup() {
	        return this.infoPopup != null;
	    }
	    static addDeadLevel(deadLevelValue, deadHP, deadSaturation, deadBrightness, revivalScore) {
	        let deadLevel = new DeadLevel(deadLevelValue, deadHP, deadSaturation, deadBrightness, revivalScore);
	        this.deadLevels[deadLevel.level] = deadLevel;
	        this.lowToHighDeadLevels.push(deadLevel);
	    }
	    initDeadLevel(level, root, giveRevivalScore) {
	        let revivalPoints = 0;
	        let num = 1;
	        let dead = CompFilledWithDeath.deadLevels[level];
	        if (dead) {
	            revivalPoints = giveRevivalScore ? dead.revivalScore : 0;
	            num = dead.HP;
	        }
	        this.initDeadLevel2(level, root, num, num, revivalPoints, 1);
	    }
	    initDeadLevel2(level, root, startingHP, maxHP, revivalPoints, revivalPointsMult) {
	        let dead = CompFilledWithDeath.deadLevels[level];
	        if (!dead)
	            return;
	        this.unit = this.owner;
	        this.root = root;
	        this.deadLevel = dead;
	        this.startingDeadLevel = this.deadLevel.level;
	        this.HP = UserData.IsTestChannel ? 1 : startingHP;
	        this.maxHP = UserData.IsTestChannel ? 1 : maxHP;
	        this.HP_Target = this.HP;
	        this.revivalPoints = revivalPoints;
	        this.revivalPointsMultiplier = revivalPointsMult;
	        this.currentFlashDeadLevel = this.deadLevel.level;
	        this.updateRendererSetAndAlignVisuals();
	    }
	    updateRendererSetAndAlignVisuals() {
	        let unit = this.owner;
	        if (!unit.sp)
	            return;
	        if (this.materials)
	            return;
	        this.materials = [];
	        GameUtil.getUnlitMaterials(unit, this.materials);
	        for (let material of this.materials) {
	            if (!this.defaultColors[material.id]) {
	                this.defaultColors[material.id] = material["_Color"].clone();
	            }
	        }
	        this.alignVisualsWithDeadLevel();
	    }
	    refreshMaterials() {
	        this.materials = null;
	        this.updateRendererSetAndAlignVisuals();
	    }
	    alignVisualsWithDeadLevel() {
	        for (let material of this.materials) {
	            material.enableGray = true;
	            material.albedoColor = this.getColorForDeadLevel(material, this.deadLevel);
	        }
	    }
	    hitByLifeParticle(strength, particleItemLevel) {
	        this.HP_Target -= strength;
	        if (this.HP_Target < 0) {
	            this.HPOverheal += 0 - this.HP_Target;
	            this.HP_Target = 0;
	        }
	        if (this.HP_Target < 1 && this.HP_Target > -1) {
	            LevelUtils.stats.noOfTilesHealedByHearts++;
	        }
	        if (this.HP_Target != this.HP) {
	            let num = this.HP - this.HP_Target;
	            this.HP_DeltaPerSec = num / 0.75;
	            this.tryShowMeter();
	            this.flash();
	            this.dropParticles(particleItemLevel);
	        }
	    }
	    hitByInfiniteHeal() {
	        this.HP_Target = 0;
	        if (this.HP_Target != this.HP) {
	            let num = this.HP - this.HP_Target;
	            this.HP_DeltaPerSec = num / 0.75;
	            if (!this.isImmune()) {
	                this.tryShowMeter();
	            }
	            this.flash();
	            this.dropParticles(8);
	        }
	    }
	    isImmune() {
	        return this.startingDeadLevel == 10;
	    }
	    showImmuneInfoText() {
	    }
	    showImmuneInfoPopup() {
	    }
	    setOriginalDeadLevelValue(originalVal) {
	        this.startingDeadLevel = originalVal;
	    }
	    dropParticles(particleItemLevel) {
	        let pref = Globals.createFromPrefabAt("ParticleRoot_LifeParticleHit", this.unit.transform.position);
	        if (!pref.sp)
	            return;
	        let part = pref.sp;
	        let emission = part.particleSystem.emission;
	        emission.emissionRate += emission.emissionRate * (particleItemLevel - 1) * 2;
	    }
	    tryShowMeter() {
	        if (this.isShowingInfoPopup) {
	            this.isInfoTimerActive = false;
	            return;
	        }
	        if (this.isImmune()) {
	            this.showImmuneInfoText();
	            return;
	        }
	        if (!this.meter) {
	            this.meter = ProgHeal.create();
	            let per = 150 / DeadLevel.maxDeadLevel;
	            let w = per * this.startingDeadLevel + 100;
	            this.meter.setWidth(w);
	            this.meter.setHook(this.unit.body, 0.3);
	        }
	        this.updateProgressMeter();
	        this.isInfoTimerActive = false;
	    }
	    tryShowMeterFromPlayerTouch() {
	        if (this.isImmune()) {
	            if (this.isShowingInfoPopup) {
	                this.tryDestroyMeter();
	            }
	            this.showImmuneInfoPopup();
	        }
	        else {
	            this.tryShowMeter();
	            this.startMeterTimeout(2);
	        }
	    }
	    tryDestroyMeter() {
	        if (this.meter) {
	            this.meter.dispose();
	            this.meter = null;
	        }
	        if (this.isShowingInfoPopup) {
	            this.isInfoTimerActive = false;
	        }
	    }
	    trySetNewDeadLevel() {
	        let num = CompFilledWithDeath.lowToHighDeadLevels.length - 1;
	        while (true) {
	            if (num >= 0) {
	                if (CompFilledWithDeath.lowToHighDeadLevels[num].HP < this.HP) {
	                    break;
	                }
	                num--;
	                continue;
	            }
	            return;
	        }
	        this.deadLevel = CompFilledWithDeath.lowToHighDeadLevels[num];
	    }
	    flash() {
	        this.currentFlashDeadLevel = 0;
	        this.flashFrameTimer.timeTravelTo(0);
	    }
	    onUpdate() {
	        if (!this.deadLevel)
	            return;
	        if (!this.materials) {
	            this.updateRendererSetAndAlignVisuals();
	        }
	        this.updateHP();
	        this.updateMeterTimer();
	        this.updateProgressMeter();
	        this.updateFlash();
	        this.updateLife();
	    }
	    instantHeal(pointsMultiplier) {
	        this.HP_Target = 0;
	        this.HP = 0;
	        this.targetHPReached();
	        this.revivalPointsMultiplier = pointsMultiplier;
	    }
	    updateLife() {
	        if (this.HP == 0 && !this.isShowingInfoPopup) {
	            this.returnToLife();
	        }
	    }
	    updateHP() {
	        if (this.HP != 0 && !(this.HP <= this.HP_Target)) {
	            let num = this.HP_DeltaPerSec * Glob.deltaTime;
	            this.HP -= num;
	            if (this.HP <= this.HP_Target) {
	                this.HP = this.HP_Target;
	                this.targetHPReached();
	            }
	            this.trySetNewDeadLevel();
	        }
	    }
	    targetHPReached() {
	        this.startMeterTimeout(0.75);
	    }
	    startMeterTimeout(meterTimeoutTime) {
	        this.meterTimeoutTimer.set(meterTimeoutTime);
	        this.isInfoTimerActive = true;
	    }
	    updateMeterTimer() {
	        if (this.isInfoTimerActive) {
	            this.meterTimeoutTimer.update(Glob.deltaTime);
	            if (this.meterTimeoutTimer.done) {
	                this.tryDestroyMeter();
	            }
	        }
	    }
	    updateProgressMeter() {
	        if (!this.meter)
	            return;
	        let num = this.maxHP - this.HP;
	        let per = 1 - this.HP / this.maxHP;
	        this.meter.setValue(per);
	        this.meter.setLabel(LanCfg.get("10020004") + " " + (num >> 0) + "/" + (this.maxHP >> 0));
	    }
	    updateFlash() {
	        if (this.deadLevel == null) {
	            this.destroy();
	        }
	        else {
	            if (this.currentFlashDeadLevel > this.deadLevel.level) {
	                return;
	            }
	            if (this.flashFrameTimer.done) {
	                if (this.materials) {
	                    for (let material of this.materials) {
	                        if (material) {
	                            if (this.currentFlashDeadLevel == 0) {
	                                material.enableGray = false;
	                                material.albedoColor = this.getDefaultColorForRenderer(material);
	                            }
	                            else {
	                                material.enableGray = true;
	                                material.albedoColor = this.getColorForDeadLevel(material, CompFilledWithDeath.deadLevels[this.currentFlashDeadLevel]);
	                            }
	                        }
	                    }
	                }
	                this.currentFlashDeadLevel++;
	                this.flashFrameTimer.reset();
	            }
	            this.flashFrameTimer.update(Glob.deltaTime);
	        }
	    }
	    removeAllDeathComponents() {
	        this.returnToLife();
	    }
	    createRestoredParticles() {
	        Globals.createFromPrefabAt("ParticleRoot_TileRestored", this.unit.body.transform.position);
	    }
	    release() {
	        if (this.materials == null) {
	            return;
	        }
	        for (let material of this.materials) {
	            if (material) {
	                material.enableGray = false;
	                material.albedoColor = this.getDefaultColorForRenderer(material);
	            }
	        }
	    }
	    returnToLife() {
	        if (this.materials == null) {
	            return;
	        }
	        this.release();
	        if (this.revivalPoints > 0 && Glob.currentLevel != null) {
	            let num = this.revivalPoints * this.revivalPointsMultiplier >> 0;
	            if (num > 0) {
	                Glob.currentLevel.updatePointsCount(num);
	                FloatingText.CreateDeathHealedPointsText(num, FloatingTextManager.ins().pointsAmountPrefabs[0], this.owner.transform.position);
	            }
	        }
	        this.tryDestroyMeter();
	        this.createRestoredParticles();
	        this.createLifeParticlesIfOverhealed();
	        this.destroy();
	        if (this.event_OnRevived != null) {
	            this.event_OnRevived.run();
	        }
	    }
	    createLifeParticlesIfOverhealed() {
	        if (Glob.gameState != GameState.InLevel && Glob.cellLayer.deadCells.length > 0) {
	            return;
	        }
	        let num = 40;
	        let life = ThingList.categories[CategoryID.LifeParticles];
	        if (life) {
	            num -= life.length;
	        }
	        if (num < 1) {
	            num = 1;
	        }
	        let largest;
	        while (true) {
	            if (this.HPOverheal > 0) {
	                if (num == 1) {
	                    break;
	                }
	                largest = this.getLargestLifeParticleForStrength(this.HPOverheal);
	                if (largest == null || num <= 0) {
	                    return;
	                }
	                largest.transform.position = this.unit.body.transform.position;
	                this.HPOverheal -= largest.strength;
	                num--;
	                continue;
	            }
	            return;
	        }
	        largest = Thing.create(PrefabDB.kPrefabName_DynamicLifeParticle);
	        largest.strength = this.HPOverheal;
	        let pos = this.unit.body.transform.position;
	        largest.transform.position = pos;
	        let scaleAmount = Math.log10(this.HPOverheal) + 1 + 2.5;
	        largest.scaleRestingScale(scaleAmount);
	    }
	    getLargestLifeParticleForStrength(strength) {
	        let prop = null;
	        let prop2 = null;
	        let kPrefabNames_LifeParticles = PrefabDB.kPrefabNames_LifeParticles;
	        for (let key of kPrefabNames_LifeParticles) {
	            prop = PropsCfg.get(key);
	            if (prop.getStrength() > strength) {
	                break;
	            }
	            prop2 = prop;
	        }
	        if (prop2) {
	            return Thing.create(prop2.cid);
	        }
	        return null;
	    }
	    getDefaultColorForRenderer(material) {
	        return this.defaultColors[material.id];
	    }
	    getColorForDeadLevel(material, level) {
	        let def = this.getDefaultColorForRenderer(material);
	        let val = new Laya.Vector4(def.x, def.y * level.deadSaturation, def.z * level.deadBrightness, def.w);
	        return val;
	    }
	    getSaveDataObject() {
	        let saveData_DeathComponent = new SL_DeathComponent();
	        saveData_DeathComponent.deadLevel = this.deadLevel.level;
	        saveData_DeathComponent.HP_Target = this.HP_Target >> 0;
	        saveData_DeathComponent.maxHP = this.maxHP >> 0;
	        saveData_DeathComponent.revivalPoints = this.revivalPoints;
	        saveData_DeathComponent.revivalPointsMultiplier = this.revivalPointsMultiplier;
	        return saveData_DeathComponent;
	    }
	    initFromSave(loadedDeathData, highestAffectedGameObject) {
	        let deadLevel = loadedDeathData.deadLevel;
	        let startingHP = loadedDeathData.HP_Target;
	        let maxHP = loadedDeathData.maxHP;
	        let revivalPoints = loadedDeathData.revivalPoints;
	        let revivalPointsMultiplier = loadedDeathData.revivalPointsMultiplier;
	        this.initDeadLevel2(deadLevel, highestAffectedGameObject, startingHP, maxHP, revivalPoints, revivalPointsMultiplier);
	    }
	    deadEnoughToSave() {
	        if ((this.HP_Target >> 0) == 0) {
	            return false;
	        }
	        return true;
	    }
	}
	CompFilledWithDeath.deadLevels = {};
	CompFilledWithDeath.lowToHighDeadLevels = [];

	class GoalCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = PConfig.getCfg("Goals.json");
	        }
	        return this._cfg;
	    }
	}

	class SL_BankEgg {
	    constructor() {
	        this.id = SaveLoadConst.EGG_BANK;
	        this.eggs = [];
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", SyncObj.serializeFromArray(this.eggs));
	        return obj;
	    }
	    import(data) {
	        this.eggs = SyncObj.deserializeToArray(data.getValue("0"));
	    }
	    static save() {
	        SaveLoad.save(SL_BankEgg.getSaveData());
	    }
	    static getSaveData() {
	        let obj = new SL_BankEgg();
	        obj.eggs = BankMgr.ins().eggs.concat();
	        return obj;
	    }
	    static generateNewGame() {
	        return SL_BankEgg.getSaveData();
	    }
	}

	class BackContentVO {
	    constructor(key, data) {
	        this.cid = parseInt(key);
	        this.chance = data.chance;
	        this.dropList = data.dropList;
	        this.countType = data.countType;
	        this.touchType = data.touchType;
	    }
	}

	class BankCfg {
	    static get contentCfg() {
	        if (!this._contentCfg) {
	            this._contentCfg = {};
	            let jsonObj = PConfig.getCfg("EggBankContent.json");
	            for (let key in jsonObj) {
	                let item = new BackContentVO(key, jsonObj[key]);
	                this._contentCfg[key] = item;
	            }
	        }
	        return this._contentCfg;
	    }
	    static getConfig(cid) {
	        return this._contentCfg[cid];
	    }
	    static getRandomContent(type) {
	        let list = [];
	        for (let key in this._contentCfg) {
	            let item = this._contentCfg[key];
	            if (item.touchType === type) {
	                list.push({
	                    data: item,
	                    rate: item.chance
	                });
	            }
	        }
	        return GameUtil.randomWithWeight(list);
	    }
	}
	BankCfg.MaxSize = 6;

	class BankEggMysteryVo {
	    constructor(key, data) {
	        this.cid = parseInt(key);
	        this.weight = data.weight;
	        this.minDrop = data.minDrop;
	        this.maxDrop = data.maxDrop;
	        this.pref = data.Prefab;
	    }
	}

	class BankEggMysteryCfg {
	    static get getMysteryCfg() {
	        if (!this.mysteryCfg) {
	            this.mysteryCfg = {};
	            let jsonObj = PConfig.getCfg("EggBankMysteryItems.json");
	            for (let key in jsonObj) {
	                let item = new BankEggMysteryVo(key, jsonObj[key]);
	                this.mysteryCfg[key] = item;
	            }
	        }
	        return this.mysteryCfg;
	    }
	}
	BankEggMysteryCfg.MaxSize = 6;

	class BankItemVO {
	    constructor() {
	        this.eggId = 10501;
	    }
	    static isUnopened(id) {
	        return id == BankItemVO.Normal;
	    }
	    static isDecision(id) {
	        return id == BankItemVO.Decision;
	    }
	    static updateName(data, id) {
	        data.eggId = id;
	        SL_BankEgg.save();
	        MsgCenter.notify(MsgConst.BANCKEGG_UPDATE);
	    }
	}
	BankItemVO.Normal = 10501;
	BankItemVO.Decision = 10502;

	class EggContentData {
	}
	class MysteryEgg {
	}
	class MysteryEggData {
	}

	class SL_PurchaseHistory {
	    constructor() {
	        this.id = SaveLoadConst.PURCHASEHISTORY;
	        this.purchaseHistory = [];
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", SyncObj.serializeFromArray(this.purchaseHistory));
	        return obj;
	    }
	    import(data) {
	        this.purchaseHistory = SyncObj.deserializeToArray(data.getValue("0"));
	    }
	    static save() {
	        SaveLoad.save(SL_PurchaseHistory.getSaveData());
	    }
	    static getSaveData() {
	        let obj = new SL_PurchaseHistory();
	        obj.purchaseHistory = PurchaseHistoryManager.purchaseHistory.concat();
	        return obj;
	    }
	    static generateNewGame() {
	        return SL_PurchaseHistory.getSaveData();
	    }
	}

	class PurchaseHistoryManager extends Singleton {
	    static init() {
	        let slObj = new SL_PurchaseHistory();
	        if (SaveLoad.has(SaveLoadConst.PURCHASEHISTORY)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveData(slObj);
	        }
	        this.purchaseHistory = slObj.purchaseHistory;
	    }
	    static saveData(obj) {
	        obj.purchaseHistory = [];
	        SaveLoad.save(obj);
	    }
	    static getPurchasedItemsNames() {
	        return this.purchaseHistory;
	    }
	    static getPurchaseCount(id) {
	        let index = this.isExit(id);
	        if (index) {
	            let vo = this.purchaseHistory[index];
	            let count = vo[id];
	            return count;
	        }
	        return 0;
	    }
	    static isExit(prefId) {
	        for (let i = 0; i < this.purchaseHistory.length; i++) {
	            let vo = this.purchaseHistory[i];
	            for (let id in vo) {
	                if (prefId == Number(id)) {
	                    vo[id] += 1;
	                    return i;
	                }
	            }
	        }
	        return null;
	    }
	    static setPurchaseCount(id, count) {
	        this.purchaseHistory[id] = count;
	    }
	    static incPurchaseCount(id) {
	        let obj = {};
	        let index = this.isExit(id);
	        if (index == null) {
	            obj[id] = 1;
	            this.purchaseHistory.push(obj);
	        }
	        SL_PurchaseHistory.save();
	    }
	}
	PurchaseHistoryManager.purchaseHistory = [];

	class BankMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.eggs = [];
	        this.eggRate = 0;
	        this.eggContent = [];
	        this.eggContentCache = {};
	        this.mysteryEggs = [];
	    }
	    static init() {
	        let slObj = new SL_BankEgg();
	        if (SaveLoad.has(SaveLoadConst.EGG_BANK)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveData(slObj);
	        }
	        BankMgr.ins().eggs = slObj.eggs;
	        BankMgr.ins().parseEggContent();
	        BankMgr.ins().initMysteryEgg();
	        PurchaseHistoryManager.init();
	    }
	    static saveData(obj) {
	        obj.eggs = [];
	        SaveLoad.save(obj);
	    }
	    isFull() {
	        let size = this.eggs.length;
	        return size >= BankCfg.MaxSize;
	    }
	    isEmpty() {
	        return this.eggs.length > 0;
	    }
	    addEgg() {
	        if (this.isFull()) {
	            return false;
	        }
	        else {
	            this.eggs.push(new BankItemVO());
	            SL_BankEgg.save();
	            MsgCenter.notify(MsgConst.EGGBANK_HASEGG);
	            return true;
	        }
	    }
	    updateEgg(id, index) {
	        for (let i = 0; i < this.eggs.length; i++) {
	            if (index == i) {
	                this.eggs[i].eggId = id;
	            }
	        }
	        SL_BankEgg.save();
	        MsgCenter.notify(MsgConst.BANCKEGG_UPDATE);
	    }
	    getEggAt(index) {
	        return (index >= this.eggs.length) ? null : this.eggs[index];
	    }
	    hasUnopenedEggs() {
	        return this.eggs.some(item => BankItemVO.isUnopened(item.eggId));
	    }
	    hasDecisionEggs() {
	        return this.eggs.some(item => BankItemVO.isDecision(item.eggId));
	    }
	    getRandomEggName() {
	        return GameUtil.random(this.eggs).eggId;
	    }
	    getAbTestVariant() {
	        return MergeDragonsAppConfig.EGG_BANK_DATA;
	    }
	    isFeatureActive() {
	        let abTestVariant = this.getAbTestVariant();
	        return abTestVariant.isEnabled;
	    }
	    getCollectedEggsCount() {
	        return this.eggs.length;
	    }
	    getCost() {
	        let abTestVariant = this.getAbTestVariant();
	        let pricing = abTestVariant.pricing;
	        return (!pricing.isFlat) ? (this.getCollectedEggsCount() * pricing.value) : pricing.value;
	    }
	    trySpawnEggBankItems(count) {
	        let arr = [];
	        for (let i = 0; i < count; i++) {
	            let id = 10501;
	            arr.push(id);
	        }
	        return arr;
	    }
	    parseEggContent() {
	        let data = BankCfg.contentCfg;
	        this.eggContent = [];
	        for (let key in data) {
	            let touchType;
	            let row = data[key];
	            switch (row.touchType) {
	                case 0:
	                    touchType = 0;
	                    break;
	                case 1:
	                    touchType = 1;
	                    break;
	                case 2:
	                    touchType = 2;
	                    break;
	                case 3:
	                    touchType = 3;
	                    break;
	            }
	            let type = row.dropList;
	            let selector;
	            switch (row.countType) {
	                case 1:
	                    selector = 1;
	                    break;
	                case 2:
	                    selector = 2;
	                    break;
	                case 3:
	                    selector = 3;
	                    break;
	                default:
	                    selector = 0;
	                    break;
	            }
	            let chance = row["chance"];
	            let eggContentData = new EggContentData();
	            eggContentData.dropList = type;
	            eggContentData.Selector = selector;
	            eggContentData.Chance = chance;
	            let item = eggContentData;
	            let obj = { touchType: touchType, eggContent: item };
	            this.eggContent.push(obj);
	        }
	    }
	    getAllDataByTouchType(type) {
	        let arr = [];
	        this.eggContent.forEach(item => {
	            if (item.touchType == type) {
	                arr.push(item);
	            }
	        });
	        return arr;
	    }
	    getEggContent(type) {
	        let dictionary = [];
	        let list = this.getAllDataByTouchType(type);
	        for (let key in list) {
	            dictionary.push({
	                data: list[key].eggContent,
	                rate: list[key].eggContent.Chance
	            });
	        }
	        return GameUtil.randomWithWeight(dictionary);
	    }
	    clearBankEgg() {
	        BankMgr.ins().eggs = [];
	        SL_BankEgg.save();
	    }
	    getEgg(type) {
	        if (!this.isTypeInEggContent(type)) {
	            let text = null;
	            let num = 0;
	            while (!this.acceptAble(text) && num < 10) {
	                text = this.getEggNameForSlot(type);
	                num++;
	            }
	            this.eggContentCache[type] = text;
	        }
	        return this.eggContentCache[type];
	    }
	    acceptAble(id) {
	        return id != null && !this.isEggContentCache(id) && !BankItemVO.isUnopened(id) && !BankItemVO.isDecision(id);
	    }
	    isEggContentCache(id) {
	        let flag = false;
	        for (let type in this.eggContentCache) {
	            let eggId = this.eggContentCache[type];
	            if (id == eggId) {
	                return true;
	            }
	            else {
	                flag = false;
	            }
	        }
	        return flag;
	    }
	    isTypeInEggContent(type) {
	        let flag = false;
	        for (let key in this.eggContentCache) {
	            if (type == Number(key)) {
	                return true;
	            }
	            else {
	                flag = false;
	            }
	        }
	        return flag;
	    }
	    getEggNameForSlot(type) {
	        let eggContent = this.getEggContent(type);
	        if (eggContent.Selector == 1 && this.getCollectedEggsCount() > 0) {
	            return this.getRandomEggName();
	        }
	        if (PropsCfg.isHasCfg(eggContent.dropList)) {
	            return PropsCfg.isHasCfg(eggContent.dropList);
	        }
	        let categories = PropCfgVo.getCategories(eggContent.dropList);
	        ;
	        let id;
	        let list = PropsCfg.getCategories(categories);
	        if (categories.length == 0) {
	            return null;
	        }
	        if (eggContent.Selector == 2 || eggContent.Selector == 3) {
	            let decisionEgg = [];
	            for (let i = 0; i < list.length; i++) {
	                let item = list[i];
	                let id = item.cid;
	                let cid = PropsCfg.get(id).cid;
	                let purchaseCount = PurchaseHistoryManager.getPurchaseCount(cid);
	                if (purchaseCount > 0) {
	                    let count = eggContent.Selector != 3 ? 1 : purchaseCount;
	                    let obj = {
	                        data: item,
	                        rate: count
	                    };
	                    decisionEgg.push(obj);
	                }
	            }
	            if (decisionEgg.length > 0) {
	                let data = GameUtil.randomWithWeight(decisionEgg);
	                return data.cid;
	            }
	        }
	        id = GameUtil.random(list).cid;
	        return id;
	    }
	    initMysteryEgg() {
	        let mysteryData = BankEggMysteryCfg.getMysteryCfg;
	        for (let key in mysteryData) {
	            let mysteryEgg = new MysteryEggData();
	            mysteryEgg.saveId = mysteryData[key].cid;
	            mysteryEgg.prefabId = mysteryData[key].cid.toString();
	            mysteryEgg.weight = mysteryData[key].weight;
	            mysteryEgg.rangeDrop = RangeI.create([Number(mysteryData[key].minDrop), Number(mysteryData[key].maxDrop)]);
	            let item = mysteryEgg;
	            this.mysteryEggs.push(item);
	        }
	    }
	    setMysteryData() {
	        let arr = [];
	        this.mysteryEggs.forEach(item => {
	            let obj = {
	                data: item,
	                rate: Number(item.weight)
	            };
	            arr.push(obj);
	        });
	        return arr;
	    }
	    getRandomMysteryEggs() {
	        let weightedList = this.setMysteryData();
	        let mysteryEggData = GameUtil.randomWithWeight(weightedList);
	        let result = new MysteryEgg();
	        result.prefabId = Number(mysteryEggData.prefabId);
	        result.count = mysteryEggData.rangeDrop.random();
	        return result;
	    }
	    getMysteryEgg() {
	        let cfg = PropsCfg.get(10503);
	        let drawnObject = Thing.createAtPointAndSwoopToFreeCell(cfg.cid, 0, 0, null, (!cfg.cid) ? null : "ParticleRoot_ShopBuyImpact");
	        drawnObject.customLootBundle.clear();
	        let data = this.addAward();
	        for (let i = 0; i < data.length; i++) {
	            let proCfg = PropsCfg.get(data[i]);
	            if (data[i] == 10504) {
	                let saveDrawnObject = Thing.create_SaveData(proCfg);
	                let mysterAward = BankMgr.ins().getRandomMysteryEggs();
	                saveDrawnObject.exists_customLootBundle = true;
	                saveDrawnObject.customLootData = new SL_LootBundle();
	                saveDrawnObject.customLootData.lootPrefabNames = [];
	                saveDrawnObject.customLootData.instanceLoot = [];
	                for (let j = 0; j < mysterAward.count; j++) {
	                    saveDrawnObject.customLootData.lootPrefabNames.push(mysterAward.prefabId);
	                }
	                drawnObject.customLootBundle.addLootSL(saveDrawnObject);
	            }
	            else {
	                drawnObject.customLootBundle.addLootSL(Thing.create_SaveData(proCfg));
	            }
	        }
	        FloatingText.CreateInfoText2("+" + cfg.name + "!", InfoTextColorID.Green, drawnObject, TextAppearLocationID.Above);
	        CameraMgr.setFollowTarget(drawnObject, true);
	        SoundMgr.ins().playSound("m222");
	        BankMgr.ins().clearBankEgg();
	        MsgCenter.notify(MsgConst.BANCKEGG_CLEAR, true);
	    }
	    addAward() {
	        let mysteryId = 10504;
	        let arr = [];
	        for (let j = 0; j < this.eggs.length; j++) {
	            if (this.eggs[j] == null)
	                continue;
	            arr.push(this.eggs[j].eggId);
	        }
	        let isFull = BankMgr.ins().isFull();
	        if (isFull) {
	            arr.push(mysteryId);
	        }
	        return arr;
	    }
	}

	class DailyChestVO {
	    constructor(id, prefId) {
	        this.id = id;
	        this.prefId = prefId;
	    }
	}

	class DailyChestCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("DailyChests.json");
	            for (let key in cfg) {
	                let item = cfg[key];
	                let vo = new DailyChestVO(parseInt(key), item.prefab);
	                this._cfg[key] = vo;
	            }
	        }
	        return this._cfg;
	    }
	    static getConfig(id) {
	        let cfg = this.cfg;
	        return cfg[id];
	    }
	    static get count() {
	        let cfg = this.cfg;
	        return Object.keys(cfg).length;
	    }
	    static getDropRates() {
	        if (!this.dropRates) {
	            let total = 0;
	            this.dropRates = [];
	            let jsonObj = PConfig.getCfg("EggBankDorpRates.json");
	            for (let key in jsonObj) {
	                let item = jsonObj[key];
	                let count = item.count;
	                let chance = item.chance;
	                total += chance;
	                this.dropRates.push({ rate: total, amount: count });
	            }
	        }
	        return this.dropRates;
	    }
	    static getDropAmount() {
	        let total = 0;
	        let amount = 0;
	        let rates = DailyChestCfg.getDropRates();
	        rates.forEach(item => total += item.rate);
	        let random = Math.random() * total;
	        for (let item of rates) {
	            if (random < item.rate) {
	                amount = item.amount;
	                break;
	            }
	        }
	        return amount;
	    }
	    static GetChestDefinitionAfterDays(index) {
	        index %= this.count;
	        return this.getConfig(index + 1);
	    }
	}

	class DailyChestMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.pickTimes = 0;
	        this.lastTime = 0;
	    }
	    onLoad(data) {
	        this.lastTime = data.timeOfLastDailyChest;
	        this.pickTimes = data.totalDailyChestsReceived;
	    }
	    onSave(data) {
	        data.timeOfLastDailyChest = this.lastTime;
	        data.totalDailyChestsReceived = this.pickTimes;
	    }
	    isDailyChestUnlocked() {
	        return this.getCountTime() <= 0;
	    }
	    getCountTime() {
	        let now = TimeMgr.ins().getTime();
	        return Math.ceil((this.lastTime + DailyChestMgr.interval - now) * 0.001);
	    }
	    getFractionOfTimeLeft() {
	        return 1 - (this.getCountTime() / (DailyChestMgr.interval * 0.001));
	    }
	    getPickTimes() {
	        return this.pickTimes;
	    }
	    getIdOfNextDailyChest() {
	        return DailyChestCfg.GetChestDefinitionAfterDays(this.pickTimes).prefId;
	    }
	    tryClaimChest() {
	        if (!this.isDailyChestUnlocked()) {
	            return null;
	        }
	        let nextChest = this.getIdOfNextDailyChest();
	        this.pickTimes++;
	        this.lastTime = TimeMgr.ins().getTime();
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	        return nextChest;
	    }
	    pickChest(drawnCenter) {
	        let chest = this.tryClaimChest();
	        let list = [];
	        let eggList = [];
	        if (chest != null) {
	            list.push(chest);
	            if (BankMgr.ins().isFeatureActive()) {
	                let amount = DailyChestCfg.getDropAmount();
	                eggList = BankMgr.ins().trySpawnEggBankItems(amount);
	                list = list.concat(eggList);
	            }
	        }
	        list.forEach(item => {
	            let isChest = item == chest;
	            let chestObj = Thing.createAtPointAndSwoopToFreeCell(item, drawnCenter.x, drawnCenter.y, null, (!isChest) ? null : "ParticleRoot_ShopBuyImpact", isChest);
	            if (isChest) {
	                FloatingText.CreateInfoText3("+" + chestObj.cfg.name + "!", InfoTextColorID.Green, chestObj, true, true, true, true, TextAppearLocationID.Above);
	                CameraMgr.setFollowTarget(chestObj, true);
	                SoundMgr.ins().playSound("m114");
	            }
	            else {
	                TomeTip.showGameTip(GameTipTypeID.Tip_EggBank);
	                SoundMgr.ins().playSound("m225");
	            }
	        });
	    }
	}
	DailyChestMgr.CHEST_PREF = 10960;
	DailyChestMgr.interval = 23 * 60 * 60 * 1000;

	class SL_VictoryChest {
	    constructor() {
	        this.id = SaveLoadConst.Level_Victory_Chest;
	    }
	    export() {
	        let syncData = SyncObj.create();
	        syncData.setValue("0", this.chestId);
	        syncData.setValue("1", this.endTime);
	        return syncData;
	    }
	    import(syncData) {
	        this.chestId = syncData.getValue("0");
	        this.endTime = syncData.getValue("1");
	    }
	    toVictoryChestVO() {
	        let vo = new LevelChestVO();
	        vo.chestId = this.chestId;
	        vo.endTime = this.endTime;
	        return vo;
	    }
	}

	class LevelChestVO {
	    constructor() {
	        this._chestId = null;
	        this.endTime = 0;
	    }
	    get chestId() {
	        return this._chestId;
	    }
	    set chestId(val) {
	        this._chestId = val;
	        if (val) {
	            this.cfg = PropsCfg.get(val);
	        }
	    }
	    get name() {
	        return this.cfg.name;
	    }
	    get skin() {
	        return this.cfg.pref;
	    }
	    get costTime() {
	        return this.cfg.timedUnlockSeconds * 1000;
	    }
	    get countSeconds() {
	        let current = TimeMgr.ins().getTime();
	        return Math.ceil((this.endTime - current) / 1000);
	    }
	    get costTimeStr() {
	        return TimeMgr.ins().formatTimer1(this.costTime, { isSecond: false });
	    }
	    get timerPercent() {
	        if (this.isProgress()) {
	            let current = TimeMgr.ins().getTime();
	            return (this.costTime - (this.endTime - current)) / this.costTime;
	        }
	        else {
	            return 0;
	        }
	    }
	    get price() {
	        return this.cfg.OnTapGemCost;
	    }
	    get status() {
	        if (this.isEmpty()) {
	            return 1;
	        }
	        else {
	            if (this.endTime === 0) {
	                return 2;
	            }
	            else {
	                let current = TimeMgr.ins().getTime();
	                return current >= this.endTime ? 4 : 3;
	            }
	        }
	    }
	    isEmpty() {
	        return this.chestId === null;
	    }
	    isLocked() {
	        return this.status === 2;
	    }
	    isProgress() {
	        return this.status === 3;
	    }
	    isOpen() {
	        return this.status === 4;
	    }
	    setChest(chest) {
	        this.chestId = chest;
	        this.endTime = 0;
	    }
	    unlock() {
	        let current = TimeMgr.ins().getTime();
	        this.endTime = this.costTime + current;
	    }
	    resetEmpty() {
	        this._chestId = null;
	        this.endTime = 0;
	    }
	    toSaveData() {
	        let saveData = new SL_VictoryChest();
	        saveData.chestId = this.chestId;
	        saveData.endTime = this.endTime;
	        return saveData;
	    }
	}

	class LevelChestMgr extends Singleton {
	    constructor() {
	        super();
	        this.chestList = [];
	        for (let i = 0; i < LevelChestMgr.Size; i++) {
	            this.chestList.push(new LevelChestVO());
	        }
	    }
	    onCountDown(index) {
	        MsgCenter.notify(MsgConst.LEVEL_CHEST_FINISHED);
	    }
	    featureIsActive() {
	        return MergeDragonsAppConfig.RETENTION_CHESTS_ENABLED;
	    }
	    getIndex(vo) {
	        return this.chestList.findIndex(item => item === vo);
	    }
	    formatHours(seconds) {
	        return Math.round(seconds / 60 / 60) + LanCfg.get("20013006");
	    }
	    getChestList() {
	        return this.chestList;
	    }
	    getProcessIndex() {
	        return this.chestList.findIndex(item => item.isProgress());
	    }
	    isFull() {
	        let index = this.firstEmpty();
	        return index === -1;
	    }
	    isThereFreeSpace() {
	        return !this.isFull();
	    }
	    isAllEmpty() {
	        let item = this.chestList.find(item => !item.isEmpty());
	        return item == null;
	    }
	    firstEmpty() {
	        return this.chestList.findIndex(item => item.isEmpty());
	    }
	    addAt(index, chest) {
	        this.chestList[index].setChest(chest);
	        MsgCenter.notify(MsgConst.LEVEL_CHEST_ADD);
	    }
	    unlock(index) {
	        let vo = this.chestList[index];
	        vo.unlock();
	        Laya.timer.once(vo.costTime, this, this.onCountDown, [index]);
	        MsgCenter.notify(MsgConst.LEVEL_CHEST_UNLOCK, { item: vo, index: index });
	    }
	    collectChest(index) {
	        this.chestList[index].resetEmpty();
	        SL_PlayExpand.save();
	        MsgCenter.notify(MsgConst.LEVEL_CHEST_COLLECT, { index: index });
	    }
	    addNewChestToInventory(prefId) {
	        if (this.isThereFreeSpace()) {
	            let firstEmpty = this.firstEmpty();
	            this.addAt(firstEmpty, prefId);
	            SL_PlayExpand.save();
	        }
	        else {
	            console.error("Tried to add victory chest to inventory but it's full.");
	        }
	    }
	    onLoad(data) {
	        let saveList = data.victoryChestsInventory;
	        if (saveList && saveList.length > 0) {
	            this.chestList.forEach((_, index) => {
	                if (saveList[index]) {
	                    this.chestList[index] = saveList[index].toVictoryChestVO();
	                }
	            });
	        }
	    }
	    onSave(data) {
	        let chestList = this.chestList;
	        chestList.forEach(vo => {
	            let item = vo.toSaveData();
	            data.victoryChestsInventory.push(item);
	        });
	    }
	}
	LevelChestMgr.Size = 3;

	class SL_PermaCostIncs {
	    constructor() {
	        this.id = "PermaCostIncs";
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.PermaIncrements) {
	            let permaIncrementsObj = SyncObj.create();
	            for (let key in this.PermaIncrements) {
	                permaIncrementsObj.setValue(key, this.PermaIncrements[key]);
	            }
	            obj.setSyncObj("0", permaIncrementsObj);
	        }
	        return obj;
	    }
	    import(syncData) {
	        if (syncData.hasKey("0")) {
	            let obj = syncData.getSyncObj("0");
	            this.PermaIncrements = {};
	            let keys = obj.getKeys();
	            for (let key of keys) {
	                this.PermaIncrements[key] = obj.getValue(key);
	            }
	        }
	    }
	}

	class PermaCostIncManager {
	    static getIncrementValue(tag) {
	        if (!this.permaIncrements[tag]) {
	            return 0;
	        }
	        return this.permaIncrements[tag];
	    }
	    static itemPurchasedWithIncrementTag(tag, incrementAmount) {
	        if (!this.permaIncrements[tag]) {
	            this.permaIncrements[tag] = 0;
	        }
	        this.permaIncrements[tag] += incrementAmount;
	    }
	    static getSaveDataObject() {
	        let saveData_PermaCostIncs = new SL_PermaCostIncs();
	        saveData_PermaCostIncs.PermaIncrements = this.permaIncrements;
	        return saveData_PermaCostIncs;
	    }
	    static initFromSaveData(data) {
	        this.permaIncrements = data.PermaIncrements;
	    }
	}
	PermaCostIncManager.permaIncrements = {};

	class GuiMgr {
	    static get aspect4x3() {
	        return CameraMgr.camera.aspectRatio < 1.67777777;
	    }
	    static getScreenCenterInWorldSpace() {
	        return CameraMgr.toCameraPos(Laya.stage.width / 2, Laya.stage.height / 2, 0);
	    }
	    static getScreenCenterInScreenSpace() {
	        return new Laya.Vector3(Laya.stage.width / 2, Laya.stage.height / 2, 0);
	    }
	    static getWorldSpaceRectOfScreenByRatio(ratioStartX, ratioStartY, ratioEndX, ratioEndY) {
	        let num = Laya.stage.width * ratioStartX >> 0;
	        let num2 = Laya.stage.height * ratioStartY >> 0;
	        let num3 = (ratioEndX - ratioStartX) * Laya.stage.width >> 0;
	        let num4 = (ratioEndY - ratioStartY) * Laya.stage.height >> 0;
	        let vector = CameraMgr.toCameraPos(num, num2 + num4, 0);
	        let vector2 = CameraMgr.toCameraPos(num + num3, num2, 0);
	        return new Laya.Rectangle(vector.x, vector.y, vector2.x - vector.x, vector2.y - vector.y);
	    }
	    static getWorldPositionOfGUI(ui) {
	        this.uiPoint.setTo(0, 0);
	        let point = ui.localToGlobal(this.uiPoint);
	        let vec = CameraMgr.toCameraPos(point.x, point.y);
	        return vec;
	    }
	    static errorMessage(...msg) {
	        console.error(...msg);
	    }
	    static swapToBonusPointSoundAndVFX() {
	        this.currentlyTickingBonusPoints = true;
	    }
	}
	GuiMgr.currentlyTickingBonusPoints = false;
	GuiMgr.uiPoint = new Laya.Point();

	class DailyQuestVo {
	    constructor(cid, data) {
	        this.cid = cid;
	        this.weight = data["weight"];
	        this.needId = data["needId"];
	        this.bonusAmount = data["bonusAmount"];
	        this.bonusLootId = data["bonusLootId"];
	        this.bonusChance = data["bonusChance"];
	        this.rewardLootId = data["rewardLootId"];
	        this.rewardAmount = data["rewardAmount"];
	        this.levelR = RangeI.create(data["levelR"]);
	        this.amountR = RangeI.create(data["amountR"]);
	    }
	    contains(val) {
	        return this.levelR.contains(val);
	    }
	    randomAmount() {
	        return this.amountR.random();
	    }
	    randomBonus() {
	        let lootVo = LootTablesMgr.ins().get(this.bonusLootId);
	        return lootVo.randomLoot();
	    }
	    randomReward() {
	        let lootVo = LootTablesMgr.ins().get(this.rewardLootId);
	        return lootVo.randomLoot();
	    }
	}

	class DailyQuestCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let json = PConfig.getCfg("DailyQuest.json");
	            for (let key in json) {
	                this._cfg[key] = new DailyQuestVo(parseInt(key), json[key]);
	            }
	        }
	        return this._cfg;
	    }
	    static get(id) {
	        return this.cfg[id];
	    }
	    static randomQuest(winTimes, preId) {
	        let list = [];
	        let map = this.cfg;
	        for (let key in map) {
	            let vo = map[key];
	            if (vo.contains(winTimes)) {
	                list.push(vo);
	            }
	        }
	        if (list.length === 0) {
	            list.push(map[90001]);
	        }
	        if (list.length > 1 && preId) {
	            let index = list.findIndex(item => item.cid === preId);
	            index >= 0 && list.splice(index, 1);
	        }
	        return this.randomByW(list);
	    }
	    static randomByW(list) {
	        let total = 0;
	        list.forEach(o => total += o.weight);
	        let rand = Math.random() * total;
	        total = 0;
	        for (let i = 0; i < list.length; i++) {
	            let o = list[i];
	            total += o.weight;
	            if (total > rand) {
	                return o;
	            }
	        }
	        return null;
	    }
	}
	DailyQuestCfg.RefreshTime = 24 * 60 * 60 * 1000;

	class DailyQuestSaveVo {
	    constructor() {
	        this.homeTimes = 0;
	        this.finishedTimes = 0;
	        this.isOpen = false;
	        this.playerHasLookedAtQuest = false;
	        this.lastRefreshTime = 0;
	        this.preId = 0;
	        this.activeInfo = null;
	    }
	    load(save) {
	        this.homeTimes = save.numOfTimesPlayerEnteredCamp;
	        this.finishedTimes = save.numOfQuestsCompleted;
	        this.isOpen = save.isEnabled;
	        this.playerHasLookedAtQuest = save.playerHasLookedAtQuest;
	        this.lastRefreshTime = save.lastRefreshTime;
	        this.preId = save.previousQuestId;
	        if (save.hasActiveQuest) {
	            (this.activeInfo === null) && (this.activeInfo = {});
	            this.activeInfo.cid = save.questId;
	            this.activeInfo.requestNum = save.requestedItemCount;
	            this.activeInfo.collectedNum = save.collectedItemCount;
	            this.activeInfo.rewardId = save.rewardedItemId;
	            this.activeInfo.bonusId = save.bonusItemId;
	        }
	    }
	    save() {
	        let saveData = new SL_DailyQuest();
	        saveData.numOfTimesPlayerEnteredCamp = this.homeTimes;
	        saveData.numOfQuestsCompleted = this.finishedTimes;
	        saveData.isEnabled = this.isOpen;
	        saveData.playerHasLookedAtQuest = this.playerHasLookedAtQuest;
	        saveData.lastRefreshTime = this.lastRefreshTime;
	        saveData.previousQuestId = this.preId;
	        saveData.hasActiveQuest = this.activeInfo !== null;
	        if (saveData.hasActiveQuest) {
	            saveData.questId = this.activeInfo.cid;
	            saveData.requestedItemCount = this.activeInfo.requestNum;
	            saveData.collectedItemCount = this.activeInfo.collectedNum;
	            saveData.rewardedItemId = this.activeInfo.rewardId;
	            saveData.bonusItemId = this.activeInfo.bonusId;
	        }
	        return saveData;
	    }
	    isExistQuest() {
	        return !!this.activeInfo;
	    }
	    setPreviousId(id) {
	        this.preId = id;
	    }
	    activeNewQuest(vo) {
	        (this.activeInfo === null) && (this.activeInfo = {});
	        this.activeInfo.cid = vo.cid;
	        this.activeInfo.collectedNum = 0;
	        this.activeInfo.requestNum = vo.randomAmount();
	        this.activeInfo.bonusId = vo.randomBonus();
	        this.activeInfo.rewardId = vo.randomReward();
	    }
	    get refreshTime() {
	        return this.lastRefreshTime + DailyQuestCfg.RefreshTime;
	    }
	    get remainderTime() {
	        let now = TimeMgr.ins().getTime();
	        return this.refreshTime - now;
	    }
	    get requestNum() {
	        return this.activeInfo.requestNum;
	    }
	    get collectedNum() {
	        return this.activeInfo.collectedNum;
	    }
	    get isFinished() {
	        return this.requestNum <= this.collectedNum;
	    }
	    get needPref() {
	        let questCfg = DailyQuestCfg.get(this.activeInfo.cid);
	        return PropsCfg.get(questCfg.needId);
	    }
	    get remainderNum() {
	        return this.requestNum - this.collectedNum;
	    }
	    get rewardPref() {
	        return PropsCfg.get(this.activeInfo.rewardId);
	    }
	    get rewardAmount() {
	        let questCfg = DailyQuestCfg.get(this.activeInfo.cid);
	        return questCfg.rewardAmount;
	    }
	    get bonusPref() {
	        return PropsCfg.get(this.activeInfo.bonusId);
	    }
	    get bonusChance() {
	        let questCfg = DailyQuestCfg.get(this.activeInfo.cid);
	        return questCfg.bonusChance;
	    }
	    get bonusAmount() {
	        let questCfg = DailyQuestCfg.get(this.activeInfo.cid);
	        return questCfg.bonusAmount;
	    }
	}

	class SL_DailyQuest {
	    constructor() {
	        this.numOfTimesPlayerEnteredCamp = 0;
	        this.numOfQuestsCompleted = 0;
	        this.isEnabled = false;
	        this.hasFeature = false;
	        this.playerHasLookedAtQuest = false;
	        this.lastRefreshTime = 0;
	        this.previousQuestId = 0;
	        this.hasActiveQuest = false;
	        this.questId = 0;
	        this.questTextKey = "";
	        this.requestedItemId = "";
	        this.requestedItemCount = 0;
	        this.collectedItemCount = 0;
	        this.rewardedItemId = 0;
	        this.rewardItemCount = 0;
	        this.bonusChance = 0;
	        this.bonusItemId = 0;
	        this.bonusItemCount = 0;
	        this.id = SaveLoadConst.DAILY_QUEST;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.numOfTimesPlayerEnteredCamp);
	        obj.setValue("1", this.numOfQuestsCompleted);
	        obj.setValue("2", this.isEnabled);
	        obj.setValue("3", this.hasFeature);
	        obj.setValue("4", this.playerHasLookedAtQuest);
	        obj.setValue("5", this.lastRefreshTime);
	        obj.setValue("6", this.previousQuestId);
	        obj.setValue("7", this.hasActiveQuest);
	        if (this.hasActiveQuest) {
	            obj.setValue("8", this.questId);
	            obj.setValue("9", this.questTextKey);
	            obj.setValue("10", this.requestedItemId);
	            obj.setValue("11", this.requestedItemCount);
	            obj.setValue("12", this.collectedItemCount);
	            obj.setValue("13", this.rewardedItemId);
	            obj.setValue("14", this.rewardItemCount);
	            obj.setValue("15", this.bonusChance);
	            obj.setValue("16", this.bonusItemId);
	            obj.setValue("17", this.bonusItemCount);
	        }
	        obj.setValue("18", 1);
	        return obj;
	    }
	    import(syncData) {
	        this.numOfTimesPlayerEnteredCamp = syncData.getValue("0");
	        this.numOfQuestsCompleted = syncData.getValue("1");
	        this.isEnabled = syncData.getValue("2");
	        this.hasFeature = syncData.getValue("3");
	        this.playerHasLookedAtQuest = syncData.getValue("4");
	        this.lastRefreshTime = syncData.getValue("5");
	        this.previousQuestId = syncData.getValue("6");
	        this.hasActiveQuest = syncData.getValue("7");
	        if (this.hasActiveQuest) {
	            this.questId = syncData.getValue("8");
	            this.questTextKey = syncData.getValue("9");
	            this.requestedItemId = syncData.getValue("10");
	            this.requestedItemCount = syncData.getValue("11");
	            this.collectedItemCount = syncData.getValue("12");
	            this.rewardedItemId = syncData.getValue("13");
	            this.rewardItemCount = syncData.getValue("14");
	            this.bonusChance = syncData.getValue("15");
	            this.bonusItemId = syncData.getValue("16");
	            this.bonusItemCount = syncData.getValue("17");
	        }
	        if (!syncData.hasKey("18")) {
	            this.lastRefreshTime = 0;
	        }
	    }
	    static enterLoad() {
	        let slObj = new SL_DailyQuest();
	        let questInfo = new DailyQuestSaveVo();
	        if (SaveLoad.has(slObj.id)) {
	            SaveLoad.load(slObj);
	            questInfo.load(slObj);
	        }
	        DailyQuestMgr.ins().questInfo = questInfo;
	    }
	    static save() {
	        let obj = DailyQuestMgr.ins().questInfo.save();
	        SaveLoad.save(obj);
	    }
	}

	var EShopStatus;
	(function (EShopStatus) {
	    EShopStatus[EShopStatus["InSale"] = 0] = "InSale";
	    EShopStatus[EShopStatus["Wait"] = 1] = "Wait";
	    EShopStatus[EShopStatus["Locked"] = 2] = "Locked";
	    EShopStatus[EShopStatus["SellOut"] = 3] = "SellOut";
	})(EShopStatus || (EShopStatus = {}));
	var EShopType;
	(function (EShopType) {
	    EShopType[EShopType["Timed"] = 0] = "Timed";
	    EShopType[EShopType["Egg"] = 1] = "Egg";
	    EShopType[EShopType["Chest"] = 2] = "Chest";
	    EShopType[EShopType["Build"] = 3] = "Build";
	    EShopType[EShopType["Diamond"] = 4] = "Diamond";
	})(EShopType || (EShopType = {}));

	class BuildShopVo {
	    constructor(id, data) {
	        this.remainder = -1;
	        this.status = EShopStatus.Locked;
	        this.price = 0;
	        this.id = id;
	        this.cost = data["cost"];
	        this.order = data["order"];
	        this.pref = data["pref"];
	        this.sitePref = data["sitePref"];
	        this.speedCost = data["speedCost"];
	        this.inHome = data["inHome"] === 1;
	        this.inLevel = data["inLevel"] === 1;
	        this.currency = CurrencyCfg.transform(data["currency"]);
	        let h = data["h"];
	        this.h = h === undefined ? 0 : h;
	        let m = data["m"];
	        this.m = h === undefined ? 0 : m;
	        let s = data["s"];
	        this.s = s === undefined ? 0 : s;
	        let stars = data["stars"];
	        this.stars = stars === undefined ? 0 : stars;
	        let increment = data["increment"];
	        let incrementCategory = data["incrementCategory"];
	        this.increment = 0;
	        this.incrementCategory = null;
	        if (increment && incrementCategory) {
	            this.increment = increment;
	            this.incrementCategory = CategoryID[incrementCategory];
	        }
	        if (increment || incrementCategory) {
	        }
	    }
	    get objectDef() {
	        if (!this._objectDef) {
	            this._objectDef = PropsCfg.get(this.pref);
	        }
	        return this._objectDef;
	    }
	}

	class BuildShopCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("BuildShop.json");
	            for (let key in cfg) {
	                let vo = new BuildShopVo(parseInt(key), cfg[key]);
	                this._cfg[key] = vo;
	            }
	        }
	        return this._cfg;
	    }
	    static get(cid) {
	        return this.cfg[cid];
	    }
	}

	class BuildShopMgr extends Singleton {
	    constructor() {
	        super();
	        this.saleList = [];
	        let cfg = BuildShopCfg.cfg;
	        for (let key in cfg) {
	            let vo = cfg[key];
	            vo.price = this.getPrice(vo);
	            vo.status = this.getStatus(vo);
	            this.saleList.push(cfg[key]);
	        }
	        ShopMgr.sortList(this.saleList);
	    }
	    getPrice(vo) {
	        let price = vo.cost;
	        if (vo.increment > 0 && ThingList.categories[vo.incrementCategory]) {
	            let incrementVal = 0;
	            let list = ThingList.categories[vo.incrementCategory];
	            for (let item of list) {
	                let lv = item.cfg.itemLevel;
	                if (lv > 0) {
	                    lv--;
	                }
	                incrementVal += Math.pow(3.0, lv);
	            }
	            price += incrementVal * vo.increment;
	        }
	        return price;
	    }
	    updateStatus() {
	        this.saleList.forEach(vo => vo.price = this.getPrice(vo));
	        this.saleList.forEach(vo => vo.status = this.getStatus(vo));
	    }
	    getStatus(vo) {
	        if (vo.stars === 0) {
	            return EShopStatus.InSale;
	        }
	        else {
	            let total = WorldMgr.ins().TotalStarsEarned;
	            if (total < vo.stars) {
	                return EShopStatus.Locked;
	            }
	            else {
	                if (ShopMgr.ins().isClick(vo.id)) {
	                    return EShopStatus.InSale;
	                }
	                else {
	                    return EShopStatus.Wait;
	                }
	            }
	        }
	    }
	    isOpen() {
	        return this.getSaleList().length > 0;
	    }
	    getSaleList() {
	        let currLevelVo = WorldMgr.ins().currLevelVo;
	        if (currLevelVo) {
	            return this.saleList.filter(item => item.inHome === currLevelVo.isHome);
	        }
	        else {
	            return [];
	        }
	    }
	    onClickUnlock(vo) {
	        let data = vo;
	        data.status = EShopStatus.InSale;
	    }
	    getItem(id) {
	        return this.saleList.find(vo => vo.id === id);
	    }
	    onCharge(id) {
	        let vo = this.getItem(id);
	        vo.price = this.getPrice(vo);
	        return [vo];
	    }
	}

	class SL_ShopLimitedItem {
	    constructor() {
	        this.id = SaveLoadConst.SHOP_LIMITED_ITEM;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.prefabId);
	        obj.setValue("1", this.totalPurchased);
	        return obj;
	    }
	    import(data) {
	        this.prefabId = data.getValue("0");
	        this.totalPurchased = data.getValue("1");
	    }
	}

	"saveId";
	class EggChestShopVo {
	    constructor(id, data) {
	        this.id = id;
	        this.tags = data["tags"];
	        this.pref = data["pref"];
	        this.cost = data["cost"];
	        this.order = data["order"];
	        this.saveId = data["saveId"];
	        this.inEgg = data["inEgg"] === 1;
	        this.inChest = data["inChest"] === 1;
	        this.currency = CurrencyCfg.transform(data["currency"]);
	        let cap = data["costCap"];
	        this.costCap = cap === undefined ? 0 : cap;
	        let stars = data["stars"];
	        this.stars = stars === undefined ? 0 : stars;
	        let scale = data["scale"];
	        this.scale = scale === undefined ? 1 : scale;
	        let limit = data["limit"];
	        this.limit = limit === undefined ? -1 : limit;
	        let discovery = data["discovery"];
	        this.discovery = discovery === undefined ? null : discovery;
	        let increment = data["increment"];
	        let incrementCategory = data["incrementCategory"];
	        this.increment = 0;
	        this.incrementCategory = null;
	        if (increment && incrementCategory) {
	            this.increment = increment;
	            this.incrementCategory = incrementCategory;
	        }
	        if (increment || incrementCategory) {
	        }
	        let permaIncrement = data["permaIncrement"];
	        let permaIncrementTag = data["permaIncrementTag"];
	        this.permaIncrement = 0;
	        this.permaIncrementTag = null;
	        if (permaIncrement && permaIncrementTag) {
	            this.permaIncrement = permaIncrement;
	            this.permaIncrementTag = permaIncrementTag;
	        }
	    }
	    get remainder() {
	        let items = ShopSaveMgr.ShopLimitedItems;
	        let item = items.find(data => data.prefabId === this.pref);
	        if (item) {
	            return this.limit - item.totalPurchased;
	        }
	        return this.limit;
	    }
	    canShowInShop() {
	        if (!this.discovery) {
	            return true;
	        }
	        let prop = PropsCfg.get(this.discovery);
	        return prop.discoveryState == DiscoveryItemStateID.Discovered || prop.discoveryState == DiscoveryItemStateID.JustDiscoveredAndUnlockable;
	    }
	}

	class EggChestShopCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("EggChestShop.json");
	            for (let key in cfg) {
	                let vo = new EggChestShopVo(parseInt(key), cfg[key]);
	                this._cfg[key] = vo;
	            }
	        }
	        return this._cfg;
	    }
	    static get(cid) {
	        return this.cfg[cid];
	    }
	}

	class EggChestShopMgr extends Singleton {
	    constructor() {
	        super();
	        this.saleList = [];
	        this.init();
	    }
	    init() {
	        let cfg = EggChestShopCfg.cfg;
	        for (let key in cfg) {
	            let vo = cfg[key];
	            if (vo.canShowInShop()) {
	                vo.price = this.getPrice(vo);
	                vo.status = this.getStatus(vo);
	                this.saleList.push(vo);
	            }
	        }
	        ShopMgr.sortList(this.saleList);
	    }
	    isSameTag(tagsA, tagsB) {
	        return tagsA.some(a => tagsB.some(b => b === a));
	    }
	    getItem(id) {
	        return this.saleList.find(vo => vo.id === id);
	    }
	    getPrice(vo) {
	        let capCost = vo.costCap;
	        let baseCost = vo.cost;
	        let price = baseCost;
	        if (vo.permaIncrement > 0) {
	            price = baseCost + PermaCostIncManager.getIncrementValue(vo.permaIncrementTag);
	        }
	        if (capCost >= baseCost && price > capCost) {
	            price = capCost;
	        }
	        return price;
	    }
	    updateStatus() {
	        this.saleList.forEach(vo => vo.status = this.getStatus(vo));
	    }
	    getStatus(vo) {
	        if (vo.stars === 0) {
	            if (vo.limit > 0 && vo.remainder === 0) {
	                return EShopStatus.SellOut;
	            }
	            else {
	                return EShopStatus.InSale;
	            }
	        }
	        else {
	            let total = WorldMgr.ins().TotalStarsEarned;
	            if (total < vo.stars) {
	                return EShopStatus.Locked;
	            }
	            else {
	                if (ShopMgr.ins().isClick(vo.id)) {
	                    if (vo.limit > 0 && vo.remainder === 0) {
	                        return EShopStatus.SellOut;
	                    }
	                    else {
	                        return EShopStatus.InSale;
	                    }
	                }
	                else {
	                    return EShopStatus.Wait;
	                }
	            }
	        }
	    }
	    isOpen(type) {
	        return this.getSaleList(type).length > 0;
	    }
	    getSaleList(type) {
	        let currLv = WorldMgr.ins().currLevelVo;
	        if (currLv) {
	            let levelTags = currLv.cfg.shopTags;
	            let isEgg = type === EShopType.Egg;
	            return this.saleList.filter(item => {
	                return isEgg === item.inEgg && this.isSameTag(levelTags, item.tags);
	            });
	        }
	        else {
	            return [];
	        }
	    }
	    onClickUnlock(vo) {
	        vo.status = EShopStatus.InSale;
	    }
	    onCharge(id) {
	        let item = null;
	        let vo = this.getItem(id);
	        item = ShopSaveMgr.ShopLimitedItems.find(data => data.prefabId === vo.pref);
	        if (item) {
	            item.totalPurchased++;
	        }
	        else {
	            item = new SL_ShopLimitedItem();
	            item.prefabId = vo.pref;
	            item.totalPurchased = 1;
	            ShopSaveMgr.ShopLimitedItems.push(item);
	        }
	        vo.price = this.getPrice(vo);
	        vo.status = this.getStatus(vo);
	        return [vo];
	    }
	}

	class ShopMgr extends Singleton {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.clickList = [];
	        this.mgrMap = {
	            [EShopType.Timed]: TimedShopMgr.ins(),
	            [EShopType.Egg]: EggChestShopMgr.ins(),
	            [EShopType.Chest]: EggChestShopMgr.ins(),
	            [EShopType.Build]: BuildShopMgr.ins(),
	        };
	        MsgCenter.listen(MsgConst.CATEGORIES_ADD, this.onCategoriesChange, this);
	        MsgCenter.listen(MsgConst.CATEGORIES_REMOVE, this.onCategoriesChange, this);
	    }
	    getMgr(type) {
	        return this.mgrMap[type];
	    }
	    updateStatus() {
	        for (let key in this.mgrMap) {
	            this.getMgr(parseInt(key)).updateStatus();
	        }
	    }
	    onLoad(sl_shop) {
	        ShopMgr.ins().clickList = sl_shop.UnlocksActivatedByPlayer;
	        this.updateStatus();
	    }
	    static sortList(list) {
	        list.sort((a, b) => {
	            if (a.status === b.status) {
	                if (a.status === EShopStatus.Locked) {
	                    return a.stars - b.stars;
	                }
	                else {
	                    if (a.currency === b.currency) {
	                        return a.price - b.price;
	                    }
	                    else {
	                        return a.currency - b.currency;
	                    }
	                }
	            }
	            else {
	                return a.status - b.status;
	            }
	        });
	    }
	    isOpen(type) {
	        if (type === EShopType.Diamond) {
	            return true;
	        }
	        return this.getMgr(type).isOpen(type);
	    }
	    isClick(id) {
	        return this.clickList.some(data => data === id);
	    }
	    getSaleList(type) {
	        return this.getMgr(type).getSaleList(type);
	    }
	    clickUnlock(type, vo) {
	        this.clickList.push(vo.id);
	        this.getMgr(type).onClickUnlock(vo);
	        MsgCenter.notify(MsgConst.SHOP_UNLOCK_OK, vo);
	    }
	    onCharge(tabId, id) {
	        let changeItems = this.getMgr(tabId).onCharge(id);
	        MsgCenter.notify(MsgConst.SHOP_CHARGE_OK, changeItems);
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	    }
	    onStarAdd() {
	        this.updateStatus();
	        MsgCenter.notify(MsgConst.SHOP_CHANGE_STAR);
	    }
	    onCategoriesChange() {
	        this.updateStatus();
	        MsgCenter.notify(MsgConst.SHOP_CHANGE_STAR);
	    }
	    onLevelChanged() {
	        this.updateStatus();
	    }
	}

	class TimedShopCfgVo {
	    constructor(cid, data) {
	        this.cid = cid;
	        this.tag = data["tag"];
	        this.tier = data["tier"];
	        this.weight = data["weight"];
	        this.starMin = data["starMin"] ? data["starMin"] : 0;
	        this.starMax = data["starMax"] ? data["starMax"] : 0;
	        this.increment = data["increment"] ? data["increment"] : 0;
	        this.baseCost = data["baseCost"];
	        this.currency = CurrencyCfg.transform(data["currency"]);
	        this.discover = data["discover"];
	        let itemId = data["itemId"];
	        if (LootTablesCfg.get(itemId)) {
	            this.lootId = itemId;
	        }
	        else {
	            this.prefabId = itemId;
	        }
	        this.range = RangeI.create(data["range"]);
	    }
	    randomLoot() {
	        let lootVo = LootTablesMgr.ins().get(this.lootId);
	        return lootVo.randomLoot();
	    }
	    isLoot() {
	        return !!this.lootId;
	    }
	    randomAmount() {
	        return this.range.random();
	    }
	    randomPref() {
	        return this.isLoot() ? this.randomLoot() : this.prefabId;
	    }
	    canShowInShop() {
	        if (this.discover) {
	            return true;
	        }
	        return true;
	    }
	    getPrice(buyTimes) {
	        return this.baseCost + buyTimes * this.increment;
	    }
	}

	class TimedShopCfg {
	    static get dict() {
	        if (!this._dict) {
	            this._dict = {};
	            for (let key in this.cfg) {
	                let item = this.cfg[key];
	                let tier = item.tier;
	                this._dict[tier] = this._dict[tier] || [];
	                this._dict[tier].push(item);
	            }
	        }
	        return this._dict;
	    }
	    static random(tier) {
	        let weightTotal = 0;
	        let item = null;
	        let list = this.dict[tier] || [];
	        list = list.filter(vo => vo.canShowInShop());
	        list.forEach(vo => weightTotal += vo.weight);
	        let random = MathUtil.randNum(0, weightTotal);
	        weightTotal = 0;
	        for (let i = 0; i < list.length; i++) {
	            weightTotal += list[i].weight;
	            if (weightTotal > random) {
	                item = list[i];
	                break;
	            }
	        }
	        return item;
	    }
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("TimedShop.json");
	            for (let key in cfg) {
	                let vo = new TimedShopCfgVo(parseInt(key), cfg[key]);
	                this._cfg[key] = vo;
	            }
	        }
	        return this._cfg;
	    }
	    static get(cid) {
	        return this.cfg[cid];
	    }
	    static randomList() {
	        let list = [];
	        for (let tier in this.dict) {
	            let vo = this.random(parseInt(tier));
	            list.push(vo);
	        }
	        let first = list.shift();
	        list.push(first);
	        return list;
	    }
	}

	class SL_TimedShopEntry {
	    constructor() {
	        this.id = SaveLoadConst.TIMED_SHOP_ENTRY;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.timedShopId);
	        obj.setValue("1", this.prefabId);
	        obj.setValue("2", this.saleLimit);
	        obj.setValue("3", this.timesPurchased);
	        return obj;
	    }
	    import(data) {
	        this.timedShopId = data.getValue("0");
	        this.prefabId = data.getValue("1");
	        this.saleLimit = data.getValue("2");
	        this.timesPurchased = data.getValue("3");
	    }
	    static save() {
	        let list = [];
	        let saleList = TimedShopMgr.ins().getSaleList();
	        saleList.forEach(item => {
	            let sl_data = new SL_TimedShopEntry();
	            sl_data.timedShopId = item.id;
	            sl_data.prefabId = item.prefName;
	            sl_data.saleLimit = item.saleTimes;
	            sl_data.timesPurchased = item.buyTimes;
	            list.push(sl_data);
	        });
	        return list;
	    }
	}

	class TimedShopSaveVo {
	    constructor() {
	        this.saleTimes = 0;
	        this.buyTimes = 0;
	    }
	    get price() {
	        return this.cfg.getPrice(this.buyTimes);
	    }
	    get id() {
	        return this.cfg.cid;
	    }
	    get remainder() {
	        return this.saleTimes - this.buyTimes;
	    }
	    get pref() {
	        return this.prefName;
	    }
	    get stars() {
	        return 0;
	    }
	    get currency() {
	        return this.cfg.currency;
	    }
	    isMystic() {
	        return this.cfg.tier === 0;
	    }
	    isSaleOut() {
	        return this.buyTimes === this.saleTimes;
	    }
	    getSaveData() {
	        let saveData = new SL_TimedShopEntry();
	        saveData.timedShopId = this.id;
	        saveData.prefabId = this.pref;
	        saveData.saleLimit = this.saleTimes;
	        saveData.timesPurchased = this.buyTimes;
	        return saveData;
	    }
	    loadSaveData(data) {
	        this.cfg = TimedShopCfg.get(data.timedShopId);
	        this.prefName = data.prefabId;
	        this.saleTimes = data.saleLimit;
	        this.buyTimes = data.timesPurchased;
	    }
	}

	class TimedShopMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.saleList = [];
	    }
	    checkStatus(vo) {
	        if (vo.isMystic()) {
	            if (this.isAllSaleOut()) {
	                if (this.isClickOpen(vo.cfg.cid)) {
	                    if (vo.isSaleOut()) {
	                        return EShopStatus.SellOut;
	                    }
	                    else {
	                        return EShopStatus.InSale;
	                    }
	                }
	                else {
	                    return EShopStatus.Wait;
	                }
	            }
	            else {
	                return EShopStatus.Locked;
	            }
	        }
	        else {
	            if (vo.isSaleOut()) {
	                return EShopStatus.SellOut;
	            }
	            else {
	                return EShopStatus.InSale;
	            }
	        }
	    }
	    isAllSaleOut() {
	        let list = this.saleList;
	        list = list.filter(item => !item.isMystic());
	        list = list.filter(item => !item.isSaleOut());
	        return list.length === 0;
	    }
	    isClickOpen(id) {
	        return ShopMgr.ins().isClick(id);
	    }
	    getItem(id) {
	        return this.saleList.find(data => data.cfg.cid === id);
	    }
	    getItemByTier(tier) {
	        return this.saleList.find(data => data.cfg.tier === tier);
	    }
	    getMysticItem() {
	        return this.saleList.find(data => data.isMystic());
	    }
	    generateNew() {
	        ShopSaveMgr.SmartTimedShopEntries = [];
	        let randList = TimedShopCfg.randomList();
	        this.saleList = randList.map(cfg => {
	            let vo = new TimedShopSaveVo();
	            vo.cfg = cfg;
	            vo.buyTimes = 0;
	            vo.prefName = cfg.randomPref();
	            vo.saleTimes = cfg.randomAmount();
	            return vo;
	        });
	        this.saleList.forEach(vo => {
	            vo.status = this.checkStatus(vo);
	            ShopSaveMgr.SmartTimedShopEntries.push(vo.getSaveData());
	        });
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	        MsgCenter.notify(MsgConst.TIMED_SHOP_RESET);
	    }
	    updateStatus() {
	    }
	    loadFromSave() {
	        this.saleList = [];
	        if (ShopSaveMgr.SmartTimedShopEntries.length <= 0) {
	            this.generateNew();
	        }
	        else {
	            ShopSaveMgr.SmartTimedShopEntries.forEach(data => {
	                let vo = new TimedShopSaveVo();
	                vo.loadSaveData(data);
	                vo.status = this.checkStatus(vo);
	                this.saleList.push(vo);
	            });
	        }
	    }
	    isOpen() {
	        return this.getSaleList().length > 0;
	    }
	    getTime() {
	        return DailyQuestMgr.ins().getRemainderTime();
	    }
	    getSaleList() {
	        let currLevelVo = WorldMgr.ins().currLevelVo;
	        return currLevelVo && currLevelVo.isHome ? this.saleList : [];
	    }
	    onCharge(id) {
	        let changeItems = [];
	        let vo = TimedShopMgr.ins().getItem(id);
	        vo.buyTimes++;
	        vo.status = this.checkStatus(vo);
	        if (vo.remainder === 0 && !vo.isMystic()) {
	            let mysticVo = TimedShopMgr.ins().getMysticItem();
	            mysticVo.status = this.checkStatus(mysticVo);
	            changeItems.push(mysticVo);
	        }
	        changeItems.push(vo);
	        return changeItems;
	    }
	    onClickUnlock(vo) {
	        let data = vo;
	        data.status = EShopStatus.InSale;
	    }
	    getChecks() {
	        let t1 = this.getItemByTier(1);
	        let t2 = this.getItemByTier(2);
	        let t3 = this.getItemByTier(3);
	        return [t1.isSaleOut(), t2.isSaleOut(), t3.isSaleOut()];
	    }
	}

	var ProgDailyQuestUI = ui.data.module.progress.ProgDailyQuestUI;
	class ProgDailyQuest extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    onClickBg() {
	        this.bgHandler && this.bgHandler.run();
	    }
	    onClickCommit() {
	        this.commitHandler && this.commitHandler.run();
	    }
	    init() {
	        this.prog = new ProgDailyQuestUI();
	        this.prog.pivotX = 286;
	        this.prog.pivotY = 220;
	        this.prog.pos(0, 0);
	        this.prog.scale(0.5, 0.5);
	        this.prog.imgBg.on(Laya.Event.CLICK, this, this.onClickBg);
	        this.prog.btnCommit.on(Laya.Event.CLICK, this, this.onClickCommit);
	        this.addChild(this.prog);
	    }
	    setBgHandler(handler) {
	        this.bgHandler = handler;
	    }
	    setCommitHandler(handler) {
	        this.commitHandler = handler;
	    }
	    setCommitBtnVisible(val) {
	        this.prog.btnCommit.visible = val;
	    }
	    updatePref(pref) {
	        if (this.uiPref) {
	            this.uiPref.setNid(pref);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(pref);
	            this.uiPref.centerX = 0;
	            this.uiPref.centerY = 0;
	            this.prog.imgBg.addChild(this.uiPref);
	        }
	    }
	    setPrefVisible(val) {
	        this.uiPref && (this.uiPref.visible = val);
	    }
	    setOkVisible(val) {
	        this.prog.imgFinished.visible = val;
	    }
	    setValue(v) {
	        this.prog.barProgress.value = v;
	    }
	    setLabel(v) {
	        this.prog.lblPercent.text = v;
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	    static create() {
	        return Laya.Pool.createByClass(ProgDailyQuest);
	    }
	}

	class Component_DailyQuest_Ship extends TiScript3D {
	    constructor() {
	        super(...arguments);
	        this.isHook = false;
	    }
	    spawnAnimation() {
	        Laya.timer.once(1000, this, () => {
	            CameraMgr.setFollowTarget(this.drawnObject, true);
	            this.waitForPopupsThenShowQuestGiver();
	        });
	    }
	    waitForPopupsThenShowQuestGiver() {
	        TomeTip.showGameTip(GameTipTypeID.Tip_QuestGiver);
	    }
	    onClickBg() {
	        LayerMgr.ins().open(UiConst.DailyQuestView);
	    }
	    onClickCommit() {
	        DailyQuestMgr.ins().collectAvailableItemsFromCamp();
	    }
	    onAwake() {
	        this.drawnObject = this.owner;
	        this.prog = ProgDailyQuest.create();
	        this.prog.setBgHandler(Laya.Handler.create(this, this.onClickBg, null, false));
	        this.prog.setCommitHandler(Laya.Handler.create(this, this.onClickCommit, null, false));
	    }
	    onSlowUpate() {
	        if (!this.drawnObject.sp)
	            return;
	        if (!this.checkedForDupes) {
	            this.checkedForDupes = true;
	            let list = ThingList.lists[this.drawnObject.cfg.cid];
	            if (list) {
	                let item = list[0];
	                if (this.drawnObject != item) {
	                    this.drawnObject.destroyDrawnObject(DeathReasonID.Error);
	                    return;
	                }
	            }
	        }
	        let hasQuest = DailyQuestMgr.ins().hasQuest();
	        this.drawnObject.active = hasQuest;
	        if (!hasQuest)
	            return;
	        if (!this.readMarkObj) {
	            this.readMarkObj = this.drawnObject.sp.getChildByName("quest");
	        }
	        if (this.readMarkObj && this.readMarkObj.active != DailyQuestMgr.ins().shouldShowNotLookedIndicator()) {
	            this.readMarkObj.active = !this.readMarkObj.active;
	        }
	        if (!this.isHook) {
	            this.isHook = true;
	            this.prog.setHook(this.drawnObject.sp, 1, 0);
	        }
	        let showProg = DailyQuestMgr.ins().shouldShowProgressIndicator();
	        if (this.prog.visible != showProg) {
	            this.prog.visible = !this.prog.visible;
	        }
	        if (this.prog.visible) {
	            let isCompleted = DailyQuestMgr.ins().isCompleted();
	            let count = DailyQuestMgr.ins().getCollectedItemCount();
	            let request = DailyQuestMgr.ins().getRequestItemCount();
	            let showBtn = DailyQuestMgr.ins().shouldShowCollectItemsButton();
	            this.prog.setValue(count / request);
	            this.prog.setCommitBtnVisible(showBtn);
	            this.prog.setOkVisible(isCompleted);
	            this.prog.setPrefVisible(!isCompleted);
	            if (!isCompleted) {
	                let requestPref = DailyQuestMgr.ins().getRequestedItemDefinition();
	                this.prog.updatePref(requestPref.pref);
	                this.prog.setLabel(count + "/" + request);
	            }
	            else {
	                this.prog.setLabel(LanCfg.get("20016005"));
	            }
	        }
	    }
	    onEnable() {
	        this.prog.visible = true;
	    }
	    onDisable() {
	        this.prog.visible = false;
	    }
	    onDestroy() {
	        this.prog.dispose();
	    }
	}

	class DailyQuestMgr extends Singleton {
	    getInfo() {
	        return this.questInfo;
	    }
	    enterHome(forceSpawn) {
	        this.questInfo.homeTimes++;
	        if (!this.isOpen() || forceSpawn) {
	            if (this.canOpen()) {
	                this.open();
	                this.resetInfo();
	                this.spawnShip();
	                MsgCenter.notify(MsgConst.DAILY_QUEST_OPEN, this.questInfo);
	                TimedShopMgr.ins().generateNew();
	            }
	        }
	        else if (this.isNeedRefresh()) {
	            this.resetInfo();
	            MsgCenter.notify(MsgConst.DAILY_QUEST_OPEN, this.questInfo);
	            TimedShopMgr.ins().generateNew();
	        }
	        else {
	            TimedShopMgr.ins().loadFromSave();
	        }
	        SL_DailyQuest.save();
	    }
	    isOpen() {
	        return this.questInfo.isOpen;
	    }
	    canOpen() {
	        return this.questInfo.homeTimes >= 2;
	    }
	    open() {
	        this.questInfo.isOpen = true;
	    }
	    hasQuest() {
	        return this.questInfo.isExistQuest();
	    }
	    shouldShowNotLookedIndicator() {
	        return !this.questInfo.playerHasLookedAtQuest;
	    }
	    shouldShowProgressIndicator() {
	        return this.questInfo.playerHasLookedAtQuest;
	    }
	    shouldShowCollectItemsButton() {
	        return this.hasQuest() && !this.isCompleted() && this.getCountOfRequestedItemAvailableInCamp() > 0;
	    }
	    isCompleted() {
	        return this.questInfo.isFinished;
	    }
	    shouldShowCompleteQuestButton() {
	        return this.hasQuest() && this.isCompleted();
	    }
	    onQuestPopupOpen() {
	        this.questInfo.playerHasLookedAtQuest = true;
	    }
	    getRequestedItemDefinition() {
	        return this.questInfo.needPref;
	    }
	    getRequestItemCount() {
	        return this.questInfo.activeInfo.requestNum;
	    }
	    getCollectedItemCount() {
	        return this.questInfo.activeInfo.collectedNum;
	    }
	    resetInfo() {
	        if (this.questInfo.isExistQuest()) {
	            this.questInfo.setPreviousId(this.questInfo.activeInfo.cid);
	        }
	        let total = WorldMgr.ins().GetNumLevelsWon();
	        let questVo = DailyQuestCfg.randomQuest(total, this.questInfo.preId);
	        this.questInfo.playerHasLookedAtQuest = false;
	        this.questInfo.lastRefreshTime = TimeMgr.ins().getTime();
	        this.questInfo.activeNewQuest(questVo);
	    }
	    isNeedRefresh() {
	        let now = TimeMgr.ins().getTime();
	        let refreshTime = this.questInfo.refreshTime;
	        return now >= refreshTime;
	    }
	    getRemainderTime() {
	        return this.questInfo.remainderTime;
	    }
	    isPick() {
	        return this.isOpen() && !this.questInfo.activeInfo;
	    }
	    spawnShip() {
	        let drawnObject = Thing.create(DailyQuestMgr.ShipId);
	        let v = DailyQuestMgr.SpawnPoint;
	        drawnObject.setRootPosition(v.x, v.y, v.z);
	        drawnObject.getComponent(Component_DailyQuest_Ship).spawnAnimation();
	    }
	    getShip() {
	        return ThingList.lists[DailyQuestMgr.ShipId][0];
	    }
	    getRemainingItemCount() {
	        return this.questInfo.remainderNum;
	    }
	    getCountOfRequestedItemAvailableInCamp() {
	        let itemDefinition = this.questInfo.needPref;
	        let list = ThingList.lists[itemDefinition.cid] || [];
	        list = list.filter(item => !item.dead);
	        return MathUtil.clamp(list.length, 0, this.getRemainingItemCount());
	    }
	    collectAvailableItemsFromCamp() {
	        let collectedCount = Math.min(this.getCountOfRequestedItemAvailableInCamp(), this.getRemainingItemCount());
	        let itemDefinition = this.questInfo.needPref;
	        let list = ThingList.lists[itemDefinition.cid] || [];
	        list = list.filter(item => !item.dead);
	        let kalaShip = this.getShip();
	        this.collectItems(collectedCount, kalaShip, list);
	    }
	    collectItems(count, ship, objs) {
	        for (let i = 0; i < count; i++) {
	            let obj = objs[i];
	            if (obj) {
	                let gameObject = Globals.createFromPrefab("ItemTrailFX");
	                obj.addChild(gameObject);
	                gameObject.transform.localPosition = new Laya.Vector3();
	                iTween.MoveTo2(obj, iTween.Hash("name", "DailyQueatCollect", "islocal", false, "time", 1, "x", ship.drawnCenter.x, "y", ship.drawnCenter.y, "EaseType", EaseType.easeInOutCubic, "oncompletetarget", this, "oncomplete", () => {
	                    obj.destroyDrawnObject();
	                    this.onCollectAniCompleted();
	                }));
	            }
	        }
	    }
	    onCollectAniCompleted() {
	        this.questInfo.activeInfo.collectedNum++;
	        SL_DailyQuest.save();
	        Globals.createFromPrefabAt("ItemHitFX", this.getShip().drawnCenter);
	        SoundMgr.ins().playSound("m121");
	        if (this.questInfo.isFinished) {
	            SoundMgr.ins().playSound("m122");
	        }
	    }
	    completeQuest() {
	        let ship = this.getShip();
	        let shipCenter = ship.drawnCenter;
	        let shipCenterX = shipCenter.x;
	        let shipCenterY = shipCenter.y;
	        let drawnObject = Thing.createAtPointAndSwoopToFreeCell(DailyQuestMgr.NormalRewardId, shipCenterX, shipCenterY);
	        drawnObject.customLootBundle.clear();
	        for (let i = 0; i < this.questInfo.rewardAmount; i++) {
	            drawnObject.customLootBundle.addLootSL(Thing.create_SaveData(this.questInfo.rewardPref));
	        }
	        if (this.throwDiceForBonus()) {
	            let drawnObject2 = Thing.createAtPointAndSwoopToFreeCell(DailyQuestMgr.BonusRewardId, shipCenterX, shipCenterY);
	            drawnObject2.customLootBundle.clear();
	            for (let j = 0; j < this.questInfo.bonusAmount; j++) {
	                drawnObject2.customLootBundle.addLootSL(Thing.create_SaveData(this.questInfo.bonusPref));
	            }
	        }
	        if (BankMgr.ins().isFeatureActive()) {
	            let list = BankMgr.ins().trySpawnEggBankItems(2);
	            for (let item of list) {
	                Thing.createAtPointAndSwoopToFreeCell(item, shipCenterX, shipCenterY, null, item ? null : "ParticleRoot_ShopBuyImpact");
	                SoundMgr.ins().playSound("m225");
	            }
	        }
	        SoundMgr.ins().playSound("m67");
	        this.questInfo.finishedTimes++;
	        this.questInfo.preId = this.questInfo.activeInfo.cid;
	        this.questInfo.activeInfo = null;
	        SL_DailyQuest.save();
	    }
	    throwDiceForBonus() {
	        return Math.random() < this.questInfo.bonusChance;
	    }
	}
	DailyQuestMgr.ShipId = 10804;
	DailyQuestMgr.NormalRewardId = 10805;
	DailyQuestMgr.BonusRewardId = 10806;
	DailyQuestMgr.SpawnPoint = new Laya.Vector3(-5.6, 5.9, 0);

	class SL_DailyPass {
	    constructor() {
	        this.id = SaveLoadConst.DAILY_PASS;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.GemsPerDay);
	        obj.setValue("1", this.TotalDaysStartedWith);
	        obj.setValue("2", this.DaysCollected);
	        obj.setValue("3", this.DaysLeftToCollect);
	        obj.setValue("4", this.CreationTime);
	        obj.setValue("5", this.LastCollectedTime);
	        obj.setValue("6", this.LastUpdatedTime);
	        return obj;
	    }
	    import(data) {
	        this.GemsPerDay = data.getValue("0");
	        this.TotalDaysStartedWith = data.getValue("1");
	        this.DaysCollected = data.getValue("2");
	        this.DaysLeftToCollect = data.getValue("3");
	        this.CreationTime = data.getValue("4");
	        this.LastCollectedTime = data.getValue("5");
	        this.LastUpdatedTime = data.getValue("6");
	    }
	}

	class SL_Shop {
	    constructor() {
	        this.id = SaveLoadConst.SHOP;
	        this.UnlocksActivatedByPlayer = [];
	        this.HardCoinIDsPurchased = [];
	        this.DidPurchasePremiumLand = false;
	        this.DidPurchaseStarterPack = false;
	        this.EventTimedOffersPurchased = [];
	        this.PurchasedTimedBundleChests = [];
	        this.PurchasedProgressionDupes = [];
	        this.SmartTimedShopEntries = [];
	        this.DidPurchasePremiumLand2 = false;
	        this.DidPurchasePremiumLand3 = false;
	        this.ShopLimitedItems = [];
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.UnlocksActivatedByPlayer != null) {
	            obj.setValue("0", SyncObj.serializeFromArray(this.UnlocksActivatedByPlayer));
	        }
	        if (this.HardCoinIDsPurchased != null) {
	            obj.setValue("1", SyncObj.serializeFromArray(this.HardCoinIDsPurchased));
	        }
	        if (this.m_dailyPass != null) {
	            obj.setValueISL("2", this.m_dailyPass);
	        }
	        if (this.m_dailyPass2 != null) {
	            obj.setValueISL("12", this.m_dailyPass2);
	        }
	        obj.setValue("3", this.DidPurchasePremiumLand);
	        obj.setValue("4", this.DidPurchaseStarterPack);
	        if (this.EventTimedOffersPurchased != null) {
	            obj.setValue("5", SyncObj.serializeFromArray(this.EventTimedOffersPurchased));
	        }
	        if (this.PurchasedTimedBundleChests != null) {
	            obj.setValue("6", SyncObj.serializeFromArray(this.PurchasedTimedBundleChests));
	        }
	        if (this.PurchasedProgressionDupes != null) {
	            obj.setValue("7", SyncObj.serializeFromArray(this.PurchasedProgressionDupes));
	        }
	        if (this.SmartTimedShopEntries != null && this.SmartTimedShopEntries.length > 0) {
	            obj.setValueISLArr("8", this.SmartTimedShopEntries);
	        }
	        obj.setValue("9", this.DidPurchasePremiumLand2);
	        obj.setValue("10", this.DidPurchasePremiumLand3);
	        if (this.ShopLimitedItems != null && this.ShopLimitedItems.length > 0) {
	            obj.setValueISLArr("11", this.ShopLimitedItems);
	        }
	        return obj;
	    }
	    import(data) {
	        this.UnlocksActivatedByPlayer = SyncObj.deserializeToArray(data.getValue("0"));
	        this.HardCoinIDsPurchased = SyncObj.deserializeToArray(data.getValue("1"));
	        if (data.hasKey("2")) {
	            this.m_dailyPass = data.getValueISL("2", SL_DailyPass);
	        }
	        if (data.hasKey("12")) {
	            this.m_dailyPass2 = data.getValueISL("12", SL_DailyPass);
	        }
	        this.DidPurchasePremiumLand = data.getValue("3");
	        this.DidPurchaseStarterPack = data.getValue("4");
	        this.EventTimedOffersPurchased = SyncObj.deserializeToArray(data.getValue("5"));
	        this.PurchasedTimedBundleChests = SyncObj.deserializeToArray(data.getValue("6"));
	        this.PurchasedProgressionDupes = SyncObj.deserializeToArray(data.getValue("7"));
	        if (data.hasKey("8")) {
	            this.SmartTimedShopEntries = data.getValueISLArr("8", SL_TimedShopEntry);
	        }
	        this.DidPurchasePremiumLand2 = data.getValue("9");
	        this.DidPurchasePremiumLand3 = data.getValue("10");
	        if (data.hasKey("11")) {
	            this.ShopLimitedItems = data.getValueISLArr("11", SL_ShopLimitedItem);
	        }
	    }
	}

	class ShopSaveMgr {
	    static DidPlayerActivateUnlock(shopItemSaveID) {
	        return this.PlayerActivatedUnlocks.some(id => id == shopItemSaveID);
	    }
	    static NewUnlockActivated(shopItemSaveID) {
	        if (this.DidPlayerActivateUnlock(shopItemSaveID)) {
	            GuiMgr.errorMessage("ShopSaveManager already contains " + shopItemSaveID + " in its PlayerAcivatedUnlocks list, but you're trying to add it again.");
	        }
	        else {
	            this.PlayerActivatedUnlocks.push(shopItemSaveID);
	        }
	    }
	    static HardCoinPurchaseMade(def) {
	        if (!this.HardCoinEverPurchased(def.SaveID)) {
	            this.HardCoinIDsPurchased.push(def.SaveID);
	        }
	    }
	    static HardCoinEverPurchased(def) {
	        return this.HardCoinIDsPurchased.some(id => id == def.SaveID);
	    }
	    static EventTimedOfferPurchased(id) {
	        this.EventTimedOffersPurchased.push(id);
	    }
	    static DidPurchaseEventTimedOffer(id) {
	        return this.EventTimedOffersPurchased.some(val => id == val);
	    }
	    static PurchasedTimedBundleChest(timedBundleChestId) {
	        if (!this.HasPurchasedTimedBundleChest(timedBundleChestId)) {
	            this.PurchasedTimedBundleChests.push(timedBundleChestId);
	        }
	    }
	    static HasPurchasedTimedBundleChest(timedBundleChestId) {
	        return this.PurchasedTimedBundleChests.some(val => val == timedBundleChestId);
	    }
	    static PurchasedProgressionDupe(progressionDupeId) {
	        if (!this.HasPurchasedProgressionDupe(progressionDupeId)) {
	            this.PurchasedProgressionDupes.push(progressionDupeId);
	        }
	    }
	    static HasPurchasedProgressionDupe(progressionDupeId) {
	        return this.PurchasedProgressionDupes.some(id => id == progressionDupeId);
	    }
	    static PurchaseSmartTimedShopItem(definition) {
	        let saveDataForTimedShopDefinition = this.GetSaveDataForTimedShopDefinition(definition);
	        if (saveDataForTimedShopDefinition != null) {
	            saveDataForTimedShopDefinition.timesPurchased++;
	        }
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	    }
	    static GetSaveDataForTimedShopDefinition(definition) {
	        return this.SmartTimedShopEntries.find(item => item.timedShopId === definition.id);
	    }
	    static GetSaveDataObject() {
	        let saveData_Shop = new SL_Shop();
	        saveData_Shop.UnlocksActivatedByPlayer = this.PlayerActivatedUnlocks;
	        saveData_Shop.HardCoinIDsPurchased = this.HardCoinIDsPurchased;
	        saveData_Shop.DidPurchasePremiumLand = this.DidPurchasePremiumLand;
	        saveData_Shop.DidPurchaseStarterPack = this.DidPurchaseStarterPack;
	        saveData_Shop.EventTimedOffersPurchased = this.EventTimedOffersPurchased.concat();
	        saveData_Shop.PurchasedTimedBundleChests = this.PurchasedTimedBundleChests;
	        saveData_Shop.PurchasedProgressionDupes = this.PurchasedProgressionDupes;
	        saveData_Shop.SmartTimedShopEntries = this.SmartTimedShopEntries;
	        saveData_Shop.DidPurchasePremiumLand2 = this.DidPurchasePremiumLand2;
	        saveData_Shop.DidPurchasePremiumLand3 = this.DidPurchasePremiumLand3;
	        saveData_Shop.ShopLimitedItems = this.ShopLimitedItems;
	        return saveData_Shop;
	    }
	    static InitFromSaveData(data) {
	        this.PlayerActivatedUnlocks = data.UnlocksActivatedByPlayer;
	        this.HardCoinIDsPurchased = data.HardCoinIDsPurchased;
	        this.DidPurchasePremiumLand = (this.DidPurchasePremiumLand || data.DidPurchasePremiumLand);
	        this.DidPurchaseStarterPack = data.DidPurchaseStarterPack;
	        this.EventTimedOffersPurchased = data.EventTimedOffersPurchased.concat();
	        this.PurchasedTimedBundleChests = data.PurchasedTimedBundleChests;
	        this.PurchasedProgressionDupes = data.PurchasedProgressionDupes;
	        this.SmartTimedShopEntries = data.SmartTimedShopEntries;
	        this.DidPurchasePremiumLand2 = (this.DidPurchasePremiumLand2 || data.DidPurchasePremiumLand2);
	        this.DidPurchasePremiumLand3 = (this.DidPurchasePremiumLand3 || data.DidPurchasePremiumLand3);
	        this.ShopLimitedItems = data.ShopLimitedItems;
	        if (data.m_dailyPass != null) {
	        }
	        if (data.m_dailyPass2 != null) {
	        }
	        ShopMgr.ins().onLoad(data);
	    }
	    static Debug_ResetTimedShopEntries() {
	        if (this.SmartTimedShopEntries != null) {
	            this.SmartTimedShopEntries = [];
	            DailyQuestMgr.ins().enterHome(false);
	        }
	    }
	}
	ShopSaveMgr.PlayerActivatedUnlocks = [];
	ShopSaveMgr.HardCoinIDsPurchased = [];
	ShopSaveMgr.EventTimedOffersPurchased = [];
	ShopSaveMgr.DidPurchasePremiumLand = false;
	ShopSaveMgr.DidPurchasePremiumLand2 = false;
	ShopSaveMgr.DidPurchasePremiumLand3 = false;
	ShopSaveMgr.DidPurchaseStarterPack = false;
	ShopSaveMgr.PurchasedTimedBundleChests = [];
	ShopSaveMgr.PurchasedProgressionDupes = [];
	ShopSaveMgr.SmartTimedShopEntries = [];
	ShopSaveMgr.ShopLimitedItems = [];

	class ModalConfirm {
	    static info(content, onOk = null, okText = ModalConfirm.OK, title = ModalConfirm.TIP) {
	        PopupManager.show2(Presets.Simple1Button4(title, content, okText, false, onOk));
	    }
	}
	ModalConfirm.CONFIRM = LanCfg.get("10010001");
	ModalConfirm.CANCEL = LanCfg.get("10010002");
	ModalConfirm.OK = LanCfg.get("10010003");
	ModalConfirm.TIP = LanCfg.get("10010004");

	class SL_Setting {
	    constructor() {
	        this.id = SaveLoadConst.SETTING;
	        this.soundIsOn = true;
	        this.soundEffIsOn = true;
	        this.tutorialIsOn = true;
	        this.noPurchaseIsOn = false;
	        this.notiIsOn = true;
	        this.okIsOn = false;
	        this.isHighPerformance = true;
	        this.currentLanguageCode = 0;
	        this.campAllowChainReactions = true;
	        this.preferDragonMerge5 = false;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.soundIsOn);
	        obj.setValue("1", this.soundEffIsOn);
	        obj.setValue("2", this.tutorialIsOn);
	        obj.setValue("3", this.noPurchaseIsOn);
	        obj.setValue("4", this.notiIsOn);
	        obj.setValue("5", this.okIsOn);
	        obj.setValue("6", this.isHighPerformance);
	        obj.setValue("7", this.currentLanguageCode);
	        obj.setValue("8", this.campMergeRequiresOverlapToInitiate);
	        obj.setValue("9", this.campAllowChainReactions);
	        obj.setValue("10", this.preferDragonMerge5);
	        return obj;
	    }
	    import(data) {
	        this.soundIsOn = data.getValue("0");
	        this.soundEffIsOn = data.getValue("1");
	        this.tutorialIsOn = data.getValue("2");
	        this.noPurchaseIsOn = data.getValue("3");
	        this.notiIsOn = data.getValue("4");
	        this.okIsOn = data.getValue("5");
	        this.isHighPerformance = data.getValue("6");
	        this.currentLanguageCode = data.getValue("7");
	        this.campMergeRequiresOverlapToInitiate = data.getValue("8");
	        this.campAllowChainReactions = data.getValue("9");
	        this.preferDragonMerge5 = data.getValue("10");
	    }
	    static save() {
	        SaveLoad.save(SL_Setting.getSettingData());
	    }
	    static getSettingData() {
	        let obj = new SL_Setting();
	        obj.soundIsOn = SettingMgr.soundIsOn;
	        obj.soundEffIsOn = SettingMgr.soundEffIsOn;
	        obj.tutorialIsOn = SettingMgr.tutorialIsOn;
	        obj.noPurchaseIsOn = SettingMgr.noPurchaseIsOn;
	        obj.notiIsOn = SettingMgr.notiIsOn;
	        obj.okIsOn = SettingMgr.okIsOn;
	        obj.isHighPerformance = SettingMgr.getFunPerformance();
	        obj.currentLanguageCode = SettingMgr.curLanguageCode;
	        obj.campMergeRequiresOverlapToInitiate = Glob.campMergeRequiresOverlapToInitiate;
	        obj.campAllowChainReactions = Glob.campAllowChainReactions;
	        obj.preferDragonMerge5 = Glob.preferDragonMerge5;
	        return obj;
	    }
	    static generateNewGame() {
	        return SL_Setting.getSettingData();
	    }
	}

	class SettingMgr {
	    static init() {
	        let slObj = new SL_Setting();
	        if (SaveLoad.has(SaveLoadConst.SETTING)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveSetting(slObj);
	        }
	        this.soundIsOn = slObj.soundIsOn;
	        this.soundEffIsOn = slObj.soundEffIsOn;
	        this.tutorialIsOn = slObj.tutorialIsOn;
	        this.noPurchaseIsOn = slObj.noPurchaseIsOn;
	        this.notiIsOn = slObj.notiIsOn;
	        this.okIsOn = slObj.okIsOn;
	        this.isHighPerformance = slObj.isHighPerformance;
	        this.curLanguageCode = slObj.currentLanguageCode;
	        Glob.tutorialOn = slObj.tutorialIsOn;
	        Glob.tapConfirmSettingOn = slObj.okIsOn;
	        Glob.campMergeRequiresOverlapToInitiate = slObj.campMergeRequiresOverlapToInitiate;
	        Glob.campAllowChainReactions = slObj.campAllowChainReactions;
	        Glob.preferDragonMerge5 = slObj.preferDragonMerge5;
	        SoundMgr.ins().setMusicEnable(this.soundIsOn);
	        SoundMgr.ins().setSoundEnable(this.soundEffIsOn);
	        this.setFPS(this.isHighPerformance);
	    }
	    static saveSetting(data) {
	        data.soundIsOn = true;
	        data.soundEffIsOn = true;
	        data.tutorialIsOn = true;
	        data.noPurchaseIsOn = false;
	        data.notiIsOn = true;
	        data.okIsOn = false;
	        data.currentLanguageCode = 0;
	        data.campAllowChainReactions = true;
	        data.preferDragonMerge5 = false;
	        SaveLoad.save(data);
	    }
	    static getSoundState() {
	        return this.soundIsOn;
	    }
	    static getSoundEffState() {
	        return this.soundEffIsOn;
	    }
	    static getTutorialState() {
	        return this.tutorialIsOn;
	    }
	    static getNoPurchaseState() {
	        return this.noPurchaseIsOn;
	    }
	    static getNotiState() {
	        return this.notiIsOn;
	    }
	    static getOkBtnState() {
	        return this.okIsOn;
	    }
	    static updteFunPerformance(isHigh) {
	        this.isHighPerformance = isHigh;
	    }
	    static getFunPerformance() {
	        return this.isHighPerformance;
	    }
	    static saveCurLanguageCode(code) {
	        this.curLanguageCode = code;
	        SL_Setting.save();
	        MsgCenter.notify(MsgConst.UPDATE_LANGCODE);
	    }
	    static getCurLanguageCode() {
	        return this.curLanguageCode;
	    }
	    static setFPS(isHigh) {
	        if (isHigh) {
	            Laya.stage.frameRate = Laya.Stage.FRAME_FAST;
	        }
	        else {
	            Laya.stage.frameRate = Laya.Stage.FRAME_SLOW;
	        }
	    }
	}
	SettingMgr.soundIsOn = true;
	SettingMgr.soundEffIsOn = true;
	SettingMgr.tutorialIsOn = true;
	SettingMgr.noPurchaseIsOn = false;
	SettingMgr.notiIsOn = true;
	SettingMgr.okIsOn = false;
	SettingMgr.curLanguageCode = 0;
	SettingMgr.languageData = [{ langTxt: "中文", code: "zh-CN" }];
	SettingMgr.isHighPerformance = true;
	SettingMgr.isSaveState = false;

	class CornerUi extends Laya.View {
	    constructor(id) {
	        super();
	        this.isShow = false;
	        this.id = id;
	        this.scale(1.15, 1.15);
	        this.loadScene("data/window/" + id + ".scene");
	    }
	    setType(type) {
	        this.uiType = type;
	    }
	    onSceneChanged(data) {
	        switch (data.state) {
	            case GameState.InLevel:
	                this.setType(Glob.currentLevel.isHomeLevel() ? 1 : 3);
	                break;
	            case GameState.WorldMap:
	                this.setType(2);
	                break;
	        }
	    }
	    onEnable() {
	        this.openUi();
	    }
	    onDisable() {
	        this.closeUi();
	    }
	    openUi() {
	        this.onSceneChanged({ state: Glob.gameState });
	        MsgCenter.listen(MsgConst.SCENE_STATE_CHANGED, this.onSceneChanged, this);
	    }
	    closeUi(arg) {
	        MsgCenter.remove(MsgConst.SCENE_STATE_CHANGED, this.onSceneChanged, this);
	    }
	    showUi(arg) {
	        this.visible = true;
	    }
	    hideUi(arg) {
	        this.visible = false;
	    }
	}

	class ThingInfoBar extends ui.data.module.mainUi.ThingInfoBarUI {
	    constructor() {
	        super(...arguments);
	        this.currThing = null;
	        this.infoVisible = true;
	    }
	    resetAction() {
	        if (!this.currThing)
	            return;
	        let thing = this.currThing;
	        let actionText = thing.cfg.ActionText;
	        this.boxAction.visible = !!actionText;
	        !!actionText && (this.boxAction.disabled = !thing.hasTapsAvailable);
	        actionText && (this.lblAction.text = actionText);
	        let width = this.lblAction.width + 100;
	        this.boxAction.width = Math.max(width, 200);
	        this.boxAction.x = this.boxAction.width * this.boxAction.anchorX;
	    }
	    resetButtons(thing) {
	        this.boxBtns.removeChildren();
	        if (thing.cfg.hasChain) {
	            this.boxBtns.addChild(this.btnChain);
	            if (!this.chainObj) {
	                this.chainObj = { genreId: thing.cfg.breedId, newGoodsId: thing.cfg.cid };
	            }
	            else {
	                this.chainObj.genreId = thing.cfg.breedId;
	                this.chainObj.newGoodsId = thing.cfg.cid;
	            }
	        }
	        if (thing.cfg.isAMonsterDef) {
	            this.boxBtns.addChild(this.btnDragonPower);
	            this.lblPower.text = thing.cfg.dragonPower.toString();
	        }
	        let isSellabl = thing.cfg.getIsSellable(Glob.inAnEventArea);
	        if (isSellabl) {
	            let price = thing.sellValue;
	            let isZero = price == 0;
	            if (isZero) {
	                this.boxBtns.addChild(this.btnDelete);
	            }
	            else {
	                this.lblPrice.text = price.toString();
	                this.boxBtns.addChild(this.btnSale);
	            }
	        }
	    }
	    onClickSaleOrDelete() {
	        let currThing = this.currThing;
	        let cfg = currThing.cfg;
	        if (currThing != null && currThing.isInASellableState()) {
	            if (cfg.preventSellIfLastInThisCategory != 0 && ThingList.categories[cfg.preventSellIfLastInThisCategory]) {
	                let list = ThingList.categories[cfg.preventSellIfLastInThisCategory];
	                if (list != null && list.length == 1) {
	                    let dialogCannotSellLast_Title = StringUtil.format(LanCfg.get("20014001"), cfg.name);
	                    ModalConfirm.info(dialogCannotSellLast_Title);
	                    return;
	                }
	            }
	            if (cfg.confirmSell) {
	                let param = {
	                    thing: currThing,
	                    handler: Laya.Handler.create(this, this.sellConfirmed),
	                };
	                LayerMgr.ins().open(UiConst.ThingActionView, param);
	            }
	            else {
	                this.sellConfirmed();
	            }
	        }
	    }
	    sellConfirmed() {
	        this.currThing.Event_TrySellConfirmed();
	    }
	    onClickSwitch() {
	        this.onSwitch && this.onSwitch.run();
	        TomeTip.showGameTip(GameTipTypeID.Tip_InfoBar);
	    }
	    onClickAction() {
	        if (this.currThing && this.currThing.isInASelectableState() && this.VerifyValidPosition()) {
	            this.currThing.triggerTapBehavior();
	        }
	    }
	    onClickChain() {
	        LayerMgr.ins().open(UiConst.AtlasView, this.chainObj);
	    }
	    VerifyValidPosition() {
	        if (!this.currThing.cfg.requiresCellPlacement) {
	            return true;
	        }
	        if (!Glob.map.inBoundsBy(this.currThing.x, this.currThing.y, true)) {
	            return false;
	        }
	        let metaCell_CenteredOn = Glob.map.getMetaCell(this.currThing.x, this.currThing.y, this.currThing.cfg.widthCell, this.currThing.cfg.heightCell, false);
	        if (metaCell_CenteredOn.hasAnyDeadCells()) {
	            return false;
	        }
	        return true;
	    }
	    onClickDragonPower() {
	        ModalConfirm.info(LanCfg.get("20010016"), null, LanCfg.get("10010003"), LanCfg.get("20020003"));
	    }
	    onAwake() {
	        this.btnSale.on(Laya.Event.CLICK, this, this.onClickSaleOrDelete);
	        this.btnChain.on(Laya.Event.CLICK, this, this.onClickChain);
	        this.boxAction.on(Laya.Event.CLICK, this, this.onClickAction);
	        this.btnDelete.on(Laya.Event.CLICK, this, this.onClickSaleOrDelete);
	        this.btnSwitch.on(Laya.Event.CLICK, this, this.onClickSwitch);
	        this.btnDragonPower.on(Laya.Event.CLICK, this, this.onClickDragonPower);
	        MsgCenter.listen(MsgConst.ACTIVATE_TAP_BEHAVIOR, this.resetAction, this);
	    }
	    setInfoVisible(enable) {
	        this.infoVisible = enable;
	        this.boxInfo.visible = enable;
	        this.btnSwitch.rotation = enable ? 180 : 0;
	    }
	    getInfoVisible() {
	        return this.infoVisible;
	    }
	    clearInfo() {
	        this.showInfo();
	    }
	    showInfo(thing) {
	        let isEmpty = !thing;
	        this.currThing = null;
	        this.lblNo.visible = isEmpty;
	        this.lblName.visible = !isEmpty;
	        this.lblDesc.visible = !isEmpty;
	        this.boxBtns.visible = !isEmpty;
	        this.boxAction.visible = !isEmpty;
	        if (!isEmpty) {
	            this.currThing = thing;
	            thing.cfg.Rarity.FormatRarityLabel(this.lblName);
	            this.lblName.text = thing.cfg.InfoPanelHeadlineText;
	            this.lblDesc.text = thing.getDescriptionForInfoBar();
	            this.resetButtons(thing);
	            this.resetAction();
	        }
	    }
	}

	class MainLB extends CornerUi {
	    constructor() {
	        super(...arguments);
	        this._waitingForTutorialComplete = false;
	    }
	    setType(type) {
	        super.setType(type);
	        let isHome = type === 1;
	        let isLevel = type === 3;
	        let isWorld = type === 2;
	        this.btnHome.visible = isWorld;
	        this.btnSetting.visible = isWorld;
	        this.btnCloud.visible = false;
	        this.btnBack.visible = isLevel;
	        this.btnWorld.visible = isHome;
	        this.infoBar.left = isHome ? 135 : 85;
	        this.infoBar.visible = (isHome || isLevel) && WorldMgr.ins().isPassFirst();
	        this.onDailyQuestUpdate();
	        this.infoBar.clearInfo();
	    }
	    onDailyQuestUpdate() {
	        let vo = DailyQuestMgr.ins().getInfo();
	    }
	    onThingSelect(thing) {
	        this.infoBar.showInfo(thing);
	    }
	    onThingDeselect() {
	        this.infoBar.clearInfo();
	    }
	    onCurrLevelReady() {
	        let isAHomeArea = Glob.currLevelData.isHome;
	        let _isChallengeLevel = Glob.currLevelData.isChallenge;
	        if (_isChallengeLevel) {
	            GGChallengeLevelController.ins().Init(Glob.currentLevel.data.GetChallengeV2Data().TimeLimit);
	            let handler = Laya.Handler.create(this, this.onChallengeIntroClose);
	            LayerMgr.ins().open(UiConst.MainGoalView, handler);
	        }
	        else {
	            MsgCenter.notify(MsgConst.ENABLE_CLOCK, false);
	            GGChallengeLevelController.ins().SetAsDisabled();
	            if (!Glob.currentLevel.showLevelStartTipAndStartMusic() && !Glob.currLevelData.IsEventLevel) {
	            }
	        }
	    }
	    onChallengeIntroClose() {
	        if (Glob.currentLevel && !Glob.currentLevel.showLevelStartTipAndStartMusic()) {
	            LayerMgr.ins().open(UiConst.ChallengeClockView);
	        }
	        else {
	            this._waitingForTutorialComplete = true;
	        }
	    }
	    onTomeTipFinish() {
	        if (this._waitingForTutorialComplete) {
	            LayerMgr.ins().open(UiConst.ChallengeClockView);
	            this._waitingForTutorialComplete = false;
	        }
	    }
	    onLevelStartPlaying() {
	        ShopMgr.ins().onLevelChanged();
	    }
	    onAllDragonSleep() {
	        LayerMgr.ins().open(UiConst.HeadlineView, {
	            desc: LanCfg.get("20010036"),
	            closeHandler: Laya.Handler.create(this, this.checkShowLevelArrow),
	        });
	    }
	    checkShowLevelArrow() {
	        let energy = CurrencyMgr.ins().getAmount(ECurrency.Energy);
	        if (Glob.inHome && energy > 0 && Monster.activeMonsters.length === 0 && Monster.monsters.length > 0) {
	            this.showLevelEnterArrowAnim();
	        }
	    }
	    showLevelEnterArrowAnim() {
	        this.imgWorldArraw.y = -20;
	        this.imgWorldArraw.visible = true;
	        Laya.Tween.to(this.imgWorldArraw, { y: -40 }, 900, null, Laya.Handler.create(this, () => {
	            Laya.Tween.to(this.imgWorldArraw, { y: -20 }, 900, null, Laya.Handler.create(this, this.showLevelEnterArrowAnim));
	        }));
	    }
	    stopLevelEnterArrowAnim() {
	        this.imgWorldArraw.alpha = -20;
	        this.imgWorldArraw.visible = false;
	        Laya.Tween.clearAll(this.imgWorldArraw);
	    }
	    ShowBuyTimePopup() {
	        let isChallengeLevel = Glob.currLevelData.isChallenge;
	        if (isChallengeLevel) {
	            LayerMgr.ins().open(UiConst.ChallengeAddTimeView);
	        }
	    }
	    ShowChallengeExit() {
	    }
	    onClickHome(event) {
	        if (WorldMgr.ins().isShowHome()) {
	            MsgCenter.notify(MsgConst.CLICK_HOME_ENTER, WorldCfg.HomeId);
	        }
	        else {
	            ModalConfirm.info(LanCfg.get("20010024"), null, LanCfg.get("10010003"), LanCfg.get("20020001"));
	        }
	    }
	    onClickBack() {
	        Glob.levelOnBack();
	    }
	    onClickSwitch() {
	        this.infoBar.setInfoVisible(!this.infoBar.getInfoVisible());
	    }
	    onClickWorld(event) {
	        this.stopLevelEnterArrowAnim();
	        WorldMgr.ins().enterWorld();
	    }
	    onClickCloud() {
	    }
	    onClickSetting() {
	        LayerMgr.ins().open(UiConst.SettingView);
	    }
	    onLoop() {
	        this.netRa.selected = !Glob.socketMgr.connected;
	    }
	    onAwake() {
	        super.onAwake();
	        this.infoBar = new ThingInfoBar();
	        this.infoBar.bottom = 5;
	        this.infoBar.onSwitch = Laya.Handler.create(this, this.onClickSwitch, [], false);
	        this.addChild(this.infoBar);
	        this.left = 0;
	        this.bottom = 0;
	        this.btnHome.on(Laya.Event.CLICK, this, this.onClickHome);
	        this.btnBack.on(Laya.Event.CLICK, this, this.onClickBack);
	        this.btnCloud.on(Laya.Event.CLICK, this, this.onClickCloud);
	        this.btnWorld.on(Laya.Event.CLICK, this, this.onClickWorld);
	        this.btnSetting.on(Laya.Event.CLICK, this, this.onClickSetting);
	        SettingMgr.init();
	        this.timerLoop(1000, this, this.onLoop);
	    }
	    openUi() {
	        super.openUi();
	        let s = Laya.ScaleBox;
	        let show = true;
	        this.infoBar.setInfoVisible(show);
	        MsgCenter.listen(MsgConst.DAILY_QUEST_OPEN, this.onDailyQuestUpdate, this);
	        MsgCenter.listen(MsgConst.DAILY_QUEST_PICK, this.onDailyQuestUpdate, this);
	        MsgCenter.listen(MsgConst.THING_SELECT, this.onThingSelect, this);
	        MsgCenter.listen(MsgConst.THING_CANCALE_SELECT, this.onThingDeselect, this);
	        MsgCenter.listen(MsgConst.DAILY_QUEST_PROGRESS, this.onDailyQuestUpdate, this);
	        MsgCenter.listen(MsgConst.CURRENT_LEVEL_READY, this.onCurrLevelReady, this);
	        MsgCenter.listen(MsgConst.SHOW_BUY_TIME, this.ShowBuyTimePopup, this);
	        MsgCenter.listen(MsgConst.TOME_TIP_FINISH, this.onTomeTipFinish, this);
	        MsgCenter.listen(MsgConst.LEVEL_START_PLAYING, this.onLevelStartPlaying, this);
	        MsgCenter.listen(MsgConst.ALL_DRAGON_SLEEP, this.onAllDragonSleep, this);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.DAILY_QUEST_OPEN, this.onDailyQuestUpdate, this);
	        MsgCenter.remove(MsgConst.DAILY_QUEST_PICK, this.onDailyQuestUpdate, this);
	        MsgCenter.remove(MsgConst.THING_SELECT, this.onThingSelect, this);
	        MsgCenter.remove(MsgConst.THING_CANCALE_SELECT, this.onThingDeselect, this);
	        MsgCenter.remove(MsgConst.DAILY_QUEST_PROGRESS, this.onDailyQuestUpdate, this);
	        MsgCenter.remove(MsgConst.CURRENT_LEVEL_READY, this.onCurrLevelReady, this);
	        MsgCenter.remove(MsgConst.SHOW_BUY_TIME, this.ShowBuyTimePopup, this);
	        MsgCenter.remove(MsgConst.TOME_TIP_FINISH, this.onTomeTipFinish, this);
	        MsgCenter.remove(MsgConst.LEVEL_START_PLAYING, this.onLevelStartPlaying, this);
	        MsgCenter.remove(MsgConst.ALL_DRAGON_SLEEP, this.onAllDragonSleep, this);
	    }
	}

	class UiDef {
	}

	class GoalTip extends ui.data.module.level.GoalTipUI {
	    setData(stateTxt, countTxt) {
	        this.lblState.text = stateTxt;
	        this.lblCount.text = countTxt;
	    }
	}

	class GoalTipMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.showList = [];
	    }
	    getTip(val, max) {
	        let tip = Laya.Pool.getItemByClass(GoalTip.name, GoalTip);
	        let state = val >= max ? GoalTipMgr.COMPLETE : GoalTipMgr.PROGRESS;
	        tip.setData(state, val + "/" + max);
	        return tip;
	    }
	    addTip(target, tip) {
	        tip.x = target.width + 20;
	        tip.y = target.height / 2 - tip.height / 2;
	        target.addChild(tip);
	    }
	    tween(tip) {
	        tip.alpha = 0;
	        this.showList.push(tip);
	        Laya.Tween.to(tip, { alpha: 1 }, 500, null, Laya.Handler.create(this, () => {
	            Laya.Tween.to(tip, {}, 1000, null, Laya.Handler.create(this, () => {
	                Laya.Tween.to(tip, { alpha: 0 }, 500, null, Laya.Handler.create(this, () => {
	                    let index = this.showList.findIndex(showItem => showItem === tip);
	                    this.showList.splice(index, 1);
	                    tip.removeSelf();
	                    Laya.Pool.recover(GoalTip.name, tip);
	                }));
	            }));
	        }));
	    }
	    pop(target, val, max) {
	        let tip = this.getTip(val, max);
	        this.addTip(target, tip);
	        this.tween(tip);
	    }
	    clear() {
	        this.showList.forEach(tip => {
	            Laya.Tween.clearAll(tip);
	            tip.removeSelf();
	            Laya.Pool.recover(GoalTip.name, tip);
	        });
	    }
	}
	GoalTipMgr.PROGRESS = LanCfg.get("20017001");
	GoalTipMgr.COMPLETE = LanCfg.get("20017002");

	class LevelChestBox extends ui.data.module.mainUi.LevelChestBoxUI {
	    onClickGift() {
	        PopupManager.show(UiConst.LevelChestView);
	    }
	    setSlot(vo, index) {
	        let slot = this["imgSlot" + index];
	        if (vo.isEmpty()) {
	            slot.visible = false;
	        }
	        else {
	            slot.visible = true;
	            switch (vo.status) {
	                case 2:
	                    slot.skin = "res/skin/mainUI/btn_baoxiang_zhi.png";
	                    break;
	                case 3:
	                    slot.skin = "res/skin/mainUI/btn_baoxiang_jin.png";
	                    break;
	                case 4:
	                    slot.skin = "res/skin/mainUI/btn_baoxiang_lv.png";
	                    break;
	                default:
	                    break;
	            }
	        }
	    }
	    onTimer() {
	        let chestList = LevelChestMgr.ins().getChestList();
	        let progressChest = chestList.find(vo => vo.isProgress());
	        if (progressChest) {
	            this.bar.value = progressChest.timerPercent;
	        }
	        else {
	            this.updateView();
	        }
	    }
	    updateSlots(chests) {
	        chests.forEach((chestVo, index) => {
	            this.setSlot(chestVo, index);
	        });
	    }
	    updateTimerAndBar(chests) {
	        let bar = this.bar;
	        let lblNew = this.lblNew;
	        let boxTimer = this.boxTimer;
	        let imgTimer = this.imgTimer;
	        boxTimer.fixedText = "";
	        if (LevelChestMgr.ins().isAllEmpty()) {
	            bar.visible = false;
	            lblNew.visible = false;
	            imgTimer.visible = false;
	        }
	        else {
	            let progressChest = chests.find(vo => vo.isProgress());
	            if (progressChest) {
	                bar.visible = true;
	                lblNew.visible = false;
	                imgTimer.visible = true;
	                boxTimer.count = progressChest.countSeconds;
	            }
	            else {
	                bar.visible = false;
	                lblNew.visible = true;
	                imgTimer.visible = false;
	            }
	        }
	    }
	    updateView() {
	        let chests = LevelChestMgr.ins().getChestList();
	        this.updateSlots(chests);
	        this.updateTimerAndBar(chests);
	    }
	    onAwake() {
	        let boxTimer = this.boxTimer;
	        boxTimer.updateHandler = Laya.Handler.create(this, this.onTimer, null, false);
	        boxTimer.formatFunc = Laya.Handler.create(null, TimeMgr.ins().formatTimer1, [], false);
	        this.btnChest.on(Laya.Event.CLICK, this, this.onClickGift);
	        this.lblNew.text = LanCfg.get("20010029");
	    }
	    onEnable() {
	        this.updateView();
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_ADD, this.updateView, this);
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_UNLOCK, this.updateView, this);
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_COLLECT, this.updateView, this);
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_FINISHED, this.updateView, this);
	    }
	    onDisable() {
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_ADD, this.updateView, this);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_UNLOCK, this.updateView, this);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_COLLECT, this.updateView, this);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_FINISHED, this.updateView, this);
	    }
	}

	class MainLT extends CornerUi {
	    constructor() {
	        super(...arguments);
	        this._count = 0;
	        this._rotation = -15;
	        this._isPlaying = false;
	        this.isBuyTimeActive = false;
	    }
	    updateUnlockHome(isWorld) {
	        if (isWorld) {
	            let num = WorldMgr.ins().showUnlockHomeTip();
	            if (num > 0) {
	                this.boxUnlockHome.visible = true;
	                this.lblUnlockHome.text = StringUtil.format(LanCfg.get("20020058"), num);
	            }
	            else {
	                this.boxUnlockHome.visible = false;
	            }
	        }
	        else {
	            this.boxUnlockHome.visible = false;
	        }
	    }
	    doAnim() {
	        if (this._count % 10 > 5) {
	            if (this._rotation <= 0)
	                this._rotation = 15;
	            else
	                this._rotation = -15;
	        }
	        else {
	            this._rotation = 0;
	        }
	        Laya.Tween.to(this.imgClock, { rotation: this._rotation }, 140);
	        this._count++;
	    }
	    stopClock() {
	        if (this._isPlaying) {
	            this._isPlaying = false;
	            this.clearTimer(this, this.doAnim);
	            Laya.Tween.clearAll(this.imgClock);
	            this.imgClock.rotation = 0;
	        }
	    }
	    playClock() {
	        if (!this._isPlaying) {
	            this._isPlaying = true;
	            this.timerLoop(150, this, this.doAnim);
	        }
	    }
	    enableClock(val) {
	        this.boxClock.visible = val;
	    }
	    updateClock(args) {
	        let left = args.left;
	        let total = args.total;
	        let isPaused = args.isPaused;
	        let value = left / total;
	        value = MathUtil.clamp(value, 0, 1);
	        this.barClock.value = value;
	        this.isBuyTimeActive = false;
	        if (value < 0.25) {
	            this.barClock.bar.skin = GameUtil.getCompPngSkin("progress_1$bar3");
	            this.playClock();
	            this.isBuyTimeActive = true;
	        }
	        else if (value < 0.5) {
	            this.barClock.bar.skin = GameUtil.getCompPngSkin("progress_1$bar");
	            this.stopClock();
	        }
	        else {
	            this.barClock.bar.skin = GameUtil.getCompPngSkin("progress_1$bar2");
	            this.stopClock();
	        }
	        if (isPaused) {
	            this.lblClock.text = LanCfg.get("20010033");
	        }
	        else {
	            this.lblClock.text = TimeMgr.ins().formatTimer2(Math.ceil(Math.max(left, 0)));
	        }
	    }
	    onClickClock() {
	        if (this.isBuyTimeActive) {
	            LayerMgr.ins().open(UiConst.ChallengeAddTimeView);
	        }
	    }
	    onClickUnlockHome() {
	        WorldMgr.ins().JumpToHighestUnlockedLevel();
	    }
	    updateChest() {
	        let isHome = this.uiType === 1;
	        let isWorld = this.uiType === 2;
	        if (isHome || isWorld) {
	            let isAllEmpty = LevelChestMgr.ins().isAllEmpty();
	            this.levelChestBox.visible = !isAllEmpty;
	        }
	        else {
	            this.levelChestBox.visible = false;
	        }
	    }
	    updateScore() {
	        let score = Glob.currentLevel.points;
	        let comp = this.lblScore.getComponent(RollText);
	        comp.roll(score, 1000, Laya.Handler.create(this, (val) => {
	            this.lblScore.text = StringUtil.formatNum(val);
	        }, [], false));
	    }
	    getGoalBtn(vo) {
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        let index = goals.findIndex(go => vo.cid === go.cid);
	        return this.subMissions[index];
	    }
	    updateGoals() {
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        this.subMissions.forEach((btn, index) => {
	            let goal = goals[index];
	            btn.visible = !!goal;
	            goal && this.setGoalStatus(btn, goal.Complete);
	            goal && this.setGoalCheck(btn, goal.EverViewed || goal.Complete);
	        });
	    }
	    setGoalStatus(btn, isFinished) {
	        btn.skin = isFinished ? "res/comp/zjm_xingji3.png" : "res/comp/zjm_xingji2.png";
	    }
	    onGoalCheck(vo) {
	        let button = this.getGoalBtn(vo);
	        this.setGoalCheck(button, vo.EverViewed || vo.Complete);
	    }
	    setGoalCheck(btn, isCheck) {
	        let lblNew = btn.getChildAt(0);
	        lblNew.visible = !isCheck;
	    }
	    onGoalProgress(vo) {
	        let button = this.getGoalBtn(vo);
	        this.setGoalStatus(button, vo.Complete);
	        this.setGoalCheck(button, vo.Complete || vo.EverViewed);
	        GoalTipMgr.ins().pop(button, vo.TimesDoneSoFar, vo.TimesToComplete);
	    }
	    onGoalComplete(vo) {
	        let button = this.getGoalBtn(vo);
	        this.setGoalStatus(button, vo.Complete);
	        this.setGoalCheck(button, vo.Complete || vo.EverViewed);
	        GoalTipMgr.ins().pop(button, vo.TimesDoneSoFar, vo.TimesToComplete);
	        WorldMgr.ins().ReTallyNumStarsEarned();
	    }
	    onMainGoalProgress(list) {
	        GoalTipMgr.ins().pop(this.btnMission, list[0], list[1]);
	    }
	    onMainGoalComplete(list) {
	        GoalTipMgr.ins().pop(this.btnMission, list[0], list[1]);
	    }
	    onPointChange() {
	        this.updateScore();
	    }
	    onClickActivity() {
	    }
	    onClickMission() {
	        this.hideArrow();
	        LayerMgr.ins().open(UiConst.MainGoalView);
	    }
	    onClickSubMission(index) {
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        let goal = goals[index];
	        goal.check();
	        LayerMgr.ins().open(UiConst.SubGoalView, index);
	    }
	    getHomeTaskBtn(vo) {
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        let index = goals.findIndex(go => vo.cid === go.cid);
	        return this.btnHomeTask[index];
	    }
	    updateHomeTask() {
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        this.btnHomeTask.forEach((btn, index) => {
	            let goal = goals[index];
	            btn.visible = !!goal;
	            goal && this.setHomeTaskStatus(btn, goal.Complete);
	        });
	    }
	    setHomeTaskStatus(btn, isFinished) {
	        btn.skin = isFinished ? "res/comp/zjm_xingji3.png" : "res/comp/zjm_xingji2.png";
	    }
	    onHomeTaskProgress(vo) {
	        let button = this.getHomeTaskBtn(vo);
	        this.setHomeTaskStatus(button, vo.Complete);
	        GoalTipMgr.ins().pop(button, vo.TimesDoneSoFar, vo.TimesToComplete);
	    }
	    onHomeTaskComplete(vo) {
	        let button = this.getHomeTaskBtn(vo);
	        this.setHomeTaskStatus(button, vo.Complete);
	        GoalTipMgr.ins().pop(button, vo.TimesDoneSoFar, vo.TimesToComplete);
	        WorldMgr.ins().ReTallyNumStarsEarned();
	    }
	    onMainHomeTaskProgress(list) {
	        GoalTipMgr.ins().pop(this.btnMission, list[0], list[1]);
	    }
	    onMainHomeTaskComplete(list) {
	        GoalTipMgr.ins().pop(this.btnMission, list[0], list[1]);
	    }
	    onClickHomeTask() {
	        this.hideArrow();
	        LayerMgr.ins().open(UiConst.HomeTaskView);
	    }
	    onClickHomeTaskInfo(index) {
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        let goal = goals[index];
	        goal.check();
	        LayerMgr.ins().open(UiConst.HomeTaskInfoView, index);
	    }
	    setEggLb(isClear) {
	        let len = BankMgr.ins().getCollectedEggsCount();
	        let isEmpty = BankMgr.ins().isEmpty();
	        if (isEmpty) {
	            if (isClear) {
	                this.btnEgg.visible = false;
	            }
	            else {
	                this.btnEgg.visible = true;
	            }
	            if (this.levelChestBox.visible) {
	                this.btnEgg.x = 458;
	            }
	            else {
	                this.btnEgg.x = 361;
	            }
	        }
	        else {
	            this.btnEgg.visible = false;
	            return;
	        }
	        if (len >= BankCfg.MaxSize) {
	            this.eggLbl.text = LanCfg.get("20010027");
	        }
	        else {
	            this.eggLbl.text = len + "/" + BankCfg.MaxSize;
	        }
	        this.showRedPint();
	    }
	    onClickEgg() {
	        LayerMgr.ins().open(UiConst.EggTreasuryView);
	    }
	    showRedPint() {
	        let eggs = BankMgr.ins().eggs;
	        let flag = false;
	        for (let i = 0; i < eggs.length; i++) {
	            let id = eggs[i].eggId;
	            if (id == BankItemVO.Normal || id == BankItemVO.Decision) {
	                flag = true;
	                break;
	            }
	        }
	        if (flag) {
	            this.imgRedPoint.visible = true;
	        }
	        else {
	            this.imgRedPoint.visible = false;
	        }
	    }
	    onClickOpenSetting(event) {
	        LayerMgr.ins().open(UiConst.SettingView);
	    }
	    updateStarCount() {
	        let starCount = WorldMgr.ins().TotalStarsEarned;
	        if (Glob.inHome && starCount > 0) {
	            this.homeTaskBox.visible = true;
	            this.starCountLb.text = starCount.toString();
	        }
	        else {
	            this.homeTaskBox.visible = false;
	        }
	    }
	    showArrow(id) {
	        if (!Glob.inHome) {
	            if (id !== HelpArrowTypeID.LevelWinGoal)
	                return;
	        }
	        this.spMainArrow.visible = true;
	        this.lblMainArrow.visible = true;
	        if (!this.arrowAnim) {
	            this.arrowAnim = new Laya.TimeLine();
	            this.spMainArrow.x = 85;
	            this.arrowAnim.to(this.spMainArrow, { x: 70 }, 700);
	            this.arrowAnim.to(this.spMainArrow, { x: 85 }, 700);
	            this.arrowAnim.play(0, true);
	        }
	    }
	    hideArrow() {
	        this.spMainArrow.visible = false;
	        this.lblMainArrow.visible = false;
	        if (this.arrowAnim) {
	            this.arrowAnim.destroy();
	            this.arrowAnim = null;
	        }
	    }
	    setType(type) {
	        super.setType(type);
	        let isHome = type === 1;
	        let isLevel = type === 3;
	        let isWorld = type === 2;
	        if (isHome || isWorld) {
	            this.enableClock(false);
	            this.hideArrow();
	        }
	        this.btnActivity.visible = false;
	        this.boxMission.visible = isLevel;
	        isLevel && this.updateGoals();
	        isHome && this.updateHomeTask();
	        this.imgScore.visible = isLevel || isHome;
	        this.lblDes.text = isHome ? LanCfg.get("20010022") : LanCfg.get("20010028");
	        if (isLevel || isHome) {
	            let score = Glob.currentLevel.points;
	            let comp = this.lblScore.getComponent(RollText);
	            comp.value = score;
	            this.lblScore.text = StringUtil.formatNum(score);
	        }
	        this.updateChest();
	        let isEmpty = BankMgr.ins().isEmpty();
	        if (isHome) {
	            if (isEmpty) {
	                this.setEggLb();
	            }
	            else {
	                this.btnEgg.visible = false;
	            }
	            this.updateStarCount();
	        }
	        else {
	            this.btnEgg.visible = false;
	            this.homeTaskBox.visible = false;
	        }
	        this.updateUnlockHome(isWorld);
	        if (type == 1 || type == 2) {
	            this.playerAvatar.mouseEnabled = true;
	        }
	        else {
	            this.playerAvatar.mouseEnabled = false;
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.lblVer.text = "ver:" + Version.ver;
	        this.lblVer.on(Laya.Event.CLICK, this, this.onVerClick);
	        this.left = 0;
	        this.top = 0;
	        this.subMissions = [];
	        for (let i = 0; i < 3; i++) {
	            let button = this.boxMission.getChildAt(i + 1);
	            button.on(Laya.Event.CLICK, this, this.onClickSubMission, [i]);
	            this.subMissions.push(button);
	        }
	        this.btnHomeTask = [];
	        for (let i = 0; i < 3; i++) {
	            let button = this.homeTaskBox.getChildAt(i + 1);
	            button.on(Laya.Event.CLICK, this, this.onClickHomeTaskInfo, [i]);
	            this.btnHomeTask.push(button);
	        }
	        this.btnMission.on(Laya.Event.CLICK, this, this.onClickMission);
	        this.btnAchieve.on(Laya.Event.CLICK, this, this.onClickHomeTask);
	        this.btnActivity.on(Laya.Event.CLICK, this, this.onClickActivity);
	        this.btnEgg.on(Laya.Event.CLICK, this, this.onClickEgg);
	        this.boxClock.on(Laya.Event.CLICK, this, this.onClickClock);
	        this.boxUnlockHome.on(Laya.Event.CLICK, this, this.onClickUnlockHome);
	        this.playerAvatar.on(Laya.Event.CLICK, this, this.onClickOpenSetting);
	        BankMgr.init();
	        this.lblLevel.visible = false;
	        this.lblName.visible = false;
	        UiDef.jeweledEgg = this.btnEgg;
	        UiDef.scorePoint = this.imgScore;
	        this.boxUnlockHome.width = Laya.stage.width / 1.15;
	        this.levelChestBox = new LevelChestBox();
	        this.levelChestBox.pos(361, 35);
	        this.addChild(this.levelChestBox);
	    }
	    openUi() {
	        super.openUi();
	        this.visible = true;
	        this.lblName.text = UserData.name;
	        let lv = UserData.playerLevel;
	        this.lblLevel.text = StringUtil.format(LanCfg.get("20010021"), lv);
	        MsgCenter.listen(MsgConst.LEVEL_GOAL_CHECK, this.onGoalCheck, this);
	        MsgCenter.listen(MsgConst.LEVEL_GOAL_COMPLETE, this.onGoalComplete, this);
	        MsgCenter.listen(MsgConst.LEVEL_GOAL_PROGRESS, this.onGoalProgress, this);
	        MsgCenter.listen(MsgConst.LEVEL_MAIN_GOAL_COMPLETE, this.onMainGoalComplete, this);
	        MsgCenter.listen(MsgConst.LEVEL_MAIN_GOAL_PROGRESS, this.onMainGoalProgress, this);
	        MsgCenter.listen(MsgConst.LEVEL_SHOW_WON_VIEW, this.onShowWonView, this);
	        MsgCenter.listen(MsgConst.LEVEL_POINT_CHANGE, this.onPointChange, this);
	        MsgCenter.listen(MsgConst.EGGBANK_HASEGG, this.setEggLb, this);
	        MsgCenter.listen(MsgConst.BANCKEGG_CLEAR, this.setEggLb, this);
	        MsgCenter.listen(MsgConst.BANCKEGG_UPDATE, this.showRedPint, this);
	        MsgCenter.listen(MsgConst.ENABLE_CLOCK, this.enableClock, this);
	        MsgCenter.listen(MsgConst.CLOCK_UPDATE, this.updateClock, this);
	        MsgCenter.listen(MsgConst.SHOP_CHANGE_STAR, this.updateStarCount, this);
	        MsgCenter.listen(MsgConst.BOUNCING_ARROW_SHOW, this.showArrow, this);
	        MsgCenter.listen(MsgConst.LEVEL_GOAL_COMPLETE, this.onHomeTaskComplete, this);
	        MsgCenter.listen(MsgConst.LEVEL_GOAL_PROGRESS, this.onHomeTaskProgress, this);
	        MsgCenter.listen(MsgConst.LEVEL_MAIN_GOAL_COMPLETE, this.onMainHomeTaskComplete, this);
	        MsgCenter.listen(MsgConst.LEVEL_MAIN_GOAL_PROGRESS, this.onMainHomeTaskProgress, this);
	        MsgCenter.listen(MsgConst.UPDATE_HOMETASK, this.updateHomeTask, this);
	    }
	    onShowWonView(points) {
	        let level = Glob.currLevelData;
	        if (!LocalData.ins().isRecorded(level.cid, LogLevelType.Won)) {
	            ApiMgr.addGuanQiaSta(level.cid, LogLevelType.Won);
	            LocalData.ins().recordLevel(level.cid, LogLevelType.Won);
	        }
	        let param = { newScore: points[0], highScore: points[1] };
	        LayerMgr.ins().closeAll();
	        LayerMgr.ins().open(UiConst.LevelWinView, param);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.LEVEL_GOAL_CHECK, this.onGoalCheck, this);
	        MsgCenter.remove(MsgConst.LEVEL_GOAL_COMPLETE, this.onGoalComplete, this);
	        MsgCenter.remove(MsgConst.LEVEL_GOAL_PROGRESS, this.onGoalProgress, this);
	        MsgCenter.remove(MsgConst.LEVEL_MAIN_GOAL_COMPLETE, this.onMainGoalComplete, this);
	        MsgCenter.remove(MsgConst.LEVEL_MAIN_GOAL_PROGRESS, this.onMainGoalProgress, this);
	        MsgCenter.remove(MsgConst.LEVEL_SHOW_WON_VIEW, this.onShowWonView, this);
	        MsgCenter.remove(MsgConst.LEVEL_POINT_CHANGE, this.onPointChange, this);
	        MsgCenter.remove(MsgConst.EGGBANK_HASEGG, this.setEggLb, this);
	        MsgCenter.remove(MsgConst.BANCKEGG_CLEAR, this.setEggLb, this);
	        MsgCenter.remove(MsgConst.BANCKEGG_UPDATE, this.showRedPint, this);
	        MsgCenter.remove(MsgConst.ENABLE_CLOCK, this.enableClock, this);
	        MsgCenter.remove(MsgConst.CLOCK_UPDATE, this.updateClock, this);
	        MsgCenter.remove(MsgConst.SHOP_CHANGE_STAR, this.updateStarCount, this);
	        MsgCenter.remove(MsgConst.BOUNCING_ARROW_SHOW, this.showArrow, this);
	        MsgCenter.remove(MsgConst.LEVEL_GOAL_COMPLETE, this.onHomeTaskComplete, this);
	        MsgCenter.remove(MsgConst.LEVEL_GOAL_PROGRESS, this.onHomeTaskProgress, this);
	        MsgCenter.remove(MsgConst.LEVEL_MAIN_GOAL_COMPLETE, this.onMainHomeTaskComplete, this);
	        MsgCenter.remove(MsgConst.LEVEL_MAIN_GOAL_PROGRESS, this.onMainHomeTaskProgress, this);
	        MsgCenter.remove(MsgConst.UPDATE_HOMETASK, this.updateHomeTask, this);
	    }
	    onVerClick() {
	        if (LoginData.gm <= 0)
	            return;
	        LayerMgr.ins().open(UiConst.GmView);
	    }
	}

	class DragonTabItemVo {
	    constructor(breedVo) {
	        this.isDisc = false;
	        this.isSeen = false;
	        this.breedVo = breedVo;
	        this.prefName = BreedsCfg.getPref(breedVo.cid);
	    }
	    get breedId() {
	        return this.breedVo.cid;
	    }
	    get rarity() {
	        return this.breedVo.rarity;
	    }
	    get order() {
	        return this.breedVo.order;
	    }
	    get name() {
	        return LanCfg.get(this.breedVo.shortName);
	    }
	    get power() {
	        return DragonBookMgr.ins().getBreedPower(this.breedId);
	    }
	    get amount() {
	        return DragonBookMgr.ins().getBreedEggAmount(this.breedId);
	    }
	}

	var EMergeInfo;
	(function (EMergeInfo) {
	    EMergeInfo[EMergeInfo["None"] = 0] = "None";
	    EMergeInfo[EMergeInfo["Merge3"] = 1] = "Merge3";
	    EMergeInfo[EMergeInfo["Merge5"] = 2] = "Merge5";
	})(EMergeInfo || (EMergeInfo = {}));
	var EMonsterType;
	(function (EMonsterType) {
	    EMonsterType[EMonsterType["NONE"] = 0] = "NONE";
	    EMonsterType[EMonsterType["RANDOM"] = 1] = "RANDOM";
	    EMonsterType[EMonsterType["Normal"] = 2] = "Normal";
	    EMonsterType[EMonsterType["Harvester"] = 3] = "Harvester";
	    EMonsterType[EMonsterType["Builder"] = 4] = "Builder";
	    EMonsterType[EMonsterType["Zoomer"] = 5] = "Zoomer";
	    EMonsterType[EMonsterType["Defender"] = 6] = "Defender";
	    EMonsterType[EMonsterType["Worker"] = 7] = "Worker";
	    EMonsterType[EMonsterType["Trophy"] = 8] = "Trophy";
	    EMonsterType[EMonsterType["Miner"] = 9] = "Miner";
	    EMonsterType[EMonsterType["Attacker"] = 10] = "Attacker";
	    EMonsterType[EMonsterType["Matcher"] = 11] = "Matcher";
	    EMonsterType[EMonsterType["Bomber"] = 12] = "Bomber";
	    EMonsterType[EMonsterType["Alchemist"] = 13] = "Alchemist";
	    EMonsterType[EMonsterType["Healer"] = 14] = "Healer";
	    EMonsterType[EMonsterType["TreasureHunter"] = 15] = "TreasureHunter";
	})(EMonsterType || (EMonsterType = {}));
	var EDragonType;
	(function (EDragonType) {
	    EDragonType[EDragonType["Egg"] = 0] = "Egg";
	    EDragonType[EDragonType["Dragon"] = 1] = "Dragon";
	})(EDragonType || (EDragonType = {}));

	class DragonItemVO {
	    get isEgg() {
	        return this.type === EDragonType.Egg;
	    }
	    get merge() {
	        return DragonBookMgr.ins().getMergeInfo(this.cid);
	    }
	    get mergeAmount() {
	        let merge = this.merge;
	        return merge === EMergeInfo.Merge5 ? 5 : merge === EMergeInfo.Merge3 ? 3 : 0;
	    }
	}

	class SL_DragonBook {
	    constructor() {
	        this.seenBreeds = [];
	        this.discoveredBreeds = [];
	        this.id = SaveLoadConst.DRAGON_BOOK;
	    }
	    static getSaveData() {
	        let obj = new SL_DragonBook();
	        obj.seenBreeds = DragonBookMgr.ins().seenIds.concat();
	        obj.discoveredBreeds = DragonBookMgr.ins().discoverIds.concat();
	        return obj;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", SyncObj.serializeFromArray(this.seenBreeds));
	        obj.setValue("1", SyncObj.serializeFromArray(this.discoveredBreeds));
	        return obj;
	    }
	    import(obj) {
	        this.seenBreeds = SyncObj.deserializeToArray(obj.getValue("0"));
	        this.discoveredBreeds = SyncObj.deserializeToArray(obj.getValue("1"));
	    }
	    static save() {
	        SaveLoad.save(SL_DragonBook.getSaveData());
	    }
	    static generateNewGame() {
	        return SL_DragonBook.getSaveData();
	    }
	}

	class DragonBookMgr extends Singleton {
	    constructor() {
	        super();
	        this.seenIds = [];
	        this.discoverIds = [];
	        this.breeds = [];
	        this.itemsMap = {};
	        this.mergeInfoMap = {};
	        this.breeds = [];
	        let cfgList = BreedsCfg.cfg;
	        for (let key in cfgList) {
	            let breedVo = cfgList[key];
	            if (breedVo.isMonster) {
	                let tabVo = new DragonTabItemVo(breedVo);
	                this.breeds.push(tabVo);
	                this.itemsMap[tabVo.breedId] = [];
	            }
	        }
	        ;
	        this.init();
	    }
	    sortBreeds() {
	        this.breeds.sort((a, b) => {
	            if (a.isDisc === b.isDisc) {
	                return a.order - b.order;
	            }
	            else {
	                return a.isDisc ? -1 : 1;
	            }
	        });
	    }
	    sortItems(items) {
	        items.sort((a, b) => a.order - b.order);
	    }
	    persistDragonBookFirstTime(data) {
	        data.discoveredBreeds = [];
	        data.seenBreeds = [];
	        SaveLoad.save(data);
	    }
	    init() {
	        let slObj = new SL_DragonBook();
	        if (SaveLoad.has(SaveLoadConst.DRAGON_BOOK)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.persistDragonBookFirstTime(slObj);
	        }
	        this.seenIds = slObj.seenBreeds.concat();
	        this.discoverIds = slObj.discoveredBreeds.concat();
	        this.breeds.forEach(item => {
	            item.isSeen = this.seenIds.some(id => item.breedId === id);
	            item.isDisc = this.discoverIds.some(id => item.breedId === id);
	        });
	        this.sortBreeds();
	    }
	    getMergeInfo(cid) {
	        if (this.mergeInfoMap[cid] === undefined) {
	            return EMergeInfo.None;
	        }
	        return this.mergeInfoMap[cid];
	    }
	    checkMerge(item) {
	        let count = this.itemsMap[item.breedId].filter(data => item.cid === data.cid).length;
	        let newMerge = count >= 5 ? EMergeInfo.Merge5 : count >= 3 ? EMergeInfo.Merge3 : EMergeInfo.None;
	        if (newMerge !== this.getMergeInfo(item.cid)) {
	            this.mergeInfoMap[item.cid] = newMerge;
	        }
	    }
	    canMerge(cid) {
	        let mergeInfo = this.getMergeInfo(cid);
	        if (Glob.preferDragonMerge5) {
	            return mergeInfo == EMergeInfo.Merge5;
	        }
	        return mergeInfo !== EMergeInfo.None;
	    }
	    getBreeds() {
	        return this.breeds;
	    }
	    getBreedsInView() {
	        let list = [];
	        let count = 0;
	        for (let item of this.breeds) {
	            if (item.isDisc) {
	                list.push(item);
	            }
	            else {
	                if (count < 5) {
	                    list.push(item);
	                    count++;
	                }
	            }
	        }
	        return list;
	    }
	    hasMergeItems(breedId) {
	        let items = this.getItems(breedId);
	        return items.some(item => this.canMerge(item.cid));
	    }
	    hasDiscSomeBreed() {
	        let breeds = this.getBreeds();
	        return breeds.some(breed => breed.isDisc);
	    }
	    getBreed(breedId) {
	        return this.breeds.find(tab => tab.breedId === breedId);
	    }
	    getItems(breedId) {
	        return this.itemsMap[breedId] || [];
	    }
	    getItem(uid) {
	        for (let key in this.itemsMap) {
	            let items = this.itemsMap[key];
	            let target = items.find(item => item.guid === uid);
	            if (target) {
	                return target;
	            }
	        }
	        return null;
	    }
	    getBreedEggAmount(breedId) {
	        return this.getItems(breedId).length;
	    }
	    getBreedPower(breedId) {
	        let items = this.getItems(breedId);
	        let dragons = items.filter(item => !item.isEgg);
	        let power = 0;
	        dragons.forEach(dragon => power += dragon.dragonPower);
	        return power;
	    }
	    getTotalDisc() {
	        let count = 0;
	        this.breeds.forEach(breed => {
	            if (breed.isDisc) {
	                count++;
	            }
	        });
	        return count;
	    }
	    getTotalPower() {
	        let total = 0;
	        for (let breedId in this.itemsMap) {
	            total += this.getBreedPower(parseInt(breedId));
	        }
	        return total;
	    }
	    isDiscovered(id) {
	        return this.discoverIds.some(discoverId => discoverId === id);
	    }
	    discover(id) {
	        let breed = this.getBreed(id);
	        if (breed && !this.isDiscovered(id)) {
	            breed.isDisc = true;
	            this.discoverIds.push(id);
	            SL_DragonBook.save();
	            MsgCenter.notify(MsgConst.DRAGON_BOOK_DISCOVER, id);
	        }
	    }
	    isSeen(id) {
	        return this.seenIds.some(seenId => seenId === id);
	    }
	    see(id) {
	        let breed = this.getBreed(id);
	        if (breed && !this.isSeen(id)) {
	            breed.isSeen = true;
	            this.seenIds.push(id);
	            SL_DragonBook.save();
	            MsgCenter.notify(MsgConst.DRAGON_BOOK_SEEN, id);
	        }
	    }
	    isValidObj(obj) {
	        let flag = obj.isMonster || obj.hasCategory(CategoryID.Eggs);
	        let flag2 = !obj.dead;
	        return flag && flag2 && (BreedsCfg.has(obj.cfg.breedId));
	    }
	    addObj(obj, doSort = true) {
	        if (!this.isValidObj(obj)) {
	            return null;
	        }
	        let existList = this.itemsMap[obj.cfg.breedId];
	        if (existList.some(exist => exist.guid === obj.guid)) {
	            console.log("Duplicate item in dragon book: " + obj.guid + "=" + obj.cfg.name);
	            return null;
	        }
	        let item = this.buildItem(obj);
	        this.itemsMap[item.breedId].push(item);
	        if (doSort) {
	            this.sortItems(this.itemsMap[item.breedId]);
	        }
	        this.checkMerge(item);
	        let breed = this.getBreed(item.breedId);
	        if (!breed.isDisc) {
	            breed.isDisc = true;
	            if (doSort) {
	                this.sortBreeds();
	            }
	        }
	        return item;
	    }
	    removeObj(obj) {
	        if (!this.isValidObj(obj))
	            return false;
	        let item = this.getItem(obj.guid);
	        if (item == null)
	            return false;
	        let items = this.getItems(obj.cfg.breedId);
	        let index = items.findIndex(item => item.guid === obj.guid);
	        items.splice(index, 1);
	        this.checkMerge(item);
	        return true;
	    }
	    removeItem(item) {
	        if (item == null)
	            return false;
	        let items = this.getItems(item.breedId);
	        let index = items.findIndex(it => it.guid === item.guid);
	        items.splice(index, 1);
	        this.checkMerge(item);
	        return true;
	    }
	    onObjBecomeAlive(obj) {
	        this.onObjSpawn(obj);
	    }
	    onObjSpawn(obj) {
	        let breedId = obj.cfg.breedId;
	        if (!breedId)
	            return;
	        let tabVo = this.getBreed(breedId);
	        if (!tabVo)
	            return;
	        let isDisc = tabVo.isDisc;
	        let dragonBookItem = this.addObj(obj);
	        if (dragonBookItem != null) {
	            let isDisc2 = tabVo.isDisc;
	            if (!isDisc && isDisc2) {
	                SL_DragonBook.save();
	            }
	        }
	    }
	    onMergeStart(obj) {
	        if (this.isValidObj(obj)) {
	            this.removeObj(obj);
	        }
	    }
	    onObjDestroy(obj) {
	        this.removeObj(obj);
	    }
	    buildItem(obj) {
	        if (obj.isMonster) {
	            return this.buildItemDragon(obj);
	        }
	        if (obj.hasCategory(CategoryID.Eggs)) {
	            return this.buildItemEgg(obj);
	        }
	        return null;
	    }
	    buildItemEgg(obj) {
	        let vo = new DragonItemVO();
	        vo.cid = obj.cfg.cid;
	        vo.guid = obj.guid;
	        vo.type = EDragonType.Egg;
	        vo.breedId = obj.cfg.breedId;
	        vo.name = obj.cfg.name;
	        vo.prefab = obj.cfg.pref;
	        vo.level = obj.cfg.itemLevel;
	        vo.dragonPower = obj.cfg.dragonPower;
	        vo.order = obj.cfg.chainPosition;
	        return vo;
	    }
	    buildItemDragon(obj) {
	        let vo = new DragonItemVO();
	        vo.cid = obj.cfg.cid;
	        vo.guid = obj.guid;
	        vo.type = EDragonType.Dragon;
	        vo.breedId = obj.cfg.breedId;
	        vo.name = obj.cfg.name;
	        vo.prefab = obj.cfg.pref;
	        vo.level = obj.cfg.itemLevel;
	        vo.dragonPower = obj.cfg.dragonPower;
	        vo.order = obj.cfg.chainPosition;
	        return vo;
	    }
	    tryUpdateDragonBookPIP(thingCreatedOrDestroyed) {
	        if (!Thing.isTypeMergeableFromDragonBook(thingCreatedOrDestroyed.cfg)) {
	            return;
	        }
	        if (!this.shouldDragonBookButtonBeVisible) {
	            return;
	        }
	        let num = Thing.countMergesForDragonBookPIP();
	        MsgCenter.notify(MsgConst.DRAGON_BOOK_RED_REFRESH, num);
	    }
	    get shouldDragonBookButtonBeVisible() {
	        return Glob.inHome && Thing.totalDragonPower >= 0;
	    }
	    mergeInHomeBook(data) {
	        let mergeObj = ThingList.guidMap[data.guid];
	        if (mergeObj == null) {
	            this.removeItem(data);
	            MsgCenter.notify(MsgConst.DRAGON_BOOK_DISCOVER, data.breedId);
	            GuiMgr.errorMessage("warning!!! merge a null dragon in book ", data);
	            return;
	        }
	        let mergeNum = (data.merge != EMergeInfo.Merge5) ? 3 : 5;
	        let mergeList = [mergeObj];
	        let allSameTypeList = ThingList.lists[data.cid];
	        for (let sameTypeObj of allSameTypeList) {
	            if (!(sameTypeObj == mergeObj) && sameTypeObj.isMergeableFromDragonBookUI()) {
	                mergeList.push(sameTypeObj);
	                if (mergeObj.matchPartners == null) {
	                    mergeObj.matchPartners = [];
	                }
	                mergeObj.matchPartners.push(sameTypeObj);
	                if (mergeList.length == mergeNum) {
	                    break;
	                }
	            }
	        }
	        if (mergeList.length != mergeNum) {
	            GuiMgr.errorMessage("List of dragons to match is not the right size: " + mergeList.length + " of expected " + mergeNum);
	            return;
	        }
	        for (let item of mergeList) {
	            this.removeObj(item);
	        }
	        for (let item of mergeList) {
	            if (item.cfg.isAMonsterDef) {
	                item.asMonster.tryEjectFromHome();
	            }
	        }
	        if (mergeObj.tryActivateMatch()) {
	            let drawnObject2 = null;
	            for (let item of mergeList) {
	                if (!item.cfg.isAMonsterDef || item.asMonster.homeCurrentlyInside == null) {
	                    drawnObject2 = item;
	                    break;
	                }
	            }
	            if (drawnObject2 == null) {
	                drawnObject2 = mergeObj.cfg.isAMonsterDef ? mergeObj.asMonster.homeCurrentlyInside.drawnObject : null;
	            }
	            CameraMgr.setFollowTarget(drawnObject2, false);
	        }
	        MsgCenter.notify(MsgConst.DRAGON_BOOK_MERGE);
	    }
	}

	class SL_Atlas {
	    constructor() {
	        this.breedIds = [];
	        this.discoverGoodsIds = [];
	        this.unlockedGoodIds = [];
	        this.disNotUnlockIds = [];
	        this.id = SaveLoadConst.ATLAS;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", SyncObj.serializeFromArray(this.breedIds));
	        obj.setValue("1", SyncObj.serializeFromArray(this.discoverGoodsIds));
	        obj.setValue("2", SyncObj.serializeFromArray(this.unlockedGoodIds));
	        obj.setValue("3", SyncObj.serializeFromArray(this.disNotUnlockIds));
	        return obj;
	    }
	    import(data) {
	        this.breedIds = SyncObj.deserializeToArray(data.getValue("0"));
	        this.discoverGoodsIds = SyncObj.deserializeToArray(data.getValue("1"));
	        this.unlockedGoodIds = SyncObj.deserializeToArray(data.getValue("2"));
	        this.disNotUnlockIds = SyncObj.deserializeToArray(data.getValue("3"));
	    }
	    static getSaveAtlasData() {
	        let obj = new SL_Atlas();
	        obj.breedIds = AtlasesMgr.unlockedBreedIds.concat();
	        obj.discoverGoodsIds = AtlasesMgr.discoverGoodIds.concat();
	        obj.unlockedGoodIds = AtlasesMgr.unlockedGoodIds.concat();
	        obj.disNotUnlockIds = AtlasesMgr.disNotUnlockData.concat();
	        return obj;
	    }
	    static save() {
	        SaveLoad.save(SL_Atlas.getSaveAtlasData());
	    }
	    static generateNewGame() {
	        return SL_Atlas.getSaveAtlasData();
	    }
	}

	class AtlasesVo {
	    constructor() {
	        this.isLock = true;
	    }
	    get sortId() {
	        return this.breedCfg.cid;
	    }
	    get dragonPower() {
	        let power = AtlasesMgr.ins().getBreedTotalPower(this.sortId);
	        return power;
	    }
	    get hasCount() {
	        let count = AtlasesMgr.ins().hasGoodsAmount(this.sortId);
	        return count;
	    }
	}
	class AtlasItemVo {
	    constructor() {
	        this.state = 0;
	    }
	}

	class AtlasesMgr extends Singleton {
	    static getBreedsCfg() {
	        let breedsCfg = BreedsCfg.cfg;
	        this.atlasData = [];
	        for (let key in breedsCfg) {
	            let vo = breedsCfg[key];
	            let data = DiscoveryChain.getDiscoveryChainsById(vo.cid);
	            if (data) {
	                let obj = new AtlasesVo();
	                obj.atlasType = vo.isMonster ? 1 : 0;
	                obj.atlasContent = this.createDataType(vo.cid);
	                obj.breedCfg = vo;
	                this.atlasData.push(obj);
	            }
	        }
	    }
	    static createDataType(id) {
	        let data = DiscoveryChain.getDiscoveryChainsById(id);
	        let chainData = data.chain;
	        let newChain = [];
	        chainData.forEach(item => {
	            let obj = {};
	            obj.chain = item;
	            obj.state = 2;
	            newChain.push(obj);
	        });
	        return newChain;
	    }
	    static getAtlasData() {
	        return this.atlasData;
	    }
	    static init() {
	        let slObj = new SL_Atlas();
	        if (SaveLoad.has(SaveLoadConst.ATLAS)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveAtlasFirstTime(slObj);
	        }
	        this.unlockedBreedIds = slObj.breedIds.concat();
	        this.unlockedGoodIds = slObj.unlockedGoodIds.concat();
	        this.discoverGoodIds = slObj.discoverGoodsIds.concat();
	        this.disNotUnlockData = slObj.disNotUnlockIds.concat();
	        this.atlasData.forEach(item => {
	            item.isLock = this.unlockedBreedIds.some(id => item.sortId === id);
	            let atlasItem = item.atlasContent;
	            atlasItem.some(item => {
	                item.state = this.judgeGoodsState(item);
	            });
	        });
	        MsgCenter.listen(MsgConst.THING_SPAWN, this.discoverNewGoods, this);
	    }
	    static judgeGoodsState(item) {
	        let discoverState = this.discoverGoodIds.some(id => item.chain.cid === id) ? 1 : 0;
	        let unLockState = 0;
	        this.unlockedGoodIds.some(id => {
	            if (item.chain.cid === id) {
	                unLockState = 2;
	                return true;
	            }
	        });
	        if (discoverState == 0 && unLockState == 0) {
	            return discoverState;
	        }
	        else if (discoverState == 1 && unLockState == 0) {
	            return discoverState;
	        }
	        else if (discoverState == 1 && unLockState == 2) {
	            return unLockState;
	        }
	    }
	    static saveAtlasFirstTime(data) {
	        data.discoverGoodsIds = [];
	        data.breedIds = [];
	        SaveLoad.save(data);
	    }
	    static getAtalsByBreedId(breedId) {
	        let data = this.atlasData.find(tab => tab.sortId === breedId);
	        return data;
	    }
	    static isUnLockedBreed(id) {
	        return this.unlockedBreedIds.some(unLockId => unLockId === id);
	    }
	    static unLockedBreed(id) {
	        let breedData = this.getAtalsByBreedId(id);
	        let flag = this.isUnLockedBreed(id);
	        if (breedData && !flag) {
	            breedData.isLock = true;
	            this.unlockedBreedIds.push(id);
	            SL_Atlas.save();
	            MsgCenter.notify(MsgConst.ATLAS_UNLOCHED, id);
	        }
	    }
	    static getGoodsDataById(breedId, goodsId) {
	        let breeds = this.getAtalsByBreedId(breedId);
	        if (!breeds)
	            return;
	        let goodsData = breeds.atlasContent;
	        let itemVo = goodsData.find(tab => tab.chain.cid == goodsId);
	        return itemVo;
	    }
	    static isDiscover(id) {
	        return this.discoverGoodIds.some(discoverId => discoverId === id);
	    }
	    static discoverNewGoods(obj) {
	        let breedId = obj.cfg.breedId;
	        let goodsId = obj.cfg.cid;
	        this.unLockedBreed(breedId);
	        let goodsData = this.getGoodsDataById(breedId, goodsId);
	        if (goodsData && !this.isDiscover(goodsId)) {
	            goodsData.state = 1;
	            this.discoverGoodIds.push(goodsId);
	            let obj = {
	                genreId: breedId,
	                newGoodsId: goodsId
	            };
	            this.disNotUnlockData.push(obj);
	            SL_Atlas.save();
	            MsgCenter.notify(MsgConst.ATLAS_DISCOVER, obj);
	        }
	    }
	    static isUnLock(id) {
	        return this.discoverGoodIds.some(discoverId => discoverId === id);
	    }
	    static unLockNewGoods(breedId, goodsId) {
	        let goodsData = this.getGoodsDataById(breedId, goodsId);
	        if (goodsData && this.isUnLock(goodsId)) {
	            goodsData.state = 2;
	            this.unlockedGoodIds.push(goodsId);
	            let obj = {
	                genreId: breedId,
	                newGoodsId: goodsId
	            };
	            this.deleteUnLockGoods(breedId, goodsId);
	            MsgCenter.notify(MsgConst.ATLAS_UNLOCKEDGOODS, obj);
	            SL_Atlas.save();
	        }
	    }
	    static deleteUnLockGoods(breedId, goodsId) {
	        for (let i = 0; i < this.disNotUnlockData.length; i++) {
	            let vo = this.disNotUnlockData[i];
	            if (breedId == vo.genreId && goodsId == vo.newGoodsId) {
	                this.disNotUnlockData.splice(i, 1);
	                break;
	            }
	        }
	    }
	    getBreedTotalPower(breedId) {
	        let data = AtlasesMgr.getAtalsByBreedId(breedId);
	        let power = 0;
	        if (data) {
	            let goodsData = data.atlasContent;
	            goodsData.forEach(item => {
	                if (item.state == 2) {
	                    power += item.chain.dragonPower;
	                }
	            });
	        }
	        return power;
	    }
	    hasGoodsAmount(breedId) {
	        let data = AtlasesMgr.getAtalsByBreedId(breedId);
	        let count = 0;
	        if (data) {
	            let goodsData = data.atlasContent;
	            goodsData.forEach(item => {
	                if (item.state == 2) {
	                    count++;
	                }
	            });
	        }
	        return count;
	    }
	    static sortByTabIndex(index) {
	        let unLock = [];
	        let lock = [];
	        this.atlasData.forEach(item => {
	            if (item.atlasType == index) {
	                let flag = AtlasesMgr.isUnLockedBreed(item.sortId);
	                if (flag) {
	                    unLock.push(item);
	                }
	                else {
	                    lock.push(item);
	                }
	            }
	        });
	        unLock = unLock.concat(lock);
	        return unLock;
	    }
	    static isDisNotUnlockData(id) {
	        return this.disNotUnlockData.some(item => item.genreId === id);
	    }
	    static getAtalsTypeById(breedId, goodsId) {
	        let breeds = this.getAtalsByBreedId(breedId);
	        if (!breeds)
	            return;
	        let type = breeds.atlasType;
	        return type;
	    }
	}
	AtlasesMgr.unlockedBreedIds = [];
	AtlasesMgr.unlockedGoodIds = [];
	AtlasesMgr.discoverGoodIds = [];
	AtlasesMgr.disNotUnlockData = [];

	let IMG_LOCK = GameUtil.getCompPngSkin("zjm_suokai");
	let IMG_GRAY = GameUtil.getCompPngSkin("zjm_suoguan");
	class MainRB extends CornerUi {
	    constructor() {
	        super(...arguments);
	        this._canScorll = true;
	        this.leftTime = 0;
	        this.changeX = 133;
	    }
	    set canScorll(value) {
	        this._canScorll = value;
	        this.imgLock.skin = value ? IMG_GRAY : IMG_LOCK;
	        CameraMgr.isLocked = !value;
	        this.lblCanScroll.text = value ? LanCfg.get("20010034") : LanCfg.get("20010035");
	    }
	    get canScorll() {
	        return this._canScorll;
	    }
	    updateDragonBook(num = 0) {
	        this.btnDragon.visible = DragonBookMgr.ins().shouldDragonBookButtonBeVisible;
	        let isRed = num > 0;
	        this.imgDragonPoint.visible = isRed;
	        if (isRed) {
	            this.lblDragonPoint.text = num.toString();
	        }
	    }
	    updateScroll() {
	        this.canScorll = true;
	    }
	    onClickSwitch() {
	        this.canScorll = !this.canScorll;
	        TomeTip.showGameTip(GameTipTypeID.Tip_ScreenDragLock);
	    }
	    onClickBook() {
	        LayerMgr.ins().open(UiConst.AtlasView);
	    }
	    onClickShop() {
	        LayerMgr.ins().open(UiConst.ShopView);
	    }
	    onClickDragon() {
	        LayerMgr.ins().open(UiConst.DragonView);
	    }
	    setType(type) {
	        super.setType(type);
	        let isHome = type === 1;
	        let isLevel = type === 3;
	        this.btnBook.visible = isHome;
	        this.btnShop.visible = isHome || (isLevel && Glob.currLevelData.isChallenge);
	        this.boxSwitch.visible = (isHome || isLevel) && WorldMgr.ins().isPassFirst();
	        let num = Thing.countMergesForDragonBookPIP();
	        this.updateDragonBook(num);
	    }
	    showRedpPoint() {
	        let redCount = 0;
	        let local = LocalData.ins().isShowGiftRed;
	        if (!local) {
	            redCount++;
	        }
	        if (!local) {
	            this.redPoint.visible = true;
	            this.shopRedCount.text = redCount.toString();
	        }
	        else {
	            this.redPoint.visible = false;
	        }
	    }
	    showAtlasRedPoint() {
	        let discoverData = AtlasesMgr.disNotUnlockData;
	        if (discoverData.length > 0) {
	            this.atlasRedPoint.visible = true;
	            this.redPiontCount.text = discoverData.length.toString();
	        }
	        else {
	            this.atlasRedPoint.visible = false;
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.right = 0;
	        this.bottom = 0;
	        this.btnBook.on(Laya.Event.CLICK, this, this.onClickBook);
	        this.btnShop.on(Laya.Event.CLICK, this, this.onClickShop);
	        this.btnDragon.on(Laya.Event.CLICK, this, this.onClickDragon);
	        this.boxSwitch.on(Laya.Event.CLICK, this, this.onClickSwitch);
	        AtlasesMgr.getBreedsCfg();
	        AtlasesMgr.init();
	        this.refreshTaken();
	    }
	    openUi() {
	        super.openUi();
	        this.updateScroll();
	        this.showRedpPoint();
	        this.showAtlasRedPoint();
	        this.addNoti();
	        let num = Thing.countMergesForDragonBookPIP();
	        this.updateDragonBook(num);
	    }
	    refreshTaken() {
	        let refreshTime = 5 * 60 * 1000;
	        this.timer.loop(refreshTime, this, () => {
	            ProxyMgr.player.sGetToken();
	        });
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.PLAY_SWITCH_SCROLL, this.updateScroll, this);
	        MsgCenter.listen(MsgConst.ATLAS_DISCOVER, this.showAtlasRedPoint, this);
	        MsgCenter.listen(MsgConst.ATLAS_UNLOCKEDGOODS, this.showAtlasRedPoint, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYMONTHCARD, this.showRedpPoint, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.showRedpPoint, this);
	        MsgCenter.listen(MsgConst.SHOP_RECEIVEWARD, this.showRedpPoint, this);
	        MsgCenter.listen(MsgConst.DRAGON_BOOK_RED_REFRESH, this.updateDragonBook, this);
	        MsgCenter.listen(MsgConst.SHOWBANNER, this.showBaner, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.PLAY_SWITCH_SCROLL, this.updateScroll, this);
	        MsgCenter.remove(MsgConst.ATLAS_DISCOVER, this.showAtlasRedPoint, this);
	        MsgCenter.remove(MsgConst.ATLAS_UNLOCKEDGOODS, this.showAtlasRedPoint, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYMONTHCARD, this.showRedpPoint, this);
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.showRedpPoint, this);
	        MsgCenter.remove(MsgConst.SHOP_RECEIVEWARD, this.showRedpPoint, this);
	        MsgCenter.remove(MsgConst.DRAGON_BOOK_RED_REFRESH, this.updateDragonBook, this);
	        MsgCenter.remove(MsgConst.SHOWBANNER, this.showBaner, this);
	    }
	    closeUi(type) {
	        super.closeUi(type);
	        this.removeNoti();
	    }
	    getShopButton() {
	        return this.btnShop;
	    }
	    showBaner(type) {
	        this.banner.visible = true;
	        if (type == ECurrency.Gold) {
	            this.tipsLb.text = LanCfg.get("10010016");
	        }
	        else if (type == ECurrency.Stone) {
	            this.tipsLb.text = LanCfg.get("10010017");
	        }
	        let curTime = TimeMgr.ins().getTime();
	        let endTime = curTime + 6000;
	        this.leftTime = Math.floor((endTime - curTime) / 1000);
	        this.updateTime();
	        this.timerLoop(1000, this, this.updateTime);
	        this.startTween();
	        this.timerLoop(500, this, this.startTween);
	    }
	    updateTime() {
	        this.leftTime--;
	        if (this.leftTime <= 0) {
	            this.removeAni();
	            this.banner.visible = false;
	            this.timer.clear(this, this.updateTime);
	        }
	    }
	    startTween() {
	        if (this.changeX >= 133) {
	            this.changeX = 118;
	        }
	        else {
	            this.changeX = 133;
	        }
	        this.tweenFlag = Laya.Tween.to(this.arrow, { x: this.changeX }, 600);
	    }
	    removeAni() {
	        this.clearTimer(this, this.startTween);
	        if (this.tweenFlag) {
	            this.tweenFlag.clear();
	        }
	        this.arrow.x = 133;
	    }
	}

	class SL_BringHome {
	    constructor() {
	        this.id = SaveLoadConst.BRING_HOME;
	        this.m_drawnObjectsData = null;
	    }
	    export() {
	        let syncData_BringHome = SyncObj.create();
	        let gGSyncObject = SyncObj.create();
	        if (this.m_drawnObjectsData != null) {
	            for (let i = 0; i < this.m_drawnObjectsData.length; i++) {
	                let saveData_DrawnObject = this.m_drawnObjectsData[i];
	                gGSyncObject.setSyncObj(saveData_DrawnObject.guid.toString(), saveData_DrawnObject.export());
	            }
	        }
	        syncData_BringHome.setSyncObj("0", gGSyncObject);
	        return syncData_BringHome;
	    }
	    import(data) {
	        this.m_drawnObjectsData = [];
	        let obj = data.getSyncObj("0");
	        if (obj) {
	            let unorderedList = obj.GetUnorderedList();
	            unorderedList.forEach(item2 => {
	                if (item2 != null && !item2.isEmpty()) {
	                    let item = new SL_Thing();
	                    item.import(item2);
	                    this.m_drawnObjectsData.push(item);
	                }
	            });
	        }
	    }
	}
	SL_BringHome.SaveFileName = "_BringHome.txt";
	SL_BringHome.TempSaveFileName = "_BringHome_TEMP.txt";
	SL_BringHome.BackupSaveFileName = "_BringHome_BACKUP.txt";

	class ExchangeRewardsMgr {
	    static getSaveDataObj(id, count) {
	        if (!id) {
	            return null;
	        }
	        let saveData_BringHome = new SL_BringHome();
	        let saveData_BringHome2 = SaveLoad.LoadBringHomeData();
	        if (saveData_BringHome2 != null) {
	            saveData_BringHome.m_drawnObjectsData = saveData_BringHome2.m_drawnObjectsData;
	        }
	        else {
	            saveData_BringHome.m_drawnObjectsData = [];
	        }
	        for (let i = 0; i < count; i++) {
	            let saveData_DrawnObject = Thing.create_SaveData(PropsCfg.get(id));
	            saveData_DrawnObject.onTapCostPaid = true;
	            saveData_BringHome.m_drawnObjectsData.push(saveData_DrawnObject);
	        }
	        ;
	        return saveData_BringHome;
	    }
	    static bringHomeData(id, count) {
	        let saveDataObject = this.getSaveDataObj(id, count);
	        if (saveDataObject != null) {
	            SaveLoad.SaveBringHomeData(saveDataObject);
	        }
	    }
	    static isLandId(id) {
	        return this.landIds.some(landId => id === landId);
	    }
	    static initData() {
	        this.isHasLandId();
	    }
	    static saveLandId(id) {
	        if (!this.isLandId(id)) {
	            this.landIds.push(id);
	        }
	    }
	    static isHasLandId() {
	        if (this.landIds.length == 0)
	            return;
	        for (let i = 0; i < this.landIds.length; i++) {
	            BuyLandMgr.ins().onPurchseOk(this.landIds[i]);
	            this.landIds.pop();
	        }
	    }
	    static createLootBundle(id, count) {
	        let lootBundle = new LootBundle();
	        lootBundle.addLoots(id, count);
	        let drawnObject = LootOrb.createLB(lootBundle);
	        drawnObject.setRootPosition(-10, 10, 0);
	    }
	}
	ExchangeRewardsMgr.landIds = [];

	class MainRT extends CornerUi {
	    constructor() {
	        super(...arguments);
	        this.isBtnFirt = true;
	        this.index = 0;
	    }
	    updateLevelReward(rewardCount) {
	        let isWorld = this.uiType === 2;
	        if (isWorld) {
	            if (rewardCount == null) {
	                let saveData_BringHome = SaveLoad.LoadBringHomeData();
	                if (saveData_BringHome) {
	                    let loots = saveData_BringHome.m_drawnObjectsData;
	                    rewardCount = loots ? loots.length : 0;
	                }
	            }
	            let hasReward = rewardCount > 0;
	            this.btnReward.visible = hasReward;
	            if (hasReward) {
	                this.lblRedPoint.text = rewardCount.toString();
	            }
	        }
	        else {
	            this.btnReward.visible = false;
	        }
	    }
	    rollText(lbl, dest) {
	        let comp = lbl.getComponent(RollText);
	        comp.roll(dest, 600);
	    }
	    updateCurrency(data) {
	        let amount = data.amount;
	        let mgr = CurrencyMgr.ins();
	        let currency = data.currency;
	        switch (currency) {
	            case ECurrency.Gold:
	                this.rollText(this.lblAmountGold, amount);
	                this.pbGold.value = mgr.getPercent(currency);
	                break;
	            case ECurrency.Stone:
	                this.rollText(this.lblAmountStone, amount);
	                this.pbStone.value = mgr.getPercent(currency);
	                break;
	            case ECurrency.Diamond:
	                this.rollText(this.lblAmountDiamond, amount);
	                this.pbDiamond.value = mgr.getPercent(currency);
	                break;
	            case ECurrency.Energy:
	                this.lblEnergy.text = amount.toString();
	                break;
	        }
	    }
	    onClickFirst() {
	        if (this.isBtnFirt) {
	            BuyDiamondsMgr.isGiftPanel = false;
	            LayerMgr.ins().open(UiConst.FirstChargeView);
	        }
	        else {
	            BuyDiamondsMgr.isGiftPanel = true;
	            LayerMgr.ins().open(UiConst.ShopView, 4);
	        }
	    }
	    onClickPower() {
	        LayerMgr.ins().open(UiConst.EnergyInfoView);
	    }
	    onClickReward() {
	        let rewardCount = 0;
	        let saveData_BringHome = SaveLoad.LoadBringHomeData();
	        if (saveData_BringHome) {
	            let loots = saveData_BringHome.m_drawnObjectsData;
	            rewardCount = loots ? loots.length : 0;
	        }
	        LayerMgr.ins().open(UiConst.LevelLootInfo, rewardCount);
	    }
	    onTouchProp(type) {
	        LayerMgr.ins().open(UiConst.CurrencyDetailView, type);
	    }
	    onOpenDaimonShop() {
	        LayerMgr.ins().open(UiConst.ShopView, 5);
	    }
	    showBtnFirst() {
	        let getState = FirstChargeMgr.getReceivedState();
	        let buyState = FirstChargeMgr.getBuyState();
	        this.isBuyForOne();
	        if (!buyState || (buyState && !getState) || !this.isBtnFirt) {
	            this.boxFirst.visible = true;
	            this.lblFirst.visible = true;
	            this.btnSignIn.x = 1088;
	        }
	        else {
	            this.boxFirst.visible = false;
	            this.lblFirst.visible = false;
	            this.btnSignIn.x = 1187;
	        }
	    }
	    isBuyForOne() {
	        let isBuy = BuyDiamondsMgr.findDataById(15);
	        let local = BuyDiamondsMgr.isBuyOneGift;
	        if (!isBuy && !local) {
	            this.lblFirst.text = LanCfg.get("20140001");
	            this.isBtnFirt = false;
	            this.lblFirst.x = 1158;
	        }
	        else {
	            if (!local) {
	                BuyDiamondsMgr.isBuyOneGift = true;
	                SL_RechargeDiamonds.save();
	            }
	            this.lblFirst.text = LanCfg.get("20090013");
	            this.lblFirst.x = 1175;
	            this.isBtnFirt = true;
	            BuyDiamondsMgr.isGiftPanel = false;
	        }
	    }
	    showPayFogArea(arg) {
	        LayerMgr.ins().open(UiConst.ModalPremiumLand, arg);
	    }
	    signInRedPoint() {
	        ActivityMgr.updateRed();
	        let data = ActivityMgr.actData;
	        if (!data)
	            return;
	        this.redPoint.visible = data[this.index].redPont;
	    }
	    addFirstBtn() {
	        if (this.uiPref) {
	            this.uiPref.setNid("zy_shouchong");
	        }
	        else {
	            this.uiPref = UiPrefMgr.get("zy_shouchong", 750, 750, 5);
	            this.uiPref.centerX = 10;
	            this.uiPref.centerY = -63;
	            this.boxFirst.addChild(this.uiPref);
	        }
	    }
	    setType(type) {
	        super.setType(type);
	        let isHome = type === 1;
	        let isLevel = type === 3;
	        this.pbGold.visible = isHome || isLevel;
	        this.pbStone.visible = isHome || isLevel;
	        this.boxFirst.visible = false;
	        this.lblFirst.visible = false;
	        this.updateLevelReward();
	        this.btnSignIn.visible = isHome;
	        if (isHome) {
	            this.showBtnFirst();
	            ExchangeRewardsMgr.initData();
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.boxFirst.visible = false;
	        this.top = 0;
	        this.right = 0;
	        this.pbStone.bar.skin = GameUtil.getCompPngSkin("progress_1$bar2");
	        this.pbDiamond.bar.skin = GameUtil.getCompPngSkin("progress_1$bar3");
	        this.btnBox.on(Laya.Event.CLICK, this, this.onClickFirst);
	        this.btnPower.on(Laya.Event.CLICK, this, this.onClickPower);
	        this.btnReward.on(Laya.Event.CLICK, this, this.onClickReward);
	        this.pbGold.on(Laya.Event.CLICK, this, this.onTouchProp, [ECurrency.Gold]);
	        this.pbStone.on(Laya.Event.CLICK, this, this.onTouchProp, [ECurrency.Stone]);
	        this.addDiamondBox.on(Laya.Event.CLICK, this, this.onOpenDaimonShop);
	        FirstChargeMgr.init();
	        BuyDiamondsMgr.init();
	        UiDef.gold = this.pbGold;
	        UiDef.stone = this.pbStone;
	        UiDef.diamond = this.pbDiamond;
	        UiDef.energy = this.btnPower;
	        this.addFirstBtn();
	        ActivityMgr.createData();
	        this.addFirstBtn();
	        this.btnArr = [{ name: "签到", btnSkin: "res/skin/mainUI/btn_qiandao.png" }, { name: "在线奖励", btnSkin: "res/skin/mainUI/btn_zaixianjiangli.png" }, { name: "超值月卡", btnSkin: "res/skin/mainUI/btn_chaojiyueka.png" }];
	        this.index = 0;
	        this.btnSignIn.on(Laya.Event.CLICK, this, this.onClickOpenView);
	        this.playLoopAnim();
	    }
	    playLoopAnim() {
	        if (this.btnArr.length === 0)
	            return;
	        let btnVo = this.btnArr[this.index];
	        this.btnSignIn.skin = btnVo.btnSkin;
	        this.btnSignIn.alpha = 0;
	        this.leftTime.visible = false;
	        if (this.index == 1) {
	            this.leftTime.visible = true;
	        }
	        this.lblBtn.text = LanCfg.get(btnVo.name);
	        this.signInRedPoint();
	        Laya.Tween.to(this.btnSignIn, { alpha: 1 }, 2000, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
	            Laya.Tween.to(this.btnSignIn, { alpha: 0 }, 2000, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
	                this.index++;
	                this.index = this.index >= this.btnArr.length ? 0 : this.index;
	                this.playLoopAnim();
	            }), 1000, true);
	        }), 0, true);
	    }
	    onClickOpenView() {
	        LayerMgr.ins().open(UiConst.ActivityView, this.index);
	    }
	    updateTime() {
	        let curTime = TimeMgr.ins().getTime();
	        let currTotalTime = ActivityMgr.everyDayOnlineTime;
	        let targetTime = ActivityMgr.getCurrDownTime(currTotalTime);
	        let t = (targetTime - currTotalTime) * 1000;
	        let endTime = curTime + t;
	        let leftTime = Math.floor((endTime - curTime) / 1000);
	        this.leftTime.text = TimeMgr.ins().getTimeStrMs(leftTime);
	    }
	    openUi() {
	        super.openUi();
	        this.updateCurrency({ currency: ECurrency.Gold, amount: CurrencyMgr.ins().getAmount(ECurrency.Gold) });
	        this.updateCurrency({ currency: ECurrency.Stone, amount: CurrencyMgr.ins().getAmount(ECurrency.Stone) });
	        this.updateCurrency({ currency: ECurrency.Energy, amount: CurrencyMgr.ins().getAmount(ECurrency.Energy) });
	        this.updateCurrency({ currency: ECurrency.Diamond, amount: CurrencyMgr.ins().getAmount(ECurrency.Diamond) });
	        MsgCenter.listen(MsgConst.CURRENCY_CHANGE, this.updateCurrency, this);
	        MsgCenter.listen(MsgConst.FIRSTCHARGE_HASBUY, this.showBtnFirst, this);
	        MsgCenter.listen(MsgConst.FIRSTCHARG_GETAWARD, this.showBtnFirst, this);
	        MsgCenter.listen(MsgConst.BRING_REWARD_CHANGED, this.updateLevelReward, this);
	        MsgCenter.listen(MsgConst.SHOW_PAY_FOG_AREA, this.showPayFogArea, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYGIFT, this.showBtnFirst, this);
	        MsgCenter.listen(MsgConst.ONLINE_REAWARD_COLLECT, this.signInRedPoint, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYMONTHCARD, this.signInRedPoint, this);
	        MsgCenter.listen(MsgConst.SHOP_RECEIVEWARD, this.signInRedPoint, this);
	        MsgCenter.listen(MsgConst.UPDATE_SIGNINSTATE, this.signInRedPoint, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.signInRedPoint, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_GETGIFT, this.signInRedPoint, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_HASGETGIFT, this.signInRedPoint, this);
	        this.timer.loop(1000, this, this.updateTime);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.CURRENCY_CHANGE, this.updateCurrency, this);
	        MsgCenter.remove(MsgConst.FIRSTCHARGE_HASBUY, this.showBtnFirst, this);
	        MsgCenter.remove(MsgConst.FIRSTCHARG_GETAWARD, this.showBtnFirst, this);
	        MsgCenter.remove(MsgConst.BRING_REWARD_CHANGED, this.updateLevelReward, this);
	        MsgCenter.remove(MsgConst.SHOW_PAY_FOG_AREA, this.showPayFogArea, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYGIFT, this.showBtnFirst, this);
	        MsgCenter.remove(MsgConst.ONLINE_REAWARD_COLLECT, this.signInRedPoint, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYMONTHCARD, this.signInRedPoint, this);
	        MsgCenter.remove(MsgConst.SHOP_RECEIVEWARD, this.signInRedPoint, this);
	        MsgCenter.remove(MsgConst.UPDATE_SIGNINSTATE, this.signInRedPoint, this);
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.signInRedPoint, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_GETGIFT, this.signInRedPoint, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_HASGETGIFT, this.signInRedPoint, this);
	        this.timer.clear(this, this.updateTime);
	    }
	}

	class CornerUiMgr extends Singleton {
	    createUi(id, cls, root) {
	        let ui = new cls(id);
	        return root.addChild(ui);
	    }
	    init() {
	        this.lt = this.createUi("MainLT", MainLT, LayerMgr.ins().leftTop);
	        this.rt = this.createUi("MainRT", MainRT, LayerMgr.ins().rightTop);
	        this.lb = this.createUi("MainLB", MainLB, LayerMgr.ins().leftBottom);
	        this.rb = this.createUi("MainRB", MainRB, LayerMgr.ins().rightBottom);
	    }
	}

	var TutorialState;
	(function (TutorialState) {
	    TutorialState[TutorialState["ShowingGameTip"] = 0] = "ShowingGameTip";
	    TutorialState[TutorialState["ShowShopButton"] = 1] = "ShowShopButton";
	    TutorialState[TutorialState["ShopIsOpen"] = 2] = "ShopIsOpen";
	    TutorialState[TutorialState["Disabled"] = 3] = "Disabled";
	})(TutorialState || (TutorialState = {}));
	var LevelState;
	(function (LevelState) {
	    LevelState[LevelState["Intro"] = 0] = "Intro";
	    LevelState[LevelState["Running"] = 1] = "Running";
	    LevelState[LevelState["Paused"] = 2] = "Paused";
	    LevelState[LevelState["Finished"] = 3] = "Finished";
	    LevelState[LevelState["Disabled"] = 4] = "Disabled";
	})(LevelState || (LevelState = {}));
	class GGChallengeLevelController extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.numPurchasesMade = 0;
	        this.totalTimeInSeconds = 0;
	        this.timeLeftInSeconds = -1;
	        this.levelState = LevelState.Disabled;
	        this.ShopTutorialState = TutorialState.Disabled;
	        this.isChecking = false;
	    }
	    get TimeLeftInSeconds() {
	        return this.timeLeftInSeconds;
	    }
	    get NumPurchasesMade() {
	        return this.numPurchasesMade;
	    }
	    get TotalTimeTaken() {
	        return this.totalTimeInSeconds - this.timeLeftInSeconds;
	    }
	    static OnLoad(data) {
	        this.hasReceivedFreeTimeBoost = data.hasReceivedFreeTimeBoost;
	    }
	    static OnSave(data) {
	        data.hasReceivedFreeTimeBoost = this.hasReceivedFreeTimeBoost;
	    }
	    Init(totalTimeInSeconds) {
	        this.totalTimeInSeconds = totalTimeInSeconds;
	        if (this.timeLeftInSeconds < 0) {
	            this.timeLeftInSeconds = totalTimeInSeconds;
	        }
	        MsgCenter.notify(MsgConst.ENABLE_CLOCK, true);
	        this.levelState = LevelState.Intro;
	        this.StartTimer();
	    }
	    OnExtraTimePurchased() {
	        let timeBoostCost = this.GetTimeBoostCost();
	        let timeAwarded = this.GetTimeAwarded();
	        if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, timeBoostCost)) {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            return;
	        }
	        if (!GGChallengeLevelController.hasReceivedFreeTimeBoost) {
	            this.SetFreeTimeBoostUsed();
	        }
	        else {
	            this.numPurchasesMade++;
	        }
	        CurrencyMgr.ins().charge(ECurrency.Diamond, timeBoostCost);
	        ApiMgr.addYbRecord(timeBoostCost, LogCostType.ChallengeTime);
	        this.AwardMoreTime(timeAwarded);
	        let currentLevel = Glob.currentLevel;
	        currentLevel.data.TimesExitedWithoutEnd++;
	        let saveDataObject = currentLevel.getSaveDataObject();
	        SaveLoad.saveLevelData(saveDataObject, currentLevel.ID);
	    }
	    GetTimeBoostCost() {
	        if (!GGChallengeLevelController.hasReceivedFreeTimeBoost) {
	            return 0;
	        }
	        let num = Math.min(this.numPurchasesMade, 2);
	        return 50 * Math.pow(2, num);
	    }
	    SetFreeTimeBoostUsed() {
	        GGChallengeLevelController.hasReceivedFreeTimeBoost = true;
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	    }
	    GetTimeAwarded() {
	        return Glob.currentLevel.data.cfg.ChallengeTimeLimitSecondsPurchase;
	    }
	    OnExtraTimeCancelled() {
	        if (this.IsTimeUp() && Glob.currentLevel) {
	            Glob.currentLevel.setState(LevelStateID.Resetting);
	        }
	    }
	    SetAsDisabled() {
	        this.levelState = LevelState.Disabled;
	    }
	    SetSavedData(timeLeftInSeconds, numPurchases) {
	        this.timeLeftInSeconds = timeLeftInSeconds;
	        this.numPurchasesMade = numPurchases;
	    }
	    resetData() {
	        this.timeLeftInSeconds = -1;
	        this.numPurchasesMade = 0;
	    }
	    StartTimer() {
	        this.levelState = LevelState.Running;
	    }
	    SetPaused(isPaused) {
	        if (this.levelState != LevelState.Disabled && this.levelState != LevelState.Finished) {
	            if (isPaused) {
	                this.levelState = LevelState.Paused;
	            }
	            else {
	                this.levelState = LevelState.Running;
	            }
	        }
	    }
	    AwardMoreTime(additionalTimeInSeconds) {
	        this.timeLeftInSeconds += additionalTimeInSeconds;
	        this.levelState = LevelState.Running;
	    }
	    Deactivate() {
	        MsgCenter.notify(MsgConst.ENABLE_CLOCK, false);
	        this.levelState = LevelState.Disabled;
	    }
	    update() {
	        if (this.levelState == LevelState.Disabled) {
	            return;
	        }
	        if (this.levelState == LevelState.Running) {
	            this.timeLeftInSeconds -= Glob.deltaTime;
	            if (this.timeLeftInSeconds <= 0.3 * this.totalTimeInSeconds) {
	                this.ShowShopTutorial();
	            }
	            if (this.timeLeftInSeconds < 0) {
	                this.ShowTimeUpBanner();
	                this.levelState = LevelState.Finished;
	            }
	            this.timeLeftInSeconds = Math.max(0, this.timeLeftInSeconds);
	        }
	        else if (this.levelState == LevelState.Paused && this.ShopTutorialState == TutorialState.ShowingGameTip) {
	            this.UpdateShopTutorial();
	        }
	        MsgCenter.notify(MsgConst.CLOCK_UPDATE, {
	            left: this.timeLeftInSeconds,
	            total: this.totalTimeInSeconds,
	            isPaused: this.levelState == LevelState.Paused
	        });
	        if (this.ShopTutorialState == TutorialState.ShopIsOpen
	            && !LayerMgr.ins().winIsShow(UiConst.ShopView)) {
	            this.ShopTutorialState = TutorialState.Disabled;
	        }
	        if (this.levelState == LevelState.Finished && !LayerMgr.ins().windowIsShow() && !this.isChecking) {
	            this.checkToShowTimeUp();
	        }
	    }
	    IsTimeUp() {
	        return this.timeLeftInSeconds < 0.2;
	    }
	    UpdateShopTutorial() {
	        if (TomeTip.hasShownByGameTipTypeID(GameTipTypeID.Tip_Challenge_Levels_Shop)
	            && !LayerMgr.ins().windowIsShow()
	            && Glob.currentLevel.state == LevelStateID.Playing) {
	            this.ShopTutorialState = TutorialState.ShowShopButton;
	            let shopButton = CornerUiMgr.ins().rb.getShopButton();
	            LayerMgr.ins().open(UiConst.TutorialFocusView, {
	                showGuider: true,
	                target: shopButton,
	                handler: Laya.Handler.create(null, () => {
	                    LayerMgr.ins().open(UiConst.ShopView);
	                })
	            });
	        }
	    }
	    ShowShopTutorial() {
	        if (!TomeTip.hasShownByGameTipTypeID(GameTipTypeID.Tip_Challenge_Levels_Shop)
	            && this.ShopTutorialState == TutorialState.Disabled
	            && !LayerMgr.ins().windowIsShow()
	            && Glob.currentLevel.state == LevelStateID.Playing) {
	            TomeTip.showGameTip(GameTipTypeID.Tip_Challenge_Levels_Shop);
	            this.ShopTutorialState = TutorialState.ShowingGameTip;
	        }
	    }
	    ShowTimeUpBanner() {
	        this.isChecking = true;
	        this.checkToShowTimeUp();
	    }
	    checkToShowTimeUp() {
	        if (Glob.inAChallengeArea) {
	            if (Glob.currentLevel.state == LevelStateID.Playing) {
	                MsgCenter.notify(MsgConst.SHOW_BUY_TIME);
	            }
	        }
	        this.isChecking = false;
	    }
	}
	GGChallengeLevelController.hasReceivedFreeTimeBoost = false;

	class SL_PlayExpand {
	    constructor() {
	        this.id = SaveLoadConst.PLAYER_EXPAND_DATA;
	        this.canScroll = false;
	        this.capGold = 0;
	        this.capStone = 0;
	        this.capDiamond = 0;
	        this.capEnergy = 0;
	        this.saveDataNextEnergyTimestamp = 0;
	        this.timeOfLastDailyChest = 0;
	        this.totalDailyChestsReceived = 0;
	        this.victoryChestsInventory = [];
	        this.totalSleepReduction = 0;
	        this.spawnedStarGoals = [];
	        this.purchasedAlarmIds = [];
	        this.hasReceivedFreeTimeBoost = false;
	        this.m_wasSavedInLevel = false;
	        this.m_savedInLevelID = 0;
	        this.mostRecentHomeID = 0;
	    }
	    static getSaveData() {
	        let data = new SL_PlayExpand();
	        data.capGold = CurrencyMgr.ins().getCapacity(ECurrency.Gold);
	        data.capStone = CurrencyMgr.ins().getCapacity(ECurrency.Stone);
	        data.capDiamond = CurrencyMgr.ins().getCapacity(ECurrency.Diamond);
	        data.capEnergy = CurrencyMgr.ins().getCapacity(ECurrency.Energy);
	        if (CurrencyMgr.ins().nextEnergyTime != null) {
	            data.saveDataNextEnergyTimestamp = CurrencyMgr.ins().nextEnergyTime;
	        }
	        DailyChestMgr.ins().onSave(data);
	        LevelChestMgr.ins().onSave(data);
	        GGAlarmClockManager.onSave(data);
	        GGChallengeLevelController.OnSave(data);
	        data.mostRecentHomeID = Glob.mostRecentHomeID;
	        if (Glob.inLevelOrHome && !Glob.isChangingScenes) {
	            data.m_wasSavedInLevel = true;
	            data.m_savedInLevelID = Glob.currentLevel.ID;
	        }
	        else {
	            data.m_wasSavedInLevel = false;
	            data.m_savedInLevelID = 0;
	        }
	        data.shopSaveData = ShopSaveMgr.GetSaveDataObject();
	        data.permaCostIncs = PermaCostIncManager.getSaveDataObject();
	        return data;
	    }
	    static generateNewGame() {
	        let data = new SL_PlayExpand();
	        data.capGold = parseInt(ConstCfg.getValue("1"));
	        data.capStone = parseInt(ConstCfg.getValue("2"));
	        data.capDiamond = 10;
	        data.capEnergy = CurrencyCfg.capEnergy;
	        data.saveDataNextEnergyTimestamp = TimeMgr.ins().getTime() + CurrencyCfg.energyReplyTime;
	        CurrencyMgr.ins().setCapacity(ECurrency.Gold, data.capGold);
	        CurrencyMgr.ins().setCapacity(ECurrency.Stone, data.capStone);
	        CurrencyMgr.ins().setCapacity(ECurrency.Diamond, data.capDiamond);
	        CurrencyMgr.ins().setCapacity(ECurrency.Energy, data.capEnergy);
	        CurrencyMgr.ins().initNextEnergyTime(data.saveDataNextEnergyTimestamp);
	        CurrencyMgr.ins().initNew();
	        return data;
	    }
	    static save() {
	        SaveLoad.save(SL_PlayExpand.getSaveData());
	    }
	    static enterLoad() {
	        let slObj = new SL_PlayExpand();
	        SaveLoad.load(slObj);
	        CurrencyMgr.ins().setCapacity(ECurrency.Gold, slObj.capGold);
	        CurrencyMgr.ins().setCapacity(ECurrency.Stone, slObj.capStone);
	        CurrencyMgr.ins().setCapacity(ECurrency.Diamond, slObj.capDiamond);
	        CurrencyMgr.ins().setCapacity(ECurrency.Energy, slObj.capEnergy);
	        CurrencyMgr.ins().initNextEnergyTime(slObj.saveDataNextEnergyTimestamp);
	        DailyChestMgr.ins().onLoad(slObj);
	        LevelChestMgr.ins().onLoad(slObj);
	        GGAlarmClockManager.onLoad(slObj);
	        GGChallengeLevelController.OnLoad(slObj);
	        Glob.mostRecentHomeID = slObj.mostRecentHomeID;
	        if (slObj.m_wasSavedInLevel) {
	            Glob.gamePreviouslyExitedOnLevelID = slObj.m_savedInLevelID;
	        }
	        if (slObj.permaCostIncs != null) {
	            PermaCostIncManager.initFromSaveData(slObj.permaCostIncs);
	        }
	        if (slObj.shopSaveData) {
	            ShopSaveMgr.InitFromSaveData(slObj.shopSaveData);
	        }
	        if (slObj.saveDataNextEnergyTimestamp != null) {
	            CurrencyMgr.ins().nextEnergyTime = slObj.saveDataNextEnergyTimestamp;
	        }
	        else if (CurrencyMgr.ins().nextEnergyTime != null) {
	            slObj.saveDataNextEnergyTimestamp = CurrencyMgr.ins().nextEnergyTime;
	        }
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.canScroll);
	        obj.setValue("1", this.capGold);
	        obj.setValue("2", this.capStone);
	        obj.setValue("3", this.capDiamond);
	        obj.setValue("4", this.capEnergy);
	        obj.setValue("5", this.saveDataNextEnergyTimestamp);
	        obj.setValue("6", this.timeOfLastDailyChest);
	        obj.setValue("7", this.totalDailyChestsReceived);
	        obj.setValue("8", this.m_wasSavedInLevel);
	        obj.setValue("9", this.m_savedInLevelID);
	        obj.setValue("10", this.hasReceivedFreeTimeBoost);
	        obj.setValueISLArr("11", this.victoryChestsInventory);
	        if (this.shopSaveData) {
	            obj.setValueISL("12", this.shopSaveData);
	        }
	        if (this.permaCostIncs) {
	            obj.setValueISL("13", this.permaCostIncs);
	        }
	        obj.setValue("14", this.totalSleepReduction);
	        if (this.spawnedStarGoals != null) {
	            obj.setValue("15", SyncObj.serializeFromArray(this.spawnedStarGoals));
	        }
	        if (this.purchasedAlarmIds != null) {
	            obj.setValue("16", SyncObj.serializeFromArray(this.purchasedAlarmIds));
	        }
	        obj.setValue("17", this.mostRecentHomeID);
	        return obj;
	    }
	    import(data) {
	        this.canScroll = data.getValue("0");
	        this.capGold = data.getValue("1");
	        this.capStone = data.getValue("2");
	        this.capDiamond = data.getValue("3");
	        this.capEnergy = data.getValue("4");
	        this.saveDataNextEnergyTimestamp = data.getValue("5");
	        this.timeOfLastDailyChest = data.getValue("6");
	        this.totalDailyChestsReceived = data.getValue("7");
	        this.m_wasSavedInLevel = data.getValue("8");
	        this.m_savedInLevelID = data.getValue("9");
	        this.hasReceivedFreeTimeBoost = data.getValue("10");
	        if (data.hasKey("11")) {
	            this.victoryChestsInventory = data.getValueISLArr("11", SL_VictoryChest);
	        }
	        if (data.hasKey("12")) {
	            this.shopSaveData = data.getValueISL("12", SL_Shop);
	        }
	        if (data.hasKey("13")) {
	            this.permaCostIncs = data.getValueISL("13", SL_PermaCostIncs);
	        }
	        this.totalSleepReduction = data.hasKey("14") ? data.getValue("14") : 0;
	        if (data.hasKey("15")) {
	            this.spawnedStarGoals = SyncObj.deserializeToArray(data.getValue("15"));
	        }
	        if (data.hasKey("16")) {
	            this.purchasedAlarmIds = SyncObj.deserializeToArray(data.getValue("15"));
	        }
	        this.mostRecentHomeID = data.getValue("17");
	    }
	}

	class GGAlarmClock {
	    constructor(id, iapId, prefabName, sleepReduction, timeout, discount) {
	        this.id = id;
	        this.iapId = iapId;
	        this.prefabName = prefabName;
	        this.sleepReduction = sleepReduction;
	        this.timeout = timeout;
	        this.discount = discount;
	    }
	}

	class GGAlarmClockManager {
	    static onLoad(playerData) {
	        this.totalSleepReduction = playerData.totalSleepReduction;
	        this.spawnedStarGoals = playerData.spawnedStarGoals.concat();
	        this.purchasedAlarmIds = playerData.purchasedAlarmIds.concat();
	    }
	    static onSave(playerData) {
	        playerData.totalSleepReduction = this.totalSleepReduction;
	        playerData.spawnedStarGoals = this.spawnedStarGoals.concat();
	        playerData.purchasedAlarmIds = this.purchasedAlarmIds.concat();
	    }
	    static getNextAlarmClock() {
	        let list1 = this.alarmClocks.filter(a => !this.purchasedAlarmIds.some(id => id === a.iapId));
	        let list2 = this.getAlarmBonusesOnBoard().filter(a => a.alarmClock != null).map(a => a.alarmClock);
	        let list3 = list1.filter(item1 => {
	            return !list2.some(item2 => item1 === item2);
	        });
	        return list3[0] || null;
	    }
	    static getAlarmClockWithId(id) {
	        return this.alarmClocks.find(a => a.id === id);
	    }
	    static getAlarmClockWithStoreId(storeId) {
	        return this.alarmClocks.find(a => a.iapId === storeId);
	    }
	    static onStarCountUpdated() {
	        if (this.isEnabled() && this.isInHome() && this.canSpawnAlarm()) {
	            let awardingStarGoals = this.getAwardingStarGoals(this.getStarCount());
	            awardingStarGoals.forEach(item => this.spawnFor(item));
	        }
	    }
	    static getAwardingStarGoals(starCount) {
	        let alarmBonusCountOnBoard = this.getAlarmBonusCountOnBoard();
	        let count = this.purchasedAlarmIds.length;
	        let count2 = MathUtil.clamp(this.alarmClocks.length - (alarmBonusCountOnBoard + count), 0, 3);
	        return [];
	    }
	    static isEnabled() {
	        return MergeDragonsAppConfig.ALARM_BONUSES_ENABLED;
	    }
	    static hasRemainingAlarms() {
	        return Object.keys(this.purchasedAlarmIds).length < this.alarmClocks.length;
	    }
	    static hasRemainingStarGoals() {
	        return Object.keys(this.spawnedStarGoals).length < this.starGoals.length;
	    }
	    static canSpawnAlarm() {
	        return this.hasRemainingAlarms() && this.hasRemainingStarGoals() && this.getAlarmBonusCountOnBoard() < 3;
	    }
	    static onEnterHome() {
	        if (this.isEnabled() && this.canSpawnAlarm()) {
	            let stars = this.getStarCount();
	            let enumerable = [];
	            for (let i = 0; i < this.starGoals.length - 3; i++) {
	                let g = this.starGoals[i];
	                if (g <= stars && !this.spawnedStarGoals.some(data => data === g)) {
	                    enumerable.push(g);
	                }
	            }
	            enumerable.forEach(item => {
	                this.spawnedStarGoals.push(item);
	            });
	            let awardingStarGoals = this.getAwardingStarGoals(stars);
	            awardingStarGoals.forEach(item => {
	                this.spawnFor(item);
	            });
	        }
	    }
	    static onPurchaseAlarm(alarmStoreId) {
	        let alarmClockWithStoreId = this.getAlarmClockWithStoreId(alarmStoreId);
	        this.purchasedAlarmIds.push(alarmClockWithStoreId.id);
	        this.totalSleepReduction = this.purchasedAlarmIds.length * 15;
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	        if (this.isInHome()) {
	            let inGameAlarmBonusWithId = this.getInGameAlarmBonusWithId(alarmClockWithStoreId.id);
	            if (inGameAlarmBonusWithId != null) {
	                inGameAlarmBonusWithId.drawnObject.destroyDrawnObject();
	            }
	            Thing.createInFreeCell(10802, "ParticleRoot_EarthImpact", true);
	        }
	    }
	    static getInGameAlarmBonusWithId(alarmId) {
	        for (let item of this.getAlarmBonusesOnBoard()) {
	            if (item.alarmClock != null && item.alarmClock.id === alarmId) {
	                return item;
	            }
	        }
	        return null;
	    }
	    static getAlarmBonusCountOnBoard() {
	        return this.getAlarmBonusesOnBoard().length + this.getAlarmBonusesInsideOrbs().length;
	    }
	    static getAlarmBonusesOnBoard() {
	        return [];
	    }
	    static getAlarmBonusesInsideOrbs() {
	        return [];
	    }
	    static onAlarmsMerge() {
	        this.totalSleepReduction = 50;
	        SaveLoad.SavePlayerData(SL_PlayExpand.getSaveData());
	    }
	    static getSleepReduction() {
	        return this.totalSleepReduction;
	    }
	    static isInHome() {
	        return Glob.inHome;
	    }
	    static getStarCount() {
	        return Glob.currLevelData.GoalsCompleteInAllChains;
	    }
	    static spawnFor(starGoal) {
	        this.spawnedStarGoals.push(starGoal);
	        let drawnObject = Thing.createInFreeCell(10801, "ParticleRoot_EarthImpact", true);
	        SoundMgr.ins().playSound("m60");
	    }
	}
	GGAlarmClockManager.alarmClocks = [
	    new GGAlarmClock("alarm_bonus_1", "alarm_bonus_1", "Alarm_Bonus_0", 15, 1800, 75),
	    new GGAlarmClock("alarm_bonus_2", "alarm_bonus_2", "Alarm_Bonus_0", 15, 7200, 25),
	    new GGAlarmClock("alarm_bonus_3", "alarm_bonus_3", "Alarm_Bonus_0", 15, 86400, 0),
	];
	GGAlarmClockManager.starGoals = [
	    10,
	    15,
	    22,
	    40,
	    55,
	    70,
	    125,
	    135,
	    145,
	];
	GGAlarmClockManager.spawnedStarGoals = [];
	GGAlarmClockManager.purchasedAlarmIds = [];
	GGAlarmClockManager.totalSleepReduction = 0;

	class SL_Goal {
	    constructor() {
	        this.id = SaveLoadConst.GOAL;
	        this.m_localID = 0;
	        this.m_timesDoneSoFar = 0;
	        this.m_completed = false;
	        this.m_everViewed = false;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.m_localID);
	        obj.setValue("1", this.m_timesDoneSoFar);
	        obj.setValue("2", this.m_completed);
	        obj.setValue("3", this.m_everViewed);
	        return obj;
	    }
	    import(data) {
	        this.m_localID = data.getValue("0");
	        this.m_timesDoneSoFar = data.getValue("1");
	        this.m_completed = data.getValue("2");
	        this.m_everViewed = data.getValue("3");
	    }
	}

	class PurpleStarManager {
	    static CanCreatePurpleStar() {
	        if (!Glob.CanMakePurchase()) {
	            return false;
	        }
	        if (Glob.inAnEventArea || Glob.inAChallengeArea) {
	            return false;
	        }
	        let num = MathUtil.clamp(Glob.currLevelData.energy - 1, 0, 6);
	        switch (MergeDragonsAppConfig.PURPLE_STARS_AB_TEST) {
	            case 0:
	                return MathUtil.chance(0.05);
	            case 1:
	                return MathUtil.chance(0.01);
	            case 2:
	                return MathUtil.chance(0.025);
	            case 3:
	                return MathUtil.chance(0.1);
	            case 4:
	                return MathUtil.chance(this.K_CHALICE_BASED_LOW[num]);
	            case 5:
	                return MathUtil.chance(this.K_CHALICE_BASED_MID[num]);
	            case 6:
	                return MathUtil.chance(this.K_CHALICE_BASED_HIGH[num]);
	            default:
	                return MathUtil.chance(0.05);
	        }
	    }
	}
	PurpleStarManager.K_CHALICE_BASED_LOW = [
	    0.007,
	    0.014,
	    0.021,
	    0.028,
	    0.035,
	    0.042,
	    0.05,
	];
	PurpleStarManager.K_CHALICE_BASED_MID = [
	    0.014,
	    0.028,
	    0.0425,
	    0.056,
	    0.07,
	    0.085,
	    0.1,
	];
	PurpleStarManager.K_CHALICE_BASED_HIGH = [
	    0.03,
	    0.06,
	    0.09,
	    0.12,
	    0.15,
	    0.18,
	    0.21,
	];

	class GoalVo {
	    constructor(cid, data) {
	        this.countLabelText = "";
	        this.m_completed = false;
	        this.EverViewed = false;
	        this.TimesDoneSoFar = 0;
	        this.cid = cid;
	        this.levelCid = data["levelId"];
	        this.acType = GameActionTypeID[data["type"]];
	        let chain = data["chain"];
	        this.chain = chain ? GoalChainID[chain] : GoalChainID.NONE;
	        let fogGroup = data["fogGroup"];
	        this.fogGroup = fogGroup ? FogGroupID[fogGroup] : FogGroupID.NONE;
	        let category = data["targetCategory"];
	        this.targetCategory = category ? CategoryID[category] : CategoryID.NONE;
	        this.TimesToComplete = data["count"] ? data["count"] : 1;
	        if (this.TimesToComplete > 0) {
	            this.updateCountText();
	        }
	        this.starIndex = data["overrideStarIndex"] ? data["overrideStarIndex"] - 1 : -1;
	        this.desc = data["desc"] ? LanCfg.get(data["desc"]) : "";
	        this.help = data["help"] ? LanCfg.get(data["help"]) : "";
	        let cost = data["skipCost"];
	        this.skipCost = cost ? cost : 0;
	        this.icon = data["icon"];
	        this.targetPrefId = data["targetPrefId"];
	        if (this.targetPrefId && this.targetCategory != CategoryID.NONE) {
	            console.error("A goal has both a Target Prefab Name AND and a Target Category ID. It can only have one or the other.");
	        }
	        WorldMgr.ins().getLevelVo(this.levelCid).TryVerifyUniqueLocalID_AndAddToGoalIDMap(this);
	        this.AddGoalToLevelData(this.levelCid, this.fogGroup);
	    }
	    get HasOverrideStar() {
	        return this.starIndex > -1 && this.starIndex < GoalVo.stars.length;
	    }
	    AddGoalToLevelData(levelCid, fogGroupID) {
	        let levelData = WorldMgr.ins().getLevelVo(levelCid);
	        if (fogGroupID != FogGroupID.NONE) {
	            levelData.FogGoals[fogGroupID] = this;
	        }
	        else if (levelData.isHome || levelData.IsEventLevel) {
	            if (this.chain == GoalChainID.NONE) {
	                console.log("Home Levels require that the normal goals have a Chain ID set.");
	                return;
	            }
	            levelData.AddChainGoal(this);
	            WorldMgr.ins().TotalHomeStarsPossible++;
	        }
	        else if (this.chain != GoalChainID.NONE) {
	            console.error("Normal Levels aren't supposed to have goals with Chain IDs set! They are only supposed to have a max of 3 goals!");
	        }
	        else {
	            levelData.ActiveStarGoals.push(this);
	            WorldMgr.ins().TotalLevelStarsPossible++;
	        }
	    }
	    TryComplete() {
	        if (!this.m_completed) {
	            if (this.IsFogGoal) {
	                this.TryComplete_FogGoal();
	            }
	            else {
	                this.TryComplete_StarGoal();
	            }
	        }
	    }
	    DoSubstitutions(targetString) {
	        let flag = PropsCfg.has(this.targetPrefId);
	        let matchObjectDefinition = (!flag) ? null : PropsCfg.get(this.targetPrefId);
	        let str = "?";
	        if (matchObjectDefinition != null) {
	            if (matchObjectDefinition.visibleLv) {
	                str = matchObjectDefinition.visibleLv.toString();
	            }
	            if (this.targetPrefId) {
	                targetString = targetString.replace("{NAME}", matchObjectDefinition.name);
	            }
	            if (this.targetPrefId && targetString.indexOf("{PLURAL}") > -1) {
	                targetString = targetString.replace("{PLURAL}", matchObjectDefinition.namePlural);
	            }
	        }
	        if (flag) {
	            targetString = targetString.replace("{Lvl}", "等级: " + " " + str);
	        }
	        targetString = targetString.replace("{#}", this.TimesToComplete.toString());
	        targetString = targetString.replace("{DNW}", "（如果无效，请等待一会儿再重试。）");
	        return targetString;
	    }
	    TryComplete_FogGoal() {
	        if (this.TimesDoneSoFar >= this.TimesToComplete) {
	            this.m_completed = true;
	            if (this.FogArea != null) {
	                this.FogArea.goalComplete();
	            }
	        }
	    }
	    TryComplete_StarGoal() {
	        if (this.TimesDoneSoFar < this.TimesToComplete) {
	            let playProgressFeedback = this.acType != GameActionTypeID.Score;
	            if (playProgressFeedback) {
	                MsgCenter.notify(MsgConst.LEVEL_GOAL_PROGRESS, this);
	            }
	        }
	        else {
	            this.m_completed = true;
	            this.CompleteGoalInUI(0);
	            let data = Glob.currLevelData;
	            if (data.isHome) {
	                MsgCenter.notify(MsgConst.HOME_TOTAL_STAR);
	            }
	            if (Glob.currLevelData.cfg.GoalRewardPrefab && !Glob.inHome) {
	                this.DropReward();
	            }
	            if (Glob.inHome) {
	                MsgCenter.notify(MsgConst.UPDATE_HOMETASK_REDPOINT, true);
	            }
	        }
	    }
	    check() {
	        if (!this.EverViewed) {
	            this.EverViewed = true;
	            MsgCenter.notify(MsgConst.LEVEL_GOAL_CHECK, this);
	        }
	    }
	    get IsFogGoal() {
	        return this.fogGroup != FogGroupID.NONE;
	    }
	    get Complete() {
	        return this.m_completed;
	    }
	    get CanPayToSkip() {
	        return this.skipCost > 0;
	    }
	    get FogArea() {
	        if (!this.IsFogGoal) {
	            return null;
	        }
	        let fog = Glob.map.fogMap.fogAreas[this.fogGroup];
	        if (fog) {
	            return fog;
	        }
	        return null;
	    }
	    get Text() {
	        if (!this.desc) {
	            return "";
	        }
	        return this.DoSubstitutions(this.desc);
	    }
	    get HelpText() {
	        if (!this.help) {
	            return "";
	        }
	        return this.DoSubstitutions(this.help);
	    }
	    get HasIcon() {
	        return !!this.icon;
	    }
	    getPrefName() {
	        if (this.targetPrefId) {
	            return PropsCfg.getPref(this.targetPrefId);
	        }
	        else {
	            return null;
	        }
	    }
	    getIconPrefName() {
	        if (this.icon) {
	            return PropsCfg.getPref(this.icon);
	        }
	        else {
	            return null;
	        }
	    }
	    Reset() {
	        this.m_completed = false;
	        this.EverViewed = false;
	        this.TimesDoneSoFar = 0;
	        this.updateCountText();
	    }
	    SatisfyOnce() {
	        this.TimesDoneSoFar++;
	        if (this.TimesDoneSoFar <= this.TimesToComplete) {
	            this.updateCountText();
	        }
	        this.TryComplete();
	    }
	    ForceComplete() {
	        this.m_completed = true;
	    }
	    Skip() {
	        this.TimesDoneSoFar = this.TimesToComplete;
	        this.m_completed = true;
	        this.updateCountText();
	        this.CompleteGoalInUI(0);
	        if (Glob.currLevelData.cfg.GoalRewardPrefab) {
	            this.DropReward();
	        }
	        if (Glob.inHome) {
	            GGAlarmClockManager.onStarCountUpdated();
	            MsgCenter.notify(MsgConst.HOME_TOTAL_STAR);
	        }
	    }
	    SetSatisfactionCount(numberComplete) {
	        if (numberComplete < this.TimesDoneSoFar) {
	            this.TimesDoneSoFar = numberComplete;
	            this.updateCountText();
	        }
	        else if (numberComplete != this.TimesDoneSoFar) {
	            this.TimesDoneSoFar = numberComplete;
	            if (this.TimesDoneSoFar > this.TimesToComplete) {
	                this.TimesDoneSoFar = this.TimesToComplete;
	            }
	            this.updateCountText();
	            this.TryComplete();
	        }
	    }
	    CompleteGoalInUI(delay) {
	        MsgCenter.notify(MsgConst.LEVEL_GOAL_COMPLETE, this);
	    }
	    updateCountText() {
	        this.countLabelText = this.TimesDoneSoFar + " / " + this.TimesToComplete;
	        if (Glob.inLevelOrHome && this.FogArea != null) {
	            this.FogArea.updateCountText();
	        }
	    }
	    DropReward() {
	        let flag = false;
	        let drawnObject = null;
	        let rewardPrefCfg = Glob.currLevelData.cfg.GoalRewardPrefab;
	        let isContains = rewardPrefCfg.categories.some(item => item === CategoryID.NormalFallenStars);
	        if (isContains && PurpleStarManager.CanCreatePurpleStar()) {
	            drawnObject = Thing.createInFreeCell(rewardPrefCfg.cid, "ParticleRoot_EarthImpact", true);
	            SoundMgr.ins().playSound("m60");
	            flag = true;
	        }
	        let normalRewardPrefab = this.GetNormalRewardPrefab();
	        rewardPrefCfg = PropsCfg.get(normalRewardPrefab);
	        isContains = rewardPrefCfg.categories.some(item => item === CategoryID.NormalFallenStars);
	        if (normalRewardPrefab && (!flag || !isContains)) {
	            drawnObject = Thing.createInFreeCell(normalRewardPrefab, "ParticleRoot_EarthImpact", true);
	            SoundMgr.ins().playSound("m60");
	        }
	    }
	    GetNormalRewardPrefab() {
	        if (this.HasOverrideStar) {
	            return GoalVo.stars[this.starIndex];
	        }
	        return Glob.currLevelData.cfg.GoalRewardPrefab.cid;
	    }
	    GetSaveDataObject() {
	        let goal = new SL_Goal();
	        goal.m_localID = this.cid;
	        goal.m_completed = this.m_completed;
	        goal.m_everViewed = this.EverViewed;
	        goal.m_timesDoneSoFar = this.TimesDoneSoFar;
	        return goal;
	    }
	    InitFromSaveData(data) {
	        this.m_completed = data.m_completed;
	        this.EverViewed = data.m_everViewed;
	        this.TimesDoneSoFar = data.m_timesDoneSoFar;
	        if (this.TimesToComplete > 0) {
	            this.updateCountText();
	        }
	    }
	}
	GoalVo.stars = [
	    10321,
	    10322,
	    10323,
	    10324,
	    10325,
	    10320,
	];

	class GoalMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.AllGoals = [];
	        this.progressAllowedLock = 0;
	    }
	    PrefabBasedGoalAction(actionType, targetObject, actionCount = 1) {
	        if (this.ProgressAllowed) {
	            this.PrefabBasedGoalAction2(actionType, targetObject.cfg.pref, this.StarGoals, actionCount);
	        }
	    }
	    PrefabBasedGoalAction2(actionType, prefabNameOfObject, goalsToCheck, actionCount = 1) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && item.acType == actionType && item.getPrefName() == prefabNameOfObject) {
	                for (let i = 0; i < actionCount; i++) {
	                    item.SatisfyOnce();
	                }
	            }
	        });
	    }
	    CategoryBasedGoalAction(actionType, targetObject, actionCount = 1) {
	        if (this.ProgressAllowed) {
	            this.CategoryBasedGoalAction2(actionType, targetObject, this.StarGoals, actionCount);
	        }
	    }
	    CategoryBasedGoalAction2(actionType, targetObject, goalsToCheck, actionCount) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && item.acType == actionType && item.targetCategory != 0 && (item.targetCategory == CategoryID.ANY || targetObject.hasCategory(item.targetCategory))) {
	                for (let i = 0; i < actionCount; i++) {
	                    item.SatisfyOnce();
	                }
	            }
	        });
	    }
	    GenericSatisfyOnce_GoalChecker(goalsToCheck, actionType) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && item.acType == actionType) {
	                item.SatisfyOnce();
	            }
	        });
	    }
	    HaveHealedLandTotal(goalsToCheck) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && item.acType == GameActionTypeID.HaveHealedLand) {
	                let count = Glob.cellLayer.livingCells.length;
	                item.SetSatisfactionCount(count);
	            }
	        });
	        goalsToCheck.forEach(item => {
	            if (!item.Complete
	                && (item.acType == GameActionTypeID.HealAllLand || item.acType == GameActionTypeID.HealLandCell)
	                && Glob.map.isAllLandHealed_ExcludingFoggedPremium()) {
	                item.Skip();
	            }
	        });
	    }
	    HaveObjects2(prefId, allOfThisType, goalsToCheck) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && (item.acType == GameActionTypeID.Have) && (item.targetPrefId == prefId)) {
	                let num = 0;
	                allOfThisType.forEach(item2 => {
	                    if (!item2.dead && !item2.isIcon && item2.matchState != MatchState.Keyhole) {
	                        num++;
	                    }
	                });
	                item.SetSatisfactionCount(num);
	            }
	        });
	    }
	    HaveObjects_CategoryBased(newObj, goalsToCheck) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && item.acType == GameActionTypeID.Have && item.targetCategory != 0 && newObj.hasCategory(item.targetCategory)) {
	                if (!ThingList.categories[item.targetCategory]) {
	                    console.error("Checking goal {item} for targetCategory {item.TargetCategory} which the new object {newObj} has, but DrawnObject.CateogryObjects doesn't have a list of those category objects!");
	                }
	                else {
	                    let list = ThingList.categories[item.targetCategory];
	                    let num = 0;
	                    list.forEach(item2 => {
	                        if (!item2.dead && !item2.isIcon && item2.matchState != MatchState.Keyhole) {
	                            num++;
	                        }
	                    });
	                    item.SetSatisfactionCount(num);
	                }
	            }
	        });
	    }
	    DragonPowerChanged2(goalsToCheck) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && (item.acType == GameActionTypeID.DragonPower || item.acType == GameActionTypeID.PremiumLand || item.acType == GameActionTypeID.PremiumLand2 || item.acType == GameActionTypeID.PremiumLand3)) {
	                item.SetSatisfactionCount(Thing.totalDragonPower);
	            }
	        });
	    }
	    ScoreUpdated2(goalsToCheck) {
	        goalsToCheck.forEach(item => {
	            if (!item.Complete && item.acType == GameActionTypeID.Score) {
	                item.SetSatisfactionCount(Glob.currentLevel.points);
	            }
	        });
	    }
	    HideTomeTip() {
	        LayerMgr.ins().close(UiConst.TutorialView);
	    }
	    onGoalAction(data) {
	        let actionType = data.actionId;
	        let targetObject = data.thing;
	        let actionCount = data.count == null ? 1 : data.count;
	        this.PrefabBasedGoalAction(actionType, targetObject, actionCount);
	        this.CategoryBasedGoalAction(actionType, targetObject, actionCount);
	    }
	    init() {
	        let cfg = GoalCfg.cfg;
	        MsgCenter.listen(MsgConst.GAME_ACTION, this.onGoalAction, this);
	        for (let key in cfg) {
	            let cid = parseInt(key);
	            let vo = new GoalVo(cid, cfg[key]);
	            this.AllGoals.push(vo);
	        }
	    }
	    get StarGoals() {
	        if (Glob.currLevelData != null) {
	            return Glob.currLevelData.ActiveStarGoals;
	        }
	        return null;
	    }
	    get FogGoals() {
	        if (Glob.currLevelData != null) {
	            let list = [];
	            for (let key in Glob.currLevelData.FogGoals) {
	                list.push(Glob.currLevelData.FogGoals[key]);
	            }
	            return list;
	        }
	        return null;
	    }
	    get ProgressAllowed() {
	        return this.progressAllowedLock >= 0 && this.StarGoals != null;
	    }
	    DisableGoalProgression() {
	        this.progressAllowedLock--;
	    }
	    EnableGoalProgression() {
	        this.progressAllowedLock++;
	        this.ScoreUpdated();
	    }
	    GetPremiumLandGoal() {
	        for (let goal of this.AllGoals) {
	            if (goal.acType == GameActionTypeID.PremiumLand) {
	                return goal;
	            }
	        }
	        return null;
	    }
	    GetPremiumLandGoal2() {
	        for (let goal of this.AllGoals) {
	            if (goal.acType == GameActionTypeID.PremiumLand2) {
	                return goal;
	            }
	        }
	        return null;
	    }
	    GetPremiumLandGoal3() {
	        for (let goal of this.AllGoals) {
	            if (goal.acType == GameActionTypeID.PremiumLand3) {
	                return goal;
	            }
	        }
	        return null;
	    }
	    RefreshActiveGoals() {
	        this.HaveHealedLandTotal(this.StarGoals);
	    }
	    HealLandCell() {
	        if (this.ProgressAllowed) {
	            this.GenericSatisfyOnce_GoalChecker(this.StarGoals, GameActionTypeID.HealLandCell);
	            this.HaveHealedLandTotal(this.StarGoals);
	        }
	    }
	    AllLandHealed() {
	        if (this.ProgressAllowed && Glob.currentLevel.state == LevelStateID.Playing) {
	            this.GenericSatisfyOnce_GoalChecker(this.StarGoals, GameActionTypeID.HealAllLand);
	        }
	    }
	    MatchOnDeadLand(obj) {
	        if (this.ProgressAllowed) {
	            this.GenericSatisfyOnce_GoalChecker(this.StarGoals, GameActionTypeID.HealDeadLandWithMatch);
	            this.PrefabBasedGoalAction(GameActionTypeID.MatchOnDeadLand, obj);
	            this.CategoryBasedGoalAction(GameActionTypeID.MatchOnDeadLand, obj);
	        }
	    }
	    ZomblinKilled() {
	        if (this.ProgressAllowed) {
	            this.GenericSatisfyOnce_GoalChecker(this.StarGoals, GameActionTypeID.KillZomblins);
	        }
	    }
	    HomeLoaded_RefreshHaveObjectGoals() {
	        for (let starGoal of this.StarGoals) {
	            if (!starGoal.Complete && starGoal.acType == GameActionTypeID.Have) {
	                let num = 0;
	                if (starGoal.targetCategory == CategoryID.NONE) {
	                    if (!ThingList.lists[starGoal.targetPrefId]) {
	                        continue;
	                    }
	                    let list = ThingList.lists[starGoal.targetPrefId];
	                    list.forEach(item => {
	                        if (!item.dead && !item.isIcon && item.matchState != MatchState.Keyhole) {
	                            num++;
	                        }
	                    });
	                }
	                else {
	                    if (!ThingList.categories[starGoal.targetCategory]) {
	                        continue;
	                    }
	                    let list = ThingList.categories[starGoal.targetCategory];
	                    list.forEach(item => {
	                        if (!item.dead && !item.isIcon && item.matchState != MatchState.Keyhole) {
	                            num++;
	                        }
	                    });
	                }
	                starGoal.SetSatisfactionCount(num);
	            }
	        }
	    }
	    HaveObjects(newObj) {
	        if (this.ProgressAllowed) {
	            this.HaveObjects2(newObj.cid, ThingList.lists[newObj.cid], this.StarGoals);
	            this.HaveObjects_CategoryBased(newObj, this.StarGoals);
	        }
	    }
	    DragonPowerChanged() {
	        if (this.ProgressAllowed) {
	            this.DragonPowerChanged2(this.FogGoals);
	        }
	    }
	    ScoreUpdated() {
	        if (this.ProgressAllowed) {
	            this.ScoreUpdated2(this.StarGoals);
	        }
	    }
	    CheckForLevelCompletion(allOfThisType) {
	        if (this.ProgressAllowed) {
	            let num = 0;
	            allOfThisType.forEach(item => {
	                if (item.getComponent(CompFilledWithDeath) == null) {
	                    num++;
	                }
	            });
	            let need = Glob.currLevelData.cfg.finishPrefNum;
	            if (num >= need) {
	                Glob.levelCompleted();
	                this.HideTomeTip();
	                MsgCenter.notify(MsgConst.LEVEL_MAIN_GOAL_COMPLETE, [num, need]);
	            }
	            else {
	                MsgCenter.notify(MsgConst.LEVEL_MAIN_GOAL_PROGRESS, [num, need]);
	            }
	        }
	    }
	    ResetCurrentGoals() {
	        let data = Glob.currLevelData;
	        data.ActiveStarGoals.forEach(activeStarGoal => {
	            activeStarGoal.Reset();
	        });
	        for (let key in data.FogGoals) {
	            let value = data.FogGoals[key];
	            value.Reset();
	        }
	        if (data.HasGoalChainA) {
	            data.GoalChainA.forEach(item => {
	                item.Reset();
	            });
	        }
	        if (data.HasGoalChainB) {
	            data.GoalChainB.forEach(item => {
	                item.Reset();
	            });
	        }
	        if (data.HasGoalChainC) {
	            data.GoalChainC.forEach(item => {
	                item.Reset();
	            });
	        }
	    }
	    InitActiveGoalsWithSaveFileData(levelID) {
	        let levelData = WorldMgr.ins().getLevelVo(levelID);
	        if (levelData.ActiveStarGoals == null || levelData.ActiveStarGoals.length == 0) {
	            let saveData_Level = Level.loadSaveFileWithID(levelID);
	            if (saveData_Level != null) {
	                saveData_Level.goals.forEach(goal => {
	                    if (levelData.AllGoalsIDMap != null && levelData.AllGoalsIDMap[goal.m_localID]) {
	                        levelData.AllGoalsIDMap[goal.m_localID].InitFromSaveData(goal);
	                    }
	                });
	            }
	            levelData.TryUpdateActiveGoalSetIfChainsExist();
	        }
	    }
	}

	var BuyLandId;
	(function (BuyLandId) {
	    BuyLandId[BuyLandId["LAND"] = 19] = "LAND";
	    BuyLandId[BuyLandId["LAND_2"] = 20] = "LAND_2";
	    BuyLandId[BuyLandId["LAND_3"] = 21] = "LAND_3";
	})(BuyLandId || (BuyLandId = {}));
	class BuyLandMgr extends Singleton {
	    onPurchseOk(subjectId) {
	        if (subjectId == null)
	            return;
	        let goal = null;
	        switch (subjectId) {
	            case BuyLandId.LAND:
	                ShopSaveMgr.DidPurchasePremiumLand = true;
	                goal = GoalMgr.ins().GetPremiumLandGoal();
	                goal && goal.ForceComplete();
	                this.completePremiumLandPurchase();
	                break;
	            case BuyLandId.LAND_2:
	                ShopSaveMgr.DidPurchasePremiumLand2 = true;
	                goal = GoalMgr.ins().GetPremiumLandGoal2();
	                goal && goal.ForceComplete();
	                this.completePremiumLandPurchase2();
	                break;
	            case BuyLandId.LAND_3:
	                ShopSaveMgr.DidPurchasePremiumLand3 = true;
	                goal = GoalMgr.ins().GetPremiumLandGoal3();
	                goal && goal.ForceComplete();
	                this.completePremiumLandPurchase3();
	                break;
	        }
	    }
	    completePremiumLandPurchase() {
	        if (Glob.inHome) {
	            let premiumFogArea = Glob.map.fogMap.getPremiumFogArea();
	            if (premiumFogArea != null) {
	                premiumFogArea.unfog();
	            }
	        }
	    }
	    completePremiumLandPurchase2() {
	        if (Glob.inHome) {
	            let premiumFogArea = Glob.map.fogMap.getPremiumFogArea2();
	            if (premiumFogArea != null) {
	                premiumFogArea.unfog();
	            }
	        }
	    }
	    completePremiumLandPurchase3() {
	        if (Glob.inHome) {
	            let premiumFogArea = Glob.map.fogMap.getPremiumFogArea3();
	            if (premiumFogArea != null) {
	                premiumFogArea.unfog();
	            }
	        }
	    }
	}

	class giftBagVo {
	}
	class BuyDiamondsMgr extends Singleton {
	    constructor() {
	        super();
	    }
	    static init() {
	        let slObj = new SL_RechargeDiamonds();
	        if (SaveLoad.has(SaveLoadConst.BUYDIAMONDS)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveData(slObj);
	        }
	        this.buyIds = slObj.gearIds;
	        this.hasWardIds = slObj.hasReceivedId;
	        this.monCard = slObj.monthCard;
	        this.giftArr = slObj.giftData;
	        this.orderNumber = slObj.orderNumber;
	        this.isBuyOneGift = slObj.isBuyOneGift;
	        this.getBuyDiamondsCfg();
	    }
	    static saveData(obj) {
	        obj.gearIds = [];
	        SaveLoad.save(obj);
	    }
	    static getBuyDiamondsCfg() {
	        this.diamonds = [];
	        let commonData = PaySHopCfg.getDataByType(3);
	        let data = commonData;
	        data.some(item => {
	            let has = this.isCommonId(item.cid);
	            if (!has) {
	                this.diamonds.push(item);
	            }
	            else {
	                if (item.limitType != 0) {
	                    this.diamonds.push(item);
	                }
	            }
	        });
	    }
	    static getBuyDiamondsData(id) {
	        return this.diamonds.find(item => item.cid == id);
	    }
	    static isCommonId(id) {
	        return this.buyIds.some(buyId => buyId === id);
	    }
	    static updateCommonIds(id, getNum) {
	        let awardStr;
	        this.deleteBuyData(id);
	        if (!this.isCommonId(id)) {
	            this.buyIds.push(id);
	            SL_RechargeDiamonds.save();
	        }
	        awardStr = PaySHopCfg.getAwardById(id);
	        PropItemMgr.popFloatMsg(awardStr);
	        CurrencyMgr.ins().credit(ECurrency.Diamond, getNum);
	        ApiMgr.addYbRecord(getNum, LogEarnType.Shop);
	        MsgCenter.notify(MsgConst.SHOP_BUYDIAMONDS);
	    }
	    static deleteBuyData(id) {
	        let arr = [];
	        for (let i = 0; i < this.diamonds.length; i++) {
	            let item = this.diamonds[i];
	            if (id == item.cid && item.limitType == 0) {
	                continue;
	            }
	            else {
	                arr.push(item);
	            }
	        }
	        this.diamonds = arr;
	    }
	    static getCommonIds() {
	        return this.buyIds;
	    }
	    static getDiamonds() {
	        return this.diamonds;
	    }
	    static isMonthCard(id) {
	        return this.monCard.some(item => item.id === id);
	    }
	    static updateMonthCardIIds(cardId, time) {
	        if (!this.isMonthCard(cardId)) {
	            let obj = {
	                id: cardId,
	                buyTime: time
	            };
	            this.monCard.push(obj);
	            SL_RechargeDiamonds.save();
	            MsgCenter.notify(MsgConst.SHOP_BUYMONTHCARD);
	        }
	    }
	    static getMonthCardIds() {
	        return this.monCard;
	    }
	    static ishasAward(id) {
	        return this.hasWardIds.some(item => item.id === id);
	    }
	    static updateHasRecivedIds(data, getNum) {
	        if (!this.ishasAward(data.id)) {
	            this.hasWardIds.push(data);
	            SL_RechargeDiamonds.save();
	            CurrencyMgr.ins().credit(ECurrency.Diamond, getNum);
	            this.monthCardEnd();
	            MsgCenter.notify(MsgConst.SHOP_RECEIVEWARD);
	            ApiMgr.addYbRecord(getNum, LogEarnType.MonthLv1);
	        }
	        let awardStr;
	        if (this.isMonthCard(data.id) && this.isOverdue(data.id)) {
	            awardStr = PaySHopCfg.getCommonAward(data.id);
	        }
	        else {
	            awardStr = PaySHopCfg.getAwardById(data.id);
	        }
	        PropItemMgr.popFloatMsg(awardStr);
	    }
	    static isOverdue(id) {
	        for (let i = 0; i < this.monCard.length; i++) {
	            if (id == this.monCard[i].id) {
	                let day = TimeMgr.ins().getCurBuyDay(this.monCard[i].buyTime);
	                if (day > 1) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	        }
	        return false;
	    }
	    static getHasRecivedIIds() {
	        return this.hasWardIds;
	    }
	    static isHasSame(id, price) {
	        let data = this.getDiamonds();
	        for (let i = 0; i < data.length; i++) {
	            let vo = data[i];
	            let cost = vo.price;
	            if ((id != vo.cid) && vo.type != 2) {
	                if (price == cost) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    static monthCardEnd() {
	        if (this.monCard.length == 0)
	            return;
	        let hasDay = TimeMgr.ins().getCurBuyDay(this.monCard[0].buyTime);
	        let residueDay = hasDay > 0 ? 30 - hasDay : 30 - 0;
	        if (residueDay <= 0) {
	            this.hasWardIds = [];
	            for (let i = 0; i < this.monCard.length; i++) {
	                let item = this.monCard[i];
	                if (!item || (item && !item.buyTime))
	                    continue;
	                let day = TimeMgr.ins().getCurBuyDay(item.buyTime);
	                if (day >= 30) {
	                    this.monCard.splice(i, 1);
	                }
	            }
	            SL_RechargeDiamonds.save();
	        }
	    }
	    static getResidueDay() {
	        if (this.monCard.length == 0)
	            return 0;
	        let hasDay = TimeMgr.ins().getCurBuyDay(this.monCard[0].buyTime);
	        let residueDay = hasDay > 0 ? 30 - hasDay : 30 - 0;
	        return residueDay;
	    }
	    static clearMonthId() {
	        this.hasWardIds = [];
	        this.clearAllMonthCardId();
	        SL_RechargeDiamonds.save();
	        MsgCenter.notify(MsgConst.SHOP_RECEIVEWARD);
	    }
	    static clearAllMonthCardId() {
	        if (this.monCard.length == 0)
	            return;
	        for (let i = 0; i < this.monCard.length; i++) {
	            let item = this.monCard[i];
	            if (!item || (item && !item.buyTime))
	                continue;
	            let day = TimeMgr.ins().getCurBuyDay(item.buyTime);
	            if (day > 30) {
	                this.monCard.splice(i, 1);
	            }
	        }
	        SL_RechargeDiamonds.save();
	        MsgCenter.notify(MsgConst.RESET_DAYTIME);
	    }
	    static getGiftBagData() {
	        let data = PaySHopCfg.getDataByType(4);
	        return data;
	    }
	    static isGift(id) {
	        return this.giftArr.some(item => item.id == id);
	    }
	    static renewGiftIds(id, time) {
	        let num = 0;
	        if (this.isGift(id)) {
	            let data = this.findDataById(id);
	            data.count++;
	        }
	        else {
	            num++;
	            let obj = {
	                id: id,
	                count: num,
	                buyTime: time
	            };
	            this.giftArr.push(obj);
	        }
	        SL_RechargeDiamonds.save();
	        let awardStr = PaySHopCfg.getAwardById(id);
	        PropItemMgr.popFloatMsg(awardStr);
	        let total = this.calMoney(id);
	        CurrencyMgr.ins().credit(ECurrency.Diamond, total);
	        if (total > 0) {
	            ApiMgr.addYbRecord(total, LogEarnType.Gift);
	        }
	        if (id === 15) {
	            this.buyOneGift();
	        }
	        MsgCenter.notify(MsgConst.SHOP_BUYGIFT);
	    }
	    static buyOneGift() {
	        if (!this.isBuyOneGift) {
	            this.isBuyOneGift = true;
	            SL_RechargeDiamonds.save();
	        }
	    }
	    static getGiftData() {
	        return this.giftArr;
	    }
	    static findDataById(id) {
	        return this.giftArr.find(item => item.id == id);
	    }
	    static buyGiftFinish() {
	        let data = this.getGiftBagData();
	        data.forEach((item, i) => {
	            let vo = BuyDiamondsMgr.findDataById(item.cid);
	            if (vo && item.limitType == 0) {
	                delete data[i];
	            }
	        });
	        let arr = [];
	        data.some(item => {
	            arr.push(item);
	        });
	        return arr;
	    }
	    static getGiftDataById(id) {
	        let data = this.getGiftBagData();
	        let vo = data.find(item => item.cid == id);
	        return vo;
	    }
	    static clearGiftBagData() {
	        let data = this.getGiftData();
	        data.some((item, i) => {
	            let vo = this.getGiftDataById(item.id);
	            if (vo) {
	                let day = TimeMgr.ins().getCurBuyDay(item.buyTime);
	                if ((day > 1) && vo.limitType == 1) {
	                    data.splice(i, 1);
	                }
	                else if ((day > 3) && vo.limitType == 2) {
	                    data.splice(i, 1);
	                }
	                else if (day > 7 && vo.limitType == 3) {
	                    data.splice(i, 1);
	                }
	            }
	        });
	        SL_RechargeDiamonds.save();
	        MsgCenter.notify(MsgConst.SHOP_BUYGIFT);
	    }
	    static calMoney(id) {
	        let data = this.getGiftDataById(id);
	        let str = data.award;
	        let total = 0;
	        let str_arr = str.split("_");
	        str_arr.forEach(item => {
	            let vo = item.split(",");
	            if (Number(vo[0]) == 1 && Number(vo[1])) {
	                total += Number(vo[1]);
	            }
	        });
	        let extStr = data.extraGift;
	        let ext_arr = extStr.split("_");
	        ext_arr.some(item => {
	            let extVo = item.split(",");
	            if (Number(extVo[0]) == 1 && Number(extVo[1])) {
	                total += Number(extVo[1]);
	            }
	        });
	        return total;
	    }
	    static sendMsg(data) {
	        let orderId = ProtUtil.ltn(data.oriderId);
	        if (orderId) {
	            if (this.orderNumber != orderId) {
	                this.orderNumber = orderId;
	                ProxyMgr.recharge.sConfirmMsg(orderId);
	                SL_RechargeDiamonds.save();
	                let type = PaySHopCfg.getRechargeType(data.subjectId);
	                let time = TimeMgr.ins().getTime();
	                if (type == 1) {
	                    FirstChargeMgr.isBuyGift(true);
	                }
	                else if (type == 2) {
	                    BuyDiamondsMgr.updateMonthCardIIds(data.subjectId, time);
	                }
	                else if (type == 3) {
	                    let vo = this.getBuyDiamondsData(data.subjectId);
	                    if (vo) {
	                        let num = vo.award.split(",")[1];
	                        BuyDiamondsMgr.updateCommonIds(data.subjectId, Number(num));
	                    }
	                }
	                else if (type == 4) {
	                    BuyDiamondsMgr.renewGiftIds(data.subjectId, time);
	                    let giftBagVo = BuyDiamondsMgr.getGiftDataById(data.subjectId);
	                    if (giftBagVo) {
	                        ApiMgr.addCashRecord(giftBagVo.price, 0, LogCostType.PayForGift);
	                    }
	                }
	                else if (type == 5) {
	                    BuyLandMgr.ins().onPurchseOk(data.subjectId);
	                }
	            }
	            else {
	                ProxyMgr.recharge.sConfirmMsg(orderId);
	            }
	        }
	    }
	}
	BuyDiamondsMgr.buyIds = [];
	BuyDiamondsMgr.monCard = [];
	BuyDiamondsMgr.hasWardIds = [];
	BuyDiamondsMgr.diamonds = [];
	BuyDiamondsMgr.giftArr = [];
	BuyDiamondsMgr.isZero = false;
	BuyDiamondsMgr.showGiftRed = false;
	BuyDiamondsMgr.isHoldDown = false;
	BuyDiamondsMgr.isClickFinish = false;
	BuyDiamondsMgr.isMouseDown = false;
	BuyDiamondsMgr.isBuyDiamonds = false;
	BuyDiamondsMgr.isTouchTool = false;
	BuyDiamondsMgr.isGiftPanel = false;
	BuyDiamondsMgr.isBuyOneGift = false;
	BuyDiamondsMgr.orderNumber = 0;

	class SL_Activity {
	    constructor() {
	        this.id = SaveLoadConst.ACTIVITY;
	        this.onlineTime = 0;
	        this.hasRewarId = [];
	        this.openDay = 1;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.onlineTime);
	        obj.setValue("1", SyncObj.serializeFromArray(this.hasRewarId));
	        obj.setValue("2", this.openDay);
	        return obj;
	    }
	    import(data) {
	        this.onlineTime = data.getValue("0");
	        this.hasRewarId = SyncObj.deserializeToArray(data.getValue("1"));
	        this.openDay = data.getValue("2");
	    }
	    static getSaveAtlasData() {
	        let obj = new SL_Activity();
	        obj.onlineTime = ActivityMgr.everyDayOnlineTime;
	        obj.hasRewarId = ActivityMgr.hasRewarId.concat();
	        obj.openDay = ActivityMgr.openDay;
	        return obj;
	    }
	    static save() {
	        SaveLoad.save(SL_Activity.getSaveAtlasData());
	    }
	    static generateNewGame() {
	        return SL_Activity.getSaveAtlasData();
	    }
	}

	class SL_SignIn {
	    constructor() {
	        this.id = SaveLoadConst.SIGNIN;
	        this.sevenSignIds = [];
	        this.everyDayIds = [];
	        this.hasReceivedIds = [];
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.signInDay);
	        obj.setValue("1", SyncObj.serializeFromArray(this.sevenSignIds));
	        obj.setValue("2", SyncObj.serializeFromArray(this.hasReceivedIds));
	        obj.setValue("3", SyncObj.serializeFromArray(this.everyDayIds));
	        obj.setValue("4", this.clearTime);
	        return obj;
	    }
	    import(data) {
	        this.signInDay = data.getValue("0");
	        this.sevenSignIds = SyncObj.deserializeToArray(data.getValue("1"));
	        this.hasReceivedIds = SyncObj.deserializeToArray(data.getValue("2"));
	        this.everyDayIds = SyncObj.deserializeToArray(data.getValue("3"));
	        this.clearTime = data.getValue("4");
	    }
	    static save() {
	        SaveLoad.save(SL_SignIn.getSaveData());
	    }
	    static getSaveData() {
	        let obj = new SL_SignIn();
	        obj.signInDay = EveryDaySignMgr.totalSignInDay;
	        obj.sevenSignIds = SignInMgr.sevenDayIds.concat();
	        obj.hasReceivedIds = EveryDaySignMgr.hasgiftIds.concat();
	        obj.everyDayIds = EveryDaySignMgr.everyDayIds.concat();
	        obj.clearTime = EveryDaySignMgr.clearTime;
	        return obj;
	    }
	    static generateNewGame() {
	        return SL_SignIn.getSaveData();
	    }
	}

	class SignInVo {
	    constructor(key, cfg) {
	        this.state = SignState$1.eNoSign;
	        this.cid = parseInt(key);
	        this.dayLbl = cfg.desc;
	        this.desc = cfg.desc1;
	        this.award = PayShopVo.setAwardFormat(cfg.award);
	        this.sevenAward = PayShopVo.setAwardFormat(cfg.award1);
	        this.sevenDesc = cfg.desc2;
	    }
	}
	var SignState$1;
	(function (SignState) {
	    SignState[SignState["eNoSign"] = 0] = "eNoSign";
	    SignState[SignState["eSinging"] = 1] = "eSinging";
	    SignState[SignState["eFinish"] = 2] = "eFinish";
	    SignState[SignState["eReSign"] = 3] = "eReSign";
	})(SignState$1 || (SignState$1 = {}));
	class SaveSignInVo {
	}

	class SignInCfg {
	    static getSignInCfg() {
	        if (!this.cfg) {
	            this.cfg = {};
	            let data = PConfig.getCfg("SignIn.json");
	            for (let key in data) {
	                this.cfg[key] = new SignInVo(key, data[key]);
	            }
	        }
	        return this.cfg;
	    }
	    static getSignData() {
	        let arr = [];
	        let cfg = this.getSignInCfg();
	        for (let key in cfg) {
	            if (cfg[key].cid < 101) {
	                arr.push(cfg[key]);
	            }
	        }
	        return arr;
	    }
	    static splitData() {
	        let leftArr = [];
	        let rightArr = [];
	        let cfg = this.getSignInCfg();
	        for (let key in cfg) {
	            let id = cfg[key].cid;
	            if (id <= 6) {
	                leftArr.push(cfg[key]);
	            }
	            else if (id == 7) {
	                rightArr.push(cfg[key]);
	            }
	        }
	        let obj = {
	            leftItem: leftArr,
	            rightItem: rightArr
	        };
	        return obj;
	    }
	    static getMysignInDataById(cid) {
	        let signInVo = this.getSignInCfg();
	        let vo = signInVo[cid];
	        return vo ? vo : null;
	    }
	    static getTotalAward() {
	        let arr = [];
	        let value = [5, 10, 20];
	        let i = 0;
	        let cfg = this.getSignInCfg();
	        for (let key in cfg) {
	            if (cfg[key].cid >= 101) {
	                let obj = {
	                    value: value[i],
	                    cfg: cfg[key]
	                };
	                arr.push(obj);
	                i++;
	            }
	        }
	        return arr;
	    }
	}

	class EveryDaySignMgr {
	    static getSignDayIndex() {
	        let createDay = SignInMgr.getSignInCurDay();
	        let totalDay = createDay - 7;
	        let m = Math.floor(totalDay / 30);
	        let d = totalDay % 30;
	        let obj = { month: m, day: d };
	        return obj;
	    }
	    static updateEveryDaySignState() {
	        let data = SignInCfg.getSignInCfg();
	        for (let key in data) {
	            let vo = data[key];
	            let flag = this.isEveryDayFinish(vo.cid);
	            if (flag) {
	                vo.state = SignState$1.eFinish;
	            }
	            else {
	                let obj = this.getSignDayIndex();
	                let curSignIndex = obj.day + 1;
	                if (curSignIndex == vo.cid) {
	                    vo.state = SignState$1.eSinging;
	                }
	                else {
	                    if (vo.cid < curSignIndex) {
	                        vo.state = SignState$1.eReSign;
	                    }
	                    else {
	                        vo.state = SignState$1.eNoSign;
	                    }
	                }
	            }
	        }
	        this.isGetGift();
	    }
	    static isEveryDayFinish(id) {
	        return this.everyDayIds.some(item => item.id === id);
	    }
	    static findEveryDayDataById(id) {
	        return this.everyDayIds.find(item => item.id === id);
	    }
	    static updateEveryDayState(obj) {
	        let flag = this.isEveryDayFinish(obj.id);
	        if (!flag) {
	            this.everyDayIds.push(obj);
	            SL_SignIn.save();
	        }
	        this.totalSignInDay = this.everyDayIds.length + SignInMgr.sevenDayIds.length;
	        let data = SignInCfg.getMysignInDataById(obj.id);
	        if (!data)
	            return;
	        data.state = SignState$1.eFinish;
	        this.isGetGift();
	        MsgCenter.notify(MsgConst.UPDATE_SIGNINSTATE);
	        PropItemMgr.popFloatMsg(data.award);
	    }
	    static isGetGift() {
	        let data = SignInCfg.getTotalAward();
	        data.forEach(item => {
	            if (this.totalSignInDay >= item.value) {
	                this.canReceivedGiftIds.push(item.cfg.cid);
	            }
	        });
	    }
	    static isCanReceived(id) {
	        return this.canReceivedGiftIds.some(ids => id === ids);
	    }
	    static isHasReceived(id) {
	        return this.hasgiftIds.some(hasId => id === hasId);
	    }
	    static saveCanRecivedIds(id) {
	        if (!this.isCanReceived(id)) {
	            this.canReceivedGiftIds.push(id);
	        }
	        SL_SignIn.save();
	        MsgCenter.notify(MsgConst.EVERYDAYSIGN_GETGIFT);
	    }
	    static isHasGet(id) {
	        return this.hasgiftIds.some(ids => id === ids);
	    }
	    static saveHasGiftIds(id, award) {
	        if (!this.isHasGet(id)) {
	            this.hasgiftIds.push(id);
	        }
	        SL_SignIn.save();
	        MsgCenter.notify(MsgConst.EVERYDAYSIGN_HASGETGIFT);
	        PropItemMgr.popFloatMsg(award);
	    }
	    static clearSignData() {
	        let curTime = TimeMgr.ins().getTime();
	        let dayObj = this.getSignDayIndex();
	        let index = dayObj.day;
	        if (index == 0 && this.clearTime != curTime) {
	            this.clearData();
	        }
	        SL_SignIn.save();
	        MsgCenter.notify(MsgConst.EVERYDAYSIGN_CLEARDATA);
	    }
	    static clearData() {
	        this.everyDayIds = [];
	        this.totalSignInDay = 0;
	        this.canReceivedGiftIds = [];
	        this.hasgiftIds = [];
	        SignInMgr.sevenDayIds = [];
	        this.clearTime = TimeMgr.ins().getTime();
	        SL_SignIn.save();
	    }
	    static updateRedPoint() {
	        let isShow = false;
	        for (let i = 0; i < this.canReceivedGiftIds.length; i++) {
	            let id = this.canReceivedGiftIds[i];
	            let flag = this.isHasReceived(id);
	            if (!flag) {
	                isShow = true;
	                break;
	            }
	            else {
	                isShow = false;
	            }
	        }
	        return isShow;
	    }
	}
	EveryDaySignMgr.everyDayIds = [];
	EveryDaySignMgr.totalSignInDay = 0;
	EveryDaySignMgr.canReceivedGiftIds = [];
	EveryDaySignMgr.hasgiftIds = [];
	EveryDaySignMgr.clearTime = 0;

	class OnlineRewardsVo {
	    constructor(key, cfg) {
	        this.cid = parseInt(key);
	        this.group = parseInt(cfg.group);
	        this.sort = parseInt(cfg.theSorting);
	        this.durTime = Number(cfg.intervalTime);
	        this.targetTime = Number(cfg.theTotalTime);
	        this.award = PayShopVo.setAwardFormat(cfg.award);
	    }
	}

	class OnlineRewardsCfg {
	    static getCfg() {
	        if (!this.cfg) {
	            this.cfg = {};
	            let data = PConfig.getCfg("Onlineewards.json");
	            for (let key in data) {
	                this.cfg[key] = new OnlineRewardsVo(key, data[key]);
	            }
	        }
	        return this.cfg;
	    }
	    static getCfgById(id) {
	        let cfg = this.cfg[id];
	        return cfg ? cfg : null;
	    }
	    static getGroupCfg() {
	        let cfg = this.getCfg();
	        if (!cfg)
	            return;
	        this.groupCfg = {};
	        for (let key in cfg) {
	            let isHas = this.isHasGroup(cfg[key].group);
	            if (isHas) {
	                this.groupCfg[cfg[key].group].push(cfg[key]);
	            }
	            else {
	                this.groupCfg[cfg[key].group] = [];
	                this.groupCfg[cfg[key].group].push(cfg[key]);
	            }
	        }
	        return this.groupCfg;
	    }
	    static isHasGroup(group) {
	        if (!this.groupCfg)
	            return;
	        let flag = this.groupCfg.hasOwnProperty(group);
	        return flag;
	    }
	    static getGroupData(group) {
	        let data = this.getGroupCfg();
	        return data ? data[group] : null;
	    }
	    static splitData(group) {
	        let topItem = [];
	        let bottomItem = [];
	        let cfg = this.getGroupData(group);
	        for (let i = 0; i < cfg.length; i++) {
	            let sortId = cfg[i].sort;
	            if (sortId <= 3) {
	                topItem.push(cfg[i]);
	            }
	            else {
	                bottomItem.push(cfg[i]);
	            }
	        }
	        let obj = {
	            topItem: topItem,
	            bottomItem: bottomItem
	        };
	        return obj;
	    }
	    static getMaxDays() {
	        let cfg = this.getCfg();
	        let min = 0;
	        let max = 0;
	        for (let key in cfg) {
	            let data = cfg[key];
	            let group = data.group;
	            min = group;
	            if (max < min) {
	                max = min;
	            }
	        }
	        return max;
	    }
	    static getMaxOnlineTime() {
	        let cfg = this.getCfg();
	        let min = 0;
	        let max = 0;
	        for (let key in cfg) {
	            let data = cfg[key];
	            let group = data.targetTime;
	            min = group;
	            if (max < min) {
	                max = min;
	            }
	        }
	        return max * 60;
	    }
	}

	class ActivityMgr {
	    static createData() {
	        let str = ["20130007", "20130006", "20130004", "20130005"];
	        let arr = [];
	        this.actData = [];
	        for (let i = 0; i < str.length; i++) {
	            let obj = new ActPanelVo();
	            obj.type = i;
	            obj.actName = str[i];
	            let isSevenDay = SignInMgr.isSevenDay();
	            if (isSevenDay) {
	                if (i === 1) {
	                    continue;
	                }
	                else {
	                    arr.push(obj);
	                }
	            }
	            else {
	                if (i > 0) {
	                    arr.push(obj);
	                }
	            }
	        }
	        this.actData = arr;
	        return arr;
	    }
	    static init() {
	        let slObj = new SL_Activity();
	        if (SaveLoad.has(SaveLoadConst.ACTIVITY)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            slObj.onlineTime = 0;
	            slObj.hasRewarId = [];
	            slObj.openDay = 1;
	            SaveLoad.save(slObj);
	        }
	        this.everyDayOnlineTime = slObj.onlineTime;
	        this.hasRewarId = slObj.hasRewarId;
	        this.openDay = slObj.openDay;
	    }
	    static updteData() {
	        this.everyDayOnlineTime = 0;
	        this.hasRewarId = [];
	        this.openDay++;
	        SL_Activity.save();
	    }
	    static updateOnlinTime() {
	        this.everyDayOnlineTime++;
	        SL_Activity.save();
	    }
	    static OpenOnlineTimer() {
	        this.updateOnlinTime();
	        if (SignInMgr.isZeroUpdate) {
	            SignInMgr.zeroUpdate();
	        }
	        Laya.timer.loop(1000, this, this.updateOnlinTime);
	    }
	    static isUnlock(id) {
	        let cfg = OnlineRewardsCfg.getCfgById(id);
	        if (!cfg)
	            return;
	        let curOnlineTime = this.everyDayOnlineTime;
	        let curMinute = Math.floor(curOnlineTime / 60);
	        let targetTime = cfg.targetTime;
	        if (curMinute >= targetTime) {
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    static isGet(id) {
	        let cfg = OnlineRewardsCfg.getCfgById(id);
	        if (!cfg)
	            return;
	        let curOnlineTime = this.everyDayOnlineTime;
	        let curMinute = Math.floor(curOnlineTime / 60);
	        let targetTime = cfg.targetTime;
	        if (curMinute >= targetTime) {
	            if (!this.isHasId(id)) {
	                return true;
	            }
	            else {
	                return false;
	            }
	        }
	        else {
	            return false;
	        }
	    }
	    static isHasId(id) {
	        return this.hasRewarId.some(buyId => buyId === id);
	    }
	    static updateHasRewardId(id) {
	        if (!this.isHasId(id)) {
	            this.hasRewarId.push(id);
	            SL_Activity.save();
	        }
	        let cfg = OnlineRewardsCfg.getCfgById(id);
	        if (cfg) {
	            PropItemMgr.popFloatMsg(cfg.award);
	        }
	        this.onlineAwardRed();
	        MsgCenter.notify(MsgConst.ONLINE_REAWARD_COLLECT);
	    }
	    static getCurrGroup() {
	        let maxGroup = OnlineRewardsCfg.getMaxDays();
	        if (this.openDay >= maxGroup) {
	            return maxGroup;
	        }
	        else {
	            return this.openDay;
	        }
	    }
	    static getCurrDownTime(time) {
	        let groupData = OnlineRewardsCfg.getGroupData(this.openDay);
	        if (!groupData)
	            return;
	        let mTime = Math.floor(time / 60);
	        for (let i = 0; i < groupData.length; i++) {
	            let vo = groupData[i];
	            let targetTime = vo.targetTime;
	            if (mTime < targetTime) {
	                return vo.targetTime * 60;
	            }
	        }
	        return 0;
	    }
	    static signInRed() {
	        let flag = false;
	        let totalRewardRed = false;
	        let data = SignInCfg.getSignInCfg();
	        for (let key in data) {
	            let vo = data[key];
	            if (vo.state == SignState$1.eSinging) {
	                flag = true;
	            }
	        }
	        totalRewardRed = EveryDaySignMgr.updateRedPoint();
	        if (flag || totalRewardRed) {
	            this.actData[redPoint.SignInRed].redPont = true;
	        }
	        else {
	            this.actData[redPoint.SignInRed].redPont = false;
	        }
	    }
	    static monthCardRed() {
	        let data = BuyDiamondsMgr.monCard;
	        let flag = true;
	        for (let i = 0; i < data.length; i++) {
	            let index = BuyDiamondsMgr.ishasAward(data[i].id);
	            if (!index) {
	                flag = false;
	            }
	        }
	        if (!flag) {
	            this.actData[redPoint.MonthCard].redPont = true;
	        }
	        else {
	            this.actData[redPoint.MonthCard].redPont = false;
	        }
	    }
	    static onlineAwardRed() {
	        let groupData = OnlineRewardsCfg.getGroupData(this.openDay);
	        if (!groupData)
	            return;
	        let flag = false;
	        for (let i = 0; i < groupData.length; i++) {
	            let id = groupData[i].cid;
	            let isGet = this.isGet(id);
	            if (isGet) {
	                flag = true;
	            }
	        }
	        if (flag) {
	            this.actData[redPoint.OnlineRed].redPont = true;
	        }
	        else {
	            this.actData[redPoint.OnlineRed].redPont = false;
	        }
	    }
	    static updateRed() {
	        this.signInRed();
	        this.monthCardRed();
	        this.onlineAwardRed();
	    }
	}
	ActivityMgr.everyDayOnlineTime = 0;
	ActivityMgr.hasRewarId = [];
	ActivityMgr.openDay = 1;
	class ActPanelVo {
	    constructor() {
	        this.redPont = false;
	    }
	}
	var redPoint;
	(function (redPoint) {
	    redPoint[redPoint["SignInRed"] = 0] = "SignInRed";
	    redPoint[redPoint["OnlineRed"] = 1] = "OnlineRed";
	    redPoint[redPoint["MonthCard"] = 2] = "MonthCard";
	})(redPoint || (redPoint = {}));

	class SignInMgr {
	    static zeroUpdate() {
	        if (Glob.isEnterGame) {
	            let isSevenDay = this.isSevenDay();
	            if (!isSevenDay) {
	                EveryDaySignMgr.clearSignData();
	                EveryDaySignMgr.updateEveryDaySignState();
	            }
	            else {
	                this.setSignItemState();
	            }
	            BuyDiamondsMgr.clearMonthId();
	            BuyDiamondsMgr.clearGiftBagData();
	            BuyDiamondsMgr.showGiftRed = true;
	            BuyDiamondsMgr.isZero = true;
	            LocalData.ins().saveGiftState(false);
	            this.isZeroUpdate = false;
	            ActivityMgr.updteData();
	            MsgCenter.notify(MsgConst.RESET_DAYTIME);
	        }
	    }
	    static init() {
	        let slObj = new SL_SignIn();
	        if (SaveLoad.has(SaveLoadConst.SIGNIN)) {
	            SaveLoad.load(slObj);
	        }
	        else {
	            this.saveData(slObj);
	        }
	        this.sevenDayIds = slObj.sevenSignIds;
	        EveryDaySignMgr.totalSignInDay = slObj.sevenSignIds.length + slObj.everyDayIds.length;
	        EveryDaySignMgr.hasgiftIds = slObj.hasReceivedIds;
	        EveryDaySignMgr.everyDayIds = slObj.everyDayIds;
	        EveryDaySignMgr.clearTime = slObj.clearTime;
	        let isSevenDay = this.isSevenDay();
	        if (isSevenDay) {
	            this.setSignItemState();
	        }
	        else {
	            EveryDaySignMgr.updateEveryDaySignState();
	        }
	        ActivityMgr.init();
	    }
	    static saveData(obj) {
	        obj.sevenSignIds = [];
	        obj.everyDayIds = [];
	        SaveLoad.save(obj);
	    }
	    static setSignItemState() {
	        let data = SignInCfg.getSignInCfg();
	        for (let key in data) {
	            let vo = data[key];
	            let flag = this.isSignInFinish(vo.cid);
	            if (flag) {
	                vo.state = SignState$1.eFinish;
	            }
	            else {
	                let isEnough = false;
	                if (this.sevenDayIds.length > 0) {
	                    isEnough = this.isEnoughTime(this.sevenDayIds[this.sevenDayIds.length - 1].id);
	                }
	                if (isEnough || this.sevenDayIds.length <= 0) {
	                    vo.state = SignState$1.eSinging;
	                    break;
	                }
	                else {
	                    vo.state = SignState$1.eNoSign;
	                }
	            }
	        }
	    }
	    static isSignInFinish(id) {
	        return this.sevenDayIds.some(item => item.id === id);
	    }
	    static findSignInDataById(id) {
	        return this.sevenDayIds.find(item => item.id === id);
	    }
	    static isEnoughTime(id) {
	        let signInTime = this.findSignInDataById(id).time;
	        let day = TimeMgr.ins().getCurBuyDay(signInTime);
	        if (day > 1) {
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    static updateSignState(obj) {
	        let flag = this.isSignInFinish(obj.id);
	        if (!flag) {
	            this.sevenDayIds.push(obj);
	            SL_SignIn.save();
	        }
	        EveryDaySignMgr.totalSignInDay = this.sevenDayIds.length;
	        let data = SignInCfg.getMysignInDataById(obj.id);
	        if (!data)
	            return;
	        data.state = SignState$1.eFinish;
	        MsgCenter.notify(MsgConst.UPDATE_SIGNINSTATE);
	        PropItemMgr.popFloatMsg(data.sevenAward);
	    }
	    static getSignInCurDay() {
	        let curTime = TimeMgr.ins().getTime();
	        let zeroTime = TimeMgr.ins().getTimeZero(UserData.createTime);
	        let nIndex = Math.floor((curTime - zeroTime) / TimeMgr.ins().OneDayTime);
	        return nIndex;
	    }
	    static isSevenDay() {
	        let day = this.getSignInCurDay();
	        return day <= 6;
	    }
	}
	SignInMgr.sevenDayIds = [];
	SignInMgr.isZeroUpdate = false;

	class PlayerProxy extends BaseProxy {
	    constructor(mgr) {
	        super(mgr);
	        this.list = [];
	        Laya.timer.loop(1000, this, this.sSaveNow);
	        this.reg(3001, this.rGetInfo, this);
	        this.reg(3003, this.rGetToken, this);
	        this.reg(3004, this.rGetReward, this);
	        this.reg(3005, this.rReroReset, this);
	    }
	    rGetToken(ba) {
	        let msg = com.proto.Msg_3003_.decode(ba);
	        UserData.logToken = msg.logToken;
	    }
	    sGetToken() {
	        let msg = com.proto.Msg_3003.create();
	        let w = com.proto.Msg_3003.encode(msg);
	        this.send(3003, w);
	    }
	    rGetInfo(ba) {
	        let msg = com.proto.Msg_3001_.decode(ba);
	    }
	    sSave(type, amount) {
	        let index = this.list.findIndex(item => item.type === type);
	        if (index >= 0) {
	            this.list.splice(index, 1);
	        }
	        this.list.push({ type, amount });
	    }
	    sSaveNow() {
	        if (this.list.length > 0) {
	            let msg = com.proto.Msg_3002.create();
	            msg.player = {};
	            this.list.forEach(item => {
	                let type = item.type;
	                let amount = item.amount;
	                switch (type) {
	                    case ECurrency.Stone:
	                        msg.player.stone = amount;
	                        break;
	                    case ECurrency.Diamond:
	                        msg.player.yuanBao = amount;
	                        break;
	                    case ECurrency.Gold:
	                        msg.player.gold = amount;
	                        break;
	                    case ECurrency.Energy:
	                        msg.player.energy = amount;
	                        break;
	                    case ECurrency.DragonPower:
	                        msg.player.dragonForce = amount;
	                        break;
	                }
	            });
	            let w = com.proto.Msg_3002.encode(msg);
	            this.list = [];
	            this.send(3002, w);
	        }
	    }
	    sGetCode(code) {
	        let msg = com.proto.Msg_3004.create();
	        msg.code = code;
	        let w = com.proto.Msg_3004.encode(msg);
	        this.send(3004, w);
	    }
	    rGetReward(ba) {
	        let msg = com.proto.Msg_3004_.decode(ba);
	        MsgCenter.notify(MsgConst.CHANGE_SUCCESS);
	    }
	    rReroReset(ba) {
	        let msg = com.proto.Msg_3005_.decode(ba);
	        SignInMgr.isZeroUpdate = true;
	        SignInMgr.zeroUpdate();
	    }
	}

	class SyncProxy extends BaseProxy {
	    constructor(mgr) {
	        super(mgr);
	        this.reg(4001, this.rSave, this);
	        this.reg(4002, this.rGetModules, this);
	    }
	    rSave(ba) {
	    }
	    sSave(module) {
	        let msg = com.proto.Msg_4001.create();
	        msg.module = module;
	        let w = com.proto.Msg_4001.encode(msg);
	        this.send(4001, w);
	    }
	    checkCloudExist(func) {
	        this.checkHandler = func;
	        this.getAll();
	    }
	    getAll() {
	        this.sGetModules([
	            1,
	            2,
	            3,
	            7,
	        ]);
	    }
	    sGetModules(list = null) {
	        let msg = com.proto.Msg_4002.create();
	        msg.types = list;
	        let w = com.proto.Msg_4002.encode(msg);
	        this.send(4002, w);
	    }
	    rGetModules(ba) {
	        let msg = com.proto.Msg_4002_.decode(ba);
	        if (this.checkHandler) {
	            this.checkHandler.runWith(msg);
	            this.checkHandler = null;
	        }
	    }
	}

	class SaveMgr {
	    static set allowSave(v) {
	        this._allowSave = v;
	    }
	    static init() {
	        Laya.timer.loop(this.CHECK_TIME, this, this.onTimer);
	    }
	    static onTimer() {
	        if (!this._allowSave)
	            return;
	        this._allowSave = false;
	        this.saveScenePlayer();
	    }
	    static saveScenePlayer() {
	        Glob.saveCurrentSceneAndPlayerData(false);
	    }
	}
	SaveMgr.CHECK_TIME = 3000;
	SaveMgr._allowSave = false;

	class ShoutsCfg {
	    static init() {
	        this._cfg = PConfig.getCfg("Shouts.json");
	    }
	    static get cfg() {
	        if (!this._cfg) {
	            this.init();
	        }
	        return this._cfg;
	    }
	    static getShout(category) {
	        let id = ShoutCategoryID[category];
	        let val = this.cfg[id];
	        if (!val)
	            return "";
	        let term = MathUtil.randElement(val);
	        let str = LanCfg.get(term);
	        return "\"" + str + "\"";
	    }
	    static shout(category, prefabID, aboveObject) {
	        let shout = this.getShout(category);
	        if (shout != "") {
	            this.shout2(shout, prefabID, aboveObject);
	        }
	    }
	    static shout2(shoutText, prefabID, aboveObject) {
	        switch (prefabID) {
	            case ShoutPrefabID.Red:
	                shoutText = "{#ab0008}" + shoutText;
	                break;
	            case ShoutPrefabID.YelloPurple:
	                shoutText = "{#ffffc5}" + shoutText;
	                break;
	        }
	        FloatingText.CreateOverheadSpeech(shoutText, null, aboveObject.positionTopCenter, aboveObject.localPositionAnimTarget);
	    }
	}

	class TimeStamp {
	    constructor(secondsFromNow, data) {
	        if (data != null) {
	            this.initFromSaveData(data);
	            return;
	        }
	        this.timestamp = TimeMgr.ins().getSeconds();
	        if (secondsFromNow != null) {
	            this.timestamp += secondsFromNow;
	        }
	    }
	    static get current() {
	        return new TimeStamp();
	    }
	    static get currentTimeStamp() {
	        return TimeMgr.ins().getSeconds();
	    }
	    get going() {
	        return this.appointment_SecondsUntilEX() > 0;
	    }
	    get done() {
	        return this.appointment_SecondsUntilEX() <= 0;
	    }
	    get secondsLeft() {
	        return this.appointment_SecondsUntilEX();
	    }
	    getTimeStampEX() {
	        return this.timestamp;
	    }
	    setToNow(curTime) {
	        this.timestamp = curTime;
	    }
	    resetTo(secondsFromNow) {
	        this.timestamp = TimeMgr.ins().getSeconds();
	        this.timestamp += secondsFromNow;
	    }
	    appointment_SecondsUntil() {
	        return this.appointment_SecondsUntilEX();
	    }
	    appointment_SecondsUntilEX() {
	        if (TimeMgr.ins().pauseStatus) {
	            return 1200;
	        }
	        let numLeft = this.getTimeStampEX() - TimeMgr.ins().getSeconds();
	        return numLeft;
	    }
	    appointment_GetElapsedCycles(cycleLengthSeconds, makeTimerCurrent) {
	        let num = TimeStamp.currentTimeStamp - this.timestamp;
	        if (num < 0) {
	            return 0;
	        }
	        let num2 = num / cycleLengthSeconds >> 0;
	        num2++;
	        if (makeTimerCurrent) {
	            this.appointment_MakeCurrent(cycleLengthSeconds);
	        }
	        return num2;
	    }
	    appointment_MakeCurrent(cycleLengthSeconds) {
	        let num = TimeStamp.currentTimeStamp - this.timestamp;
	        if (num >= 0) {
	            let num2 = num % cycleLengthSeconds;
	            let num3 = cycleLengthSeconds - num2;
	            this.timestamp = TimeStamp.currentTimeStamp + num3;
	        }
	    }
	    getDisplayStringOfCountdown(addLeadingZeros, numberOfSignificantSections) {
	        return Clock.getDisplayStr(this.secondsLeft, addLeadingZeros, numberOfSignificantSections);
	    }
	    happenedWithin_Days(numDays) {
	        return this.happenedWithin_Hours(numDays * 24);
	    }
	    happenedWithin_Hours(numHours) {
	        if (this.going) {
	            return false;
	        }
	        let num = numHours * 3600;
	        let num2 = TimeStamp.currentTimeStamp - this.timestamp;
	        return num2 <= num;
	    }
	    getSaveDataObject() {
	        let saveData_TimeStamp = new SL_TimeStamp();
	        saveData_TimeStamp.timestamp = this.timestamp;
	        return saveData_TimeStamp;
	    }
	    initFromSaveData(data) {
	        this.timestamp = data.timestamp;
	    }
	}
	TimeStamp.SECONDS_IN_WEEK = 604800;
	TimeStamp.SECONDS_IN_DAY = 86400;
	TimeStamp.SECONDS_IN_HOUR = 3600;

	var ProgSleepUI = ui.data.module.progress.ProgSleepUI;
	class ProgSleep extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgSleepUI();
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    setLabel(v) {
	        this.prog.lbl.text = v;
	    }
	    setBarLabel(v) {
	        this.prog.barLbl.text = v;
	    }
	    activateSpeedUp() {
	        this.prog.spdBtn.visible = false;
	    }
	    tryInitSpeedUpButton(caller, listener) {
	        this.prog.spdBtn.on(Laya.Event.CLICK, caller, listener);
	        if (!Level.levelSaveFileExists(Level.ID_LEVEL_HOME)) {
	            this.prog.spdBtn.visible = false;
	        }
	    }
	    dispose() {
	        super.dispose();
	        this.prog.spdBtn.visible = true;
	        this.prog.spdBtn.offAll();
	        Laya.Pool.recoverByClass(this);
	    }
	}

	var ExitHomeMovementTypeID;
	(function (ExitHomeMovementTypeID) {
	    ExitHomeMovementTypeID[ExitHomeMovementTypeID["OverlapHome"] = 0] = "OverlapHome";
	    ExitHomeMovementTypeID[ExitHomeMovementTypeID["SwoopNearby"] = 1] = "SwoopNearby";
	    ExitHomeMovementTypeID[ExitHomeMovementTypeID["SwoopToAnywhere"] = 2] = "SwoopToAnywhere";
	})(ExitHomeMovementTypeID || (ExitHomeMovementTypeID = {}));
	class CompMonsterHome extends TiScript3D {
	    constructor() {
	        super(...arguments);
	        this.sleepers = [];
	        this.relaxers = [];
	        this.ellipsisTimer = new Clock(1.4);
	        this.ellispisCount = 0;
	        this.speedUpCostPerMinute = 0.5;
	        this.agreedUponSpeedUpCost = 1;
	    }
	    get softCapacity() {
	        return this.drawnObject.strength;
	    }
	    get hasSleepSpace() {
	        return this.sleepers.length < this.softCapacity;
	    }
	    get sleepSeconds() {
	        let num = this.drawnObject.cfg.floatRegister2 * 60;
	        return num * (1 - GGAlarmClockManager.getSleepReduction() / 100);
	    }
	    onAwake() {
	        this.drawnObject = this.owner;
	    }
	    onSlowUpate() {
	        if (this.doorLocator)
	            return;
	        if (!this.drawnObject.sp)
	            return;
	        this.doorLocator = this.drawnObject.sp.getChildByName("Door");
	        this.chimneyLocator = this.drawnObject.sp.getChildByName("Chim");
	    }
	    onStart() {
	        if (this.drawnObject.loadedFromSave) {
	            this.checkForAppointmentProgress();
	        }
	        if (MergeDragonsAppConfig.MANUAL_WAKE_SLEEP_ENABLED && !this.drawnObject.isIcon) {
	        }
	    }
	    tryStartSleepParticles() {
	        if (!this.doorLocator)
	            return;
	        if (this.zzzParticles == null) {
	            this.zzzParticles = Globals.createFromPrefab("ParticleRoot_Zzz");
	            this.doorLocator.addChild(this.zzzParticles);
	        }
	        else if (!this.zzzParticles.active) {
	            this.zzzParticles.active = true;
	        }
	    }
	    tryStopSleepParticles() {
	        if (this.zzzParticles && this.zzzParticles.active) {
	            this.zzzParticles.active = false;
	        }
	    }
	    tryStartSmokeParticles() {
	        if (!this.chimneyLocator)
	            return;
	        if (this.chimneySmoke == null) {
	            this.chimneySmoke = Globals.createFromPrefab("ParticleRoot_ChimneySmoke");
	            this.chimneyLocator.addChild(this.chimneySmoke);
	        }
	        else if (!this.chimneySmoke.active) {
	            this.chimneySmoke.active = true;
	        }
	    }
	    tryStopSmokeParticles() {
	        if (this.chimneySmoke && this.chimneySmoke.active) {
	            this.chimneySmoke.active = false;
	        }
	    }
	    checkForAppointmentProgress() {
	        if (this.sleepAppointmentFinishTime == null) {
	            return;
	        }
	        let num = this.sleepAppointmentFinishTime.appointment_GetElapsedCycles(this.sleepSeconds >> 0, true);
	        if (num <= 0) {
	            if (num < 0) {
	                GuiMgr.errorMessage("Energy Appointment wants to credit the player with negative energy. Something is wrong!");
	            }
	        }
	        else {
	            this.wake_N_Sleepers(num);
	        }
	    }
	    onUpdate() {
	        super.onUpdate();
	        this.playedEnterExitSoundThisFrame = false;
	        if (this.sleepers.length > 0) {
	            this.update_Sleepers();
	        }
	        if (this.relaxers.length > 0) {
	            this.update_Relaxers();
	        }
	        this.update_Particles();
	        this.updateProgressMeter();
	        this.updateSleepControl();
	    }
	    update_Particles() {
	        if (this.sleepers.length > 0) {
	            this.tryStartSleepParticles();
	        }
	        else {
	            this.tryStopSleepParticles();
	        }
	        if (this.relaxers.length > 0) {
	            this.tryStartSmokeParticles();
	        }
	        else {
	            this.tryStopSmokeParticles();
	        }
	    }
	    update_Relaxers() {
	        if (!Monster.wouldBoardBeTooFullOfActiveMonstersWithNMore(1) && MathUtil.chance(0.05)) {
	            this.ejectARelaxer(false);
	        }
	    }
	    ejectARelaxer(tryShout) {
	        if (this.relaxers.length != 0) {
	            let monster = this.relaxers.shift();
	            this.exitHome(monster, ExitHomeMovementTypeID.SwoopNearby, true);
	            if (MathUtil.chance(0.5)) {
	                ShoutsCfg.shout(ShoutCategoryID.Hi, ShoutPrefabID.YelloPurple, monster);
	            }
	        }
	    }
	    tapped() {
	        this.ejectARelaxer(true);
	    }
	    update_Sleepers() {
	        if (this.spedUp) {
	            this.spedUp_WakeAllDragons();
	            this.updateProgressMeterPresence();
	            return;
	        }
	        if (this.currentSleeper == null) {
	            this.trySetNextSleeper();
	        }
	        else {
	            this.update_Sleeper();
	        }
	        this.ellipsisTimer.update(Glob.deltaTime);
	        if (this.ellipsisTimer.done) {
	            this.ellispisCount++;
	            this.ellispisCount %= 4;
	            this.ellipsisTimer.reset();
	        }
	    }
	    ejectAllMonstersWithoutRest() {
	        let result = this.sleepers.length + this.relaxers.length;
	        for (let sleeper of this.sleepers) {
	            this.exitHome(sleeper, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	        }
	        this.sleepers.length = 0;
	        this.currentSleeper = null;
	        for (let relaxer of this.relaxers) {
	            this.exitHome(relaxer, ExitHomeMovementTypeID.SwoopToAnywhere, true);
	        }
	        this.relaxers.length = 0;
	        this.updateProgressMeterPresence();
	        return result;
	    }
	    wakeAllSleepers() {
	        let count = this.sleepers.length;
	        for (let sleeper of this.sleepers) {
	            sleeper.refreshWorkCapacity();
	            this.exitHome(sleeper, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	        }
	        this.sleepers.length = 0;
	        this.currentSleeper = null;
	        this.updateProgressMeterPresence();
	        return count;
	    }
	    forceDragonOutOfHome(dragon, exitHomeMovement, setToWander) {
	        if (ArrayUtil.contains(this.relaxers, dragon)) {
	            if (dragon.homeCurrentlyInside != this) {
	                GuiMgr.errorMessage("Trying to force a dragon out of a home that the Monster.HomeCurrentlyInside doesn't think it's in.");
	            }
	            ArrayUtil.remove(this.relaxers, dragon);
	            this.exitHome(dragon, exitHomeMovement, setToWander);
	        }
	        else if (ArrayUtil.contains(this.sleepers, dragon)) {
	            if (dragon.homeCurrentlyInside != this) {
	                GuiMgr.errorMessage("Trying to force a dragon out of a home that the Monster.HomeCurrentlyInside doesn't think it's in.");
	            }
	            if (this.currentSleeper == dragon) {
	                this.currentSleeper = null;
	            }
	            ArrayUtil.remove(this.sleepers, dragon);
	            this.exitHome(dragon, exitHomeMovement, setToWander);
	            if (this.sleepers.length == 0) {
	                this.updateProgressMeterPresence();
	            }
	        }
	        else {
	            GuiMgr.errorMessage("Trying to force a dragon out of a home that it's not in.");
	        }
	    }
	    spedUp_WakeAllDragons() {
	        let num = this.calcul(this.sleepers.length);
	        let num2 = num + this.getNewPlayer();
	        if (num2 > 15) {
	            num2 = 15;
	        }
	        for (let sleeper of this.sleepers) {
	            sleeper.refreshWorkCapacity(num2);
	            this.exitHome(sleeper, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	        }
	        this.sleepers.length = 0;
	        this.currentSleeper = null;
	        this.spedUp = false;
	        this.updateProgressMeterPresence();
	        FloatingText.CreateInfoText(LanCfg.get("10020001"), InfoTextColorID.Green, this.drawnObject);
	    }
	    calcul(forNumDragons) {
	        if (Monster.numMonsters == 0 || forNumDragons == 0) {
	            return 0;
	        }
	        let num = (100 / Monster.numMonsters) >> 0;
	        if (num < 1) {
	            num = 1;
	        }
	        if (num > 15) {
	            num = 15;
	        }
	        return num;
	    }
	    getNewPlayer() {
	        if (Monster.numMonsters == 0 || Thing.totalDragonPower >= 10) {
	            return 0;
	        }
	        let num = (10 - Thing.totalDragonPower) / 10;
	        let num2 = num * 35;
	        let num3 = (num2 / Monster.numMonsters) + 1;
	        if (num3 > 15) {
	            num3 = 15;
	        }
	        return num3 >> 0;
	    }
	    wake_N_Sleepers(numToWake, bonusEnergy = 0) {
	        let list = [];
	        if (numToWake == 0) {
	            return list;
	        }
	        for (let sleeper of this.sleepers) {
	            sleeper.refreshWorkCapacity(bonusEnergy);
	            this.exitHome(sleeper, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	            list.push(sleeper);
	            if (list.length >= numToWake) {
	                break;
	            }
	        }
	        for (let item of list) {
	            ArrayUtil.remove(this.sleepers, item);
	        }
	        this.currentSleeper = this.sleepers.length <= 0 ? null : this.sleepers[0];
	        if (this.currentSleeper == null) {
	            this.updateProgressMeterPresence();
	        }
	        return list;
	    }
	    update_Sleeper() {
	        if (this.sleepAppointmentFinishTime && this.sleepAppointmentFinishTime.done) {
	            this.sleeperDone();
	        }
	        this.updateProgressMeterPresence();
	    }
	    updateProgressMeterPresence() {
	        if (this.progressMeter == null) {
	            if (this.currentSleeper != null && this.sleepers.length > 0) {
	                this.progressMeter = this.drawnObject.attachProgressBar(ProgSleep, false);
	                this.progressMeter.tryInitSpeedUpButton(this, this.event_SpeedUpClicked);
	                CompMonsterHome.updateMonsterHomeRewardedVideoOverlay();
	            }
	        }
	        else if ((this.currentSleeper == null || this.sleepers.length == 0) && this.progressMeter != null) {
	            if (this.drawnObject.meter == this.progressMeter) {
	                this.drawnObject.detachProgressBar();
	            }
	            else {
	                this.progressMeter.detachProgressBar();
	            }
	            this.progressMeter = null;
	        }
	    }
	    updateProgressMeter() {
	        if (this.progressMeter == null || this.sleepAppointmentFinishTime == null) {
	            return;
	        }
	        let num = this.sleepAppointmentFinishTime.secondsLeft;
	        let num2 = (this.sleepSeconds - num) / this.sleepSeconds;
	        if (this.progressMeter.prog.bar.value != num2) {
	            this.progressMeter.setValue(num2);
	            let displayString = Clock.getDisplayStr(num, false);
	            let text = LanCfg.get("10020017") + CompMonsterHome.ellipses[this.ellispisCount];
	            if (this.sleepers.length > 1) {
	                text = "(" + this.sleepers.length + ") " + text;
	            }
	            this.progressMeter.setLabel(displayString);
	            this.progressMeter.setBarLabel(text);
	        }
	    }
	    updateSleepControl() {
	        if (this.sleepControl != null) {
	            if (CompMonsterHome.focusedHome == null) {
	                Monster.setHomeFocus();
	            }
	            this.sleepControl.active = CompMonsterHome.focusedHome == this;
	        }
	    }
	    sleeperDone() {
	        let newPlayer = this.getNewPlayer();
	        this.currentSleeper.refreshWorkCapacity(newPlayer);
	        ArrayUtil.remove(this.sleepers, this.currentSleeper);
	        let setToWander = Monster.isBoardTooFullOfActiveMonsters();
	        this.exitHome(this.currentSleeper, ExitHomeMovementTypeID.OverlapHome, setToWander);
	        this.currentSleeper = null;
	        this.updateProgressMeterPresence();
	    }
	    trySetNextSleeper() {
	        if (this.sleepers.length != 0) {
	            this.currentSleeper = this.sleepers[0];
	            if (this.sleepAppointmentFinishTime == null) {
	                this.sleepAppointmentFinishTime = new TimeStamp(this.sleepSeconds >> 0);
	            }
	            let curTime = TimeMgr.ins().getSeconds() + this.sleepSeconds;
	            this.sleepAppointmentFinishTime.setToNow(curTime);
	        }
	    }
	    enterHome(monster, reason, loadedFromSave) {
	        switch (reason) {
	            case HomeEnterReasonID.Sleep:
	                this.sleepers.push(monster);
	                if (loadedFromSave && this.sleepers.length == 1 && this.sleepAppointmentFinishTime != null) {
	                    this.currentSleeper = monster;
	                }
	                break;
	            case HomeEnterReasonID.Relax:
	                this.relaxers.push(monster);
	                TomeTip.showGameTip(GameTipTypeID.Tip_DragonsChill);
	                break;
	            default:
	                GuiMgr.errorMessage("Unhandled HomeEnterReasonID in EnterHome: " + reason);
	                break;
	        }
	        monster.homeCurrentlyInside = this;
	        monster.setActiveState(false);
	        if (!this.playedEnterExitSoundThisFrame && Glob.currentLevel.loadComplete) {
	            SoundMgr.ins().playSound("m91");
	            this.playedEnterExitSoundThisFrame = true;
	        }
	        if (!loadedFromSave && Glob.currentLevel.loadComplete) {
	            Tween.StopTweensOn(monster);
	            this.showSleepGameTips();
	            CompMonsterHome.updateMonsterHomeRewardedVideoOverlay();
	        }
	    }
	    showSleepGameTips() {
	        if (Monster.activeMonsters.length != 0) {
	            return;
	        }
	        let flag = false;
	        if (MergeDragonsAppConfig.MANUAL_WAKE_SLEEP_ENABLED) {
	            if (this.sleepers.length >= 5) {
	                flag = TomeTip.showGameTip(GameTipTypeID.Tip_WakeTest_AllAsleep);
	            }
	        }
	        else {
	            if (this.sleepers.length > 1) {
	                flag = TomeTip.showGameTip(GameTipTypeID.Tip_AllAsleep);
	            }
	            if (!flag && this.sleepers.length >= 5) {
	                flag = TomeTip.showGameTip(GameTipTypeID.Tip_ManySleep);
	            }
	        }
	        if (!flag) {
	            if (Glob.currentLevel.data.cfg.WindLootData != null) {
	                Glob.currentLevel.data.cfg.WindLootData.AllCampMonstersAsleep();
	            }
	        }
	        MsgCenter.notify(MsgConst.ALL_DRAGON_SLEEP);
	    }
	    forceWakeUpDragon(monster) {
	        monster.refreshWorkCapacity();
	        this.exitHome(monster, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	        ArrayUtil.remove(this.sleepers, monster);
	        if (this.currentSleeper == monster) {
	            this.currentSleeper = null;
	            this.trySetNextSleeper();
	            this.updateProgressMeterPresence();
	        }
	        FloatingText.CreateInfoText(StringUtil.format(LanCfg.get("10020002"), 1), InfoTextColorID.Blue, this.drawnObject);
	    }
	    forceWakeAllDragons() {
	        for (let sleeper of this.sleepers) {
	            sleeper.refreshWorkCapacity(this.getNewPlayer());
	            this.exitHome(sleeper, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	        }
	        this.sleepers.length = 0;
	        this.currentSleeper = null;
	        for (let relaxer of this.relaxers) {
	            relaxer.refreshWorkCapacity();
	            this.exitHome(relaxer, ExitHomeMovementTypeID.SwoopToAnywhere, false);
	        }
	        this.relaxers.length = 0;
	        this.updateProgressMeterPresence();
	    }
	    getBestMonster() {
	        let monster = null;
	        let flag = this.sleepAppointmentFinishTime.appointment_SecondsUntil() > 60;
	        for (let sleeper of this.sleepers) {
	            if (this.currentSleeper == sleeper || flag) {
	                if (monster == null) {
	                    monster = sleeper;
	                }
	                else if (sleeper.monsterCfg.workCapacity > monster.monsterCfg.workCapacity) {
	                    monster = sleeper;
	                }
	            }
	        }
	        return monster;
	    }
	    static awakeAllDragons() {
	        let allMonsterHomes = this.getAllMonsterHomes();
	        if (allMonsterHomes != null) {
	            for (let item of allMonsterHomes) {
	                item.forceWakeAllDragons();
	            }
	        }
	    }
	    static updateMonsterHomeRewardedVideoOverlay() {
	    }
	    static showRewardedVideoOverlay(videoCanditateHome) {
	    }
	    static getRewardedVideoCandidateHome(allHomes) {
	        if (allHomes == null) {
	            return null;
	        }
	        let list = [];
	        let dictionary = {};
	        for (let allHome of allHomes) {
	            if (allHome.sleepers.length > 0) {
	                list = list.concat(allHome.sleepers);
	            }
	            for (let sleeper of allHome.sleepers) {
	                dictionary[sleeper.guid] = allHome;
	            }
	        }
	        list.sort((d1, d2) => d2.monsterCfg.workCapacity - d1.monsterCfg.workCapacity);
	        for (let item of list) {
	            if (dictionary[item.guid]) {
	                let component_MonsterHome = dictionary[item.guid];
	                if (component_MonsterHome.sleepAppointmentFinishTime != null && component_MonsterHome.sleepAppointmentFinishTime.appointment_SecondsUntil() > 60) {
	                    return component_MonsterHome;
	                }
	            }
	        }
	        return null;
	    }
	    static getAllMonsterHomes() {
	        let list = ThingList.categories[CategoryID.MonsterHouse];
	        if (!list) {
	            return null;
	        }
	        let list2 = [];
	        for (let item of list) {
	            let component = item.homeComponent;
	            if (component != null) {
	                list2.push(component);
	            }
	        }
	        return list2;
	    }
	    exitHome(monster, exitMovement, setToWander) {
	        ThingAnim.playSpawnedSomething(this.drawnObject);
	        if (!this.playedEnterExitSoundThisFrame) {
	            SoundMgr.ins().playSound("m92");
	            this.playedEnterExitSoundThisFrame = true;
	        }
	        monster.setActiveState(true);
	        if (this.doorLocator) {
	            monster.setDrawnPosition(this.doorLocator.transform.position);
	        }
	        else {
	            monster.setDrawnPosition(this.drawnObject.transform.position);
	        }
	        ThingAnim.playNewObjectAppear(monster, true);
	        monster.exitedHome(setToWander, this.drawnObject);
	        monster.homeCurrentlyInside = null;
	        switch (exitMovement) {
	            case ExitHomeMovementTypeID.SwoopToAnywhere:
	                Globals.swoopDropToFreeMetaCell(monster);
	                break;
	            case ExitHomeMovementTypeID.SwoopNearby:
	                Globals.swoopOffGridObjectToLocationInCellRadius(monster, 2, this.drawnObject.x, this.drawnObject.y);
	                break;
	        }
	    }
	    getSpeedUpCost() {
	        if (this.sleepers.length == 0) {
	            return 0;
	        }
	        let num = this.speedUpCostPerMinute * (this.sleepAppointmentFinishTime.secondsLeft / 60) + (this.sleepers.length - 1) * (this.sleepSeconds / 60);
	        let num2 = num >> 0;
	        if (num2 <= 0) {
	            num2 = 1;
	        }
	        return num2;
	    }
	    event_SpeedUpClicked() {
	        this.agreedUponSpeedUpCost = this.getSpeedUpCost();
	        if (this.agreedUponSpeedUpCost == 0) {
	            console.log("Invalid sleep speed up cost", `cost: ${this.agreedUponSpeedUpCost}; currentSleeper not null: ${this.currentSleeper != null}; Sleeper Count: ${this.sleepers.length}`);
	        }
	        else {
	            let handler = new Laya.Handler(this, this.event_SpeedUpConfirmed);
	            PopupManager.show2(Presets.PurchaseConfirmation(LanCfg.get("10020019"), LanCfg.get("10020020"), ECurrency.Diamond, this.agreedUponSpeedUpCost, true, null, false, handler, null));
	        }
	    }
	    event_SpeedUpConfirmed() {
	        if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, this.agreedUponSpeedUpCost)) {
	            GuiMgr.errorMessage("Somehow confirmed a speed up when the player can't afford it. Cost: " + this.agreedUponSpeedUpCost + " " + ECurrency.Diamond);
	            return;
	        }
	        this.spedUp = true;
	        if (this.progressMeter != null) {
	            this.progressMeter.activateSpeedUp();
	        }
	        Globals.createFromPrefabAt("ParticleRoot_SpeedUp", this.drawnObject.drawnObjectPosition, Glob.map.particleLayer);
	        SoundMgr.ins().playSound("m85");
	        CurrencyMgr.ins().charge2(ECurrency.Diamond, this.agreedUponSpeedUpCost, EnumEconSpendType.WAKE_UP, this.drawnObject.cfg, this.drawnObject.guid);
	        ApiMgr.addYbRecord(this.agreedUponSpeedUpCost, LogCostType.WakeUpDragon);
	    }
	    static application_UnSuspended() {
	        let list = ThingList.categories[CategoryID.MonsterHouse];
	        if (list && Glob.gameState != GameState.InFriendCamp) {
	            let component_MonsterHome = null;
	            for (let item of list) {
	                if (item != null) {
	                    component_MonsterHome = item.homeComponent;
	                    if (component_MonsterHome) {
	                        component_MonsterHome.checkForAppointmentProgress();
	                    }
	                }
	            }
	        }
	    }
	    getSleepSecondsLeftForAllOccupants() {
	        let num = 0;
	        if (this.currentSleeper != null && this.sleepAppointmentFinishTime != null && this.sleepAppointmentFinishTime.going) {
	            num += this.sleepAppointmentFinishTime.secondsLeft;
	        }
	        if (this.sleepers.length > 1) {
	            let num2 = this.sleepers.length - 1;
	            num += num2 * this.sleepSeconds;
	        }
	        return num;
	    }
	    getSaveDataObject() {
	        let saveData_MonsterHome = new SL_MonsterHome();
	        if (this.sleepers != null && this.sleepers.length > 0) {
	            saveData_MonsterHome.sleeperGuids = [];
	            for (let sleeper of this.sleepers) {
	                saveData_MonsterHome.sleeperGuids.push(sleeper.guid);
	            }
	        }
	        if (this.relaxers != null && this.relaxers.length > 0) {
	            saveData_MonsterHome.relaxerGuids = [];
	            for (let relaxer of this.relaxers) {
	                saveData_MonsterHome.relaxerGuids.push(relaxer.guid);
	            }
	        }
	        if (this.sleepAppointmentFinishTime != null && this.sleepers != null && this.sleepers.length > 0) {
	            saveData_MonsterHome.existsSleepAppt = true;
	            saveData_MonsterHome.sleepTimeAppointment = this.sleepAppointmentFinishTime.getSaveDataObject();
	        }
	        else {
	            saveData_MonsterHome.existsSleepAppt = false;
	        }
	        return saveData_MonsterHome;
	    }
	    initFromSaveData(data) {
	        if (data.sleeperGuids != null) {
	            for (let sleeperGuid of data.sleeperGuids) {
	                if (!Monster.loadingSleeperToHomeGuidMap[sleeperGuid]) {
	                    Monster.loadingSleeperToHomeGuidMap[sleeperGuid] = this.drawnObject.guid;
	                }
	            }
	        }
	        if (data.relaxerGuids != null) {
	            for (let relaxerGuid of data.relaxerGuids) {
	                if (!Monster.loadingRelaxerToHomeGuidMap[relaxerGuid]) {
	                    Monster.loadingRelaxerToHomeGuidMap[relaxerGuid] = this.drawnObject.guid;
	                }
	            }
	        }
	        if (data.existsSleepAppt) {
	            this.sleepAppointmentFinishTime = new TimeStamp(null, data.sleepTimeAppointment);
	        }
	    }
	    setFocused() {
	        CompMonsterHome.focusedHome = this;
	    }
	    onDestroy() {
	        if (this.zzzParticles) {
	            this.zzzParticles.dispose();
	            this.zzzParticles = null;
	        }
	        if (this.chimneySmoke) {
	            this.chimneySmoke.dispose();
	            this.chimneySmoke = null;
	        }
	    }
	}
	CompMonsterHome.ellipses = ["", ".", "..", "..."];

	class PlatBridge {
	    static init() {
	        Laya.stage.on(Laya.Event.VISIBILITY_CHANGE, this, this.onVisChange);
	        Laya.stage.on(Laya.Event.BLUR, this, this.onBlur);
	    }
	    static initNative() {
	        if (Laya.Browser.onIOS) {
	            this.plat = window["PlatformClass"].createClass("JSBridge");
	        }
	        else if (Laya.Browser.onAndroid) {
	            this.plat = window["PlatformClass"].createClass("yiyu.PlatBridge");
	            let conch = window["conch"];
	            if (conch) {
	                conch.setOnBackPressedFunction(this.onBackPressed);
	            }
	        }
	    }
	    static onBackPressed() {
	        if (Glob.isEnterGame && !ConnectMgr.isRepeatLogin) {
	            if (Glob.inHome) {
	                LayerMgr.ins().closeAll();
	                WorldMgr.ins().enterWorld();
	            }
	            else if (Glob.inLevel) {
	                if (Glob.isCurrentLevelState(LevelStateID.Playing)) {
	                    LayerMgr.ins().closeAll();
	                    Glob.levelOnBack();
	                }
	            }
	            else {
	                PopupManager.show2(Presets.Simple2Button(LanCfg.get("10010004"), LanCfg.get("10010019"), LanCfg.get("10010001"), true, Laya.Handler.create(PlatBridge, PlatBridge.onExit)));
	            }
	        }
	    }
	    static onExit() {
	        this.plExit();
	    }
	    static exit() {
	        let conch = window["conch"];
	        if (conch) {
	            conch.exit();
	        }
	    }
	    static onVisChange(e) {
	        console.log("onVisChange======================================");
	    }
	    static onBlur(e) {
	        console.log("onBlur======================================");
	    }
	    static get hasPlat() {
	        return this.plat != null;
	    }
	    static jsInitArg(data) {
	        let obj = JSON.parse(data);
	        LoginData.currChannel = obj.currChannel;
	        LoginData.pf = obj.pf;
	        LoginData.agent = obj.agent;
	        LoginData.backIp = obj.backIp;
	        LoginData.backKey = obj.backKey;
	        MsgCenter.notify(MsgConst.PL_INITED_ARG);
	    }
	    static jsLogined(data) {
	        console.log("jsLogined:" + data);
	        let obj = JSON.parse(data);
	        LoginData.account = obj.uid;
	        LoginData.plToken = obj.token;
	        ApiMgr.loginBack();
	    }
	    static jsOnLogout() {
	        MsgCenter.notify(MsgConst.RELOAD);
	    }
	    static jsOnExit() {
	        console.log("jsOnExit");
	        SaveMgr.saveScenePlayer();
	        MsgCenter.notify(MsgConst.CLOUDE_UPLOAD_NOW);
	    }
	    static jsOnPause() {
	        console.log("jsOnPause");
	        MsgCenter.notify(MsgConst.CLOUDE_UPLOAD_NOW);
	    }
	    static jsOnStop() {
	        console.log("jsOnStop");
	    }
	    static jsOnResume() {
	        console.log("jsOnResume");
	        CompMonsterHome.application_UnSuspended();
	    }
	    static plInitArg() {
	        if (!this.hasPlat)
	            return;
	        this.plat.call("plInitArg");
	    }
	    static plLogin() {
	        if (!this.hasPlat)
	            return;
	        this.plat.call("plLogin");
	        if (LoginData.pf == PlatformID.exter_test) {
	            MsgCenter.notify(MsgConst.INIT_APP);
	        }
	    }
	    static plPay(data) {
	        if (!this.hasPlat)
	            return;
	        this.plat.call("plPay", data);
	    }
	    static plEnterGame() {
	        if (!this.hasPlat)
	            return;
	        let obj = this.getBaseUserData();
	        let data = JSON.stringify(obj);
	        this.plat.call("plEnterGame", data);
	    }
	    static plExit() {
	        if (!this.hasPlat)
	            return;
	        this.plat.call("plExit");
	    }
	    static getBaseUserData() {
	        let data = {};
	        data.areaId = LoginData.areaId;
	        data.playerLevel = UserData.playerLevel;
	        data.playerName = UserData.playerName;
	        data.playerId = UserData.playerId;
	        return data;
	    }
	}
	if (Laya.Browser.window) {
	    Laya.Browser.window.PlatBridge = PlatBridge;
	}

	class ConnectMgr {
	    static init() {
	        Glob.socketMgr.connectCallBack = new Laya.Handler(this, this.connectCallBack, null, false);
	        Glob.socketMgr.updateServerTime = new Laya.Handler(this, this.updateServerTime, null, false);
	        Glob.socketMgr.errorCallBack = new Laya.Handler(this, this.errorCallBack, null, false);
	        Glob.socketMgr.closeCallBack = new Laya.Handler(this, this.closeCallBack, null, false);
	    }
	    static connectCallBack() {
	        this.sLogin();
	    }
	    static reLogin() {
	        if (this.isFirstLogin)
	            return;
	        if (Glob.socketMgr.socket == null)
	            return;
	        if (Glob.socketMgr.connected)
	            return;
	        this.connectServer();
	    }
	    static connectServer() {
	        Glob.socketMgr.connect(LoginData.loginPath, LoginData.port);
	    }
	    static sLogin() {
	        if (!Glob.isResLoaded)
	            return;
	        if (!Glob.socketMgr.connected)
	            return;
	        let state = this.isFirstLogin ? 0 : 1;
	        ProxyMgr.loginProxy.sLogin(state);
	    }
	    static closeCallBack() {
	        this.isLogined = false;
	        if (!Glob.isResLoaded) {
	            Laya.timer.once(3000, this, this.connectServer);
	            return;
	        }
	        else {
	            Laya.timer.once(5000, this, this.reLogin);
	        }
	        this.showReload();
	    }
	    static errorCallBack() {
	        this.closeCallBack();
	    }
	    static get isLogined() {
	        return this._isLogined;
	    }
	    static set isLogined(v) {
	        this._isLogined = v;
	    }
	    static updateServerTime(data) {
	        var time = ProtUtil.ltn(data);
	        if (time > 0) {
	            TimeMgr.ins().setServer(time);
	        }
	    }
	    static ping() {
	        if (this.isLogined) {
	            if (Glob.socketMgr.connected) {
	                ProxyMgr.loginProxy.ping();
	            }
	            else {
	                this.showReload();
	                Laya.timer.clear(this, this.ping);
	            }
	        }
	        else {
	            Laya.timer.clear(this, this.ping);
	        }
	    }
	    static showReload() {
	    }
	    static repeatLogin() {
	        this.isRepeatLogin = true;
	        this.isLogined = false;
	        Glob.socketMgr.delSocket();
	        let head = LanCfg.get("10010004");
	        let msg = LanCfg.get("10010024");
	        let ctxt = LanCfg.get("10010003");
	        let def = new ModalGeneric1ButtonDefinition(UiConst.ReloadView);
	        def.setTexts(head, msg)
	            .setConfirmLabel(ctxt)
	            .setCallbacks(Laya.Handler.create(this, this.onRepeatLogin, null, false))
	            .setObscureScreen(true);
	        def.hideCloseBtn = true;
	        def.noCloseWindow = true;
	        PopupManager.show2(def);
	    }
	    static onRepeatLogin() {
	        PlatBridge.exit();
	    }
	    static reload(code = null) {
	        let msg = LanCfg.get("10010018");
	        if (msg == "10010018")
	            msg = "网络连接失败，是否重新登录？";
	        if (code)
	            msg = msg + "[" + code + "]";
	        let ctxt = LanCfg.get("10010003");
	        if (ctxt == "10010003")
	            ctxt = "好 的";
	        let def = new ModalGeneric1ButtonDefinition(UiConst.ReloadView);
	        def.setTexts("", msg)
	            .setConfirmLabel(ctxt)
	            .setCallbacks(Laya.Handler.create(this, this.reloadHandler))
	            .setObscureScreen(true);
	        def.hideCloseBtn = true;
	        PopupManager.show2(def);
	    }
	    static reloadHandler() {
	        MsgCenter.notify(MsgConst.RELOAD);
	    }
	    static maintain(code, langKey = "10010025") {
	        let msg = LanCfg.get(langKey);
	        if (msg == langKey)
	            msg = "游戏正在维护中，请稍后再登录。";
	        if (code)
	            msg = msg + "[" + code + "]";
	        let ctxt = LanCfg.get("10010003");
	        if (ctxt == "10010003")
	            ctxt = "好 的";
	        let def = new ModalGeneric1ButtonDefinition(UiConst.ReloadView);
	        def.setTexts("", msg)
	            .setConfirmLabel(ctxt)
	            .setCallbacks(Laya.Handler.create(this, this.onRepeatLogin, null, false))
	            .setObscureScreen(true);
	        def.hideCloseBtn = true;
	        def.noCloseWindow = true;
	        PopupManager.show2(def);
	    }
	}
	ConnectMgr.isFirstLogin = true;
	ConnectMgr.isRepeatLogin = false;
	ConnectMgr._isLogined = false;

	class LoginProxy extends BaseProxy {
	    constructor(mgr) {
	        super(mgr);
	        this.reg(2001, this.rLogin, this);
	        this.reg(2003, this.rLoginSuccess, this);
	        this.reg(2004, this.rRepeatLogin, this);
	        this.reg(1001, this.rError, this);
	        this.reg(2007, this.rPing, this);
	    }
	    rError(ba) {
	        let msg = com.proto.Msg_1001_.decode(ba);
	        console.log("rError_1001:" + msg.tipKey + "_" + msg.paramValue);
	        MsgCenter.notify(MsgConst.SHOW_ERROR_MSG, msg);
	    }
	    rLogin(ba) {
	        var msg = com.proto.Msg_2001_.decode(ba);
	        ServerDate.timezone = msg.timeZone;
	        console.log("rLogin========================" + msg.status);
	        if (msg.status <= 0)
	            return;
	        let key;
	        switch (msg.status) {
	            case 1:
	                key = "10010026";
	                break;
	            case 2:
	                key = "10010027";
	                break;
	            case 3:
	                key = "10010028";
	                break;
	            case 4:
	                key = msg.loginNotice;
	                break;
	        }
	        ConnectMgr.maintain(null, key);
	        this.socket.delSocket();
	    }
	    sLogin(reLogin = 0) {
	        var mclient = com.proto.MClient.create();
	        mclient.reLogin = reLogin;
	        mclient.channel = LoginData.channel;
	        mclient.version = Version.ver;
	        mclient.terminal = LoginData.terminal;
	        mclient.terminalType = LoginData.terminalType;
	        var msg = com.proto.Msg_2001.create();
	        msg.accountId = LoginData.accountId;
	        msg.areaId = LoginData.areaId;
	        msg.client = mclient;
	        msg.operatorId = LoginData.operatorId;
	        if (LoginData.loginSig) {
	            msg.loginSign = MD5.ins().hex_md5(LoginData.account + LoginData.loginSig);
	        }
	        else {
	            msg.loginSign = "";
	        }
	        msg.gateToken = LoginData.gateToken;
	        msg.loginIp = LoginData.loginIp;
	        var w = com.proto.Msg_2001.encode(msg);
	        console.log("slogin========================");
	        this.send(2001, w);
	    }
	    rLoginSuccess(ba) {
	        this.socket.isLogined = true;
	        ConnectMgr.isLogined = true;
	        var msg = com.proto.Msg_2003_.decode(ba);
	        UserData.initData(msg.loginData);
	        TimeMgr.ins().openServerTime = ProtUtil.ltn(msg.loginData.openServerTime);
	        MsgCenter.notify(MsgConst.LOGIN_SUCCESS);
	    }
	    rRepeatLogin(ba) {
	        ConnectMgr.repeatLogin();
	    }
	    sFisrtEnterGame() {
	    }
	    ping() {
	        var w = com.proto.Msg_1002.encode(com.proto.Msg_1002.create());
	        this.send(1002, w);
	    }
	    rPing(ba) {
	    }
	    test(value) {
	        let msg = com.proto.Msg_1004.create();
	        msg.values = value;
	        let w = com.proto.Msg_1004.encode(msg);
	        this.send(1004, w);
	    }
	}

	var pb = com.proto;
	class RechargeProxy extends BaseProxy {
	    constructor(mgr) {
	        super(mgr);
	        this.reg(41000, this.rUpdateRecharge, this);
	        this.reg(41001, this.rConfirmMsg, this);
	    }
	    rUpdateRecharge(ba) {
	        let msg = pb.Msg_41000_.decode(ba);
	        BuyDiamondsMgr.sendMsg(msg.recharge);
	    }
	    sConfirmMsg(oderId) {
	        let msg = pb.Msg_41001.create();
	        msg.oriderId = oderId;
	        let w = pb.Msg_41001.encode(msg);
	        this.send(41001, w);
	    }
	    rConfirmMsg(ba) {
	        let msg = pb.Msg_41001_.decode(ba);
	    }
	}

	class BagProxy extends BaseProxy {
	    constructor(mgr) {
	        super(mgr);
	        this.reg(6001, this.rUpdate, this);
	    }
	    rUpdate(ba) {
	        var msg = com.proto.Msg_6001_.decode(ba);
	        MsgCenter.notify(MsgConst.R_BAG_UPATE, msg.updateList);
	    }
	    sConfirm(ids) {
	        if (!ids || ids.length <= 0)
	            return;
	        var msg = com.proto.Msg_6002.create();
	        msg.index = ids;
	        var w = com.proto.Msg_6002.encode(msg);
	        this.send(6002, w);
	    }
	}

	class ProxyMgr {
	    static init() {
	        BaseProxy.defalutSocket = Glob.socketMgr;
	        this.loginProxy = new LoginProxy();
	        this.sync = new SyncProxy();
	        this.player = new PlayerProxy();
	        this.recharge = new RechargeProxy();
	        this.bag = new BagProxy();
	    }
	}

	var SyncType;
	(function (SyncType) {
	    SyncType[SyncType["Offline"] = 0] = "Offline";
	    SyncType[SyncType["Synchronous"] = 1] = "Synchronous";
	    SyncType[SyncType["Asynchronous"] = 2] = "Asynchronous";
	})(SyncType || (SyncType = {}));
	var SyncActionType;
	(function (SyncActionType) {
	    SyncActionType[SyncActionType["Save"] = 0] = "Save";
	    SyncActionType[SyncActionType["Patch"] = 1] = "Patch";
	    SyncActionType[SyncActionType["UnsafePatch"] = 2] = "UnsafePatch";
	    SyncActionType[SyncActionType["Clear"] = 3] = "Clear";
	    SyncActionType[SyncActionType["Sequence"] = 4] = "Sequence";
	})(SyncActionType || (SyncActionType = {}));

	class SyncAction {
	    constructor() {
	        this.type = SyncActionType.Patch;
	        this.content = {};
	    }
	    isEmpty() {
	        return Object.keys(this.content).length === 0;
	    }
	}

	class SyncActionClearFile extends SyncAction {
	    constructor(fileId) {
	        super();
	        this.name = "clear_file";
	        this.type = SyncActionType.Clear;
	        this.content[fileId] = SyncObj.create();
	    }
	}

	class SyncActionReplace extends SyncAction {
	    constructor(fileId, fileData) {
	        super();
	        this.name = "replace";
	        this.type = SyncActionType.Save;
	        this.content[fileId] = SyncObj.createFromSyncObj(fileData);
	    }
	}

	class SL_Cloud {
	    constructor() {
	        this.id = SaveLoadConst.CLOUD_STATE;
	        this.pendingList = [];
	    }
	    export() {
	        let gGSyncObject = new SyncObj();
	        gGSyncObject.setValue("0", this.isActive);
	        gGSyncObject.setValue("1", SyncObj.serializeFromArray(this.pendingList));
	        return gGSyncObject;
	    }
	    import(syncData) {
	        let val0 = syncData.getValue("0");
	        let val1 = syncData.getValue("1");
	        this.isActive = val0 == null ? false : val0;
	        this.pendingList = val1 ? SyncObj.deserializeToArray(val1) : [];
	    }
	    unionWith(ids) {
	        ids.forEach(item => {
	            if (!this.pendingList.some(old => old === item)) {
	                this.pendingList.push(item);
	            }
	        });
	    }
	    exceptWith(ids) {
	        for (let i = this.pendingList.length - 1; i > -1; i--) {
	            let id = this.pendingList[i];
	            if (ids.some(exceptId => exceptId === id)) {
	                this.pendingList.splice(i, 1);
	            }
	        }
	    }
	}

	class SyncCloudMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.isInit = false;
	        this.isSyncing = false;
	    }
	    persistData() {
	        SaveLoad.save(this.slCloud);
	    }
	    canSave() {
	        return this.isInit && this.isActive;
	    }
	    setPending(ids) {
	        this.slCloud.unionWith(ids);
	        this.persistData();
	    }
	    clearPending(ids) {
	        this.slCloud.exceptWith(ids);
	        this.persistData();
	    }
	    getPending() {
	        return this.slCloud.pendingList;
	    }
	    get isActive() {
	        return this.slCloud.isActive;
	    }
	    set isActive(val) {
	        this.slCloud.isActive = val;
	        this.persistData();
	    }
	    init() {
	        if (this.isInit) {
	            Debug.log("warning!!! SyncCloudMgr has init");
	            return;
	        }
	        this.isInit = true;
	        this.slCloud = new SL_Cloud();
	        SaveLoad.load(this.slCloud);
	    }
	    save(data, handler) {
	        if (this.isSyncing) {
	            Debug.log("[CloudSave] Is already saving. Will skip.");
	            handler && handler.runWith(false);
	            return;
	        }
	        this.isSyncing = true;
	        let time;
	        let value;
	        if (this.lastSync) {
	            value = this.lastSync;
	            time = value.time;
	        }
	        else {
	            time = Date.now();
	        }
	        this.lastSync = new SyncInfo(time, false);
	    }
	    onSaved(ids, handler, result) {
	        this.isSyncing = false;
	        let isSuccess = result === Result.Success;
	        if (isSuccess) {
	            this.clearPending(ids);
	            this.lastSuccessfullSync = new SyncInfo(Date.now(), false);
	        }
	        this.lastSync.didFail = !isSuccess;
	        if (result === Result.Fail_DeactivedDevice) {
	        }
	        handler.runWith(isSuccess);
	    }
	}
	var Result;
	(function (Result) {
	    Result[Result["Success"] = 0] = "Success";
	    Result[Result["Fail_BackendException"] = 1] = "Fail_BackendException";
	    Result[Result["Fail_DeactivedDevice"] = 2] = "Fail_DeactivedDevice";
	    Result[Result["Fail_Serialization"] = 3] = "Fail_Serialization";
	    Result[Result["Fail_NoRemoteData"] = 4] = "Fail_NoRemoteData";
	    Result[Result["Fail_MissingFiles"] = 5] = "Fail_MissingFiles";
	    Result[Result["Fail_IO"] = 6] = "Fail_IO";
	})(Result || (Result = {}));
	class SyncInfo {
	    constructor(time, didFail) {
	        this.time = time;
	        this.didFail = didFail;
	    }
	}

	class SyncLocalMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.isInit = false;
	        this.ls = Laya.LocalStorage;
	    }
	    callSave() {
	        Laya.timer.callLater(this, this.saveNow);
	    }
	    saveNow() {
	        this.ls.setItem(this.storageId, JSON.stringify(this.dict));
	    }
	    get isSupport() {
	        return this.ls.support;
	    }
	    get isEnabled() {
	        return this.isSupport && this.isInit;
	    }
	    init() {
	        if (this.isInit) {
	            Debug.log("warning!!! SyncLocalMgr has init");
	            return;
	        }
	        if (!LoginData.account || !LoginData.areaId) {
	            Debug.log("warning!!! SyncLocalMgr init error!");
	            return;
	        }
	        this.isInit = true;
	        this.storageId = "merge_wxd_" + LoginData.account + "_" + LoginData.areaId;
	        let saveData = this.ls.getItem(this.storageId);
	        this.dict = saveData ? JSON.parse(this.ls.getItem(this.storageId)) : {};
	    }
	    isEmpty() {
	        return this.isEnabled ? this.getItemKeys().length === 0 : false;
	    }
	    isValid() {
	        if (this.isEnabled) {
	            let unexist = false;
	            let keys = this.getItemKeys();
	            let keyLen = keys.length;
	            let coreLen = SaveLoadConst.coreList.length;
	            if (keyLen < coreLen) {
	                return false;
	            }
	            else {
	                for (let i = 0; i < coreLen; i++) {
	                    let core = SaveLoadConst.coreList[i];
	                    if (!keys.some(key => key === core)) {
	                        unexist = true;
	                        Debug.log("local storage core is not exist, id: " + core);
	                        break;
	                    }
	                }
	                return !unexist;
	            }
	        }
	        else {
	            return false;
	        }
	    }
	    save(key, val) {
	        if (!this.isEnabled) {
	            Debug.log("warning!!! SyncLocalMgr do not init");
	            return null;
	        }
	        this.dict[key] = val;
	        this.callSave();
	    }
	    getItemKeys() {
	        if (!this.isEnabled) {
	            Debug.log("warning!!! SyncLocalMgr do not init");
	            return null;
	        }
	        return Object.keys(this.dict);
	    }
	    getItem(key) {
	        if (!this.isEnabled) {
	            Debug.log("warning!!! SyncLocalMgr do not init");
	            return null;
	        }
	        return this.dict[key];
	    }
	    getUploadData() {
	        this.saveNow();
	        return this.encode();
	    }
	    encode() {
	        let modules = [];
	        let encodeKeys = [];
	        let playData = {
	            [SaveLoadConst.SETTING]: this.dict[SaveLoadConst.SETTING],
	            [SaveLoadConst.PLAYER_EXPAND_DATA]: this.dict[SaveLoadConst.PLAYER_EXPAND_DATA],
	            [SaveLoadConst.ATLAS]: this.dict[SaveLoadConst.ATLAS],
	            [SaveLoadConst.BUYDIAMONDS]: this.dict[SaveLoadConst.BUYDIAMONDS],
	            [SaveLoadConst.DRAGON_BOOK]: this.dict[SaveLoadConst.DRAGON_BOOK],
	            [SaveLoadConst.EGG_BANK]: this.dict[SaveLoadConst.EGG_BANK],
	            [SaveLoadConst.FIRSTCHARGE]: this.dict[SaveLoadConst.FIRSTCHARGE],
	            [SaveLoadConst.PURCHASEHISTORY]: this.dict[SaveLoadConst.PURCHASEHISTORY],
	        };
	        if (this.dict[SaveLoadConst.TUTORIAL]) {
	            playData[SaveLoadConst.TUTORIAL] = this.dict[SaveLoadConst.TUTORIAL];
	        }
	        if (this.dict[SaveLoadConst.OBJECT_DEF_STATE]) {
	            playData[SaveLoadConst.OBJECT_DEF_STATE] = this.dict[SaveLoadConst.OBJECT_DEF_STATE];
	        }
	        encodeKeys = encodeKeys.concat(Object.keys(playData));
	        modules.push({
	            type: 1,
	            moduleData: JSON.stringify(playData),
	        });
	        let worldMapData = {};
	        if (this.dict[SaveLoadConst.WORLD_MAP]) {
	            worldMapData[SaveLoadConst.WORLD_MAP] = this.dict[SaveLoadConst.WORLD_MAP];
	        }
	        if (this.dict[SaveLoadConst.OWNED_MONSTERS]) {
	            worldMapData[SaveLoadConst.OWNED_MONSTERS] = this.dict[SaveLoadConst.OWNED_MONSTERS];
	        }
	        encodeKeys = encodeKeys.concat(Object.keys(worldMapData));
	        for (let key in this.dict) {
	            if (key.length >= 5) {
	                let levelId = key.substring(0, 5);
	                if (WorldCfg.has(levelId)) {
	                    worldMapData["levels"] = worldMapData["levels"] || {};
	                    worldMapData["levels"][key] = this.dict[key];
	                }
	            }
	        }
	        worldMapData["levels"] && (encodeKeys = encodeKeys.concat(Object.keys(worldMapData["levels"])));
	        if (Object.keys(worldMapData).length > 0) {
	            modules.push({
	                type: 2,
	                moduleData: JSON.stringify(worldMapData),
	            });
	        }
	        let homeStateData = {};
	        if (this.dict[SaveLoadConst.HOME_STATS]) {
	            homeStateData[SaveLoadConst.HOME_STATS] = this.dict[SaveLoadConst.HOME_STATS];
	        }
	        if (this.dict[SaveLoadConst.BRING_HOME]) {
	            homeStateData[SaveLoadConst.BRING_HOME] = this.dict[SaveLoadConst.BRING_HOME];
	        }
	        if (Object.keys(homeStateData).length > 0) {
	            encodeKeys = encodeKeys.concat(Object.keys(homeStateData));
	            modules.push({
	                type: 3,
	                moduleData: JSON.stringify(homeStateData),
	            });
	        }
	        let homeActivityData = {};
	        if (this.dict[SaveLoadConst.SIGNIN]) {
	            homeActivityData[SaveLoadConst.SIGNIN] = this.dict[SaveLoadConst.SIGNIN];
	        }
	        if (this.dict[SaveLoadConst.DAILY_QUEST]) {
	            homeActivityData[SaveLoadConst.DAILY_QUEST] = this.dict[SaveLoadConst.DAILY_QUEST];
	        }
	        if (this.dict[SaveLoadConst.ACTIVITY]) {
	            homeActivityData[SaveLoadConst.ACTIVITY] = this.dict[SaveLoadConst.ACTIVITY];
	        }
	        if (Object.keys(homeActivityData).length > 0) {
	            encodeKeys = encodeKeys.concat(Object.keys(homeActivityData));
	            modules.push({
	                type: 7,
	                moduleData: JSON.stringify(homeActivityData),
	            });
	        }
	        if (encodeKeys.length != Object.keys(this.dict).length) {
	            let unvalidKeys = [];
	            Object.keys(this.dict).forEach(key => {
	                if (!encodeKeys.some(encodeKey => encodeKey === key)) {
	                    unvalidKeys.push(key);
	                }
	            });
	            console.log("warning! has dict key not encode!!!", encodeKeys.length, Object.keys(this.dict).length, unvalidKeys);
	            let playModuleIndex = modules.findIndex(data => data.type == 1);
	            if (playModuleIndex >= 0) {
	                modules.splice(playModuleIndex, 1);
	                playData["unvalidKeys"] = unvalidKeys;
	                modules.push({
	                    type: 1,
	                    moduleData: JSON.stringify(playData),
	                });
	            }
	        }
	        return modules;
	    }
	    decode(modules) {
	        let obj = {};
	        modules.forEach(item => {
	            if (!item.moduleData)
	                return;
	            let data = JSON.parse(item.moduleData);
	            if (item.type == 1) {
	                obj[SaveLoadConst.SETTING] = data[SaveLoadConst.SETTING];
	                obj[SaveLoadConst.PLAYER_EXPAND_DATA] = data[SaveLoadConst.PLAYER_EXPAND_DATA];
	                obj[SaveLoadConst.ATLAS] = data[SaveLoadConst.ATLAS];
	                obj[SaveLoadConst.BUYDIAMONDS] = data[SaveLoadConst.BUYDIAMONDS];
	                obj[SaveLoadConst.DRAGON_BOOK] = data[SaveLoadConst.DRAGON_BOOK];
	                obj[SaveLoadConst.EGG_BANK] = data[SaveLoadConst.EGG_BANK];
	                obj[SaveLoadConst.FIRSTCHARGE] = data[SaveLoadConst.FIRSTCHARGE];
	                obj[SaveLoadConst.PURCHASEHISTORY] = data[SaveLoadConst.PURCHASEHISTORY];
	                if (data[SaveLoadConst.TUTORIAL]) {
	                    obj[SaveLoadConst.TUTORIAL] = data[SaveLoadConst.TUTORIAL];
	                }
	                if (data[SaveLoadConst.OBJECT_DEF_STATE]) {
	                    obj[SaveLoadConst.OBJECT_DEF_STATE] = data[SaveLoadConst.OBJECT_DEF_STATE];
	                }
	            }
	            else if (item.type == 3) {
	                if (data[SaveLoadConst.HOME_STATS]) {
	                    obj[SaveLoadConst.HOME_STATS] = data[SaveLoadConst.HOME_STATS];
	                }
	                if (data[SaveLoadConst.BRING_HOME]) {
	                    obj[SaveLoadConst.BRING_HOME] = data[SaveLoadConst.BRING_HOME];
	                }
	            }
	            else if (item.type == 7) {
	                if (data[SaveLoadConst.SIGNIN]) {
	                    obj[SaveLoadConst.SIGNIN] = data[SaveLoadConst.SIGNIN];
	                }
	                if (data[SaveLoadConst.DAILY_QUEST]) {
	                    obj[SaveLoadConst.DAILY_QUEST] = data[SaveLoadConst.DAILY_QUEST];
	                }
	                if (data[SaveLoadConst.ACTIVITY]) {
	                    obj[SaveLoadConst.ACTIVITY] = data[SaveLoadConst.ACTIVITY];
	                }
	            }
	            else if (item.type == 2) {
	                if (data[SaveLoadConst.WORLD_MAP]) {
	                    obj[SaveLoadConst.WORLD_MAP] = data[SaveLoadConst.WORLD_MAP];
	                }
	                if (data[SaveLoadConst.OWNED_MONSTERS]) {
	                    obj[SaveLoadConst.OWNED_MONSTERS] = data[SaveLoadConst.OWNED_MONSTERS];
	                }
	                let levels = data["levels"];
	                if (levels) {
	                    for (let key in levels) {
	                        obj[key] = levels[key];
	                    }
	                }
	            }
	        });
	        return obj;
	    }
	    inject(modules) {
	        this.dict = this.decode(modules);
	        this.saveNow();
	    }
	}
	SyncLocalMgr.Versoin = 1.0;

	class CloudUploadManager extends Singleton {
	    init() {
	        MsgCenter.listen(MsgConst.CLOUDE_UPLOAD_NOW, this.uploadTimer, this);
	        Laya.timer.once(CloudUploadManager.START_PERIOD, this, this.startTimer);
	    }
	    startTimer() {
	        this.uploadTimer();
	        Laya.timer.loop(CloudUploadManager.UPDATE_PERIOD, this, this.uploadTimer);
	    }
	    uploadTimer() {
	        let modules = SyncLocalMgr.ins().getUploadData();
	        if (modules && modules.length > 0) {
	            Debug.log("CloudUploadManager========== UploadTimer  " + modules);
	            ProxyMgr.sync.sSave(modules);
	        }
	    }
	}
	CloudUploadManager.START_PERIOD = 60 * 1000;
	CloudUploadManager.UPDATE_PERIOD = 5 * 60 * 1000;

	class SyncGameState {
	    constructor() {
	        this._data = {};
	    }
	    get fileNames() {
	        return Object.keys(this._data);
	    }
	    ;
	    consume(task) {
	        return task.execute(this._data);
	    }
	    has(filename) {
	        return this._data[filename] != null;
	    }
	    getState(filename) {
	        let result = this._data[filename];
	        return result ? result : new SyncObj();
	    }
	    isEmpty() {
	        return Object.keys(this._data).length === 0;
	    }
	    clear() {
	        for (let key in this._data) {
	            delete this._data[key];
	        }
	    }
	}

	class SyncTask {
	    constructor(type, action) {
	        this._actions = [];
	        this._isConsumed = false;
	        this.type = type;
	        action && this.add(action);
	    }
	    set type(value) {
	        this._type = value;
	    }
	    get type() {
	        return this._type;
	    }
	    get actions() {
	        if (!this._isConsumed) {
	            console.log("Tried to read the payload for a sync action that was not applied to the game state!");
	        }
	        return this._actions;
	    }
	    add(action) {
	        if (this._isConsumed) {
	            console.log("Tried to modify a sync action that was already consumed!");
	        }
	        this._actions.push(action);
	    }
	    execute(gameState) {
	        if (this._isConsumed) {
	            console.log("ALREADY_CONSUMED", "Tried to execute a sync action that was already consumed!");
	            return false;
	        }
	        if (this._actions.length == 0) {
	            console.log("ALREADY_CONSUMED", "Tried to execute a sync action that was already consumed!");
	            return false;
	        }
	        for (let i = 0; i < this._actions.length; i++) {
	            let action = this._actions[i];
	            if (action.isEmpty()) {
	                console.log("NULL_PATCH", "Failed to apply action: patch is null!");
	                return false;
	            }
	            if (!SyncTask.applyAction(action.type, action.content, gameState) && this.type != SyncType.Offline) {
	                console.log("ACTION_FAILED", "Failed to apply action, action was rejected: " + action.type);
	                return false;
	            }
	        }
	        this._isConsumed = true;
	        return true;
	    }
	    static applyAction(actionType, src, dst) {
	        switch (actionType) {
	            case SyncActionType.Clear:
	                for (let key in src) {
	                    dst[key] = new SyncObj();
	                }
	                break;
	            case SyncActionType.Save:
	                for (let key in src) {
	                    dst[key] = src[key];
	                }
	                break;
	            case SyncActionType.Patch:
	                SyncTask.applyPatch(src, dst);
	                break;
	            case SyncActionType.UnsafePatch:
	                SyncTask.applyPatch(src, dst);
	                break;
	            default:
	                console.log("Unhandled action type: " + actionType);
	                return false;
	        }
	        return true;
	    }
	    static applyPatch(src, dst) {
	        for (let key in src) {
	            let srcItem = src[key];
	            let dstItem = dst[key] || new SyncObj();
	            dstItem.applyPatch(srcItem);
	            dst[key] = dstItem;
	        }
	    }
	}

	class SyncMgr extends Singleton {
	    constructor() {
	        super();
	        this.flushHandlers = [];
	        this.pendingTaskQueue = [];
	        this.gameState = new SyncGameState();
	    }
	    init() {
	        SyncLocalMgr.ins().init();
	        SyncCloudMgr.ins().init();
	        CloudUploadManager.ins().init();
	    }
	    clearAll() {
	        this.gameState.clear();
	    }
	    getFilenames() {
	        return this.gameState.fileNames;
	    }
	    getState(key) {
	        return this.gameState.getState(key);
	    }
	    hasState(fileId) {
	        let hasKey = this.gameState.has(fileId);
	        if (hasKey) {
	            let gameState = this.getState(fileId);
	            return this.syncObjectHasData(fileId, gameState);
	        }
	        else {
	            return false;
	        }
	    }
	    syncObjectHasData(fileId, data) {
	        if (fileId == SaveLoadConst.OWNED_MONSTERS) {
	            return this.ownedMonstersHasData(data);
	        }
	        if (fileId == "Level_Home") {
	            return this.levelHomeHasData(data);
	        }
	        if (data.isEmpty()) {
	            return false;
	        }
	        return true;
	    }
	    ownedMonstersHasData(obj) {
	        if (obj.isEmpty()) {
	            return false;
	        }
	        let objAt0 = null;
	        if (obj.hasKey("0")) {
	            objAt0 = obj.getSyncObj("0");
	            if (objAt0.isEmpty()) {
	                return false;
	            }
	            return true;
	        }
	        return false;
	    }
	    levelHomeHasData(obj) {
	        if (obj.isEmpty()) {
	            return false;
	        }
	        let objAt2 = null;
	        if (obj.hasKey("2")) {
	            objAt2 = obj.getSyncObj("2");
	            if (objAt2.isEmpty()) {
	                return false;
	            }
	            return true;
	        }
	        return false;
	    }
	    applyAction(action) {
	        let task = new SyncTask(SyncType.Asynchronous, action);
	        return this.applyTask(task);
	    }
	    applyTask(task, handler) {
	        if (!this.gameState.consume(task)) {
	            console.log("ACTION_FAILED", "Failed to consume a sync action: " + task.type);
	            return false;
	        }
	        if (this.gameState.isEmpty()) {
	            console.log("EMPTY_GAMESTATE", "Game state is empty after applying action: " + task.type);
	            return false;
	        }
	        switch (task.type) {
	            case SyncType.Synchronous:
	                this.pendingTaskQueue.push(task);
	                this.flushSync(handler);
	                break;
	            case SyncType.Asynchronous:
	                this.pendingTaskQueue.push(task);
	                break;
	        }
	        return true;
	    }
	    flushSync(callback) {
	        this.flush(SyncType.Synchronous, callback);
	    }
	    flush(syncType, handler) {
	        if (syncType === SyncType.Asynchronous) {
	            if (handler != null) {
	                this.flushHandlers.push(handler);
	            }
	            else {
	                console.log("[GGSyncManager] You must provide a non-null callback when requesting a server flush!");
	            }
	        }
	        else {
	            this.doNext(handler);
	        }
	    }
	    doNext(handler) {
	        while (this.pendingTaskQueue.length > 0) {
	            let task = this.pendingTaskQueue.shift();
	            task.actions.forEach((action, index) => {
	                for (let key in action.content) {
	                    let ds = action.content[key];
	                    SyncLocalMgr.ins().save(key, ds.stringify());
	                }
	            });
	        }
	        if (this.pendingTaskQueue.length === 0) {
	            handler && handler.runWith(true);
	        }
	    }
	}

	class Menu_ItemsDiscovered {
	    static addToNewDiscoveryList(def) {
	        if (!def.hasChain) {
	            console.log("Tried to add item to discovery list without a chain: prefab=" + def.cid);
	        }
	        else {
	            this.newDiscoveryList.push(def);
	        }
	    }
	    static tryItemDiscovered(obj) {
	        if (Glob.currentLevel != null && Glob.currentLevel.state == LevelStateID.Playing) {
	            let cfg = obj.cfg;
	            if (cfg.hasChain && (cfg.discoveryState == DiscoveryItemStateID.NONE || cfg.discoveryState == DiscoveryItemStateID.Undiscovered)) {
	                cfg.discoveryState = DiscoveryItemStateID.JustDiscoveredAndUnlockable;
	                let info_ObjectDiscovered = StringUtil.format(LanCfg.get("10020018"), cfg.name);
	                FloatingText.CreateInfoText(info_ObjectDiscovered, InfoTextColorID.Green, obj);
	                SoundMgr.ins().playSound("m88");
	                this.addToNewDiscoveryList(cfg);
	            }
	        }
	    }
	}
	Menu_ItemsDiscovered.newDiscoveryList = [];

	class SL_ObjectDefState {
	    constructor() {
	        this.id = SaveLoadConst.OBJECT_DEF_STATE;
	        this.discoveredItems = [];
	        this.justDiscoveredItems = [];
	        this.everTappedForTapArrows = [];
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.discoveredItems) {
	            let obj1 = SyncObj.create();
	            for (let i = 0; i < this.discoveredItems.length; i++) {
	                obj1.setValue(i.toString(), this.discoveredItems[i]);
	            }
	            obj.setSyncObj("0", obj1);
	        }
	        if (this.justDiscoveredItems) {
	            let obj1 = SyncObj.create();
	            for (let i = 0; i < this.justDiscoveredItems.length; i++) {
	                obj1.setValue(i.toString(), this.justDiscoveredItems[i]);
	            }
	            obj.setSyncObj("1", obj1);
	        }
	        if (this.everTappedForTapArrows) {
	            let obj1 = SyncObj.create();
	            for (let i = 0; i < this.everTappedForTapArrows.length; i++) {
	                obj1.setValue(i.toString(), this.everTappedForTapArrows[i]);
	            }
	            obj.setSyncObj("2", obj1);
	        }
	        return obj;
	    }
	    import(data) {
	        let obj = data.getSyncObj("0");
	        if (obj) {
	            this.discoveredItems = [];
	            for (let i in obj.data) {
	                this.discoveredItems.push(obj.getValue(i));
	            }
	        }
	        let obj1 = data.getSyncObj("1");
	        if (obj1) {
	            this.justDiscoveredItems = [];
	            for (let i in obj1.data) {
	                this.justDiscoveredItems.push(obj1.getValue(i));
	            }
	        }
	        let obj2 = data.getSyncObj("2");
	        if (obj2) {
	            this.everTappedForTapArrows = [];
	            for (let i in obj2.data) {
	                this.everTappedForTapArrows.push(obj2.getValue(i));
	            }
	        }
	    }
	    static getSaveData() {
	        let saveData_ObjectDefState = new SL_ObjectDefState();
	        for (let id in PropsCfg.definitions) {
	            let value = PropsCfg.definitions[id];
	            if (value.discoveryState == DiscoveryItemStateID.Discovered) {
	                saveData_ObjectDefState.discoveredItems.push(value.cid);
	            }
	            else if (value.discoveryState == DiscoveryItemStateID.JustDiscoveredAndUnlockable) {
	                saveData_ObjectDefState.justDiscoveredItems.push(value.cid);
	            }
	        }
	        saveData_ObjectDefState.everTappedForTapArrows = PropsCfg.tapArrow_EverTappedList;
	        return saveData_ObjectDefState;
	    }
	    initObjectDefStateFromSaveData() {
	        for (let discoveredItem of this.discoveredItems) {
	            let vo = PropsCfg.get(discoveredItem);
	            if (vo) {
	                vo.discoveryState = DiscoveryItemStateID.Discovered;
	            }
	        }
	        for (let justDiscoveredItem of this.justDiscoveredItems) {
	            let vo = PropsCfg.get(justDiscoveredItem);
	            if (vo) {
	                vo.discoveryState = DiscoveryItemStateID.JustDiscoveredAndUnlockable;
	                Menu_ItemsDiscovered.addToNewDiscoveryList(vo);
	            }
	        }
	        if (PropsCfg.tapArrow_EverTappedList.length > 0) {
	            PropsCfg.tapArrow_EverTappedList.length = 0;
	        }
	        for (let everTappedForTapArrow of this.everTappedForTapArrows) {
	            let vo = PropsCfg.get(everTappedForTapArrow);
	            if (vo) {
	                vo.everTapped = true;
	                PropsCfg.tapArrow_EverTappedList.push(everTappedForTapArrow);
	            }
	        }
	    }
	}

	class SaveLoadReg extends Singleton {
	    static init() {
	        this.map = {
	            [SaveLoadConst.SETTING]: { newGame: SL_Setting.generateNewGame.bind(SL_Setting) },
	            [SaveLoadConst.PLAYER_EXPAND_DATA]: { newGame: SL_PlayExpand.generateNewGame.bind(SL_PlayExpand) },
	        };
	        this.saveAccessors = {
	            [SaveLoadConst.OWNED_MONSTERS]: OwnedMonsterMgr.getSaveData.bind(OwnedMonsterMgr),
	            [SaveLoadConst.PLAYER_EXPAND_DATA]: SL_PlayExpand.getSaveData.bind(SL_PlayExpand),
	            [SaveLoadConst.TUTORIAL]: TomeTip.save.bind(TomeTip),
	            [SaveLoadConst.OBJECT_DEF_STATE]: SL_ObjectDefState.getSaveData.bind(SL_ObjectDefState),
	            [SaveLoadConst.SETTING]: SL_Setting.getSettingData.bind(SL_Setting),
	        };
	    }
	}
	SaveLoadReg.essentialFiles = [
	    SaveLoadConst.OWNED_MONSTERS,
	    SaveLoadConst.PLAYER_EXPAND_DATA,
	    SaveLoadConst.TUTORIAL,
	    SaveLoadConst.OBJECT_DEF_STATE,
	    SaveLoadConst.SETTING,
	];

	class SL_Cell {
	    constructor() {
	        this.id = "Cell";
	    }
	    get guid() {
	        return this.xIndex + "_" + this.yIndex;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.xIndex);
	        obj.setValue("1", this.yIndex);
	        if (this.exists_deathComponent && this.deathSaveData) {
	            obj.setValueISL("2", this.deathSaveData);
	        }
	        obj.setValue("3", this.isKeyhole);
	        obj.setValue("4", this.isUnlocked);
	        obj.setValue("5", this.keyedFogGroupIdName);
	        obj.setValue("6", this.keyObjectPrefabName);
	        return obj;
	    }
	    import(data) {
	        this.xIndex = data.getValue("0");
	        this.yIndex = data.getValue("1");
	        if (data.hasKey("2")) {
	            this.exists_deathComponent = true;
	            let d = data.getValueISL("2", SL_DeathComponent);
	            this.deathSaveData = d;
	        }
	        else {
	            this.exists_deathComponent = false;
	        }
	        this.isKeyhole = data.getValue("3");
	        this.isUnlocked = data.getValue("4");
	        this.keyedFogGroupIdName = data.getValue("5");
	        this.keyObjectPrefabName = data.getValue("6");
	    }
	}

	class SL_FogMap {
	    constructor() {
	        this.id = "FogMap";
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.fogGroupIDMap) {
	            let obj2 = SyncObj.create();
	            let len = this.fogGroupIDMap.length;
	            for (let i = 0; i < len; i++) {
	                let fogIds = this.fogGroupIDMap[i];
	                if (fogIds) {
	                    let obj3 = SyncObj.create();
	                    for (let j = 0; j < fogIds.length; j++) {
	                        obj3.setValue(j.toString(), fogIds[j]);
	                    }
	                    obj2.setSyncObj(i.toString(), obj3);
	                }
	            }
	            obj.setSyncObj("0", obj2);
	        }
	        return obj;
	    }
	    import(data) {
	        if (data.hasKey("0")) {
	            this.fogGroupIDMap = [];
	            let obj = data.getSyncObj("0");
	            for (let i in obj.data) {
	                this.fogGroupIDMap[i] = [];
	                let obj2 = obj.getSyncObj(i);
	                if (obj2) {
	                    for (let j in obj2.data) {
	                        this.fogGroupIDMap[i][j] = obj2.getValue(j);
	                    }
	                }
	                else {
	                }
	            }
	        }
	    }
	}

	class SL_Board {
	    constructor() {
	        this.id = SaveLoadConst.BOARD;
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.cellsData) {
	            let cobj = SyncObj.create();
	            for (let item of this.cellsData) {
	                if (item) {
	                    cobj.setSyncObj(item.guid, item.export());
	                }
	            }
	            obj.setSyncObj("0", cobj);
	        }
	        if (this.fogMapData) {
	            obj.setSyncObj("1", this.fogMapData.export());
	        }
	        return obj;
	    }
	    import(data) {
	        if (!this.cellsData)
	            this.cellsData = [];
	        this.cellsData.length = 0;
	        if (data.hasKey("0")) {
	            let cobj = data.getSyncObj("0");
	            for (let i in cobj.data) {
	                let sl = new SL_Cell();
	                sl.import(cobj.getSyncObj(i));
	                this.cellsData.push(sl);
	            }
	        }
	        if (data.hasKey("1")) {
	            this.fogMapData = new SL_FogMap();
	            this.fogMapData.import(data.getSyncObj("1"));
	        }
	    }
	}

	class SL_Level {
	    constructor(onlyMapVer = false) {
	        this.id = SaveLoadConst.LEVEL;
	        this.currentPoints = 0;
	        this.drawnObjectsData = [];
	        this.goals = [];
	        this.enemyDirector_exists = false;
	        this.rewardsSavedToFile = false;
	        this.mapVersion = -1;
	        this.levelComplete = false;
	        this.timeRemaining = 0;
	        this.numTimePurchases = 0;
	        this.assetMapVersion = "";
	        this.onlyMapVer = false;
	        this.onlyMapVer = onlyMapVer;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.currentPoints);
	        if (this.boardData) {
	            obj.setValueISL("1", this.boardData);
	        }
	        if (this.drawnObjectsData) {
	            let gGSyncObject = new SyncObj();
	            for (let drawnObjectsDatum of this.drawnObjectsData) {
	                if (drawnObjectsDatum && drawnObjectsDatum.prefabName) {
	                    gGSyncObject.setSyncObj(drawnObjectsDatum.guid.toString(), drawnObjectsDatum.export());
	                }
	            }
	            obj.setSyncObj("2", gGSyncObject);
	        }
	        if (this.cameraData) {
	            obj.setValueISL("3", this.cameraData);
	        }
	        if (this.goals) {
	            obj.setValueISLArr("4", this.goals);
	        }
	        if (this.playTimeData) {
	            obj.setValueISL("5", this.playTimeData);
	        }
	        obj.setValue("7", this.rewardsSavedToFile);
	        obj.setValue("8", this.mapVersion);
	        obj.setValue("9", this.levelComplete);
	        obj.setValue("10", this.timeRemaining);
	        obj.setValue("11", this.numTimePurchases);
	        obj.setValue("12", this.assetMapVersion);
	        return obj;
	    }
	    import(syncData) {
	        this.mapVersion = syncData.getValue("8");
	        if (this.onlyMapVer)
	            return;
	        this.currentPoints = syncData.getValue("0");
	        this.boardData = syncData.getValueISL("1", SL_Board);
	        let obj = syncData.getSyncObj("2");
	        if (obj) {
	            this.drawnObjectsData = [];
	            for (let i in obj.data) {
	                let v = obj.getSyncObj(i);
	                if (v) {
	                    let thing = new SL_Thing();
	                    thing.import(v);
	                    this.drawnObjectsData.push(thing);
	                }
	            }
	        }
	        this.cameraData = syncData.getValueISL("3", SL_Camera);
	        this.goals = syncData.getValueISLArr("4", SL_Goal);
	        this.playTimeData = syncData.getValueISL("5", SL_Clock);
	        this.rewardsSavedToFile = Boolean(syncData.getValue("7"));
	        this.levelComplete = Boolean(syncData.getValue("9"));
	        this.timeRemaining = syncData.getValue("10");
	        this.numTimePurchases = syncData.getValue("11");
	        this.assetMapVersion = syncData.getValue("12");
	    }
	    static DisposeLoadedData() {
	        this.currentLoadedData = null;
	    }
	}
	SL_Level.currentLoadedData = null;

	class SL_OwnedMonsters {
	    constructor() {
	        this.id = SaveLoadConst.OWNED_MONSTERS;
	        this.ownedMonsters = {};
	    }
	    get ownedMonstersCount() {
	        let keys = Object.keys(this.ownedMonsters);
	        return keys.length;
	    }
	    export() {
	        let obj = SyncObj.create();
	        if (this.ownedMonsters) {
	            obj.setValueISLDict("0", this.ownedMonsters);
	        }
	        return obj;
	    }
	    import(obj) {
	        if (obj.hasKey("0")) {
	            let dict = obj.getValueISLDict("0", SL_Thing);
	            for (let key in dict) {
	                let item = dict[key];
	                let syncObj = item.export();
	                if (!syncObj.isEmpty()) {
	                    if (!SL_Thing.validateDrawnObjectGuid(syncObj)) {
	                        delete dict[key];
	                        console.error("Found invalid monster in owned monsters list!");
	                    }
	                }
	            }
	            this.ownedMonsters = dict;
	        }
	        else {
	            this.ownedMonsters = {};
	        }
	    }
	}

	class SL_WorldMap {
	    constructor() {
	        this.id = SaveLoadConst.WORLD_MAP;
	    }
	    export() {
	        let so = SyncObj.create();
	        so.setValue("0", this.recentLevelId);
	        return so;
	    }
	    import(data) {
	        this.recentLevelId = data.getValue("0");
	    }
	    static loadNewGame() {
	        let obj = new SL_WorldMap();
	        obj.recentLevelId = 0;
	        return obj;
	    }
	}

	class SaveLoad {
	    static get SAVE_DISABLED() {
	        return this.DISABLE_SAVE_FOR_SAVE_DELETION || this.GameRecompiled_SAVE_DISABLED;
	    }
	    static createTask(list) {
	        let task = new SyncTask(SyncType.Asynchronous);
	        list.forEach(item => {
	            if (item) {
	                let action = new SyncActionReplace(item.id, item.export());
	                task.add(action);
	            }
	        });
	        return task;
	    }
	    static init(handler) {
	        this.gameStateLoadedHandler = handler;
	        SaveLoadReg.init();
	        SyncMgr.ins().init();
	        SaveLoad.initGameState();
	    }
	    static has(key) {
	        return SyncMgr.ins().hasState(key);
	    }
	    static save(obj) {
	        this.saveList([obj]);
	    }
	    static saveByName(obj, name) {
	        obj.id = name;
	        this.save(obj);
	    }
	    static saveList(list) {
	        let task = SaveLoad.createTask(list);
	        SyncMgr.ins().applyTask(task);
	        SyncMgr.ins().flushSync();
	    }
	    static load(obj) {
	        let state = SyncMgr.ins().getState(obj.id);
	        if (state.isEmpty()) {
	            return null;
	        }
	        obj.import(state);
	        return obj;
	    }
	    static loadByName(name, obj) {
	        let state = SyncMgr.ins().getState(name);
	        if (this.has(name)) {
	            obj.import(state);
	            return obj;
	        }
	        else {
	            return null;
	        }
	    }
	    static ClearGameData(fileId) {
	        let action = new SyncActionClearFile(fileId);
	        let task = new SyncTask(SyncType.Asynchronous);
	        task.add(action);
	        SyncMgr.ins().applyTask(task);
	        SyncMgr.ins().flushSync();
	    }
	    static initGameState() {
	        if (SyncLocalMgr.ins().isSupport) {
	            if (SyncLocalMgr.ins().isEmpty()) {
	                if (LoginData.standAlone) {
	                    this.generateNewGame();
	                    this.onGameStateLoaded();
	                    Debug.log("[SaveLoad] LOAD GAME STATE: no data found in local storage! Is this a new user?");
	                }
	                else {
	                    let checkHandler = Laya.Handler.create(this, this.onCheckCloudExist, [true]);
	                    ProxyMgr.sync.checkCloudExist(checkHandler);
	                }
	            }
	            else {
	                let checkHandler = Laya.Handler.create(this, this.onCheckCloudExist, [false]);
	                ProxyMgr.sync.checkCloudExist(checkHandler);
	            }
	        }
	        else {
	            ModalConfirm.info(LanCfg.get("20018001"));
	        }
	    }
	    static onCheckCloudExist(isLocalEmpty, msg) {
	        let isExist = false;
	        for (let item of msg.module) {
	            if (item.moduleData) {
	                isExist = true;
	                break;
	            }
	        }
	        if (!isExist) {
	            this.generateNewGame();
	            this.onGameStateLoaded();
	            Debug.log("[SaveLoad] LOAD GAME STATE: no data found in local storage! Is this a new user?");
	        }
	        else {
	            if (isLocalEmpty) {
	                SyncLocalMgr.ins().inject(msg.module);
	                this.injectStateAndCallLoaded();
	            }
	            else {
	                if (this.isCloundBetter(msg.module)) {
	                    SyncLocalMgr.ins().inject(msg.module);
	                    this.injectStateAndCallLoaded();
	                }
	                else {
	                    this.injectStateAndCallLoaded();
	                }
	            }
	        }
	    }
	    static injectStateAndCallLoaded() {
	        this.injectGameState();
	        this.onGameStateLoaded();
	    }
	    static injectGameState() {
	        let task = new SyncTask(SyncType.Offline);
	        let keys = SyncLocalMgr.ins().getItemKeys();
	        keys.forEach(key => {
	            let item = SyncLocalMgr.ins().getItem(key);
	            let obj = SyncObj.createFromJsonStr(item);
	            let action = new SyncActionReplace(key, obj);
	            task.add(action);
	        });
	        SyncMgr.ins().applyTask(task);
	    }
	    static onGameStateLoaded() {
	        this.gameStateLoadedHandler && this.gameStateLoadedHandler.run();
	    }
	    static generateNewGame() {
	        let list = [];
	        let coreList = SaveLoadConst.coreList;
	        coreList.forEach(name => {
	            let reg = SaveLoadReg.map[name];
	            if (reg) {
	                let newGame = reg.newGame;
	                newGame && list.push(newGame());
	            }
	        });
	        this.saveList(list);
	    }
	    static getEssentialSaveObjects() {
	        let array = SaveLoadReg.essentialFiles;
	        return array.map(key => SaveLoadReg.saveAccessors[key] && SaveLoadReg.saveAccessors[key]());
	    }
	    static cloudSave(list, handler) {
	        list = list.filter(name => name !== SaveLoadConst.CLOUD_STATE);
	        if (list.length === 0) {
	            Debug.log("[Save] Nothing to upload to cloud");
	            handler && handler.runWith(true);
	            return;
	        }
	        SyncCloudMgr.ins().setPending(list);
	        this.cloudSavePending(handler);
	    }
	    static hasCoreFiles() {
	        return;
	    }
	    static getCloudPendingData() {
	        let data = {};
	        let pendingList = SyncCloudMgr.ins().getPending();
	        pendingList.forEach(id => {
	            let gameState = SyncMgr.ins().getState(id);
	            data[id] = gameState.stringify();
	        });
	        return data;
	    }
	    static cloudSavePending(handler) {
	        if (SyncCloudMgr.ins().canSave()) {
	            let cloudPendingData = this.getCloudPendingData();
	            Debug.log("[Save] Saving pending data to cloud.");
	            SyncCloudMgr.ins().save(cloudPendingData, handler);
	        }
	        else {
	            Debug.log("[Save] Cannot do cloud save pending right now.");
	        }
	    }
	    static AutoSaveLevel() {
	        console.time("AutoSaveLevel");
	        let currentLevel = Glob.currentLevel;
	        console.log("[Save] Autosaving level " + currentLevel.ID + "...");
	        let list = [];
	        list.push(SL_PlayExpand.getSaveData());
	        let saveDataObject = currentLevel.getSaveDataObject();
	        saveDataObject.id = this.getLevelFileName(currentLevel.ID);
	        list.push(saveDataObject);
	        let saveDataObject2 = currentLevel.data.GetSaveDataObject();
	        saveDataObject2.id = this.getLevelStatsFileName(currentLevel.ID);
	        list.push(saveDataObject2);
	        this.saveList(list);
	        console.timeEnd("AutoSaveLevel");
	    }
	    static AddItemToSavedBringHomeRewards(prefId) {
	        let defToCreateFrom = PropsCfg.get(prefId);
	        let saveData_DrawnObject = Thing.create_SaveData(defToCreateFrom);
	        this.AddItemToSavedBringHomeRewards2(saveData_DrawnObject);
	        return saveData_DrawnObject;
	    }
	    static AddItemToSavedBringHomeRewards2(reward) {
	        let saveData_BringHome = this.LoadBringHomeData();
	        if (saveData_BringHome == null) {
	            saveData_BringHome = new SL_BringHome();
	            saveData_BringHome.m_drawnObjectsData = [];
	        }
	        saveData_BringHome.m_drawnObjectsData.push(reward);
	        MsgCenter.notify(MsgConst.BRING_REWARD_CHANGED, saveData_BringHome.m_drawnObjectsData.length);
	        this.SaveBringHomeData(saveData_BringHome);
	    }
	    static LoadBringHomeData() {
	        return this.load(new SL_BringHome());
	    }
	    static SaveBringHomeData(data) {
	        this.save(data);
	    }
	    static SaveWorldMap(data) {
	        this.save(data);
	    }
	    static LoadWorldMap() {
	        return this.load(new SL_WorldMap());
	    }
	    static LoadTutorial() {
	        return this.load(new SL_Tutorial());
	    }
	    static SaveEssentials() {
	        let list = this.getEssentialSaveObjects();
	        this.saveList(list);
	    }
	    static SavePlayerData(data) {
	        this.save(data);
	    }
	    static ProcessRewardObjectForSave(obj) {
	        if (obj.isMonster) {
	            obj.asMonster.currentLevelID = 0;
	        }
	    }
	    static loadMonsters() {
	        return this.load(new SL_OwnedMonsters());
	    }
	    static saveMonsters(data) {
	        this.save(data);
	    }
	    static loadObjectStates() {
	        return this.load(new SL_ObjectDefState());
	    }
	    static getLevelStatsFileName(levelId) {
	        return levelId + "_stats";
	    }
	    static getLevelFileName(levelId) {
	        return levelId.toString();
	    }
	    static saveLevelData(data, levelId) {
	        this.saveByName(data, this.getLevelFileName(levelId));
	    }
	    static saveLevelStats(data, levelId) {
	        this.saveByName(data, this.getLevelStatsFileName(levelId));
	    }
	    static clearLevelData(levelId) {
	        this.ClearGameData(this.getLevelFileName(levelId));
	    }
	    static saveLevel(level) {
	        console.log("[Save] Saving level " + level.ID + ".");
	        let essentialSaveObjects = this.getEssentialSaveObjects();
	        let saveDataObject = level.getSaveDataObject();
	        saveDataObject.id = this.getLevelFileName(level.ID);
	        essentialSaveObjects.push(saveDataObject);
	        let saveDataObject2 = level.data.GetSaveDataObject();
	        saveDataObject2.id = this.getLevelStatsFileName(level.ID);
	        essentialSaveObjects.push(saveDataObject2);
	        this.saveList(essentialSaveObjects);
	    }
	    static saveCamp(camp) {
	        console.log("[Save] Saving camp.");
	        let essentialSaveObjects = this.getEssentialSaveObjects();
	        let saveDataObject = camp.getSaveDataObject();
	        saveDataObject.id = this.getLevelFileName(camp.ID);
	        essentialSaveObjects.push(saveDataObject);
	        let saveDataObject2 = camp.data.GetSaveDataObject();
	        saveDataObject2.id = this.getLevelStatsFileName(camp.ID);
	        essentialSaveObjects.push(saveDataObject2);
	        let homeStatsSaveDataObject = camp.getHomeStatsSaveDataObject();
	        homeStatsSaveDataObject.id = "_homeStats";
	        essentialSaveObjects.push(homeStatsSaveDataObject);
	        this.saveList(essentialSaveObjects);
	        if (this.has(SaveLoadConst.BRING_HOME)) {
	            this.ClearGameData(SaveLoadConst.BRING_HOME);
	        }
	    }
	    static loadLevelData(levelId) {
	        let level = this.loadByName(this.getLevelFileName(levelId), new SL_Level());
	        ;
	        if (level && level.boardData)
	            return level;
	        return null;
	    }
	    static loadLevelVersion(levelId) {
	        let levelData = this.loadByName(this.getLevelFileName(levelId), new SL_Level(true));
	        ;
	        let num = levelData ? levelData.mapVersion : null;
	        return num ? num : -1;
	    }
	    static clearTutorialData() {
	        this.ClearGameData("Tutorial");
	    }
	    static isCloundBetter(cloudModules) {
	        let localData = SyncLocalMgr.ins()["dict"];
	        let cloudData = SyncLocalMgr.ins().decode(cloudModules);
	        let localStars = this.countStarsQuick(localData);
	        let cloudStars = this.countStarsQuick(cloudData);
	        let localHomeScore = this.countHomeScoreQuick(localData);
	        let cloudHomeScore = this.countHomeScoreQuick(cloudData);
	        return cloudStars >= localStars && cloudHomeScore > localHomeScore;
	    }
	    static countStarsQuick(data) {
	        let count = 0;
	        let cfg = PConfig.getCfg("Levels.json");
	        for (let key in cfg) {
	            let levelData = data[key];
	            if (levelData) {
	                levelData = JSON.parse(levelData);
	                if (levelData[4]) {
	                    let goals = levelData[4];
	                    for (let idx in goals) {
	                        let goal = goals[idx];
	                        if (goal && goal[2]) {
	                            count++;
	                        }
	                    }
	                }
	            }
	        }
	        return count;
	    }
	    static countHomeScoreQuick(data) {
	        let homeId = Level.ID_LEVEL_HOME;
	        let levelData = data[homeId];
	        if (levelData) {
	            levelData = JSON.parse(levelData);
	            return levelData && levelData[0] ? levelData[0] : 0;
	        }
	        return 0;
	    }
	}
	SaveLoad.GameRecompiled_SAVE_DISABLED = false;

	class OwnedMonsterMgr {
	    static init(data) {
	        if (this._loadedMonstersData != null) {
	            console.log("[OwnedMonsters] Initializing OwnedMonsters when we already have loaded owned monsters data!");
	        }
	        if (data && data.ownedMonsters) {
	            this._loadedMonstersData = data;
	        }
	        else {
	            let message = "[OwnedMonsters] Initialized OwnedMonsters with null data. This should only happen for a new user.";
	            console.log(message);
	            this._loadedMonstersData = new SL_OwnedMonsters();
	        }
	    }
	    static shouldSaveMonsterToNormalLevelFile(monster) {
	        if (!monster.shouldSave()) {
	            return false;
	        }
	        if (monster.homeLevelID) {
	            return false;
	        }
	        if (!monster.currentLevelID) {
	            return false;
	        }
	        return true;
	    }
	    static getSaveData() {
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to get save data from OwnedMonsters, but loaded monster data is null!");
	        }
	        return this._loadedMonstersData;
	    }
	    static tryAddMonster(monster) {
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to add monster before initializing: " + monster.cfg.cid);
	        }
	        else if (!this._loadedMonstersData.ownedMonsters[monster.guid]) {
	            let saveDataObject = monster.getSaveDataObject();
	            this._loadedMonstersData.ownedMonsters[monster.guid] = saveDataObject;
	        }
	    }
	    static tryRemoveMonster(monster) {
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to remove monster before initializing: " + monster.cfg.cid);
	        }
	        else if (this._loadedMonstersData.ownedMonsters[monster.guid]) {
	            delete this._loadedMonstersData.ownedMonsters[monster.guid];
	        }
	    }
	    static getMonstersWithCurrentLevel(currentLevelID) {
	        let list = [];
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to get monster before initializing: " + currentLevelID);
	            return list;
	        }
	        for (let i in this._loadedMonstersData.ownedMonsters) {
	            let item = this._loadedMonstersData.ownedMonsters[i];
	            if (item && item.monsterData && item.monsterData.currentLevelID == currentLevelID) {
	                list.push(item);
	            }
	        }
	        return list;
	    }
	    static updateMonsterData(monsterToUpdate) {
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to update monster before initializing: " + monsterToUpdate);
	        }
	        else if (this.monsterBelongsInOwnedList(monsterToUpdate)) {
	            this.tryAddMonster(monsterToUpdate);
	            this._loadedMonstersData.ownedMonsters[monsterToUpdate.guid] = monsterToUpdate.getSaveDataObject();
	        }
	        else {
	            this.tryRemoveMonster(monsterToUpdate);
	        }
	    }
	    static updateAllOwnedMonsterDataFromCurrentLevel() {
	        for (let monster of Monster.monsters) {
	            this.updateMonsterData(monster);
	        }
	    }
	    static monsterBelongsInOwnedList(monster) {
	        if (!monster.shouldSave()) {
	            return false;
	        }
	        if (!monster.homeLevelID) {
	            return false;
	        }
	        return true;
	    }
	    static getMonsterOfTypeFromHomeArea(type, allowMonstersThatAreCarryingSomething) {
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to get monster from home area before initializing: " + type);
	            return null;
	        }
	        let num = MathUtil.randInt(0, this._loadedMonstersData.ownedMonstersCount - 1);
	        let saveData_DrawnObject = null;
	        let num2 = -1;
	        for (let i in this._loadedMonstersData.ownedMonsters) {
	            let monster = this._loadedMonstersData.ownedMonsters[i];
	            num2++;
	            if (num2 >= num && this.isMonsterAtIndexOfTypeAndAtHome(num2, type, monster) && (allowMonstersThatAreCarryingSomething || !monster.monsterData.exists_carryObject)) {
	                saveData_DrawnObject = monster;
	                break;
	            }
	        }
	        if (saveData_DrawnObject == null) {
	            num2 = -1;
	            {
	                for (let i in this._loadedMonstersData.ownedMonsters) {
	                    let monster = this._loadedMonstersData.ownedMonsters[i];
	                    num2++;
	                    if (num2 > num) {
	                        return saveData_DrawnObject;
	                    }
	                    if (this.isMonsterAtIndexOfTypeAndAtHome(num2, type, monster) && (allowMonstersThatAreCarryingSomething || !monster.monsterData.exists_carryObject)) {
	                        return monster;
	                    }
	                }
	                return saveData_DrawnObject;
	            }
	        }
	        return saveData_DrawnObject;
	    }
	    static isMonsterAtIndexOfTypeAndAtHome(index, type, objData) {
	        if (objData.monsterData.isAtHome) {
	            let monsterDefinition = PropsCfg.get(objData.prefabName);
	            if (monsterDefinition != null && (type == MonsterTypeID.RANDOM || monsterDefinition.monsterType == type)) {
	                return true;
	            }
	        }
	        return false;
	    }
	    static unSummon(monster) {
	        if (this._loadedMonstersData == null) {
	            console.error("[OwnedMonsters] Tried to unsummon monster before initializing");
	            return;
	        }
	        monster.currentLevelID = monster.homeLevelID;
	        let saveData_DrawnObject = this._loadedMonstersData.ownedMonsters[monster.guid];
	        saveData_DrawnObject.monsterData.currentLevelID = monster.homeLevelID;
	        this._loadedMonstersData.ownedMonsters[monster.guid] = saveData_DrawnObject;
	        SaveLoad.saveMonsters(this._loadedMonstersData);
	        Globals.createFromPrefabAt("ParticleRoot_UnSummon", monster.transform.position);
	        SoundMgr.ins().playSound("m35");
	        FloatingText.CreateInfoText(LanCfg.get("10010007"), InfoTextColorID.Green, monster);
	        Thing.createMatchParticlesFor(monster);
	        if (!monster.trySetToSetToDying(DeathReasonID.UnSummoned, false, 5)) {
	            monster.destroyDrawnObject(DeathReasonID.UnSummoned);
	        }
	    }
	}

	class DragonIntent {
	    set(target, actionType) {
	        this.target = target;
	        this.targetDef = target.cfg;
	        this.actionType = actionType;
	    }
	    itemsAvailableForIntent(type) {
	        if (!Glob.inHome) {
	            return false;
	        }
	        if (type != this.actionType) {
	            return false;
	        }
	        if (this.targetDef == null) {
	            return false;
	        }
	        return ThingList.lists[this.targetDef.cid] != null;
	    }
	}

	class CompKeyIndicator extends Laya.Script3D {
	    makeDead() {
	    }
	    makeAlive() {
	    }
	    showInfoPopup() {
	    }
	    showDeadInfoPopup() {
	    }
	    validUnlockPending() {
	    }
	    validUnlockPending_Ended() {
	    }
	}

	class CompKeyObject extends Laya.Script3D {
	    onAwake() {
	        this.setupSilhouetteVisuals();
	        let component = this.owner;
	        this.keyThing = Thing.create(10424);
	        let totalBounds = Globals.getTotalBounds(component.body);
	        this.keyThing.transform.position = new Laya.Vector3(component.x, totalBounds.getMax().y + 0.4, -2);
	        Glob.map.thingLayer.addChild(this.keyThing);
	        this.keyIndicator = this.keyThing.addComponent(CompKeyIndicator);
	    }
	    setupSilhouetteVisuals() {
	    }
	    OnDestroy() {
	        if (this.keyThing) {
	            this.keyThing.destroyDrawnObject();
	        }
	    }
	    makeDead() {
	        this.keyIndicator.makeDead();
	    }
	    makeAlive() {
	        this.keyIndicator.makeAlive();
	    }
	    validUnlockPending() {
	        this.keyIndicator.validUnlockPending();
	    }
	    validUnlockPending_Ended() {
	        this.keyIndicator.validUnlockPending_Ended();
	    }
	}

	class CloudDungeon {
	    static fitsKeyhole(possibleKey, keyholeCell) {
	        return possibleKey.cfg.cid == keyholeCell.keyObjectDefinition.cid;
	    }
	    static isCloudDungeonFogId(fogId) {
	        let name = FogGroupID[fogId];
	        return CloudDungeonFogGroupID[name] != null;
	    }
	    static findKeyholeCellForFogId(fogId) {
	        for (let allCell of Glob.cellLayer.allCells) {
	            if (allCell.isKeyhole && allCell.keyedFogGroupId == fogId) {
	                return allCell;
	            }
	        }
	        return null;
	    }
	    static makeCellKeyhole(metaCell, fogId, keyDefinition) {
	        let anchor = metaCell.anchor;
	        anchor.isKeyhole = true;
	        anchor.keyedFogGroupId = fogId;
	        anchor.keyObjectDefinition = keyDefinition;
	        anchor.keyObjectSilhoutte = this.createSilhoutte(keyDefinition.cid, metaCell);
	        if (anchor.dead) {
	            anchor.keyObjectSilhoutte.makeDead();
	        }
	    }
	    static createSilhoutte(prefabName, atCell) {
	        let drawnObject = Thing.create(prefabName);
	        drawnObject.setRootPosition(atCell.x, atCell.y);
	        drawnObject.initAsKeyhole();
	        let component_KeyObject = drawnObject.addComponent(CompKeyObject);
	        drawnObject.keyObjectComp = component_KeyObject;
	        component_KeyObject.drawnObject = drawnObject;
	        return component_KeyObject;
	    }
	    static isThereAnyCellWithFogAndDead() {
	        let death = Glob.map.mapData.death;
	        for (let i = 0; i < death.length; i++) {
	            for (let j = 0; j < death[i].length; j++) {
	                let tiledTile = death[i][j];
	                if (tiledTile != null && tiledTile.deadLevelValue != 0 && !Glob.map.fogMap.isClearAt(i, j)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    static unlockCloudDungeon(fogId) {
	        if (!this.isCloudDungeonFogId(fogId) || Glob.map.fogMap == null || Glob.map.fogMap.fogAreas == null || !Glob.map.fogMap.fogAreas[fogId]) {
	            return;
	        }
	        let fog = Glob.map.fogMap.fogAreas[fogId];
	        fog.unfog();
	        Globals.createFromPrefabAt("ParticleRoot_ChestUnlock", fog.owner.transform.position);
	        let cell = this.findKeyholeCellForFogId(fogId);
	        if (cell != null) {
	            Globals.createFromPrefabAt("ParticleRoot_KeyholeUnlock_CloudDungeon", cell.occupant.drawnObjectPosition);
	            cell.isUnlocked = true;
	            if (cell.keyObjectSilhoutte != null) {
	                cell.keyObjectSilhoutte.drawnObject.destroyDrawnObject();
	                cell.keyObjectSilhoutte = null;
	                cell.tryRemovePendingKeyholeParticles();
	            }
	        }
	    }
	}

	class BaseAnimCfg {
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = PConfig.getCfg("BaseAnim.json");
	        }
	        return this._cfg;
	    }
	    static get(id) {
	        return this.cfg[id];
	    }
	}

	var ProgDailyChestUI = ui.data.module.progress.ProgDailyChestUI;
	class ProgDailyChest extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgDailyChestUI();
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    setLabel(v) {
	        this.prog.lbl.text = v;
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	    static create() {
	        return Laya.Pool.createByClass(ProgDailyChest);
	    }
	}

	class GGDailyChestView extends TiScript3D {
	    constructor() {
	        super(...arguments);
	        this.drawnObject = null;
	        this.isHook = false;
	    }
	    onAwake() {
	        this.drawnObject = this.owner;
	        this.meter = ProgDailyChest.create();
	    }
	    onSlowUpate() {
	        if (!this.drawnObject.sp)
	            return;
	        let isUnlocked = DailyChestMgr.ins().isDailyChestUnlocked();
	        if (!this.chest) {
	            this.chest = this.drawnObject.sp.getChildAt(1);
	        }
	        this.chest.active = isUnlocked;
	        if (!this.effectObj) {
	            this.effectObj = this.drawnObject.sp.getChildAt(2);
	        }
	        this.effectObj.active = isUnlocked;
	        if (this.meter && !this.isHook) {
	            this.meter.setHook(this.drawnObject.sp, 0, 1);
	            this.isHook = true;
	        }
	        this.updateProgressMeter();
	    }
	    updateProgressMeter() {
	        if (this.meter == null) {
	            return;
	        }
	        let countSeconds = DailyChestMgr.ins().getCountTime();
	        let fractionOfTimeLeft = DailyChestMgr.ins().getFractionOfTimeLeft();
	        fractionOfTimeLeft = Math.max(0, fractionOfTimeLeft);
	        this.meter.setValue(fractionOfTimeLeft);
	        if (countSeconds < 0) {
	            let chestIndex = DailyChestMgr.ins().getPickTimes() + 1;
	            this.meter.setLabel(LanCfg.get("20010101") + " (#" + chestIndex + ")");
	        }
	        else {
	            this.meter.setLabel(StringUtil.format(LanCfg.get("20010102"), TimeMgr.ins().formatTimer2(countSeconds)));
	        }
	    }
	    onDestroy() {
	        this.meter.dispose();
	    }
	}

	class Component_TomeTipObj extends TiScript3D {
	    onAwake() {
	        this.drawnObject = this.owner;
	    }
	    onSlowUpate() {
	        if (this.m_bouncingArrow) {
	            if (Glob.currLevelData.hasTomeTip) {
	                this.m_tomeTip = TomeTip.getTipByKey(Glob.currLevelData.cfg.TomeTipID);
	                if (!Glob.tutorialOn && !this.m_tomeTip.isForceEvenIfTutorialIsOff) {
	                    this.m_bouncingArrow.active = false;
	                }
	                else {
	                    this.m_bouncingArrow.active = Glob.currLevelData.cfg.ShowArrowOnTomeTip && !this.m_tomeTip.EverViewed;
	                }
	            }
	            else {
	                GuiMgr.errorMessage("TomeTipObj is reporting that there is no TomeTip set for this level in Level Data!");
	                this.enabled = false;
	            }
	        }
	        else {
	            if (!this.drawnObject.sp)
	                return;
	            this.m_bouncingArrow = this.drawnObject.sp.getChildByName("quest");
	        }
	    }
	    onEnable() {
	        if (this.m_tomeTip != null) {
	            this.UpdateQuestionMarkAndEffectsState();
	        }
	    }
	    UpdateQuestionMarkAndEffectsState() {
	        let active = false;
	        if (!this.m_tomeTip.EverViewed && (Glob.tutorialOn || this.m_tomeTip.isForceEvenIfTutorialIsOff)) {
	            active = true;
	            if (this.m_tomeTip.isLockInput) {
	            }
	        }
	    }
	    DrawnObjectTapped() {
	        if (this.m_tomeTip != null) {
	            this.m_tomeTip.show(this, true);
	        }
	    }
	    CompletedTheTip() {
	        this.drawnObject.deselect();
	        if (this.m_tomeTip.isDeleteOnDone) {
	            this.drawnObject.destroyDrawnObject(DeathReasonID.PurposeFulfilled);
	        }
	    }
	}

	class CompBaseAnimTween extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.randomAnimDelayMax = 0;
	        this.animTimePos = 0;
	        this.tweenPosY = 0;
	        this.tweenPosX = 0;
	        this.posEase = EaseType.easeInOutQuad;
	        this.animTimeRot = 0;
	        this.tweenRot = 0;
	        this.rotLoop = LoopType.pingPong;
	        this.rotEase = EaseType.easeInOutQuad;
	        this.animTimeScale = 0;
	        this.tweenScale = 0;
	        this.mEnabled = true;
	        this.numFramesWithNoAnim = 0;
	    }
	    onStart() {
	        this.tweenScale = 0;
	        this.cacheOwnerAndDoSetupIfNeeded();
	    }
	    cacheOwnerAndDoSetupIfNeeded() {
	        if (this.setupComplete) {
	            return;
	        }
	        if (this.thing == null) {
	            this.thing = this.owner;
	        }
	        if (this.randomAnimDelayMax > 0) {
	            this.delayTimer = new Clock();
	            this.delayTimer.setRange(new Range(0, this.randomAnimDelayMax));
	        }
	        else {
	            this.delayTimer = new Clock(3);
	        }
	        if (this.rotLoop == LoopType.loop) {
	            this.rotEase = EaseType.linear;
	        }
	        this.setupComplete = true;
	    }
	    onUpdate() {
	        if (!this.mEnabled) {
	            return;
	        }
	        if (this.isAnimationStopped()) {
	            if (this.delayTimer != null && this.delayTimer.going) {
	                this.delayTimer.update(Glob.deltaTime);
	                return;
	            }
	            this.numFramesWithNoAnim++;
	            if (this.numFramesWithNoAnim >= 5) {
	                this.startAnim();
	            }
	        }
	        else {
	            this.numFramesWithNoAnim = 0;
	            this.update_Jitter();
	        }
	    }
	    isAnimationStopped() {
	        return this.thing.atOriginalLocalTransform && iTween.Count(this.thing.body) == 0 && iTween.Count(this.thing.localPositionAnimTarget) == 0 && (this.jitterTimer == null || !this.jitterReady);
	    }
	    update_Jitter() {
	        if (this.jitterTimer != null) {
	            this.jitterTimer.update(Glob.deltaTime);
	            if (!this.jitterTimer.going) {
	                Tween.ShakePosition(this.thing.localPositionAnimTarget, "BaseJitter", this.jitterAmount.x, this.jitterAmount.y);
	                this.jitterTimer.reset();
	            }
	        }
	    }
	    startAnim() {
	        this.cacheOwnerAndDoSetupIfNeeded();
	        if (this.tweenPosX != 0 || this.tweenPosY != 0) {
	            let num = 1;
	            if (this.pullOverallMovementScaleFactorFromRoot) {
	                let localScale = this.thing.transform.localScale;
	                num = localScale.x;
	            }
	            Tween.MoveBy2(this.thing, "BaseAnimTween", this.animTimePos, this.tweenPosX * num, this.tweenPosY * num, LoopType.pingPong, this.posEase);
	        }
	        if (this.tweenRot != 0) {
	            Tween.RotateBy2(this.thing, "BaseAnimTween", this.animTimeRot, this.tweenRot, this.rotLoop, this.rotEase);
	        }
	        if (this.tweenScale != 0) {
	            Tween.ScaleBy2(this.thing, "BaseAnimTween", this.animTimeScale, this.tweenScale, LoopType.pingPong, EaseType.easeInOutQuad);
	        }
	        if (this.jitterAmount) {
	            if (this.jitterTimer == null) {
	                this.jitterTimer = new Clock();
	                this.jitterTimer.setRange(new Range(this.jitterDelayRange.x, this.jitterDelayRange.y));
	            }
	            this.jitterReady = true;
	        }
	        if (this.delayTimer != null) {
	            this.delayTimer.reset();
	        }
	    }
	    stopAnim() {
	        this.cacheOwnerAndDoSetupIfNeeded();
	        if (this.tweenPosX != 0 || this.tweenPosY != 0) {
	            iTween.StopByName2(this.thing.localPositionAnimTarget, "BaseAnimTween");
	        }
	        if (this.tweenRot != 0 || this.tweenScale != 0) {
	            iTween.StopByName2(this.thing, "BaseAnimTween");
	        }
	        this.stopJitter();
	        if (this.delayTimer != null) {
	            this.delayTimer.reset();
	        }
	    }
	    stopJitter() {
	        this.jitterReady = false;
	        if (this.jitterAmount) {
	            iTween.StopByName2(this.thing.localPositionAnimTarget, "BaseJitter");
	        }
	    }
	    enableAnim() {
	        this.mEnabled = true;
	    }
	    disableAnim() {
	        if (this.mEnabled) {
	            this.stopAnim();
	            this.mEnabled = false;
	        }
	    }
	}

	class CompBurstoTarget extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.acceleration = new Laya.Vector3();
	        this.frame = 0;
	    }
	    init(burstTarget, startPosition) {
	        this.init2(burstTarget, startPosition, CompBurstoTarget.burstVelocityComponentRange.min, CompBurstoTarget.burstVelocityComponentRange.max, CompBurstoTarget.accel, CompBurstoTarget.maxSpeed);
	    }
	    init2(burstTarget, startPosition, burstVelocityVariationMin, burstVelocityVariationMax, acceleration, maxSpeed) {
	        if (burstTarget == null) {
	            GuiMgr.errorMessage("BurstToTarget Component got a null cell as a target in Init()");
	        }
	        else {
	            this.burstTarget = burstTarget;
	        }
	        this._owner = this.owner;
	        this._owner.setRootPosition(startPosition.x, startPosition.y, startPosition.z);
	        this.burstVelocityComponentRange = new Range(burstVelocityVariationMin, burstVelocityVariationMax);
	        this.accel = acceleration;
	        this.maxSpeed = maxSpeed;
	        this.velocity = new Laya.Vector3(this.burstVelocityComponentRange.random(), this.burstVelocityComponentRange.random(), 0);
	        this.initialized = true;
	    }
	    setNewTarget(target) {
	        if (target.parent == null) {
	            GuiMgr.errorMessage("BurstToTarget Component got null as a target in SetNewTarget()");
	        }
	        else {
	            this.burstTarget = target;
	            if (this._owner && this.burstTarget && this.burstTarget.parent) {
	                let dis = MathUtil.getDistance(this._owner.x, this._owner.y, this.burstTarget.transform.position.x, this.burstTarget.transform.position.y);
	                if (dis < 0.8) {
	                    this.maxSpeed = 1.5;
	                }
	                else if (dis < 1.2) {
	                    this.maxSpeed = 2.5;
	                }
	                else if (dis < 2) {
	                    this.maxSpeed = 3;
	                }
	            }
	        }
	    }
	    onUpdate() {
	        if (Glob.isSimulationPaused()) {
	            return;
	        }
	        if (!this.initialized) {
	            GuiMgr.errorMessage("Component_BurstToTarget was never initialized.");
	        }
	        else if (this.burstTarget && this.burstTarget.parent) {
	            this.frame++;
	            Laya.Vector3.subtract(this.burstTarget.transform.position, this._owner.transform.position, this.acceleration);
	            this.acceleration.z = this.burstTarget.transform.position.y - this._owner.transform.position.y;
	            Laya.Vector3.normalize(this.acceleration, this.acceleration);
	            this.acceleration.x = this.acceleration.x * this.accel * Glob.deltaTime;
	            this.acceleration.y = this.acceleration.y * this.accel * Glob.deltaTime;
	            this.acceleration.z = this.acceleration.z * this.accel * Glob.deltaTime;
	            Laya.Vector3.add(this.velocity, this.acceleration, this.velocity);
	            if (MathUtil.magnitudeV3(this.velocity) > this.maxSpeed) {
	                Laya.Vector3.normalize(this.velocity, this.velocity);
	                this.velocity.x *= this.maxSpeed;
	                this.velocity.y *= this.maxSpeed;
	                this.velocity.z *= this.maxSpeed;
	            }
	            let x = this.velocity.x * Glob.deltaTime;
	            let y = this.velocity.y * Glob.deltaTime;
	            this._owner.moveRootPosition(x, y);
	        }
	    }
	    reachedTarget() {
	        if (this.burstTarget == null || this.burstTarget.parent == null) {
	            return false;
	        }
	        if (this._owner.isParentNull)
	            return;
	        let num = MathUtil.getDistance(this._owner.x, this._owner.y, this.burstTarget.transform.position.x, this.burstTarget.transform.position.y);
	        return MathUtil.magnitudeV3(this.velocity) * Glob.deltaTime + this.frame / 500 + CompBurstoTarget.hitTargetTolerance > num;
	    }
	}
	CompBurstoTarget.burstVelocityComponentRange = new Range(-2, 2);
	CompBurstoTarget.hitTargetTolerance = 0.05;
	CompBurstoTarget.accel = 10;
	CompBurstoTarget.maxSpeed = 4;

	var ProgBuildUI = ui.data.module.progress.ProgBuildUI;
	class ProgBuild extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgBuildUI();
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    setLabel(v) {
	        this.prog.lbl.text = v;
	    }
	    activateSpeedUp() {
	        this.prog.spdBtn.visible = false;
	    }
	    tryInitSpeedUpButton(caller, listener) {
	        this.prog.spdBtn.on(Laya.Event.CLICK, caller, listener);
	        if (!Level.levelSaveFileExists(Level.ID_LEVEL_HOME)) {
	            this.prog.spdBtn.visible = false;
	        }
	    }
	    dispose() {
	        super.dispose();
	        this.prog.spdBtn.visible = true;
	        this.prog.spdBtn.offAll();
	        Laya.Pool.recoverByClass(this);
	    }
	}

	class CompConstructible extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.speedUpCost = 99;
	    }
	    onAwake() {
	        this.foundation = this.owner;
	    }
	    init(vo) {
	        this.targetDefinition = vo.objectDef;
	        this.speedUpCost = vo.speedCost;
	        this.timeLeft = new Clock(Clock.getSeconds(vo.h, vo.m, vo.s));
	    }
	    onUpdate() {
	        this.updatesSinceLastProgress++;
	        if (this.progressMeter) {
	            if (this.updatesSinceLastProgress > 2) {
	                this.progressMeter.detachProgressBar();
	                this.progressMeter = null;
	            }
	            else {
	                this.progressMeter.setValue(this.timeLeft.percentElapsed);
	            }
	        }
	    }
	    addProgress(secondsOfProgress) {
	        if (!this.done) {
	            this.updatesSinceLastProgress = 0;
	            if (this.progressMeter == null) {
	                this.progressMeter = this.foundation.attachProgressBar(ProgBuild, false);
	                this.progressMeter.tryInitSpeedUpButton(this, this.speedUpClicked);
	            }
	            this.timeLeft.update(secondsOfProgress);
	            if (this.timeLeft.done) {
	                this.finishBuilding();
	            }
	        }
	    }
	    speedUpClicked() {
	        let hander = new Laya.Handler(this, this.event_SpeedUpConfirmed);
	        PopupManager.show2(Presets.PurchaseConfirmation(LanCfg.get("10020021"), LanCfg.get("10020022"), ECurrency.Diamond, this.speedUpCost, true, null, false, hander, null));
	    }
	    event_SpeedUpConfirmed() {
	        if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, this.speedUpCost)) {
	            GuiMgr.errorMessage("Somehow confirmed a speed up when the player can't afford it. Cost: " + this.speedUpCost + " " + ECurrency.Diamond);
	            return;
	        }
	        this.spedUp = true;
	        if (this.progressMeter != null) {
	            this.progressMeter.activateSpeedUp();
	        }
	        Globals.createFromPrefabAt("ParticleRoot_SpeedUp", this.foundation.drawnObjectPosition);
	        this.timeLeft.timeTravelTo(1);
	        SoundMgr.ins().playSound("m84");
	        CurrencyMgr.ins().charge2(ECurrency.Diamond, this.speedUpCost, EnumEconSpendType.SPEEDUP, this.foundation.cfg, this.foundation.guid);
	    }
	    finishBuilding() {
	        this.done = true;
	        if (this.progressMeter) {
	            this.progressMeter.detachProgressBar();
	            this.progressMeter = null;
	        }
	        this.foundation.destroyAndReplaceWith(this.targetDefinition, true);
	        SoundMgr.ins().playSound("m89");
	        if (this.spedUp) {
	            Tween.ShakeCamera_Default();
	        }
	    }
	    getSaveDataObject() {
	        let saveData_Constructible = new SL_Constructible();
	        saveData_Constructible.targetPrefabName = this.targetDefinition.cid;
	        saveData_Constructible.timeLeft = this.timeLeft.getSaveDataObject();
	        saveData_Constructible.speedUpCost = this.speedUpCost;
	        return saveData_Constructible;
	    }
	    initFromSaveData(data) {
	        this.targetDefinition = PropsCfg.get(data.targetPrefabName);
	        this.timeLeft = new Clock();
	        this.timeLeft.initFromSaveData(data.timeLeft);
	        this.speedUpCost = data.speedUpCost;
	    }
	}

	class UpgradeConfirmationDefinition extends ModalDialogDefinition {
	    constructor(fromDefinition, toDefinition, bonusItem, bonusQuantity, upgradeCost) {
	        super(UiConst.ModalUpgradeConfirm);
	        this.FromDefinition = fromDefinition;
	        this.ToDefinition = toDefinition;
	        this.BonusItem = bonusItem;
	        this.BonusQuantity = bonusQuantity;
	        this.UpgradeCost = upgradeCost;
	    }
	}

	var ProgUpgradeUI = ui.data.module.progress.ProgUpgradeUI;
	class ProgUpgrade extends ProgressMeter {
	    constructor() {
	        super();
	        this.initUI();
	    }
	    initUI() {
	        this.prog = new ProgUpgradeUI();
	        this.addChild(this.prog);
	        this.prog.bgImg.on(Laya.Event.CLICK, this, this.onUpgradeClicked);
	    }
	    init(upgradeCost) {
	        this.prog.amountLbl.text = upgradeCost.toString();
	    }
	    setTarget(target) {
	        this._target = target;
	    }
	    onUpgradeClicked() {
	        let comp = this._target.getComponent(CompDirectUpgrade);
	        if (comp)
	            comp.onUpgradeClicked();
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	}

	class CompDirectUpgrade extends TiScript3D {
	    onAwake() {
	        this.drawnObject = this.owner;
	        this.directUpgradeUI = Laya.Pool.createByClass(ProgUpgrade);
	        this.directUpgradeUI.visible = false;
	        this.directUpgradeUI.setTarget(this.drawnObject);
	    }
	    onSlowUpate() {
	        if (this.isInitSp)
	            return;
	        if (!this.drawnObject.sp)
	            return;
	        this.isInitSp = true;
	        this.progHook = this.drawnObject.sp.getChildByName("Prog");
	        if (this.directUpgradeUI)
	            this.directUpgradeUI.setHook(this.progHook);
	    }
	    getDirectUpgradeUI() {
	        return this.directUpgradeUI;
	    }
	    onDestroy() {
	        if (this.directUpgradeUI != null) {
	            this.directUpgradeUI.dispose();
	            this.directUpgradeUI = null;
	        }
	    }
	    onUpgradeClicked() {
	        if (this._isTempleUpgrading)
	            return;
	        let nextInChain = this.drawnObject.cfg.chainObj.getNextAfter(this.drawnObject.cfg);
	        this.nextInChain = nextInChain;
	        let upgradeConfirmationDefinition = new UpgradeConfirmationDefinition(this.drawnObject.cfg, nextInChain, PropsCfg.get(nextInChain.spawnDefinition.spawnNearby_LootTable.getDefaultDropPrefId()), nextInChain.spawnDefinition.spawnCycleCharges * nextInChain.spawnDefinition.spawnCountPerPulse.min, this.drawnObject.strength >> 0);
	        PopupManager.show2(upgradeConfirmationDefinition.setCallbacks(Laya.Handler.create(this, this.confirmCallback), Laya.Handler.create(this, this.closeCallback)));
	    }
	    confirmCallback() {
	        if (CurrencyMgr.ins().CanAfford(ECurrency.Diamond, this.drawnObject.strength >> 0)) {
	            this._isTempleUpgrading = true;
	            Laya.timer.once(1000, this, this.upgradeTempleAfterDelay);
	            SoundMgr.ins().playSound("m119");
	            this.directUpgradeUI.visible = false;
	        }
	        else {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	        }
	    }
	    closeCallback() {
	        this.directUpgradeUI.visible = false;
	    }
	    upgradeTempleAfterDelay() {
	        if (this.drawnObject.isParentNull)
	            return;
	        if (CurrencyMgr.ins().CanAfford(ECurrency.Diamond, this.drawnObject.strength >> 0)) {
	            CurrencyMgr.ins().charge2(ECurrency.Diamond, this.drawnObject.strength >> 0, EnumEconSpendType.UPGRADE_ZEN_TEMPLE, this.drawnObject.cfg, -1);
	            let newThing = this.drawnObject.destroyAndReplaceWith(this.nextInChain, false);
	            Globals.createFromPrefabAt("ParticleRoot_OpenChest2", newThing.body.transform.position);
	            Globals.createFromPrefabAt("ParticleRoot_EarthImpact", newThing.body.transform.position);
	            SoundMgr.ins().playSound("m60");
	            Tween.ShakeCamera_VerticalImpact();
	        }
	    }
	}

	class CompWorkableOn extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.totalWorkNeededToFinish = 1;
	    }
	    get percentDone() {
	        return this.workProgress / this.totalWorkNeededToFinish;
	    }
	    get done() {
	        return this.workProgress >= this.totalWorkNeededToFinish;
	    }
	    init(workNeededToFinish) {
	        this.totalWorkNeededToFinish = workNeededToFinish;
	        this.thing = this.owner;
	    }
	    onUpdate() {
	        this.updatesSinceLastProgress++;
	        if (this.progressMeter && this.updatesSinceLastProgress > 2) {
	            this.progressMeter.detachProgressBar();
	            this.progressMeter = null;
	        }
	        this.updateProgressMeter();
	    }
	    addWorkProgress(progress) {
	        this.workProgress += progress;
	        if (!this.done) {
	            this.updatesSinceLastProgress = 0;
	            if (this.progressMeter == null) {
	                this.progressMeter = this.thing.attachProgressBar(ProgBuild, false);
	            }
	        }
	    }
	    updateProgressMeter() {
	        if (this.progressMeter) {
	            this.progressMeter.setValue(this.percentDone);
	        }
	    }
	}

	class CompDragoniaMonument extends Laya.Script3D {
	    get hasNextMonument() {
	        return this.nextMonumentDef != null;
	    }
	    init() {
	        this.initialized = true;
	        this.thing = this.owner;
	        this.workComponent = this.thing.getComponent(CompWorkableOn);
	        this.chainPosition = this.thing.cfg.chainPosition;
	        if (CompDragoniaMonument.workRequiredPerLevel.length <= this.thing.cfg.chainPosition) {
	            this.workNeeded = CompDragoniaMonument.workRequiredPerLevel[CompDragoniaMonument.workRequiredPerLevel.length - 1];
	            GuiMgr.errorMessage("Hit the end of the Work Required per Level array in DragonMonument component for Monument with chain position: " + this.thing.cfg.chainPosition);
	        }
	        else {
	            this.workNeeded = CompDragoniaMonument.workRequiredPerLevel[this.thing.cfg.itemLevel];
	        }
	        this.workComponent.init(this.workNeeded);
	        let discoveryChain = DiscoveryChain.discoveryChains[CompDragoniaMonument.K_CHAIN_NAME];
	        if (discoveryChain.chainSize > this.chainPosition + 1) {
	            this.nextMonumentDef = discoveryChain.chain[this.chainPosition + 1];
	        }
	    }
	    onUpdate() {
	        if (!this.initialized) {
	            this.init();
	        }
	        if (this.workComponent.done && this.hasNextMonument) {
	            this.thing.destroyAndReplaceWith(this.nextMonumentDef, false);
	        }
	    }
	    tapped() {
	        let hander = new Laya.Handler(this, this.event_SendConfirmed);
	        PopupManager.show2(Presets.Simple2Button(LanCfg.get("10020023"), LanCfg.get("10020024"), LanCfg.get("10020025"), true, hander));
	    }
	    event_SendConfirmed() {
	        Monster.sendAllAvailableToWorkOn(this.thing);
	    }
	}
	CompDragoniaMonument.K_CHAIN_NAME = 555;
	CompDragoniaMonument.workRequiredPerLevel = [
	    0,
	    10,
	    100,
	    200,
	    400,
	    1000,
	    2000,
	    3500,
	    5000,
	    7500,
	    10000,
	    15000,
	    25000,
	    50000
	];

	class MapUtil {
	    static init() {
	        this.AD_BC = this.A * this.D - this.B * this.C;
	    }
	    static getWx(gx, gy) {
	        return this.A * gx + this.B * gy;
	    }
	    static getWy(gx, gy) {
	        return this.C * gx + this.D * gy;
	    }
	    static getWxL(gx, gy) {
	        return this.getWx(gx + 0.5, gy + 0.5);
	    }
	    static getWyL(gx, gy) {
	        return this.getWy(gx + 0.5, gy + 0.5);
	    }
	    static getGx(wx, wy, isInt = true) {
	        let v = (this.D * wx - this.B * wy) / this.AD_BC;
	        if (isInt)
	            v = v >> 0;
	        return v;
	    }
	    static getGy(wx, wy, isInt = true) {
	        let v = (this.A * wy - this.C * wx) / this.AD_BC;
	        if (isInt)
	            v = v >> 0;
	        return v;
	    }
	    static getCellZ(wy) {
	        return this.Z_CELL + wy * 5;
	    }
	    static getPropZ(wy) {
	        return this.Z_THING + wy * 5;
	    }
	    static getIndex(gx, gy, width) {
	        return gy * width + gx;
	    }
	    static getWdisX(dis) {
	        return dis * this.wdisPerX;
	    }
	}
	MapUtil.A = -1.202107;
	MapUtil.B = 0.49975;
	MapUtil.C = 0.261094;
	MapUtil.D = 0.60745;
	MapUtil.CAMERA_NEAR = -100;
	MapUtil.CAMERA_FAR = 1000;
	MapUtil.Z_CELL = 850;
	MapUtil.Z_THING = 800;
	MapUtil.wdisPerX = 1 / 113.089;
	MapUtil.wdisPerY = 1 / 15.7068;

	var ProgHealUI$1 = ui.data.module.progress.ProgYunUI;
	class ProgYun extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgHealUI$1;
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	    static create() {
	        return Laya.Pool.createByClass(ProgYun);
	    }
	}

	class CompFogArea extends TiScript3D {
	    constructor() {
	        super(...arguments);
	        this.fog = [];
	        this.fogAreaNeighbors = {};
	        this.isInitSp = false;
	    }
	    init(fogID, currentLevel) {
	        this.drawnObject = this.owner;
	        this.fogGroup = fogID;
	        if (!currentLevel.fogGoals[fogID]) {
	            this.isKeyedFog = true;
	        }
	        else {
	            this.fogGoal = currentLevel.fogGoals[fogID];
	        }
	        return true;
	    }
	    onSlowUpate() {
	        if (this.isInitSp)
	            return;
	        if (!this.drawnObject.sp)
	            return;
	        this.isInitSp = true;
	        this.infoIcon = this.drawnObject.sp.getChildByName("Info");
	        this.exclamationIcon = this.drawnObject.sp.getChildByName("Excl");
	        let text = this.drawnObject.sp.getChildByName("Text");
	        this.textObjectToggler = Text3DMgr.ins().createYun();
	        this.tapToUnlockToggler = Text3DMgr.ins().createYun();
	        this.tapToUnlockToggler.label = LanCfg.get("10020010");
	        if (text) {
	            text.addChild(this.textObjectToggler);
	            text.addChild(this.tapToUnlockToggler);
	        }
	        this.tapToUnlockToggler.transform.localPositionY = -0.3;
	        this.progHook = this.drawnObject.sp.getChildByName("Prog");
	        if (this.progressMeter)
	            this.progressMeter.setHook(this.progHook);
	        this.updateCountText();
	        this.updateIconAndTextColor();
	    }
	    updateCountText() {
	        if (!this.isInitSp)
	            return;
	        if (!this.isKeyedFog) {
	            if (this.textObjectToggler) {
	                this.textObjectToggler.label = this.fogGoal.desc + this.getIndicatorTextAppend();
	            }
	            if (this.progressMeter != null) {
	                this.progressMeter.setValue(this.fogGoal.TimesDoneSoFar / this.fogGoal.TimesToComplete);
	            }
	        }
	    }
	    add(fog) {
	        this.fog.push(fog);
	    }
	    lockInFinalPosition() {
	        let num = 0;
	        let num2 = 0;
	        for (let item of this.fog) {
	            num += item.x;
	            num2 += item.y;
	        }
	        num /= this.fog.length;
	        num2 /= this.fog.length;
	        this.drawnObject.setRootPosition(num, num2 + 0.4);
	    }
	    setVisibilityBasedOnNeighbors() {
	        if (this.drawnObject == null || !this.drawnObject.verify()) {
	            return;
	        }
	        if (this.isPremium() || this.isPremium2() || this.isPremium3()) {
	            this.enableFogAreaVisibility();
	            return;
	        }
	        let flag = false;
	        for (let item of this.fog) {
	            let num = MapUtil.getGx(item.x, item.y);
	            let num2 = MapUtil.getGy(item.x, item.y);
	            if (!Glob.map.inBounds(num, num2, false)) {
	                console.error("Fog is out of bounds in SetVisibilityBasedOnNeighbors: " + num + "," + num2 + " guid: " + item.guid);
	            }
	            else {
	                if (this.isUnfoggedAndNonNull(num - 1, num2)) {
	                    flag = true;
	                }
	                if (this.isUnfoggedAndNonNull(num + 1, num2)) {
	                    flag = true;
	                }
	                if (this.isUnfoggedAndNonNull(num, num2 + 1)) {
	                    flag = true;
	                }
	                if (this.isUnfoggedAndNonNull(num, num2 - 1)) {
	                    flag = true;
	                }
	            }
	        }
	        if (flag) {
	            this.enableFogAreaVisibility();
	        }
	        else {
	            this.disableFogAreaVisibility();
	        }
	    }
	    isUnfoggedAndNonNull(tileX, tileY) {
	        return Glob.map.inBounds(tileX, tileY, true);
	    }
	    disableFogAreaVisibility() {
	        this.drawnObject.setActive(false);
	        if (!this.isKeyedFog) {
	            this.killProgressMeter();
	        }
	    }
	    enableFogAreaVisibility() {
	        this.drawnObject.setActive(true);
	        if (this.isKeyedFog) {
	            return;
	        }
	        if (this.fogGoal.Complete) {
	            this.killProgressMeter();
	            return;
	        }
	        if (this.progressMeter) {
	            this.progressMeter.active = true;
	            ;
	        }
	        else {
	            this.progressMeter = ProgYun.create();
	            if (this.progHook)
	                this.progressMeter.setHook(this.progHook);
	        }
	        this.progressMeter.setValue(this.fogGoal.TimesDoneSoFar / this.fogGoal.TimesToComplete);
	    }
	    findNeighborFogAreas() {
	        let fogMap = Glob.map.fogMap.fogMap;
	        let fogAreas = Glob.map.fogMap.fogAreas;
	        for (let item of this.fog) {
	            let num = MapUtil.getGx(item.x, item.y);
	            let num2 = MapUtil.getGy(item.x, item.y);
	            if (!Glob.map.inBounds(num, num2, false)) {
	                console.error("Fog is out of bounds in FindNeighbors(): " + num + "," + num2 + " guid: " + item.guid);
	            }
	            else {
	                if (this.shouldFogAreaAtCoordsBeAddedToNeighbors(num - 1, num2)) {
	                    this.fogAreaNeighbors[fogMap[num - 1][num2]] = fogAreas[fogMap[num - 1][num2]];
	                }
	                if (this.shouldFogAreaAtCoordsBeAddedToNeighbors(num + 1, num2)) {
	                    this.fogAreaNeighbors[fogMap[num + 1][num2]] = fogAreas[fogMap[num + 1][num2]];
	                }
	                if (this.shouldFogAreaAtCoordsBeAddedToNeighbors(num, num2 - 1)) {
	                    this.fogAreaNeighbors[fogMap[num][num2 - 1]] = fogAreas[fogMap[num][num2 - 1]];
	                }
	                if (this.shouldFogAreaAtCoordsBeAddedToNeighbors(num, num2 + 1)) {
	                    this.fogAreaNeighbors[fogMap[num][num2 + 1]] = fogAreas[fogMap[num][num2 + 1]];
	                }
	            }
	        }
	    }
	    shouldFogAreaAtCoordsBeAddedToNeighbors(xIndex, yIndex) {
	        let fogMap = Glob.map.fogMap.fogMap;
	        if (Glob.map.inBounds(xIndex, yIndex, false) && fogMap[xIndex][yIndex] != 0 && fogMap[xIndex][yIndex] != this.fogGroup && !this.fogAreaNeighbors[fogMap[xIndex][yIndex]]) {
	            return true;
	        }
	        return false;
	    }
	    notifyNeighborsToCheckVisibility() {
	        for (let i in this.fogAreaNeighbors) {
	            let value = this.fogAreaNeighbors[i];
	            value.setVisibilityBasedOnNeighbors();
	        }
	    }
	    updateIconAndTextColor() {
	        if (this.isKeyedFog) {
	            return;
	        }
	        if (!this.isInitSp)
	            return;
	        this.infoIcon.active = !this.fogGoal.Complete;
	        this.exclamationIcon.active = this.fogGoal.Complete;
	        this.tapToUnlockToggler.active = this.fogGoal.Complete;
	        this.textObjectToggler.active = !this.fogGoal.Complete;
	        if (this.fogGoal.Complete) {
	            if (this.isPremium() || this.isPremium2() || this.isPremium3()) {
	                this.textObjectToggler.label = LanCfg.get("10020006");
	            }
	            this.killProgressMeter();
	        }
	    }
	    killProgressMeter() {
	        if (this.drawnObject) {
	            this.drawnObject.detachProgressBar();
	        }
	        if (this.progressMeter) {
	            this.progressMeter.dispose();
	            this.progressMeter = null;
	        }
	    }
	    goalComplete() {
	        this.updateIconAndTextColor();
	        SoundMgr.ins().playSound("m40");
	        TomeTip.showGameTip(GameTipTypeID.Tip_EvilFog);
	    }
	    tapped() {
	        if (this.isPremium()) {
	            if (!this.fogGoal.Complete) {
	                MsgCenter.notify(MsgConst.SHOW_PAY_FOG_AREA, { id: BuyLandId.LAND, complete: false });
	                return;
	            }
	            if (ShopSaveMgr.DidPurchasePremiumLand) {
	                this.unfog();
	                return;
	            }
	            MsgCenter.notify(MsgConst.SHOW_PAY_FOG_AREA, { id: BuyLandId.LAND, complete: true });
	        }
	        else if (this.isPremium2()) {
	            if (!this.fogGoal.Complete) {
	                MsgCenter.notify(MsgConst.SHOW_PAY_FOG_AREA, { id: BuyLandId.LAND_2, complete: false });
	                return;
	            }
	            if (ShopSaveMgr.DidPurchasePremiumLand2) {
	                this.unfog();
	                return;
	            }
	            MsgCenter.notify(MsgConst.SHOW_PAY_FOG_AREA, { id: BuyLandId.LAND_2, complete: true });
	        }
	        else if (this.isPremium3()) {
	            if (!this.fogGoal.Complete) {
	                MsgCenter.notify(MsgConst.SHOW_PAY_FOG_AREA, { id: BuyLandId.LAND_3, complete: false });
	                return;
	            }
	            if (ShopSaveMgr.DidPurchasePremiumLand3) {
	                this.unfog();
	                return;
	            }
	            MsgCenter.notify(MsgConst.SHOW_PAY_FOG_AREA, { id: BuyLandId.LAND_3, complete: true });
	        }
	        else if (!this.inCompletionPhase) {
	            if (this.fogGoal.Complete) {
	                this.unfog();
	                this.killProgressMeter();
	            }
	            else {
	                LayerMgr.ins().open(UiConst.ModalFogAreaInfo, {
	                    textDesc: this.fogGoal.Text,
	                    textCount: this.fogGoal.countLabelText,
	                });
	            }
	        }
	    }
	    isPremium() {
	        if (this.isKeyedFog) {
	            return false;
	        }
	        return this.fogGoal.acType == GameActionTypeID.PremiumLand;
	    }
	    isPremium2() {
	        if (this.isKeyedFog) {
	            return false;
	        }
	        return this.fogGoal.acType == GameActionTypeID.PremiumLand2;
	    }
	    isPremium3() {
	        if (this.isKeyedFog) {
	            return false;
	        }
	        return this.fogGoal.acType == GameActionTypeID.PremiumLand3;
	    }
	    isAnyPremiumType() {
	        return this.isPremium() || this.isPremium2() || this.isPremium3();
	    }
	    getIndicatorTextAppend() {
	        return " " + this.fogGoal.countLabelText;
	    }
	    getFogClearParticlePrefabName() {
	        if (this.isAnyPremiumType()) {
	            return "ParticleRoot_PremiumFogCleared";
	        }
	        if (this.isKeyedFog) {
	            return "ParticleRoot_FogCleared_CloudDungeon";
	        }
	        return "ParticleRoot_FogCleared";
	    }
	    unfog() {
	        this.inCompletionPhase = true;
	        this.healDelayTimer = new Clock(0.2);
	        SoundMgr.ins().playSound("m40");
	        if (!this.isKeyedFog) {
	            Glob.inHome && ApiMgr.addHomeSta(this.fogGroup);
	            if (this.isInitSp) {
	                this.textObjectToggler.active = false;
	                this.tapToUnlockToggler.active = false;
	                this.infoIcon.active = false;
	                this.exclamationIcon.active = false;
	            }
	        }
	        else {
	            this.drawnObject.body.active = false;
	        }
	    }
	    debug_UnfogInstantly() {
	        this.inCompletionPhase = true;
	        this.healDelayTimer = new Clock(0.2);
	        if (this.isInitSp) {
	            this.textObjectToggler.active = false;
	            this.tapToUnlockToggler.active = false;
	            this.exclamationIcon.active = false;
	        }
	        this.killProgressMeter();
	    }
	    onUpdate() {
	        super.onUpdate();
	        if (Glob.isSimulationPaused() || !this.inCompletionPhase) {
	            return;
	        }
	        this.healDelayTimer.update(Glob.deltaTime);
	        if (!this.healDelayTimer.going) {
	            this.healDelayTimer.reset();
	            this.unfogATile();
	            if (this.fog.length == 0) {
	                this.destroyFogArea();
	            }
	        }
	    }
	    onDestroy() {
	        if (this.textObjectToggler) {
	            this.textObjectToggler.destroy(true);
	            this.textObjectToggler = null;
	        }
	        if (this.tapToUnlockToggler) {
	            this.tapToUnlockToggler.destroy(true);
	            this.tapToUnlockToggler = null;
	        }
	        if (this.progressMeter) {
	            this.progressMeter.dispose();
	            this.progressMeter = null;
	        }
	    }
	    destroyFogArea() {
	        delete Glob.map.fogMap.fogAreas[this.fogGroup];
	        this.drawnObject.destroyDrawnObject(DeathReasonID.PurposeFulfilled);
	        this.notifyNeighborsToCheckVisibility();
	        if (Glob.tutorialOn) {
	            if (!TomeTip.getTipById(GameTipTypeID.Tip_ScreenDragLock).EverViewed) {
	                return;
	            }
	            TomeTip.showGameTip(GameTipTypeID.Tip_FirstUnfog);
	        }
	    }
	    unfogATile() {
	        if (this.fog.length != 0) {
	            let thing = this.fog.shift();
	            let x = MapUtil.getGx(thing.x, thing.y);
	            let y = MapUtil.getGy(thing.x, thing.y);
	            let list = Glob.map.fog_PreLoadCellEntity_GetDependentCellCoords(x, y);
	            if (list != null) {
	                for (let item of list) {
	                    if (Glob.map.fogMap.foggedAt(item.x, item.y)) {
	                        let fogAreaAt = Glob.map.fogMap.getFogAreaAt(item.x, item.y);
	                        let fogAtCellLoc = fogAreaAt.getFogAtCellLoc(item.x, item.y);
	                        ArrayUtil.remove(fogAreaAt.fog, fogAtCellLoc);
	                        this.unfogATile_ClearAt(fogAtCellLoc, item.x, item.y, false);
	                    }
	                }
	            }
	            this.unfogATile_ClearAt(thing, x, y);
	        }
	    }
	    getFogAtCellLoc(cellX, cellY) {
	        for (let item of this.fog) {
	            let num = MapUtil.getGx(item.x, item.y);
	            let num2 = MapUtil.getGy(item.x, item.y);
	            if (num == cellX && num2 == cellY) {
	                return item;
	            }
	        }
	        return null;
	    }
	    unfogATile_ClearAt(fog, x, y, playSound = true) {
	        Glob.map.loadCellDuringGameplay_Unfogged(x, y);
	        Globals.createFromPrefabAt(this.getFogClearParticlePrefabName(), fog.drawnObjectPosition);
	        if (playSound) {
	            SoundMgr.ins().playSound("m41");
	        }
	        fog.destroyDrawnObject(DeathReasonID.PurposeFulfilled);
	        Glob.map.fogMap.fogMap[x][y] = FogGroupID.NONE;
	    }
	}
	CompFogArea.color_TextCompleteGreen = new Laya.Color(0.0117, 0.77, 0.203, 1);

	class ElementWeightPair {
	    constructor(element, weight) {
	        this.weight = weight;
	        this.element = element;
	    }
	}

	class WeightedList {
	    constructor() {
	        this.elements = [];
	        this.sumOfWeights = 0;
	    }
	    add(element, weight) {
	        this.elements.push(new ElementWeightPair(element, weight));
	        this.sumOfWeights += weight;
	    }
	    getRandomElementWeighted() {
	        let num = MathUtil.randNum(0, this.sumOfWeights);
	        let num2 = 0;
	        let result;
	        for (let element of this.elements) {
	            num2 += element.weight;
	            result = element.element;
	            if (num2 >= num) {
	                return result;
	            }
	        }
	        return result;
	    }
	}

	class CompLifeParticl extends Laya.Script3D {
	    get hasValidTarget() {
	        return this.verifyEnemyTarget() || this.verifyTileTarget();
	    }
	    get targetGameObject() {
	        if (this.verifyEnemyTarget()) {
	            return this.targetEnemy.body;
	        }
	        if (this.verifyTileTarget()) {
	            return this.targetTile.body;
	        }
	        return null;
	    }
	    onStart() {
	        this.drawnObject = this.owner;
	        this.componentBurstToTarget = this.drawnObject.getComponent(CompBurstoTarget);
	        if (this.componentBurstToTarget == null) {
	            GuiMgr.errorMessage("Life particle created with no Burst to Target component.");
	            this.drawnObject.destroyDrawnObject(DeathReasonID.Error);
	        }
	        this.chooseNewTarget();
	        if (this.hasValidTarget) {
	            this.componentBurstToTarget.init(this.targetGameObject, this.drawnObject.body.transform.position);
	        }
	        else {
	            this.componentBurstToTarget.destroy();
	        }
	    }
	    chooseNewTarget() {
	        if (MathUtil.coinFlip()) {
	            this.chooseNewTarget_Enemy();
	            if (!this.verifyEnemyTarget()) {
	                this.chooseNewTarget_Tile();
	            }
	        }
	        else {
	            this.chooseNewTarget_Tile();
	            if (!this.verifyTileTarget()) {
	                this.chooseNewTarget_Enemy();
	            }
	        }
	        if (this.hasValidTarget) {
	            this.componentBurstToTarget.setNewTarget(this.targetGameObject);
	            return;
	        }
	        this.killSelf();
	        this.dropPoints();
	    }
	    chooseNewTarget_Enemy() {
	    }
	    chooseNewTarget_Tile() {
	        let deadCellsClosestTo = Glob.map.getDeadCellsClosestTo(this.drawnObject.x, this.drawnObject.y, 3, DeadCellSearchID.NeedsHealing);
	        if (deadCellsClosestTo != null && deadCellsClosestTo.length != 0) {
	            let num = 0;
	            for (let item of deadCellsClosestTo) {
	                let num2 = MathUtil.getDistance(this.drawnObject.x, this.drawnObject.y, item.center.x, item.center.y);
	                if (num2 > num) {
	                    num = num2;
	                }
	            }
	            num += 1;
	            let weiList = new WeightedList();
	            for (let item2 of deadCellsClosestTo) {
	                let num3 = MathUtil.getDistance(this.drawnObject.x, this.drawnObject.y, item2.center.x, item2.center.y);
	                let num4 = num - num3;
	                let level = item2.deathComponent.deadLevel.level;
	                if (level > 0) {
	                    num4 /= (level * level);
	                }
	                weiList.add(item2, num4);
	            }
	            this.targetTile = weiList.getRandomElementWeighted();
	        }
	    }
	    dropPoints() {
	        let num = this.drawnObject.strength;
	        FloatingText.CreateObjectMatchedPointsText(num, FloatingTextManager.ins().pointsAmountPrefabs[0], this.drawnObject);
	        Glob.currentLevel && Glob.currentLevel.updatePointsCount(num);
	    }
	    onUpdate() {
	        if (!this.die) {
	            this.checkForNewTargets();
	            if (this.checkIfTargetReached()) {
	                this.hitTarget();
	            }
	        }
	    }
	    checkIfTargetReached() {
	        if (this.componentBurstToTarget.reachedTarget()) {
	            return true;
	        }
	        if (this.verifyEnemyTarget()) {
	            return this.drawnObject.intersects(this.targetEnemy);
	        }
	        if (this.verifyTileTarget()) {
	            return this.targetTile.containsPoint(this.drawnObject.transform.position);
	        }
	        return false;
	    }
	    checkForNewTargets() {
	        if (!this.verifyTileTarget() && !this.verifyEnemyTarget()) {
	            this.chooseNewTarget();
	        }
	    }
	    verifyTileTarget() {
	        if (this.targetTile == null) {
	            return false;
	        }
	        let component = this.targetTile.deathComponent;
	        if (component == null || !component.needsMoreHealing) {
	            return false;
	        }
	        return true;
	    }
	    verifyEnemyTarget() {
	        if (this.targetEnemy == null || !this.targetEnemy.verify() || this.targetEnemy.killed) {
	            this.targetEnemy = null;
	            return false;
	        }
	        return true;
	    }
	    hitTarget() {
	        SoundMgr.ins().playSounds(["m2", "m57", "m109", "m108", "m107"]);
	        if (this.verifyEnemyTarget()) {
	            this.hitTarget_Enemy();
	            this.killSelf();
	        }
	        else if (this.verifyTileTarget()) {
	            this.hitTarget_Tile();
	            this.killSelf();
	        }
	    }
	    killSelf() {
	        if (!this.drawnObject.trySetToSetToDying(DeathReasonID.ReachedTarget)) {
	            GuiMgr.errorMessage("Tried to set a life particle to dying, but it was not allowed by DrawnObject.");
	            this.drawnObject.destroyDrawnObject(DeathReasonID.ReachedTarget);
	        }
	        this.die = true;
	    }
	    hitTarget_Enemy() {
	        Globals.createFromPrefabAt("ParticleRoot_LifeParticleHitEnemy", this.targetEnemy.drawnObjectPosition);
	        ThingAnim.playObjectHitByProjectile(this.targetEnemy);
	        this.targetEnemy.doDamage(this.drawnObject.strength);
	    }
	    hitTarget_Tile() {
	        let component = this.targetTile.deathComponent;
	        if (component) {
	            component.hitByLifeParticle(this.drawnObject.strength, this.drawnObject.cfg.itemLevel);
	        }
	    }
	}

	class CompNeighborHealer extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.state = NeighborHealStateID.NotStarted;
	        this.delayTimer = new Clock(10);
	    }
	    get isSelfHealed() {
	        return !this.drawnObject.dead;
	    }
	    onStart() {
	        this.drawnObject = this.owner;
	        if (this.drawnObject == null) {
	            GuiMgr.errorMessage("Component_NeighborHealer couldn't find DrawnObject.");
	            this.destroy();
	        }
	        else if (this.drawnObject.isIcon) {
	            this.destroy();
	        }
	    }
	    init() {
	        if (this.isSelfHealed) {
	            this.state = NeighborHealStateID.CountDownBeforeVFX;
	        }
	        this.initialized = true;
	    }
	    onUpdate() {
	        if (Glob.isSimulationPaused() || this.drawnObject.isDying()) {
	            return;
	        }
	        if (!this.initialized) {
	            this.init();
	        }
	        else {
	            if (this.state == NeighborHealStateID.NotStarted) {
	                return;
	            }
	            if (this.state == NeighborHealStateID.CountDownBeforeVFX) {
	                if (this.delayTimer.going) {
	                    this.delayTimer.update(Glob.deltaTime);
	                }
	                else {
	                    this.state = NeighborHealStateID.PlayVFX;
	                }
	            }
	            else if (this.state == NeighborHealStateID.PlayVFX) {
	                Globals.createFromPrefabAt("ParticleRoot_NeighborHealPulse", this.drawnObject.transform.position);
	                SoundMgr.ins().playSound("m58");
	                this.state = NeighborHealStateID.CountDownToHeal;
	                this.delayTimer.set(0.75);
	            }
	            else if (this.state == NeighborHealStateID.CountDownToHeal) {
	                if (this.delayTimer.going) {
	                    this.delayTimer.update(Glob.deltaTime);
	                }
	                else {
	                    this.healNeighbors();
	                }
	            }
	            else if (this.state != NeighborHealStateID.Done) {
	            }
	        }
	    }
	    neighborWasHealed() {
	        if (!this.drawnObject.isDying() && !this.isSelfHealed) {
	            this.healSelf();
	            this.state = NeighborHealStateID.CountDownBeforeVFX;
	        }
	    }
	    tapped() {
	        if (this.state < NeighborHealStateID.PlayVFX) {
	            this.state = NeighborHealStateID.PlayVFX;
	        }
	    }
	    healSelf() {
	        if (this.drawnObject.metaCell == null) {
	            GuiMgr.errorMessage("Neighbor Healer had a null meta cell. " + this.drawnObject);
	        }
	        else if (this.drawnObject.metaCell.area != 1) {
	            GuiMgr.errorMessage("Neighbor Healer had a meta cell with area not 1. This case is not handled yet. " + this.drawnObject + ", " + this.drawnObject.metaCell);
	        }
	        else {
	            this.drawnObject.metaCell.anchor.tryInstantHeal();
	        }
	    }
	    healNeighbors() {
	        this.drawnObject.trySetToSetToDying(DeathReasonID.PurposeFulfilled);
	        if (this.drawnObject.metaCell.anchor.tryInfiniteHealNeighbors()) {
	            SoundMgr.ins().playSound("m57");
	        }
	        this.state = NeighborHealStateID.Done;
	    }
	}

	class CompVfxToggler extends TiScript3D {
	    constructor() {
	        super(...arguments);
	        this.checked = false;
	    }
	    onAwake() {
	        this.thing = this.owner;
	        this.thing.onDeathComponentAdded = new Laya.Handler(this, this.onDeathAdded, null, false);
	        this.thing.onDeathComponentRemoved = new Laya.Handler(this, this.onDeathRemoved, null, false);
	        this.onSlowUpate();
	        this.updateTarget();
	    }
	    onSlowUpate() {
	        if (this.checked)
	            return;
	        if (!this.thing.sp)
	            return;
	        this.target = this.thing.sp.getChildByName("Vfx");
	        this.checked = true;
	        this.updateTarget();
	    }
	    onDeathAdded(death) {
	        this.isDead = true;
	        this.updateTarget();
	    }
	    onDeathRemoved() {
	        this.isDead = false;
	        this.updateTarget();
	    }
	    updateTarget() {
	        if (this.target != null) {
	            this.target.active = !this.isDead && !Glob.isOnLowQuality;
	        }
	    }
	}

	class EnemySpawnNexus extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.spawnDelay = new Clock(MathUtil.randNum(2, 4));
	        this.spawned = false;
	    }
	    initZomblinType_NoPositionChange(enemyPrefabToSpawn) {
	        this.universalInit();
	        this.enemyPrefabName = enemyPrefabToSpawn;
	    }
	    universalInit() {
	        this.thing = this.owner;
	    }
	    onUpdate() {
	        if (!this.enemyPrefabName)
	            return;
	        if (!this.spawned && !Glob.isSimulationPaused()) {
	            this.spawnDelay.update(Glob.deltaTime);
	            if (!this.spawnDelay.going) {
	                this.spawnEnemy();
	                this.spawned = true;
	            }
	        }
	    }
	    onDestroy() {
	        if (this.spawned)
	            return;
	        this.spawnEnemy();
	        this.spawned = true;
	    }
	    spawnEnemy() {
	        let drawnObject = Thing.create(this.enemyPrefabName);
	        if (!drawnObject)
	            return;
	        drawnObject.setRootPosition(this.thing.x, this.thing.y);
	        drawnObject.asEnemy.spawnInit();
	        let sou = drawnObject.cfg.itemLevel % 2 == 1 ? "m196" : "m197";
	        SoundMgr.ins().playSound(sou);
	        if (MathUtil.chance(0.25)) {
	            SoundMgr.ins().playSounds(["m193", "m194", "m195"]);
	        }
	        ThingAnim.playNewEnemyAppear(drawnObject);
	    }
	    getSaveDataObject() {
	        let saveData_EnemyNexus = new SL_EnemyNexus();
	        saveData_EnemyNexus.enemyPrefabName = this.enemyPrefabName;
	        saveData_EnemyNexus.spawned = this.spawned;
	        return saveData_EnemyNexus;
	    }
	    initFromSaveData(data) {
	        this.enemyPrefabName = data.enemyPrefabName;
	        this.spawned = data.spawned;
	        this.universalInit();
	    }
	}

	class ThingCompMgr {
	    static init() {
	        this.comps[1] = this.addCompMonsterHome;
	        this.comps[2] = GGDailyChestView;
	        this.comps[3] = Component_TomeTipObj;
	        this.comps[4] = Component_DailyQuest_Ship;
	        this.comps[5] = CompLifeParticl;
	        this.comps[6] = CompBurstoTarget;
	        this.comps[7] = CompFogArea;
	        this.comps[8] = CompVfxToggler;
	        this.comps[9] = this.addEnemySpawnNexus;
	        this.comps[10] = CompNeighborHealer;
	        this.comps[11] = this.addCompConstructible;
	        this.comps[12] = this.addCompWorkableOn;
	        this.comps[13] = CompDragoniaMonument;
	        this.comps[14] = LootOrb;
	        this.comps[15] = CompDirectUpgrade;
	    }
	    static addCompMonsterHome(thing, cfg) {
	        let comp = thing.addComponent(CompMonsterHome);
	        thing.homeComponent = comp;
	    }
	    static addEnemySpawnNexus(thing, cfg) {
	        let comp = thing.addComponent(EnemySpawnNexus);
	        thing.enemySpawnNexus = comp;
	    }
	    static addCompWorkableOn(thing, cfg) {
	        let comp = thing.addComponent(CompWorkableOn);
	        thing.workableComponent = comp;
	    }
	    static addCompConstructible(thing, cfg) {
	        let comp = thing.addComponent(CompConstructible);
	        thing.constructible = comp;
	    }
	    static add(thing, cfg) {
	        this.addBaseAnim(thing, cfg);
	        if (!cfg.scriptIds)
	            return;
	        for (let i of cfg.scriptIds) {
	            let script = this.comps[i];
	            if (!script)
	                continue;
	            if (script.prototype) {
	                thing.addComponent(script);
	            }
	            else {
	                script.apply(this, [thing, cfg]);
	            }
	        }
	    }
	    static addBaseAnim(thing, cfg) {
	        let data = BaseAnimCfg.get(cfg.pref);
	        if (!data)
	            return;
	        let comp = thing.addComponent(CompBaseAnimTween);
	        if (data.en) {
	            comp.enabled = false;
	        }
	        if (data.ja) {
	            comp.jitterAmount = new Laya.Vector2(data.ja[0], data.ja[1]);
	        }
	        if (data.jr) {
	            comp.jitterDelayRange = new Laya.Vector2(data.jr[0], data.jr[1]);
	        }
	        if (data.td) {
	            comp.randomAnimDelayMax = data.td;
	        }
	        if (data.tt) {
	            comp.animTimePos = data.tt;
	            if (data.tx) {
	                comp.tweenPosX = data.tx;
	            }
	            if (data.ty) {
	                comp.tweenPosY = data.ty;
	            }
	        }
	        if (data.rt) {
	            comp.animTimeRot = data.rt;
	            if (data.rr) {
	                comp.tweenRot = data.rr;
	            }
	        }
	        if (data.st) {
	            comp.animTimeScale = data.st;
	            if (data.ss) {
	                comp.tweenScale = data.ss;
	            }
	        }
	        thing.baseAnimComponent = comp;
	    }
	}
	ThingCompMgr.comps = {};

	class Flasher {
	    static flashWhite(rootOfTargetObj) {
	    }
	}

	class CompProjectile extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.maxLifetime = new Clock(60);
	    }
	    init(projectileDef) {
	        this.projectileDef = projectileDef;
	        this.thing = this.owner;
	    }
	    shootAt(target) {
	        this.target = target;
	        if (!this.verifyTarget()) {
	            this.thing.destroyDrawnObject();
	            return;
	        }
	        this.burstComponent = this.thing.addComponent(CompBurstoTarget);
	        this.burstComponent.init2(this.target.body, this.thing.body.transform.position, -0.2, 0.2, 100, this.projectileDef.moveSpeed);
	        this.targetSet = true;
	        this.thing.forceUpdateZ = true;
	        if (this.projectileDef.SFX_Shoot != null) {
	            SoundMgr.ins().playSounds(this.projectileDef.SFX_Shoot);
	        }
	    }
	    chambered() {
	        if (this.projectileDef.SFX_Chamber != null) {
	            SoundMgr.ins().playSounds(this.projectileDef.SFX_Chamber);
	        }
	        if (this.projectileDef.SFX_InChamberLoop != null) {
	            SoundMgr.ins().playSounds(this.projectileDef.SFX_InChamberLoop);
	        }
	    }
	    onUpdate() {
	        if (!Glob.isSimulationPaused() && this.targetSet) {
	            this.moveToTarget();
	        }
	    }
	    moveToTarget() {
	        if (!this.verifyTarget()) {
	            this.kill();
	        }
	        this.maxLifetime.update(Glob.deltaTime);
	        if (this.maxLifetime.done) {
	            this.kill();
	        }
	        if (this.burstComponent.reachedTarget()) {
	            this.hitTarget();
	        }
	    }
	    hitTarget() {
	        Globals.createFromPrefabAt(this.projectileDef.hitParticleEffectPrefabName, this.target.drawnObjectPosition);
	        ThingAnim.playObjectHitByProjectile(this.target);
	        this.target.doDamage(this.projectileDef.damagePerHit);
	        if (this.projectileDef.SFX_HitTarget != null) {
	            SoundMgr.ins().playSounds(this.projectileDef.SFX_HitTarget);
	        }
	        this.kill();
	    }
	    verifyTarget() {
	        return this.target != null && !this.target.isDispose;
	    }
	    kill() {
	        this.thing.destroyDrawnObject(DeathReasonID.ReachedTarget);
	    }
	}

	class CompProjectileLauncher extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.state = 0;
	        this.targets = [];
	    }
	    get hasTargets() {
	        return this.targets.length > 0;
	    }
	    init(drawnObject) {
	        this.thing = drawnObject;
	        this.projectileDef = drawnObject.cfg.projectileDef_BasicAttack;
	        this.shotTimer = new Clock();
	        this.shotTimer.setRange(this.projectileDef.secondsToFireRange);
	        this.reloadTimer = new Clock(this.projectileDef.secondsToReload);
	        if (this.projectileDef.hasMultishot) {
	            this.multiBulletTimer = new Clock(this.projectileDef.multishotDelay);
	            this.rapidFireBulletsLeft = this.projectileDef.bulletsPerShot;
	        }
	    }
	    startShootingAt(target) {
	        if (ArrayUtil.contains(this.targets, target)) {
	            GuiMgr.errorMessage("Trying to target something that's already a target: " + target);
	        }
	        else {
	            this.targets.push(target);
	        }
	    }
	    stopShootingAt(target) {
	        ArrayUtil.remove(this.targets, target);
	        this.checkForNoTargets();
	    }
	    stopShooting() {
	        this.targets.length = 0;
	        this.checkForNoTargets();
	    }
	    onUpdate() {
	        if (!Glob.isSimulationPaused()) {
	            if (this.state == ProjectileID.Off) {
	                this.update_Off();
	            }
	            else if (this.state == ProjectileID.Reloading) {
	                this.update_Reloading();
	            }
	            else if (this.state == ProjectileID.RoundChambered) {
	                this.update_RoundChambered();
	            }
	            else {
	                GuiMgr.errorMessage("Unhandled state in ProjectileLauncher: " + this.state);
	            }
	        }
	    }
	    update_Off() {
	        if (this.hasTargets) {
	            this.tryChamberARound();
	        }
	    }
	    update_Reloading() {
	        this.reloadTimer.update(Glob.deltaTime);
	        if (!this.reloadTimer.going) {
	            this.tryChamberARound();
	            this.state = ProjectileID.RoundChambered;
	            if (this.projectileDef.hasMultishot) {
	                this.rapidFireBulletsLeft = this.projectileDef.bulletsPerShot;
	                this.inMiddleOfMultiShot = false;
	            }
	        }
	    }
	    update_RoundChambered() {
	        if (this.inMiddleOfMultiShot) {
	            this.multiBulletTimer.update(Glob.deltaTime);
	            if (this.multiBulletTimer.going) {
	                return;
	            }
	        }
	        else {
	            this.shotTimer.update(Glob.deltaTime);
	            if (this.shotTimer.going) {
	                return;
	            }
	        }
	        this.fireChamberedShot();
	        if (this.projectileDef.hasMultishot && this.rapidFireBulletsLeft > 1) {
	            this.rapidFireBulletsLeft--;
	            this.inMiddleOfMultiShot = true;
	            this.tryChamberARound();
	            this.multiBulletTimer.reset();
	        }
	        else {
	            this.state = ProjectileID.Reloading;
	            this.reloadTimer.reset();
	            this.shotTimer.reset();
	        }
	    }
	    tryChamberARound() {
	        if (this.chamberedShot != null) {
	            this.state = ProjectileID.RoundChambered;
	            return;
	        }
	        this.chamberedShot = Thing.create(this.projectileDef.prefabName);
	        let component = this.chamberedShot.addComponent(CompProjectile);
	        component.init(this.projectileDef);
	        let pos = this.projSp.transform.position;
	        this.chamberedShot.setRootPosition(pos.x, pos.y);
	        this.state = ProjectileID.RoundChambered;
	        component.chambered();
	    }
	    get projSp() {
	        if (this._projSp)
	            return this._projSp;
	        if (this.thing.sp) {
	            this._projSp = this.thing.sp.getChildByName("Body").getChildByName("Projectile");
	            if (!this._projSp)
	                this._projSp = this.thing;
	            return this._projSp;
	        }
	        else {
	            return this.thing;
	        }
	    }
	    checkForNoTargets() {
	        if (!this.hasTargets) {
	            this.state = ProjectileID.Off;
	            if (this.chamberedShot) {
	                this.chamberedShot.destroyDrawnObject(DeathReasonID.PurposeFulfilled);
	                this.chamberedShot = null;
	            }
	        }
	    }
	    fireChamberedShot() {
	        let drawnObject = Globals.randomElement(this.targets);
	        if (!this.verifyTarget(drawnObject)) {
	            return;
	        }
	        if (this.chamberedShot != null && !this.chamberedShot.isDispose) {
	            let component = this.chamberedShot.getComponent(CompProjectile);
	            if (component != null) {
	                component.shootAt(drawnObject);
	                ThingAnim.playBeingFiredProjectile(this.thing, drawnObject);
	            }
	        }
	        this.chamberedShot = null;
	    }
	    verifyTarget(target) {
	        if (target == null || target.isDispose) {
	            ArrayUtil.remove(this.targets, target);
	            this.checkForNoTargets();
	            return false;
	        }
	        return true;
	    }
	}

	class CompSpawner extends Laya.Script3D {
	    init(drawnObject) {
	        this.drawnObject = drawnObject;
	        this.spawnDef = drawnObject.cfg.spawnDefinition;
	    }
	    onStart() {
	        this.resetSpawnTimer();
	        this.tryAddProgressMeter();
	    }
	    resetSpawnTimer() {
	        this.timeToNextSpawn = this.spawnDef.spawnPulseSecondsRange.random();
	        this.initialTimeToNextSpawn = this.timeToNextSpawn;
	    }
	    tryAddProgressMeter() {
	        if (Glob.inLevelOrHome && this.spawnDef.showProgressBar) {
	            if (this.drawnObject.meter) {
	                GuiMgr.errorMessage("Trying to attach a Spawner Progress Meter to an object that already has a progress meter.");
	            }
	            else {
	            }
	        }
	    }
	    onUpdate() {
	        if (Glob.isSimulationPaused() || !Glob.inLevelOrHome || Glob.inAnEventArea_Type2_ScorePuzzle) {
	            return;
	        }
	        if (!this.spawnDef.hasInfiniteSpawns && this.drawnObject.spawnChargesLeft <= 0) {
	            this.enabled = false;
	        }
	        else if (this.drawnObject.canSpawnObjectsRightNow()) {
	            this.timeToNextSpawn -= Glob.deltaTime;
	            if (this.timeToNextSpawn <= 0) {
	                this.trySpawn();
	            }
	            this.updateSpawnProgressMeter();
	        }
	    }
	    updateSpawnProgressMeter() {
	        if (this.progressMeter) {
	            let num = (this.initialTimeToNextSpawn - this.timeToNextSpawn) / this.initialTimeToNextSpawn;
	        }
	    }
	    trySpawn() {
	        let num = this.spawnDef.spawnCountPerPulse.random();
	        let flag = false;
	        for (let i = 0; i < num; i++) {
	            flag = this.spawnSomething();
	            if (!flag) {
	                break;
	            }
	        }
	        if (flag) {
	            ThingAnim.playSpawnedSomething(this.drawnObject);
	            if (!this.spawnDef.hasInfiniteSpawns) {
	                this.drawnObject.spawnChargesLeft--;
	            }
	        }
	        this.resetSpawnTimer();
	    }
	    spawnSomething() {
	        if (this.spawnDef.spawnNearby_LootTable == null) {
	            return false;
	        }
	        let drawnObject = this.spawnDef.spawnNearby_LootTable.tryDropWithinRadius(this.drawnObject, this.spawnDef.spawnRadius, !this.spawnDef.suppressSpawnSwoop);
	        if (drawnObject != null) {
	            if (this.spawnDef.SFX_SpawnItem != null) {
	                SoundMgr.ins().playSound(this.spawnDef.SFX_SpawnItem);
	            }
	            else {
	                SoundMgr.ins().playSound("m101");
	            }
	        }
	        return drawnObject != null;
	    }
	}

	var ProgHarvestUI = ui.data.module.progress.ProgHarvestUI;
	class ProgHarvest extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgHarvestUI();
	        this.prog.pos(0, -20);
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    get hasLabel() {
	        return false;
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	}

	var ProgHpUI = ui.data.module.progress.ProgHpUI;
	class ProgHp extends ProgressMeter {
	    constructor() {
	        super();
	        this.init();
	    }
	    init() {
	        this.prog = new ProgHpUI();
	        this.prog.pos(0, -20);
	        this.addChild(this.prog);
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    setLabel(v) {
	        this.prog.lbl.text = v;
	    }
	    setWidth(v) {
	        this.prog.bar.width = v;
	        this.prog.lbl.width = v;
	        this.prog.x = v * -0.5;
	    }
	    dispose() {
	        super.dispose();
	        Laya.Pool.recoverByClass(this);
	    }
	}

	class CompDragMomentum extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.residualDragTime = new Clock(2);
	        this.dragDisplacementHistory = [];
	        this.residualVelocity = new Laya.Vector3();
	    }
	    onStart() {
	        this.thing = this.owner;
	        if (this.thing == null) {
	            GuiMgr.errorMessage("Component_DragMomentum must be added to an object that has a DrawnObject component. Can't find one on " + this.owner.name);
	            this.destroy();
	        }
	    }
	    onUpdate() {
	        if (this.momentumActive) {
	            this.residualVelocity.x *= this.residualDragTime.percentLeft * 0.9;
	            this.residualVelocity.y *= this.residualDragTime.percentLeft * 0.9;
	            this.residualVelocity.z *= this.residualDragTime.percentLeft * 0.9;
	            this.displace(this.residualVelocity.x, this.residualVelocity.y);
	            this.residualDragTime.update(Glob.deltaTime);
	            if (Laya.Vector3.scalarLength(this.residualVelocity) <= 0.0025) {
	                this.setMomentumActive(false);
	            }
	        }
	    }
	    onDrag(x, y) {
	        this.setMomentumActive(false);
	        this.dragDisplacementHistory.push([x, y]);
	        if (this.dragDisplacementHistory.length > 3) {
	            this.dragDisplacementHistory.shift();
	        }
	    }
	    dragReleased() {
	        this.setMomentumActive(true);
	        this.residualDragTime.reset();
	        this.residualVelocity.toDefault();
	        for (let item of this.dragDisplacementHistory) {
	            this.residualVelocity.x += item[0];
	            this.residualVelocity.y += item[1];
	        }
	        let len = this.dragDisplacementHistory.length;
	        if (len > 0) {
	            this.residualVelocity.x /= len;
	            this.residualVelocity.y /= len;
	            this.residualVelocity.z /= len;
	        }
	    }
	    displace(mx, my) {
	        let x = this.thing.x + mx;
	        let y = this.thing.y + my;
	        if (!this.thing.cfg.canDropFarOutOfBounds && !Glob.map.inWideBounds_WorldSpace(x, y)) {
	            this.setMomentumActive(false);
	            this.dragDisplacementHistory.length = 0;
	        }
	        else {
	            this.thing.setRootPosition(x, y);
	        }
	    }
	    setMomentumActive(value) {
	        this.momentumActive = value;
	        if (MergeDragonsAppConfig.UPDATE_OPTIMISATION_ENABLED) {
	            this.enabled = value;
	        }
	    }
	}

	var ProgTimeDupeUI = ui.data.module.progress.ProgTimeDupeUI;
	class ProgTimeDupe extends ProgressMeter {
	    constructor() {
	        super();
	        this.duration = 0;
	        this.secondsLeft = 0;
	        this.init();
	    }
	    init() {
	        this.prog = new ProgTimeDupeUI();
	        this.initSp();
	        this.addChild(this.prog);
	    }
	    initSp() {
	        this.prog.timeSp.visible = true;
	        this.prog.deadSp.visible = false;
	    }
	    setValue(v) {
	        this.prog.bar.value = v;
	    }
	    onUpdate() {
	        super.onUpdate();
	        if (this.expired) {
	            return;
	        }
	        if (this.secondsLeft < 0) {
	            this.expired = true;
	            this.setValue(0);
	            this.setExpiredState();
	        }
	        else {
	            this.prog.timeLbl.text = this.secondsLeft <= 0 ? "" : Clock.getDisplayStr(this.secondsLeft, false);
	            let v = this.duration != 0 ? (this.secondsLeft / this.duration) : 1;
	            this.setValue(v);
	        }
	    }
	    setExpiredState() {
	        this.prog.headLbl.text = LanCfg.get("10020030");
	        this.prog.timeLbl.text = LanCfg.get("10020031");
	        this.prog.timeSp.visible = false;
	        this.prog.deadSp.visible = true;
	    }
	    dispose() {
	        super.dispose();
	        this.initSp();
	        Laya.Pool.recoverByClass(this);
	    }
	}

	class GmCmd {
	    static sellAll() {
	        for (let id in ThingList.guidMap) {
	            let item = ThingList.guidMap[id];
	            if (!item.isInASellableState())
	                continue;
	            item.Event_TrySellConfirmed();
	        }
	    }
	    static selectProp(thing) {
	        if (!this.outPropMsg)
	            return;
	        let vo = thing.cfg;
	        let msg = StringUtil.format("{0},{1}", vo.name, vo.cid);
	        FloatMsgUtil.start(msg);
	    }
	}
	GmCmd.TEST_ALWAYS_PROGRESSION_DUPE = false;
	GmCmd.outPropMsg = false;

	class BundleConfig {
	    constructor(purchaseType, gemCost, premiumPackID, inGameItemID, expireSeconds, expiredBundleId) {
	        this.gemCost = gemCost;
	        this.purchaseType = purchaseType;
	        this.inGameItemID = inGameItemID;
	        this.premiumPackID = premiumPackID;
	        this.expireSeconds = expireSeconds;
	        this.expiredBundleId = expiredBundleId;
	    }
	}

	class BundleData {
	    constructor(id, nameLocKey, descriptionLocKey, type, config, enableConfig, bundleItems) {
	        this.bundleItems = [];
	        this.id = id;
	        this.nameLocKey = nameLocKey;
	        this.descriptionLocKey = descriptionLocKey;
	        this.type = type;
	        this.config = config;
	        this.enableConfig = enableConfig;
	        this.bundleItems = bundleItems;
	    }
	    addBundleItem(bundleItem) {
	        if (this.bundleItems == null) {
	            this.bundleItems = [];
	        }
	        this.bundleItems.push(bundleItem);
	    }
	}

	class BundleEnableConfig {
	    constructor(enableAction, enableRule, statKey, statValue) {
	        this.statKey = statKey;
	        this.statValue = statValue;
	        this.enableAction = enableAction;
	        this.enableRuleType = enableRule;
	    }
	}

	class BundleItem {
	    constructor(i_bundleItemID, i_type, i_amount = 0) {
	        this.bundleItemID = i_bundleItemID;
	        this.type = i_type;
	        this.amount = i_amount;
	    }
	}

	var BundleType;
	(function (BundleType) {
	    BundleType[BundleType["STARTER_BUNDLE"] = 0] = "STARTER_BUNDLE";
	    BundleType[BundleType["ENABLE_BY_RULE"] = 1] = "ENABLE_BY_RULE";
	})(BundleType || (BundleType = {}));
	var BundlePurchaseType;
	(function (BundlePurchaseType) {
	    BundlePurchaseType[BundlePurchaseType["FREE"] = 0] = "FREE";
	    BundlePurchaseType[BundlePurchaseType["GEM"] = 1] = "GEM";
	    BundlePurchaseType[BundlePurchaseType["IAP"] = 2] = "IAP";
	})(BundlePurchaseType || (BundlePurchaseType = {}));
	var BundleEnableRuleType;
	(function (BundleEnableRuleType) {
	    BundleEnableRuleType[BundleEnableRuleType["CAMP_STARS"] = 0] = "CAMP_STARS";
	    BundleEnableRuleType[BundleEnableRuleType["MANUALLY_TRIGGERED"] = 1] = "MANUALLY_TRIGGERED";
	})(BundleEnableRuleType || (BundleEnableRuleType = {}));
	var BundleEnableAction;
	(function (BundleEnableAction) {
	    BundleEnableAction[BundleEnableAction["STATIC_ON_MAP"] = 0] = "STATIC_ON_MAP";
	    BundleEnableAction[BundleEnableAction["FALL_FROM_SKY"] = 1] = "FALL_FROM_SKY";
	})(BundleEnableAction || (BundleEnableAction = {}));
	var BundleItemType;
	(function (BundleItemType) {
	    BundleItemType[BundleItemType["IN_GAME_ITEM"] = 0] = "IN_GAME_ITEM";
	    BundleItemType[BundleItemType["GOLD"] = 1] = "GOLD";
	    BundleItemType[BundleItemType["STONE"] = 2] = "STONE";
	    BundleItemType[BundleItemType["DAIMOND"] = 3] = "DAIMOND";
	    BundleItemType[BundleItemType["MONSTER"] = 4] = "MONSTER";
	})(BundleItemType || (BundleItemType = {}));
	var BundleStatus;
	(function (BundleStatus) {
	    BundleStatus[BundleStatus["DEACTIVE"] = 0] = "DEACTIVE";
	    BundleStatus[BundleStatus["ACTIVE"] = 1] = "ACTIVE";
	    BundleStatus[BundleStatus["PURCHASED"] = 2] = "PURCHASED";
	    BundleStatus[BundleStatus["EXPIRED"] = 3] = "EXPIRED";
	})(BundleStatus || (BundleStatus = {}));

	class TimerData {
	    constructor(i_id, i_activationTime, i_duration, i_remoteSyncFlag = false) {
	        this.ID = i_id;
	        this.ActivationTime = i_activationTime;
	        this.Duration = i_duration;
	        this.Status = EnumTimerStatus.STOPPED;
	        this.RemoteSyncFlag = i_remoteSyncFlag;
	    }
	    GetRemainingTimePercentage() {
	        return this.TimeSinceUnlockStarted() / this.Duration;
	    }
	    TimeSinceUnlockStarted() {
	        let m = TimeMgr.ins().getTime() - this.ActivationTime;
	        return TimeMgr.ins().toSeconds(m);
	    }
	}

	class BundleService extends Singleton {
	    constructor() {
	        super();
	        this.Awake();
	        this.Start();
	    }
	    Awake() {
	        this.bundleMap = {};
	        this.bundleStatusMap = {};
	    }
	    Destroy() {
	    }
	    Start() {
	        this.constructBundleMap();
	        this.constructBundleStatusMap();
	        this.constructStatListenerData();
	    }
	    addBundle(bundle) {
	        if (bundle != null && bundle.id) {
	            if (this.bundleMap.hasOwnProperty(bundle.id)) {
	                delete this.bundleMap[bundle.id];
	            }
	            this.bundleMap[bundle.id] = bundle;
	            if (this.bundleStatusMap.hasOwnProperty(bundle.id)) {
	                delete this.bundleStatusMap[bundle.id];
	            }
	            this.bundleStatusMap[bundle.id] = this.readPersistedBundleStatus(bundle.id.toString());
	        }
	    }
	    GetBundle(bundleId) {
	        let result = null;
	        bundleId = bundleId.toLowerCase();
	        if (bundleId && this.bundleMap != null && this.bundleMap.hasOwnProperty(bundleId)) {
	            result = this.bundleMap[bundleId];
	        }
	        return result;
	    }
	    GetBundleStatus(bundleId) {
	        bundleId = bundleId.toLowerCase();
	        let result = BundleStatus.EXPIRED;
	        if (bundleId && this.bundleStatusMap != null && this.bundleStatusMap.hasOwnProperty(bundleId)) {
	            result = this.bundleStatusMap[bundleId];
	        }
	        return result;
	    }
	    SetBundleStatus(bundleId, bundleStatus) {
	        if (bundleId) {
	            bundleId = bundleId.toLowerCase();
	            if (this.bundleMap[bundleId] && this.bundleStatusMap[bundleId]) {
	                GGServices.GetDB().setNumber("bundlestatus/" + bundleId, bundleStatus);
	            }
	        }
	    }
	    RefreshBundleData() {
	        this.constructBundleMap();
	        this.constructBundleStatusMap();
	    }
	    StartBundleTimer(bundleId, listen = true) {
	        if (bundleId && this.bundleMap.hasOwnProperty(bundleId)) {
	            let bundleData = this.bundleMap[bundleId];
	            GGServices.GetTimerService().AddTimer(new TimerData(bundleData.id, TimeMgr.ins().getTime(), bundleData.config.expireSeconds), true);
	            if (listen) {
	                console.log(">>>>>>>>>>>>> ADd listener > " + bundleId);
	                let handler = Laya.Handler.create(this, this.timerListener);
	                GGServices.GetTimerService().AddListener(bundleId, handler);
	            }
	            console.log(">>>>>>>>>>>>> StartBundleTimer > " + bundleId);
	        }
	    }
	    stopBundleTimer(i_bundleID) {
	        if (i_bundleID != "") {
	            GGServices.GetTimerService().StopTimer(i_bundleID);
	            console.log(">>>>>>>>>>>>> StopBundleTimer > " + i_bundleID);
	        }
	    }
	    constructBundleMap() {
	        this.bundleMap = {};
	        let bundleData = new BundleData("starter_pack_bundle", null, null, BundleType.STARTER_BUNDLE, new BundleConfig(BundlePurchaseType.IAP, 0, "starter_pack", null, 600.0, "starter_pack_expired_bundle"), new BundleEnableConfig(BundleEnableAction.STATIC_ON_MAP, BundleEnableRuleType.MANUALLY_TRIGGERED, null, null), null);
	        bundleData.addBundleItem(new BundleItem(10575, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10575, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10343, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10589, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10589, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10589, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10329, BundleItemType.DAIMOND, 250));
	        this.addBundle(bundleData);
	        bundleData = new BundleData("starter_pack_expired_bundle", null, null, BundleType.STARTER_BUNDLE, new BundleConfig(BundlePurchaseType.FREE, 0, null, null, -1.0, null), new BundleEnableConfig(BundleEnableAction.STATIC_ON_MAP, BundleEnableRuleType.MANUALLY_TRIGGERED, null, null), null);
	        bundleData.addBundleItem(new BundleItem(10381, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10381, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10381, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10381, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10373, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10374, BundleItemType.IN_GAME_ITEM));
	        this.addBundle(bundleData);
	        bundleData = new BundleData("starter_pack_goldchest_bundle", null, null, BundleType.STARTER_BUNDLE, new BundleConfig(BundlePurchaseType.FREE, 0, null, null, -1.0, null), new BundleEnableConfig(BundleEnableAction.STATIC_ON_MAP, BundleEnableRuleType.MANUALLY_TRIGGERED, null, null), null);
	        bundleData.addBundleItem(new BundleItem(10256, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10528, BundleItemType.IN_GAME_ITEM));
	        bundleData.addBundleItem(new BundleItem(10640, BundleItemType.IN_GAME_ITEM));
	        if (MergeDragonsAppConfig.STARTER_PACK_ENABLED) {
	            bundleData.addBundleItem(new BundleItem(10800, BundleItemType.IN_GAME_ITEM));
	        }
	        this.addBundle(bundleData);
	        let items = [
	            new BundleItem(10006, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10576, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10576, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10576, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10576, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50043, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10082, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_1", 1200, 10, items, BundlePurchaseType.GEM, 100);
	        items = [
	            new BundleItem(10117, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10578, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10578, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10578, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10578, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10578, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10578, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50123, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10275, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_2", 3600, 25, items, BundlePurchaseType.GEM, 250);
	        items = [
	            new BundleItem(10272, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10575, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10575, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10575, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10575, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50043, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10343, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_3", 900, 40, items, BundlePurchaseType.GEM, 150);
	        items = [
	            new BundleItem(11568, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11568, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11568, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10577, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10577, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10577, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10577, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50123, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10335, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_4", 540, 62, items, BundlePurchaseType.GEM, 150);
	        items = [
	            new BundleItem(11096, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11096, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11096, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10580, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10580, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10580, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10580, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50044, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10235, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_5", 2700, 95, items, BundlePurchaseType.GEM, 250);
	        items = [
	            new BundleItem(11097, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11097, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11097, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10583, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10583, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10583, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10583, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50123, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10470, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10470, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10470, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10470, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_6", 7200, 130, items, BundlePurchaseType.GEM, 150);
	        items = [
	            new BundleItem(10533, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10533, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10533, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10533, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10533, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10581, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10581, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10581, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10581, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50132, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10475, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10475, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10475, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10475, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_7", 660, 148, items, BundlePurchaseType.GEM, 300);
	        items = [
	            new BundleItem(10532, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10532, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10532, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10587, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10587, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10587, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10587, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10587, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50132, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10632, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10632, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10632, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_8", 1500, 176, items, BundlePurchaseType.GEM, 250);
	        items = [
	            new BundleItem(11098, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11098, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11098, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10612, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50004, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10324, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addTimedBundle("TimedBundleChest_9", 12000, 201, items, BundlePurchaseType.GEM, 400);
	        items = [
	            new BundleItem(11098, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11098, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(11098, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10612, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50004, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10324, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addManuallyTriggeredBundle("remotetimedbundle_test", 120000, items, BundlePurchaseType.GEM, 150);
	        items = [
	            new BundleItem(50179, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50187, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50163, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50171, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(50195, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10600, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10601, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10598, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10599, BundleItemType.IN_GAME_ITEM),
	            new BundleItem(10602, BundleItemType.IN_GAME_ITEM)
	        ];
	        this.addManuallyTriggeredBundle("baby_dragons_3", 259200, items, BundlePurchaseType.IAP);
	    }
	    addManuallyTriggeredBundle(i_bundleID, duration, items, purchaseType, gemCost = 0) {
	        let bundleData = new BundleData(i_bundleID, "", null, BundleType.ENABLE_BY_RULE, new BundleConfig(purchaseType, gemCost, i_bundleID, i_bundleID, duration, null), new BundleEnableConfig(BundleEnableAction.STATIC_ON_MAP, BundleEnableRuleType.MANUALLY_TRIGGERED, "", 0), null);
	        for (let i_bundleItem of items) {
	            bundleData.addBundleItem(i_bundleItem);
	        }
	        this.addBundle(bundleData);
	    }
	    addTimedBundle(i_bundleID, duration, starsToSpawn, items, purchaseType, gemCost = 0) {
	        let bundleData = new BundleData(i_bundleID, "", null, BundleType.ENABLE_BY_RULE, new BundleConfig(purchaseType, gemCost, i_bundleID, i_bundleID, duration, null), new BundleEnableConfig(BundleEnableAction.FALL_FROM_SKY, BundleEnableRuleType.CAMP_STARS, "hometotalstar", starsToSpawn), null);
	        for (let i_bundleItem of items) {
	            bundleData.addBundleItem(i_bundleItem);
	        }
	        this.addBundle(bundleData);
	    }
	    constructBundleStatusMap() {
	        this.bundleStatusMap = {};
	        for (let key in this.bundleMap) {
	            this.bundleStatusMap[key] = this.readPersistedBundleStatus(key);
	        }
	    }
	    readPersistedBundleStatus(i_bundleID) {
	        return GGServices.GetDB().getNumber("bundlestatus/" + i_bundleID, BundleStatus.ACTIVE);
	    }
	    constructStatListenerData() {
	    }
	    statValueChangeListener() {
	        let statKey = "hometotalstar";
	        let statValue = Glob.currLevelData.GoalsCompleteInAllChains;
	        if (MergeDragonsAppConfig.TIMED_BUNDLE_CHESTS_ENABLED || MergeDragonsAppConfig.PREMIUM_TIMED_BUNDLE_CHESTS_STATE != 0) {
	            let bundlePurchaseType = (!MergeDragonsAppConfig.TIMED_BUNDLE_CHESTS_ENABLED) ? BundlePurchaseType.GEM : BundlePurchaseType.IAP;
	            if (this.bundleMap != null && Object.keys(this.bundleMap).length > 0) {
	                for (let key in this.bundleMap) {
	                    let value = this.bundleMap[key];
	                    if (value.type == BundleType.ENABLE_BY_RULE
	                        && value.enableConfig != null
	                        && value.enableConfig.statKey
	                        && statKey === (value.enableConfig.statKey)
	                        && value.enableConfig.statValue == statValue
	                        && bundlePurchaseType == value.config.purchaseType) {
	                        Debug.log("---- ENABLE ----- " + value.id + " [" + statKey + " =  " + statValue + "]");
	                        if (value.enableConfig.enableAction == BundleEnableAction.FALL_FROM_SKY) {
	                            Thing.createInFreeCell(10800, "ParticleRoot_EarthImpact", true);
	                            SoundMgr.ins().playSound("m60");
	                        }
	                        GGServices.GetDB().setNumber(value.id, 1);
	                        this.StartBundleTimer(value.id);
	                    }
	                }
	            }
	        }
	    }
	    createLootContentsFromBundle(bundleData, bundleChestDrawnObject) {
	        bundleChestDrawnObject.assignedBundleID = bundleData.id;
	        if (bundleChestDrawnObject.customLootBundle.hasLoot) {
	            bundleChestDrawnObject.customLootBundle.clear();
	        }
	        if (bundleData == null || bundleData.bundleItems == null || bundleData.bundleItems.length <= 0) {
	            return;
	        }
	        for (let i = 0; i < bundleData.bundleItems.length; i++) {
	            if (bundleData.bundleItems[i].type == BundleItemType.IN_GAME_ITEM || bundleData.bundleItems[i].type == BundleItemType.MONSTER) {
	                bundleChestDrawnObject.customLootBundle.addLoot(Number(bundleData.bundleItems[i].bundleItemID));
	            }
	        }
	    }
	    timerListener(timerID, i_duration, i_remaining, i_timerStatus) {
	        if (i_timerStatus == EnumTimerStatus.EXPIRED) {
	            GGServices.GetDB().setNumber(timerID, 3);
	            this.stopBundleTimer(timerID);
	        }
	    }
	    isBundlePurchasable(i_bundle) {
	        if (i_bundle == null) {
	            return false;
	        }
	        let value = GGServices.GetDB().getNumber(i_bundle.id.toLowerCase(), 0);
	        let status = value == null ? BundleStatus.DEACTIVE : value;
	        let int2 = GGServices.GetDB().getNumber(i_bundle.id.toLowerCase() + "_purchasecount", 0);
	        switch (status) {
	            case BundleStatus.ACTIVE:
	                return true;
	            case BundleStatus.PURCHASED:
	                if (int2 < 5) {
	                    return true;
	                }
	                break;
	        }
	        return false;
	    }
	}

	class TimerListener {
	    constructor(i_timerID, i_callback) {
	        this.TimerID = i_timerID;
	        this.Callback = i_callback;
	    }
	}

	class TimerService extends Singleton {
	    constructor() {
	        super();
	        this.Awake();
	        this.Start();
	    }
	    Awake() {
	        this._timerMap = {};
	        this._timerListenerList = [];
	    }
	    Destroy() {
	        this.clearLoop();
	    }
	    Start() {
	        this.readFromDisk();
	    }
	    AddTimer(i_timerData, i_start = false) {
	        if (i_timerData != null && i_timerData.ID && !this._timerMap[i_timerData.ID]) {
	            this._timerMap[i_timerData.ID] = i_timerData;
	            if (i_start) {
	                this.StartTimer(i_timerData.ID);
	            }
	            else {
	                this.persistToDisk();
	            }
	        }
	    }
	    GetTimer(i_timerID) {
	        if (this._timerMap[i_timerID]) {
	            let timerData = this._timerMap[i_timerID];
	            this.updateRemaining(timerData);
	            return timerData;
	        }
	        return null;
	    }
	    RemoveTimer(i_timerID) {
	        if (this._timerMap[i_timerID]) {
	            console.log("Timer removed: " + i_timerID);
	            this._timerMap[i_timerID] = null;
	            delete this._timerMap[i_timerID];
	            this.persistToDisk();
	        }
	    }
	    readFromDisk() {
	        if (this._timerMap == null) {
	            this._timerMap = {};
	        }
	        if (GGServices.GetDB().hasKey(TimerService.KEY)) {
	            let val = GGServices.GetDB().getString(TimerService.KEY, "");
	            if (val) {
	                console.info("Persisted timer management data restored from disk.");
	                let list = JSON.parse(val);
	                list.forEach(item => {
	                    if (!this._timerMap[item.ID]) {
	                        let timer = new TimerData(item.ID, item.ActivationTime, item.Duration);
	                        timer.Status = item.Status;
	                        item.RemainingTime != null && (timer.RemainingTime = item.RemainingTime);
	                        this._timerMap[item.ID] = timer;
	                    }
	                });
	            }
	        }
	    }
	    persistToDisk() {
	        if (this._timerMap != null) {
	            let list = [];
	            for (let key in this._timerMap) {
	                let val = this._timerMap[key];
	                list.push(val);
	            }
	            let valueToSet = JSON.stringify(list);
	            GGServices.GetDB().setString(TimerService.KEY, valueToSet);
	        }
	    }
	    GetTimerIDList() {
	        if (this._timerMap != null) {
	            let keys = Object.keys(this._timerMap);
	            if ((keys.length > 0)) {
	                return keys;
	            }
	        }
	        return null;
	    }
	    AddListener(i_timerID, i_listenerFunction) {
	        if (!i_timerID) {
	            return false;
	        }
	        if (i_listenerFunction == null) {
	            return false;
	        }
	        if (!this._timerMap[i_timerID]) {
	            return false;
	        }
	        let timerData = this._timerMap[i_timerID];
	        if (timerData.Status != EnumTimerStatus.STARTED) {
	            return false;
	        }
	        this._timerListenerList.push(new TimerListener(i_timerID, i_listenerFunction));
	        timerData.RemainingTime = this.TotalSeconds((timerData.ActivationTime - this.DateTimeUtcNow())) + timerData.Duration;
	        this.StartTimeTracking();
	        return true;
	    }
	    RemoveAllListeners() {
	        this._timerListenerList = [];
	    }
	    RemoveListener(i_timerID) {
	        let index = this._timerListenerList.findIndex(item => item.TimerID === i_timerID);
	        this._timerListenerList.splice(index, 1);
	    }
	    HasListener(i_timerID) {
	        return this._timerListenerList.some(item => item.TimerID === i_timerID);
	    }
	    StartTimeTracking() {
	        let delay = 1;
	        let handler = Laya.Handler.create(this, this.runTimerCoroutineOver, [], false);
	        Laya.timer.loop(delay * 1000, this, this.UnscaledUpdateLoop, [handler, delay]);
	    }
	    runTimerCoroutineOver() {
	        if (this._timerListenerList.length > 0) {
	            for (let i = 0; i < this._timerListenerList.length; i++) {
	                let timerData = this._timerMap[this._timerListenerList[i].TimerID];
	                this._timerListenerList[i].Callback.runWith([timerData.ID, timerData.Duration, timerData.RemainingTime, timerData.Status]);
	            }
	        }
	        else {
	            this.clearLoop();
	        }
	    }
	    clearLoop() {
	        Laya.timer.clear(this, this.UnscaledUpdateLoop);
	    }
	    UnscaledUpdateLoop(update, delay) {
	        this._timerListenerList.forEach(listener => {
	            if (this._timerMap[listener.TimerID]) {
	                let timerData = this._timerMap[listener.TimerID];
	                if (timerData.RemainingTime >= delay) {
	                    timerData.RemainingTime -= delay;
	                }
	                else if (timerData.RemainingTime < delay) {
	                    timerData.RemainingTime = 0;
	                    timerData.Status = EnumTimerStatus.EXPIRED;
	                    this.persistToDisk();
	                    listener.Callback.runWith([timerData.ID, timerData.Duration, timerData.RemainingTime, timerData.Status]);
	                    this.RemoveListener(timerData.ID);
	                }
	            }
	            else {
	                this.RemoveListener(listener.TimerID);
	            }
	        });
	        update.run();
	    }
	    StartTimer(i_timerID) {
	        if (i_timerID && this._timerMap[i_timerID] && (this._timerMap[i_timerID].Status != EnumTimerStatus.EXPIRED || this._timerMap[i_timerID].Status != EnumTimerStatus.STARTED)) {
	            this._timerMap[i_timerID].ActivationTime = this.DateTimeUtcNow();
	            this._timerMap[i_timerID].Status = EnumTimerStatus.STARTED;
	            this.persistToDisk();
	        }
	    }
	    StopTimer(i_timerID) {
	        if (i_timerID && this._timerMap[i_timerID]) {
	            this.RemoveListener(i_timerID);
	            this.RemoveTimer(i_timerID);
	        }
	    }
	    updateRemaining(i_timerData) {
	        if (!i_timerData.RemoteSyncFlag) {
	            i_timerData.RemainingTime = (this.TotalSeconds(i_timerData.ActivationTime + i_timerData.Duration * 1000 - this.DateTimeUtcNow()));
	            if (i_timerData.RemainingTime <= 0) {
	                i_timerData.RemainingTime = 0;
	                i_timerData.Status = EnumTimerStatus.EXPIRED;
	            }
	        }
	    }
	    DateTimeUtcNow() {
	        return TimeMgr.ins().getTime();
	    }
	    TotalSeconds(millisecond) {
	        return TimeMgr.ins().toSeconds(millisecond);
	    }
	}
	TimerService.KEY = "md__timermanager";

	class GGServices {
	    static GetTimerService() {
	        return TimerService.ins();
	    }
	    static GetBundleService() {
	        return BundleService.ins();
	    }
	    static GetDB() {
	        return LocalData.ins();
	    }
	}

	class GGProgressionDupeController extends Singleton {
	    GetDupeId(drawnObject) {
	        return drawnObject.cfg.cid + drawnObject.guidString;
	    }
	    StartTimer(drawnObject) {
	        let dupeId = this.GetDupeId(drawnObject);
	        GGServices.GetTimerService().AddTimer(new TimerData(dupeId, TimeMgr.ins().getTime(), !Glob.inHome ? MergeDragonsAppConfig.PROGRESSION_EVENT_DUPE_DURATION
	            : MergeDragonsAppConfig.PROGRESSION_HOME_DUPE_DURATION), true);
	        this.AddListener(drawnObject);
	    }
	    StopTimer(timerId) {
	        if (timerId) {
	            GGServices.GetTimerService().StopTimer(timerId);
	        }
	    }
	    AddListener(obj) {
	        let timerId = this.GetDupeId(obj);
	        this.UpdateObjectTimerBar(obj, GGServices.GetTimerService().GetTimer(timerId));
	        let handler = Laya.Handler.create(this, () => {
	            let timer = GGServices.GetTimerService().GetTimer(timerId);
	            this.UpdateObjectTimerBar(obj, timer);
	            if (timer.Status == EnumTimerStatus.EXPIRED && obj != null && obj != null) {
	                this.DestroyDupeCase(obj, timerId, timer);
	            }
	        }, null, false);
	        GGServices.GetTimerService().AddListener(timerId, handler);
	    }
	    UpdateObjectTimerBar(obj, timerData) {
	        if (obj.meter && obj.meter instanceof ProgTimeDupe) {
	            let component = obj.meter;
	            component.duration = timerData == null ? 0 : timerData.Duration;
	            component.secondsLeft = timerData == null ? 0 : timerData.RemainingTime;
	        }
	    }
	    DestroyDupeCase(obj, id, timerData) {
	        if (obj && !obj.isParentNull) {
	            let position = obj.transform.position;
	            let x = position.x;
	            let position2 = obj.transform.position;
	            Globals.createFromPrefabAt("ParticleRoot_EarthImpact", new Laya.Vector3(x, position2.y, obj.getProperZDepth() - 0.5));
	            obj.destroyDrawnObject();
	            this.StopTimer(id);
	        }
	    }
	    OnProgressionDupeCaseCreation(obj) {
	        let dupeId = this.GetDupeId(obj);
	        let timer = GGServices.GetTimerService().GetTimer(dupeId);
	        SoundMgr.ins().playSound("m118");
	        if (timer != null) {
	            if (timer.Status == EnumTimerStatus.STARTED) {
	                if (!GGServices.GetTimerService().HasListener(dupeId)) {
	                    this.AddListener(obj);
	                }
	                this.CreateDupeIcon(obj);
	                GGProgressionDupeController.AttachProgressMeterTimer(obj, timer);
	            }
	            else if (timer.Status == EnumTimerStatus.EXPIRED && !ShopSaveMgr.HasPurchasedProgressionDupe(dupeId)) {
	                this.DestroyDupeCase(obj, dupeId, timer);
	            }
	        }
	        else {
	            this.StartTimer(obj);
	            this.CreateDupeIcon(obj);
	            timer = GGServices.GetTimerService().GetTimer(dupeId);
	            GGProgressionDupeController.AttachProgressMeterTimer(obj, timer);
	        }
	    }
	    CreateDupeIcon(jar) {
	        let loot = GGProgressionDupeController.GetLoot(jar);
	        let prefName = PropsCfg.getPref(loot);
	        let rend = Globals.createFromPrefab(prefName);
	        jar.addChild(rend);
	        rend.transform.localPositionZ = 1;
	    }
	    OnProgressionDupeCasePurchasedCreation(obj) {
	        obj.detachProgressBar();
	        this.CreateDupeIcon(obj);
	        obj.showConfirmationPopup();
	        SoundMgr.ins().playSound("m126");
	        SoundMgr.ins().playSound("m125");
	    }
	    static AttachProgressMeterTimer(obj, timerData) {
	        obj.attachProgressBar(ProgTimeDupe, false);
	    }
	    GetPrefabForWidthAndHeight(def, purchased = false) {
	        let id = StringUtil.format("{0}_{1}{2}", def.widthCell, def.heightCell, purchased ? "_p" : "");
	        return GGProgressionDupeController.ids[id];
	    }
	    CreateCase(mainNewObject) {
	        if ((GmCmd.TEST_ALWAYS_PROGRESSION_DUPE || GGProgressionDupeController.ShouldDupe(mainNewObject)) && !Glob.cellLayer.boardTooFullFor(mainNewObject.cfg.cid)) {
	            let drawnObject = Thing.createAndSwoopAndSetCustomLootBundle(this.GetPrefabForWidthAndHeight(mainNewObject.cfg), mainNewObject.drawnCenter, mainNewObject.cfg.cid);
	        }
	    }
	    static ShouldDupe(mainNewObject) {
	        return mainNewObject.cfg.hasDupeChance(Glob.inAnEventArea) && MathUtil.chance(mainNewObject.cfg.getDupeChance(Glob.inAnEventArea));
	    }
	    static GetLoot(obj) {
	        if (obj.customLootBundle == null || !obj.customLootBundle.hasPrefabLoot) {
	            GuiMgr.errorMessage("Tried to obtain prefab from loot bundle but it was empty.");
	            return null;
	        }
	        return obj.customLootBundle.prefabLoot[0];
	    }
	    CustomCall_ProgressionDupeDialogOpen(drawnObject) {
	        let dupeId = this.GetDupeId(drawnObject);
	        if (!ShopSaveMgr.HasPurchasedProgressionDupe(dupeId)) {
	            let timer = GGServices.GetTimerService().GetTimer(dupeId);
	            if (timer != null && timer.Status != EnumTimerStatus.EXPIRED) {
	                LayerMgr.ins().open(UiConst.ModalProgressionDupe, {
	                    glassCase: drawnObject,
	                    itemInsideCase: GGProgressionDupeController.GetLoot(drawnObject),
	                });
	            }
	        }
	    }
	    CustomCall_ProgressionDupePurchasedTap(obj) {
	        this.AwardDupe(obj);
	    }
	    AwardDupe(obj) {
	        let childs = [];
	        GameUtil.getChildrens(obj, Laya.ShuriKenParticle3D, childs);
	        for (let item of childs) {
	            item.particleSystem.play();
	        }
	        this.currentLevel = Glob.currentLevel;
	        this.lastObj = obj;
	        Laya.timer.once(800, this, this.playSound);
	    }
	    playSound() {
	        if (this.currentLevel != Glob.currentLevel || this.lastObj.isParentNull) {
	            return;
	        }
	        SoundMgr.ins().playSound("m125");
	        Laya.timer.once(950, this, this.purchased);
	    }
	    purchased() {
	        if (this.currentLevel != Glob.currentLevel || this.lastObj.isParentNull) {
	            return;
	        }
	        let vo = PropsCfg.get(GGProgressionDupeController.GetLoot(this.lastObj));
	        if (!vo)
	            return;
	        let purchased = this.lastObj.destroyAndReplaceWith(vo, false);
	        Flasher.flashWhite(purchased);
	    }
	}
	GGProgressionDupeController.ids = {
	    "1_1": 11019,
	    "1_2": 11020,
	    "2_1": 11021,
	    "2_2": 11022,
	    "3_2": 11023,
	    "3_3": 11024,
	    "1_1_p": 11025,
	    "1_2_p": 11026,
	    "2_1_p": 11027,
	    "2_2_p": 11028,
	    "3_2_p": 11029,
	    "3_3_p": 11030,
	};

	class ChainMatchInfo {
	    constructor(originatorGuid, originatorPrefabName) {
	        this.chainCount = 0;
	        this.activePotentialMatchers = [];
	        this.matchOriginatorGUID = originatorGuid;
	        this.originatorPrefabName = originatorPrefabName;
	    }
	    incrementMatches() {
	        this.chainCount++;
	    }
	    chainEndCelebration() {
	        if (this.chainCount >= 2) {
	            let num = (this.chainCount <= ChainMatchInfo.chainStrings.length - 1) ? this.chainCount : (ChainMatchInfo.chainStrings.length - 1);
	            let length = ChainMatchInfo.chainStrings[0].length;
	            let num2 = MathUtil.randInt(0, length - 1);
	            let textLocKey = LanCfg.get(ChainMatchInfo.chainStrings[num][num2]);
	            FloatingText.CreateChainText(textLocKey, this.chainCount, new Laya.Vector3(this.mostRecentMatchLeaderPosition.x, this.mostRecentMatchLeaderPosition.y, -2));
	        }
	    }
	    static matchOutputCreated(drawnObjectOutput) {
	        if (!drawnObjectOutput.cfg.matchable) {
	            return;
	        }
	        let matchChainOriginatorGuid = drawnObjectOutput.matchChainOriginatorGuid;
	        if (this.verifyGUID(matchChainOriginatorGuid, true)) {
	            let chainMatchInfo = this.chainMatchInfos[matchChainOriginatorGuid];
	            ArrayUtil.contains(chainMatchInfo.activePotentialMatchers, drawnObjectOutput);
	            if (ArrayUtil.contains(chainMatchInfo.activePotentialMatchers, drawnObjectOutput)) {
	                GuiMgr.errorMessage("In ChainMatchInfo::MatchOutputCreated(), trying to add the same drawnObjectOutput a 2nd time to the chainInfo.m_activePotentialMatchers list!");
	            }
	            else {
	                chainMatchInfo.activePotentialMatchers.push(drawnObjectOutput);
	            }
	        }
	    }
	    static masterCreatedAMatch(masterDrawnObject, masterPrefabName) {
	        let num = (masterDrawnObject.matchChainOriginatorGuid != 0) ? masterDrawnObject.matchChainOriginatorGuid : masterDrawnObject.guid;
	        if (!this.chainMatchInfos[num]) {
	            this.chainMatchInfos[num] = new ChainMatchInfo(num, masterPrefabName);
	        }
	        let chainMatchInfo = this.chainMatchInfos[num];
	        chainMatchInfo.mostRecentMatchLeaderPosition = masterDrawnObject.transform.position;
	        chainMatchInfo.incrementMatches();
	    }
	    static objectFailedToChain(drawnObject) {
	        let matchChainOriginatorGuid = drawnObject.matchChainOriginatorGuid;
	        if (!this.verifyGUID(matchChainOriginatorGuid, true)) {
	            return;
	        }
	        let chainMatchInfo = this.chainMatchInfos[matchChainOriginatorGuid];
	        if (!chainMatchInfo) {
	            GuiMgr.errorMessage("In ChainMatchInfo::ObjectFailedToChain(), the drawnObject doesn't have an originator guid that that's in the match info list.");
	            return;
	        }
	        if (!ArrayUtil.contains(chainMatchInfo.activePotentialMatchers, drawnObject)) {
	            GuiMgr.errorMessage("In ChainMatchInfo::ObjectFailedToChain(), trying to remove a drawnObject that isn't even in the ChainInfo object.");
	            return;
	        }
	        ArrayUtil.remove(chainMatchInfo.activePotentialMatchers, drawnObject);
	        drawnObject.matchChainOriginatorGuid = 0;
	        this.checkForChainEnd(chainMatchInfo);
	    }
	    static matchLeaderRetired(matchLeaderToRetire) {
	        let matchChainOriginatorGuid = matchLeaderToRetire.matchChainOriginatorGuid;
	        if (!this.verifyGUID(matchChainOriginatorGuid)) {
	            return;
	        }
	        let chainMatchInfo = this.chainMatchInfos[matchChainOriginatorGuid];
	        if (!chainMatchInfo) {
	            GuiMgr.errorMessage("In ChainMatchInfo::MatchLeaderRetired(), the match leader to retire doesn't have an originator guid that that's in the match info list.");
	            return;
	        }
	        if (!ArrayUtil.contains(chainMatchInfo.activePotentialMatchers, matchLeaderToRetire)) {
	            GuiMgr.errorMessage("In ChainMatchInfo::MatchLeaderRetired(), trying to retire a match leader that isn't even in the ChainInfo object.");
	        }
	        else {
	            ArrayUtil.remove(chainMatchInfo.activePotentialMatchers, matchLeaderToRetire);
	        }
	    }
	    static verifyGUID(guid, printErrors = false) {
	        if (guid == 0) {
	            if (printErrors) {
	                GuiMgr.errorMessage("Got an object in ChainMatchInfo that has an invalid match originator guid.");
	            }
	            return false;
	        }
	        return true;
	    }
	    static pingFromNonMatchableMatchOutput(drawnObject) {
	        let matchChainOriginatorGuid = drawnObject.matchChainOriginatorGuid;
	        if (this.verifyGUID(matchChainOriginatorGuid) && this.chainMatchInfos[matchChainOriginatorGuid]) {
	            let chainInfo = this.chainMatchInfos[matchChainOriginatorGuid];
	            this.checkForChainEnd(chainInfo);
	        }
	    }
	    static pingFromDyingMatchSlaveInput(dyingMatchInput) {
	        let matchChainOriginatorGuid = dyingMatchInput.matchChainOriginatorGuid;
	        if (this.verifyGUID(matchChainOriginatorGuid) && this.chainMatchInfos[matchChainOriginatorGuid]) {
	            let chainMatchInfo = this.chainMatchInfos[matchChainOriginatorGuid];
	            ArrayUtil.remove(chainMatchInfo.activePotentialMatchers, dyingMatchInput);
	            this.checkForChainEnd(chainMatchInfo);
	        }
	    }
	    static checkForChainEnd(chainInfo) {
	        if (chainInfo.activePotentialMatchers.length > 0) {
	            return;
	        }
	        if (Debug.printMatchChains) {
	            console.log("[" + chainInfo.chainCount + "] Match Chain Length from Originator [" + chainInfo.originatorPrefabName + "] for guid: " + chainInfo.matchOriginatorGUID);
	        }
	        chainInfo.chainEndCelebration();
	        delete this.chainMatchInfos[chainInfo.matchOriginatorGUID];
	    }
	}
	ChainMatchInfo.chainMatchInfos = {};
	ChainMatchInfo.chainStrings = [
	    ["10030001", "10030002", "10030003"],
	    ["10030004", "10030005", "10030006"],
	    ["10030007", "10030008", "10030009"],
	    ["10030010", "10030011", "10030012"],
	    ["10030013", "10030014", "10030015"],
	    ["10030016", "10030017", "10030018"],
	    ["10030019", "10030020", "10030021"],
	    ["10030022", "10030023", "10030024"],
	    ["10030025", "10030026", "10030027"]
	];

	class CompGoBaseAnimTween extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.randomAnimDelayMax = 0;
	        this.animTimePos = 0;
	        this.tweenPosY = 0;
	        this.tweenPosX = 0;
	        this.posEase = EaseType.easeInOutQuad;
	        this.animTimeRot = 0;
	        this.tweenRot = 0;
	        this.rotLoop = LoopType.pingPong;
	        this.rotEase = EaseType.easeInOutQuad;
	        this.animTimeScale = 0;
	        this.tweenScale = 0;
	        this.mEnabled = true;
	    }
	    onStart() {
	        this.cacheOwnerAndDoSetupIfNeeded();
	    }
	    cacheOwnerAndDoSetupIfNeeded() {
	        if (this.setupComplete) {
	            return;
	        }
	        if (this._owner == null) {
	            this._owner = this.owner;
	        }
	        if (this.randomAnimDelayMax > 0) {
	            this.delayTimer = new Clock();
	            this.delayTimer.setRange(new Range(0, this.randomAnimDelayMax));
	        }
	        if (this.rotLoop == LoopType.loop) {
	            this.rotEase = EaseType.linear;
	        }
	        this.setupComplete = true;
	    }
	    onUpdate() {
	        this.cacheOwnerAndDoSetupIfNeeded();
	        if (!this.mEnabled) {
	            return;
	        }
	        if (this.delayTimer != null && this.delayTimer.going) {
	            this.delayTimer.update(Glob.deltaTime);
	        }
	        else if (!this.animationPlaying) {
	            this.startAnim();
	        }
	    }
	    startAnim() {
	        this.animationPlaying = true;
	        this.cacheOwnerAndDoSetupIfNeeded();
	        if (this.tweenPosX != 0 || this.tweenPosY != 0) {
	            let num = 1;
	            if (this.pullOverallMovementScaleFactorFromRoot) {
	                let localScale = this._owner.transform.localScale;
	                num = localScale.x;
	            }
	            Tween.MoveBy3(this._owner, "BaseAnimTween", this.animTimePos, this.tweenPosX * num, this.tweenPosY * num, LoopType.pingPong, this.posEase);
	        }
	        if (this.tweenRot != 0) {
	            Tween.RotateBy3(this._owner, "BaseAnimTween", this.animTimeRot, this.tweenRot, this.rotLoop, this.rotEase);
	        }
	        if (this.tweenScale != 0) {
	            Tween.ScaleBy3(this._owner, "BaseAnimTween", this.animTimeScale, this.tweenScale, LoopType.pingPong, EaseType.easeInOutQuad);
	        }
	        if (this.delayTimer != null) {
	            this.delayTimer.reset();
	        }
	    }
	    stopAnim() {
	        this.animationPlaying = false;
	        this.cacheOwnerAndDoSetupIfNeeded();
	        if (this.tweenPosX != 0 || this.tweenPosY != 0) {
	            iTween.StopByName2(this._owner, "BaseAnimTween");
	        }
	        if (this.tweenRot != 0 || this.tweenScale != 0) {
	            iTween.StopByName2(this._owner, "BaseAnimTween");
	        }
	        if (this.delayTimer != null) {
	            this.delayTimer.reset();
	        }
	    }
	    enableAnim() {
	        this.mEnabled = true;
	    }
	    disableAnim() {
	        if (this.mEnabled) {
	            this.stopAnim();
	            this.mEnabled = false;
	        }
	    }
	}

	class DropTargetInfo extends Laya.Sprite3D {
	    constructor() {
	        super();
	        this.init();
	    }
	    static get ins() {
	        if (!this._ins) {
	            this._ins = new DropTargetInfo();
	            Glob.map.addParticle(this._ins);
	        }
	        return this._ins;
	    }
	    init() {
	        this.txt = Text3DMgr.ins().createByColor(InfoTextColorID.Green);
	        this.addChild(this.txt);
	        this.txt.transform.localPosition = new Laya.Vector3(0, 0.2, -0.01);
	        this.arrow = Globals.createFromPrefab("jiantou02");
	        let comp = this.arrow.addComponent(CompGoBaseAnimTween);
	        comp.animTimePos = 1;
	        comp.tweenPosY = 0.1;
	        this.addChild(this.arrow);
	        this.arrow.transform.localPosition = new Laya.Vector3(0, 0.5, 0);
	    }
	    setActive(v) {
	        this.active = v;
	    }
	    setText(v) {
	        if (!v)
	            v = "";
	        this.txt.label = v;
	    }
	    setPos(v) {
	        this.transform.position = v;
	    }
	}

	class FingerGuider extends Sprite2D {
	    constructor() {
	        super();
	        this.imgLine = new Laya.Image();
	        this.imgFinger = new Laya.Image();
	        this._percent = 0;
	        this.angle = 0;
	        this.distance = 0;
	        this.distanceX = 0;
	        this.distanceY = 0;
	        this.to = new Laya.Vector2();
	        this.addChild(this.imgFinger);
	        this.imgFinger.size(44, 47);
	        this.imgFinger.skin = "res/comp/zy_shou.png";
	        this.addChild(this.imgLine);
	        this.imgLine.skin = "res/comp/zy_jianbian.png";
	    }
	    get percent() {
	        return this._percent;
	    }
	    set percent(val) {
	        this._percent = val;
	        this.imgLine.rotation = this.angle;
	        this.imgLine.width = this.distance * val;
	        this.imgFinger.pos(this.distanceX * val, this.distanceY * val);
	    }
	    playAnim() {
	        this.percent = 0;
	        Laya.Tween.to(this, { percent: 1 }, 1200, null, Laya.Handler.create(this, this.playAnim));
	    }
	    setData(to) {
	        this.distanceX = to.x;
	        this.distanceY = to.y;
	        this.angle = MathUtil.getAngleByXY(0, 0, to.x, to.y);
	        this.distance = MathUtil.getDistance(0, 0, to.x, to.y);
	    }
	    show(arg) {
	        this.arg = arg;
	        this.setHook(arg.from);
	        let posTo = CameraMgr.toScreenPos(arg.to.transform.position);
	        let posFrom = CameraMgr.toScreenPos(arg.from.transform.position);
	        this.to.setValue(posTo.x - posFrom.x, posTo.y - posFrom.y);
	        this.setData(this.to);
	        this.playAnim();
	    }
	    onUpdate() {
	        super.onUpdate();
	        this.scale(1, 1);
	        let posTo = CameraMgr.toScreenPos(this.arg.to.transform.position);
	        let posFrom = CameraMgr.toScreenPos(this.arg.from.transform.position);
	        let to = new Laya.Vector2(posTo.x - posFrom.x, posTo.y - posFrom.y);
	        this.setData(to);
	    }
	    onDisable() {
	        Laya.Tween.clearAll(this);
	    }
	}

	class FingerGuiderMgr {
	    static update(guidePrefs) {
	        if (InputMgr.inputJustReleased()) {
	            if (!this.isShow) {
	                this.clock.reset();
	            }
	        }
	        if (this.clock.done) {
	            this.clock.reset();
	            if (!this.isShow) {
	                this.check(guidePrefs);
	            }
	        }
	        else {
	            if (!InputMgr.isDown()) {
	                this.clock.update(Glob.deltaTime);
	            }
	        }
	    }
	    static check(prefs) {
	        if (this.isShow)
	            return;
	        for (let pref of prefs) {
	            let target = this.checkPref(pref);
	            if (target && target.from && target.to) {
	                this.show(target.from, target.to);
	                break;
	            }
	        }
	    }
	    static checkPref(pref) {
	        let prefCfg = PropsCfg.get(pref);
	        if (prefCfg.widthCell !== 1 || prefCfg.heightCell !== 1) {
	            Debug.log("warning!!! finger do not guide a thing with mutiply cells, ", pref);
	            return null;
	        }
	        let num = 0;
	        let thingList = ThingList.lists[prefCfg.cid];
	        thingList && thingList.forEach(item => {
	            if (item.getComponent(CompFilledWithDeath) == null) {
	                num++;
	            }
	        });
	        if (num > 2) {
	            let from = thingList.find(thing => {
	                let cell = Glob.cellLayer.getCellCameraPos(thing.x, thing.y);
	                if (cell) {
	                    let hasSameKind = false;
	                    let neighbors = [];
	                    cell.up && neighbors.push(cell.up);
	                    cell.down && neighbors.push(cell.down);
	                    cell.left && neighbors.push(cell.left);
	                    cell.right && neighbors.push(cell.right);
	                    for (let neighbor of neighbors) {
	                        if (!neighbor.dead && neighbor.occupant && neighbor.occupant.cfg.cid === thing.cfg.cid) {
	                            hasSameKind = true;
	                            break;
	                        }
	                    }
	                    return !hasSameKind;
	                }
	                return false;
	            });
	            from = from == null ? thingList[0] : from;
	            let to = null;
	            for (let thing of thingList) {
	                if (thing != from) {
	                    let cell = Glob.cellLayer.getCellCameraPos(thing.x, thing.y);
	                    if (cell) {
	                        let neighbors = [];
	                        cell.up && neighbors.push(cell.up);
	                        cell.down && neighbors.push(cell.down);
	                        cell.left && neighbors.push(cell.left);
	                        cell.right && neighbors.push(cell.right);
	                        for (let neighbor of neighbors) {
	                            if (!neighbor.dead && !neighbor.occupant) {
	                                to = neighbor;
	                                break;
	                            }
	                        }
	                        if (to) {
	                            break;
	                        }
	                    }
	                }
	            }
	            return { from, to };
	        }
	        return null;
	    }
	    static hide() {
	        if (this.isShow) {
	            this.clock.reset();
	            this.finger.dispose();
	            this.isShow = false;
	        }
	    }
	    static show(from, to) {
	        if (!this.finger) {
	            this.finger = new FingerGuider();
	        }
	        this.finger.show({ from, to });
	        this.isShow = true;
	    }
	    static clear() {
	        if (this.isShow) {
	            this.isShow = false;
	            this.clock.reset();
	            this.finger.dispose();
	        }
	    }
	}
	FingerGuiderMgr.isShow = false;
	FingerGuiderMgr.clock = new Clock(1.2);
	FingerGuiderMgr.finger = null;

	class Thing extends Unit {
	    constructor() {
	        super();
	        this._guid = 0;
	        this.initialized = false;
	        this.matchState = MatchState.Idle;
	        this.restingScale = new Laya.Vector3();
	        this.originalScale = new Laya.Vector3();
	        this.originalPosition = new Laya.Vector3();
	        this.originalRotation = new Laya.Quaternion();
	        this.originalHeightOffsetToTop = 0;
	        this.matchPartners = [];
	        this.startingHarvestCharges = -1;
	        this.chainReactionDepth = 0;
	        this.lastPosition = new Laya.Vector3();
	        this.matchChainOriginatorGuid = 0;
	        this.tapsLeft = 0;
	        this.startingTaps = 0;
	        this.harvesters = [];
	        this._bounds = new Laya.Bounds(Vector3.ZERO, new Laya.Vector3(0.845332, 0.702429, 0));
	        this.hp = 0;
	        this.tweenBuildVFXThrottle = 0;
	        this.adjustZ = 0;
	        this.enabled = true;
	        this.tweenRotateThrottle = 0;
	        this._bounds.getExtent();
	        this.localPositionAnimTarget = new Laya.Sprite3D();
	        this.addChild(this.localPositionAnimTarget);
	        this.localPositionAnimTarget.transform.localPosition.cloneTo(this.originalPosition);
	    }
	    ;
	    get isParentNull() {
	        return this.isDispose || !this.transform;
	    }
	    get hasUsers() {
	        return this.users && this.users.length > 0;
	    }
	    get hasDragonAttackers() {
	        return this.numDragonAttackers > 0;
	    }
	    get home() {
	        if (this.homeComponent == null) {
	            console.error("Calling the Home property on DrawnObject on an object that has it set to null. This should never be possible.");
	        }
	        return this.homeComponent;
	    }
	    get customLootBundle() {
	        if (this._customLootBundle == null) {
	            this._customLootBundle = new LootBundle();
	        }
	        return this._customLootBundle;
	    }
	    set customLootBundle(v) {
	        this._customLootBundle = v;
	    }
	    get hasCustomLoot() {
	        return this._customLootBundle != null && this._customLootBundle.count > 0;
	    }
	    get strength() {
	        if (this.cfg.usesDynamicStrength) {
	            return this.dynamicStrength;
	        }
	        return this.cfg.getStrength();
	    }
	    set strength(value) {
	        if (this.cfg.usesDynamicStrength) {
	            this.dynamicStrength = value;
	        }
	    }
	    get dead() {
	        return this.deathComponent != null;
	    }
	    get guid() {
	        return this._guid;
	    }
	    get guidString() {
	        return this._guidString;
	    }
	    get activeSelf() {
	        return this.active;
	    }
	    get selected() {
	        return this._selected;
	    }
	    get drawnObjectPosition() {
	        return new Laya.Vector3(this.drawnX, this.drawnY, this.z);
	    }
	    get drawnX() {
	        return this.x + this.localPositionAnimTarget.transform.localPosition.x;
	    }
	    get drawnY() {
	        return this.y + this.localPositionAnimTarget.transform.localPosition.y;
	    }
	    get atOriginalLocalTransform() {
	        return Laya.Vector3.equals(this.localPositionAnimTarget.transform.localPosition, this.originalPosition) &&
	            this.body.transform.localRotation.equals(this.originalRotation) &&
	            Laya.Vector3.equals(this.body.transform.localScale, this.restingScale);
	    }
	    get sellValue() {
	        if (Glob.inHome || Glob.inAnEventArea) {
	            return !this.hasDynamicSellValue ? this.cfg.getSellValue(Glob.inAnEventArea) : this.dynamicSellValue;
	        }
	        return 0;
	    }
	    get hasTapsAvailable() {
	        return this.tapsLeft > 0 || this.cfg.infiniteTaps;
	    }
	    setCid(cid) {
	        this.cid = cid;
	        this.setNid(PropsCfg.getPref(cid));
	        this.frameOnce(1, this, this.initMain);
	    }
	    addBody() {
	        this.localPositionAnimTarget.addChild(this.body);
	    }
	    bodyLoaded() {
	        super.bodyLoaded();
	        this.body.thing = this;
	        this.originalHeightOffsetToTop = this.bounds.getMax().y - this.y;
	        this.adjustMeter();
	        this.adjustTapArrow();
	    }
	    updateBody() {
	        super.updateBody();
	        this.body.transform.localScale.cloneTo(this.restingScale);
	        this.restingScale.cloneTo(this.originalScale);
	        this.body.transform.localRotation.cloneTo(this.originalRotation);
	    }
	    setActive(v) {
	        this.active = v;
	    }
	    setMatchState(value) {
	        this.matchState = value;
	        this.wakeUp(false);
	    }
	    get positionTopCenter() {
	        let size = this.bounds.getExtent();
	        return new Laya.Vector3(this.drawnX, this.drawnY + size.y, this.z);
	    }
	    initMain() {
	        if (this.initialized)
	            return;
	        this.initialized = true;
	        this.setGuid();
	        if (this.matchState == MatchState.Death)
	            return;
	        if (!this.cfg) {
	            let vo = PropsCfg.get(this.cid);
	            if (vo) {
	                this.setDefinition(vo);
	            }
	            else {
	                console.error("** NOT attaching definition to: " + this.cid);
	                this.destroy(true);
	                return;
	            }
	        }
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.DrawOnly) {
	            return;
	        }
	        this.initLocalDataFromDefinition_Universal();
	        if (Glob.currentLevel == null) {
	            return;
	        }
	        if (this.requiresCellPlacement && this.metaCell == null && this.matchState != MatchState.BeingCarried) {
	            let metaCell = null;
	            let flag = false;
	            if (!Glob.currentLevel.loadComplete) {
	                metaCell = Glob.map.getMetaCell(this.x, this.y, this.cfg.widthCell, this.cfg.heightCell, true);
	            }
	            else {
	                flag = true;
	            }
	            if (!flag) {
	                if (metaCell == null) {
	                    LootOrb.createFromInstance(this);
	                    this.destroyDrawnObject_Immediate(DeathReasonID.Error);
	                    return;
	                }
	                this.setRootPosition(metaCell.x, metaCell.y);
	                if (metaCell.occupied) {
	                    LootOrb.createFromInstance(this);
	                    this.destroyDrawnObject_Immediate(DeathReasonID.Error);
	                    return;
	                }
	                this.occupyMetaCell(metaCell);
	            }
	        }
	        else if (!this.requiresCellPlacement && !this.makeImmuneToDeathOnCreation) {
	            if (!this.loadedFromSave) {
	                this.tryAddDeathComponents();
	            }
	            else if (this.wasDeadWhenSaved) {
	                this.tryAddDeathComponents();
	            }
	        }
	        this.addToCategoryLists();
	        this.initLocalDataFromDefinition_InLevelOnly();
	        this.refreshShrinkScaleFromTapOrHarvest();
	        this.init_TrySatisfyGoals();
	        if (this.cfg.draggable && !this.cfg.requiresCellPlacement) {
	            this.dragMomentum = this.addComponent(CompDragMomentum);
	        }
	        if (this.cfg.eventCreated) {
	            this.cfg.eventCreated.runWith(this);
	        }
	        if (this.matchState != MatchState.Keyhole) {
	            this.tryInitTapVisualizer();
	            this.tryGiveCreationPoints();
	            this.tryCreateChainBonusEssence();
	            this.tryAddLock();
	            this.tryAddTapArrow();
	            this.tryShowCreationDialog();
	            this.tryTrackNewDragonPower();
	        }
	        if (!this.isMonster) {
	            this.triggerObjSpawnEvent();
	        }
	        if (!this.isTemporary) {
	            this.isOriginalObjectInitialized = true;
	        }
	        if (this.cfg.isFog) {
	            this.updateZ(true);
	            this.enabled = false;
	        }
	        else {
	            this.frameLoop(1, this, this.loop);
	        }
	    }
	    triggerObjSpawnEvent() {
	        MsgCenter.notify(MsgConst.THING_SPAWN, this);
	    }
	    get drawnCenter() {
	        return this.transform.position;
	    }
	    loop() {
	        if (!this.enabled)
	            return;
	        if (!this.activeSelf)
	            return;
	        this.update();
	        if (!this.destroyedProperly) {
	            this.lateUpdate();
	        }
	    }
	    init_TrySatisfyGoals() {
	        if (this.matchState == MatchState.Keyhole) {
	            return;
	        }
	        if (!this.loadedFromSave || (this.isMonster && this.asMonster.summoned)) {
	            if (!this.createdDuringFreshMapLoad) {
	                let discoveryState = this.cfg.discoveryState;
	                MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.Create, thing: this });
	                Menu_ItemsDiscovered.tryItemDiscovered(this);
	                DragonBookMgr.ins().tryUpdateDragonBookPIP(this);
	            }
	            GoalMgr.ins().HaveObjects(this);
	        }
	        if (this.cfg.cid == Glob.currLevelData.cfg.finishPref) {
	            GoalMgr.ins().CheckForLevelCompletion(ThingList.lists[this.cfg.cid]);
	        }
	    }
	    tryInitTapVisualizer() {
	    }
	    isInADraggableState() {
	        if (!this.cfg.draggable) {
	            return false;
	        }
	        if (this.metaCell && this.metaCell.anchor.isSticky) {
	            return false;
	        }
	        return this.isInASelectableState();
	    }
	    isInASelectableState() {
	        if (!this.cfg.selectable) {
	            return false;
	        }
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.ReservedByEnemy || this.matchState == MatchState.Death
	            || this.matchState == MatchState.Dying || this.matchState == MatchState.Matching || this.matchState == MatchState.ReservedForMatch
	            || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.DrawOnly || this.matchState == MatchState.FlyingToUI) {
	            return false;
	        }
	        if (this.deathComponent != null) {
	            return false;
	        }
	        if (this.keyObjectComp != null) {
	            return false;
	        }
	        return true;
	    }
	    isInASellableState(ignoreSellable = false) {
	        if (this.isDispose) {
	            return false;
	        }
	        if (!this.cfg.getIsSellable(Glob.inAnEventArea) && !ignoreSellable) {
	            return false;
	        }
	        if (this.isDying()) {
	            return false;
	        }
	        if (!this.isInAKillableState()) {
	            return false;
	        }
	        if (Glob.inAnEventArea_Type2_ScorePuzzle) {
	            return false;
	        }
	        if (!this.activeSelf) {
	            return false;
	        }
	        return true;
	    }
	    isInAKillableState() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.Death || this.matchState == MatchState.Matching || this.matchState == MatchState.ReservedForMatch || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        return true;
	    }
	    beingIsAttackable() {
	        if (this.matchState == MatchState.Idle || this.matchState == MatchState.PostSwoopStillSelected || this.matchState == MatchState.SwoopingToCell || this.matchState == MatchState.SwoopingToOffGridLocation) {
	            return true;
	        }
	        return false;
	    }
	    select() {
	        CameraMgr.clearFollowTarget();
	        this._selected = true;
	        ThingAnim.playGrabbed(this);
	        SoundMgr.ins().playSound(SoundConst.SelectObject);
	        if (!this.cfg.hideInfoAndHighlight) {
	            this.highlightGreen();
	            FingerGuiderMgr.hide();
	            MsgCenter.notify(MsgConst.THING_SELECT, this);
	            if (!this.cfg.draggable && !this.isEnemy && Glob.currLevelData.isHome) {
	                TomeTip.showGameTip(GameTipTypeID.Tip_ImmovableObjects);
	            }
	        }
	        if (this.cfg.selectedGameTip) {
	            TomeTip.showGameTip(this.cfg.selectedGameTip);
	        }
	    }
	    highlightGreen() {
	        this.removeHighlight();
	        if (this.cfg.draggable) {
	            if (this.cfg.matchable) {
	                if (this.cfg.requiresCellPlacement) {
	                    let text = "DiKuaiLvZ" + this.cfg.widthCell + "_" + this.cfg.heightCell;
	                    this.highlight = PrefMgr.get(text);
	                    if (this.highlight == null) {
	                        console.error("Could not find a highlight prefab for object with these dimensions. Expected: " + text + " for object " + this);
	                        this.highlight = PrefMgr.get("DiKuaiLvZ");
	                    }
	                }
	                else {
	                    this.highlight = PrefMgr.get("DiKuaiLvY1_1");
	                }
	            }
	            else {
	                this.highlight = PrefMgr.get(this.getBlackHighlightPrefabName());
	            }
	        }
	        else {
	            this.highlight = PrefMgr.get(this.getBrownHighlightPrefabName());
	        }
	        this.highlight.transform.localPosition = new Laya.Vector3(0, 0, 0.01);
	        this.addChild(this.highlight);
	    }
	    removeHighlight() {
	        if (this.highlight) {
	            this.highlight.dispose();
	        }
	        this.highlight = null;
	    }
	    deselect() {
	        MsgCenter.notify(MsgConst.THING_CANCALE_SELECT, this);
	        MoverMgr.deselectIfActiveObject(this, true);
	        this._selected = false;
	        this.removeHighlight();
	        if (this.isDying() || this.isFlyingToUI()) {
	            return;
	        }
	        if (this.targetMetaCell != null && this.targetMetaCell != this.metaCell && this.targetMetaCell.dead && this.targetMetaCell.anchor.isKeyhole && !this.targetMetaCell.anchor.isUnlocked) {
	            this.targetMetaCell.anchor.keyObjectSilhoutte.keyIndicator.showDeadInfoPopup();
	        }
	        if (this.targetMetaCell != null && this.targetMetaCell != this.metaCell && !this.targetMetaCell.canBeOccupiedBy(this)) {
	            this.tryOccupyTargetMetaCellByPushingOccupants_OtherwiseInvalidPlacementDrop();
	        }
	        else {
	            if (this.matchState == MatchState.SwoopingToOffGridLocation || this.matchState == MatchState.SwoopingToCell) {
	                return;
	            }
	            if (this.targetMetaCell == this.metaCell) {
	                this.setMatchState(MatchState.Idle);
	                if (this.metaCell != null) {
	                    let anchor = this.metaCell.anchor;
	                    if (anchor.isKeyhole) {
	                        let keyedFogGroupId = anchor.keyedFogGroupId;
	                        CloudDungeon.unlockCloudDungeon(keyedFogGroupId);
	                    }
	                }
	                this.tryActivateMatch();
	            }
	        }
	    }
	    get x() {
	        return this.transform.position.x;
	    }
	    get y() {
	        return this.transform.position.y;
	    }
	    get z() {
	        return this.transform.position.z;
	    }
	    get isMonster() {
	        return (this instanceof Monster);
	    }
	    get isBeing() {
	        return (this instanceof Being);
	    }
	    get isEnemy() {
	        return (this instanceof Enemy);
	    }
	    get asMonster() {
	        return this;
	    }
	    get asEnemy() {
	        return this;
	    }
	    canBringHome() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.Dying || this.matchState == MatchState.Death || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        return this.cfg.canTakeHome;
	    }
	    isDying() {
	        return this.matchState == MatchState.Dying || this.matchState == MatchState.Death;
	    }
	    isFlyingToUI() {
	        return this.matchState == MatchState.FlyingToUI;
	    }
	    get onTapRequiresPayment() {
	        return this.cfg.tapBehavior.onTapGemCost > 0 && !this.onTapCostPaid && Glob.inHome;
	    }
	    get wasUnlockedWithGems() {
	        if (!Glob.inHome) {
	            return false;
	        }
	        if (this.cfg.tapBehavior == null) {
	            return false;
	        }
	        if (!this.cfg.tapBehavior.hasOnTapGemCost) {
	            return false;
	        }
	        return this.onTapCostPaid;
	    }
	    tapped() {
	        GmCmd.selectProp(this);
	        if (this.inTappableState() && (!Glob.inAnEventArea_Type2_ScorePuzzle || !(this.cfg.cid != 11031) || !this.metaCell.anchor.isSticky)) {
	            if (this.cfg.confirmOnTap && Glob.tapConfirmSettingOn) {
	                this.showConfirmationPopup();
	            }
	            else {
	                this.confirmedTap();
	            }
	        }
	    }
	    confirmedTap() {
	        this.triggerTapBehavior();
	        if (this.cfg.dragonBreakable && this.availableForGeneralUse()) {
	            Monster.trySendAttackerToTarget(this);
	        }
	        this.tryRemoveTapArrow();
	        this.updateEverTapped();
	    }
	    showConfirmationPopup() {
	        this.confirmedTap();
	    }
	    updateEverTapped() {
	        if (this.cfg.showTapArrowBeforeFirstTap && !this.cfg.everTapped) {
	            this.cfg.everTapped = true;
	            if (!ArrayUtil.contains(PropsCfg.tapArrow_EverTappedList, this.cfg.cid)) {
	                PropsCfg.tapArrow_EverTappedList.push(this.cfg.cid);
	            }
	        }
	    }
	    doubleTapped() {
	        if (!this.cfg.confirmOnTap || !Glob.tapConfirmSettingOn) {
	            this.triggerTapBehavior();
	            let num = (this.tapToSendDragonTimeStamp != null) ? ((TimeStamp.currentTimeStamp - this.tapToSendDragonTimeStamp.getTimeStampEX())) : Number.MAX_VALUE;
	            if (this.tapToSendDragonTimeStamp == null || num > 2.5) {
	                Monster.trySendDragonToInteractWithTarget_FromDoubleTap(this);
	            }
	        }
	    }
	    tryRemoveTapArrow() {
	        if (this.tapArrow) {
	            this.tapArrow.destroy(true);
	            this.tapArrow = null;
	        }
	    }
	    inTappableState() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.Death || this.matchState == MatchState.Dying || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.DrawOnly || this.matchState == MatchState.FlyingToUI) {
	            return false;
	        }
	        return true;
	    }
	    tweenBuildOnUpdateCallback(animationName) {
	        if (this.isParentNull)
	            return;
	        this.tweenBuildVFXThrottle++;
	        this.tweenBuildVFXThrottle %= 2;
	        if (this.tweenBuildVFXThrottle != 1 && animationName == "Build_MonsterAnim") {
	            this.asMonster.actionTarget.activateBuildVFX();
	        }
	    }
	    activateHarvestVFX() {
	        if (this.isParentNull)
	            return;
	        Globals.createFromPrefabAt("ParticleRoot_HarvestActivity", new Laya.Vector3(this.x, this.y, this.z - 5));
	        SoundMgr.ins().playSound("m203");
	    }
	    activateBuildVFX() {
	        if (this.isParentNull)
	            return;
	        Globals.createFromPrefabAt("ParticleRoot_BuildActivity", new Laya.Vector3(this.x, this.y, this.z - 5));
	        SoundMgr.ins().playSounds(["m198", "m199", "m200", "m201", "m202"]);
	    }
	    startingDrag() {
	    }
	    trySwitchToSwooping() {
	        if (this.matchState == MatchState.Idle || this.matchState == MatchState.PostSwoopStillSelected) {
	            this.setMatchState(MatchState.SwoopingToCell);
	        }
	    }
	    getBlueHighlightPrefabName() {
	        if (!this.requiresCellPlacement) {
	            return "DiKuaiLanY1_1";
	        }
	        if (this.cfg.widthCell == 1) {
	            if (this.cfg.heightCell == 1) {
	                return "DiKuaiLanZ1_1";
	            }
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiLanZ1_2";
	            }
	        }
	        else if (this.cfg.widthCell == 2) {
	            if (this.cfg.heightCell == 1) {
	                return "DiKuaiLanZ2x1";
	            }
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiLanZ2x2";
	            }
	        }
	        else if (this.cfg.widthCell == 3) {
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiLanZ3x2";
	            }
	            if (this.cfg.heightCell == 3) {
	                return "DiKuaiLanZ3x3";
	            }
	        }
	        return "DiKuaiLanY1_1";
	    }
	    getBrownHighlightPrefabName() {
	        if (!this.requiresCellPlacement) {
	            return "DiKuaiZongY1_1";
	        }
	        if (this.cfg.widthCell == 1) {
	            if (this.cfg.heightCell == 1) {
	                return "DiKuaiZongZ1_1";
	            }
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiZongZ1_2";
	            }
	        }
	        else if (this.cfg.widthCell == 2) {
	            if (this.cfg.heightCell == 1) {
	                return "DiKuaiZongZ2_1";
	            }
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiZongZ2_2";
	            }
	        }
	        else if (this.cfg.widthCell == 3) {
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiZongZ3_2";
	            }
	            if (this.cfg.heightCell == 3) {
	                return "DiKuaiZongZ3_3";
	            }
	        }
	        console.log("Unhandled object dimensions for finding a Brown highlight: " + this + " (" + this.cfg.widthCell + ", " + this.cfg.heightCell + ")");
	        return "DiKuaiZongY1_1";
	    }
	    getBlackHighlightPrefabName() {
	        if (Glob.inHome && ThingList.lists[this.cfg.cid].length > 2 && !this.hasTapsAvailable) {
	            TomeTip.showGameTip(GameTipTypeID.Tip_NonMatchingObjects);
	        }
	        if (!this.requiresCellPlacement) {
	            return "DiKuaiHeiY1_1";
	        }
	        if (this.cfg.widthCell == 1) {
	            if (this.cfg.heightCell == 1) {
	                return "DiKuaiHeiZ1_1";
	            }
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiHeiZ1_2";
	            }
	        }
	        else if (this.cfg.widthCell == 2) {
	            if (this.cfg.heightCell == 1) {
	                return "DiKuaiHeiZ2_1";
	            }
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiHeiZ2_2";
	            }
	        }
	        else if (this.cfg.widthCell == 3) {
	            if (this.cfg.heightCell == 2) {
	                return "DiKuaiHeiZ3x2";
	            }
	            if (this.cfg.heightCell == 3) {
	                return "DiKuaiHeiZ3x3";
	            }
	        }
	        console.error("Unhandled object dimensions for finding a Yellow highlight: " + this + " (" + this.cfg.widthCell + ", " + this.cfg.heightCell + ")");
	        return "DiKuaiHeiY1_1";
	    }
	    playerDroppedFromDrag() {
	        LevelUtils.stats.movesCount++;
	        if (this.dragMomentum != null) {
	            this.dragMomentum.dragReleased();
	        }
	        if (this.checkForDeadDropAutoTapConditions()) {
	            this.tapped();
	            this.hideDropTargetHighlightAndInfo();
	        }
	        if (this.cfg.requiresCellPlacement && !Glob.map.inBoundsBy(this.x, this.y, true)) {
	            this.setMatchState(MatchState.SwoopingToCell);
	            this.userDirectedOnGridSwoop = true;
	        }
	        else if (!this.cfg.requiresCellPlacement && !this.cfg.canDropFarOutOfBounds && !Glob.map.inBoundsBy(this.x, this.y)) {
	            Globals.swoopDropToFreeMetaCell(this);
	        }
	        this.checkForDropOnMonsterActionTarget(true);
	        if (Thing.dropTargetHighlight != null && Thing.dropTargetHighlight.active) {
	            this.hideDropTargetHighlightAndInfo();
	        }
	    }
	    getDescriptionForInfoBar() {
	        return this.cfg.descriptionShort_Base;
	    }
	    checkForDeadDropAutoTapConditions() {
	        return false;
	    }
	    get requiresCellPlacement() {
	        if (this.originalCfg) {
	            return this.originalCfg.requiresCellPlacement;
	        }
	        else {
	            return this._requiresCellPlacement;
	        }
	    }
	    tryOccupyTargetCell() {
	        if (this.targetMetaCell == null) {
	            return false;
	        }
	        if (!this.targetMetaCell.canBeOccupiedBy(this)) {
	            return false;
	        }
	        this.occupyMetaCell(this.targetMetaCell);
	        return true;
	    }
	    tryOverlapOccupyTargetCell() {
	        if (this.targetMetaCell == null) {
	            return false;
	        }
	        if (!this.targetMetaCell.canBeOverlapOccupiedBy(this)) {
	            return false;
	        }
	        this.occupyMetaCell(this.targetMetaCell, true);
	        return true;
	    }
	    occupyMetaCell(newMetaCell, useOverlappingSlot = false) {
	        if (!this.requiresCellPlacement) {
	            console.log("Trying to make object " + this.name + " occupy a cell when it isn't a cell-placeable item.");
	            return;
	        }
	        if (newMetaCell == null) {
	            console.log("In OccupyMetaCell newMetaCell was null.");
	            return;
	        }
	        if (newMetaCell.isFullyOccupiedBy(this, true)) {
	            this.targetMetaCell = newMetaCell;
	            return;
	        }
	        this.vacateMetaCell();
	        this.metaCell = newMetaCell;
	        this.targetMetaCell = newMetaCell;
	        if (useOverlappingSlot) {
	            this.metaCell.setOverlapOccupant(this);
	        }
	        else {
	            this.metaCell.setOccupant(this);
	        }
	    }
	    tryOccupyTargetMetaCellByPushingOccupants() {
	        if (!this.targetMetaCell.occupantsCanBePushedOutAndOccupiedBy(this)) {
	            return false;
	        }
	        let occupants = this.targetMetaCell.getOccupants();
	        if (occupants != null) {
	            for (let item of occupants) {
	                if (!(item == this)) {
	                    item.vacateMetaCell();
	                }
	            }
	        }
	        this.updateDragOrClickTargetCell(this.targetMetaCell, false, false, true);
	        if (occupants != null) {
	            for (let item2 of occupants) {
	                if (!(item2 == this)) {
	                    item2.forcePushHomelessObjectToNewLocationOrOrb(this.targetMetaCell);
	                }
	            }
	        }
	        return true;
	    }
	    forcePushHomelessObjectToNewLocationOrOrb(nearCell) {
	        if (this.metaCell != null) {
	            console.log("Calling ForcePushHomelessObjectToNewLocationOrOrb() on an object that still has a meta cell. That's unexpected.\nObject: " + this + " in cell " + this.metaCell);
	            this.metaCell.vacate(this);
	        }
	        let emptyMetaCellNear = Glob.map.getEmptyMetaCellNear(nearCell, true, -1, this.cfg.widthCell, this.cfg.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.PreferAdjacent, false);
	        if (emptyMetaCellNear == null) {
	            LootOrb.createFromInstance(this);
	            this.destroyDrawnObject();
	        }
	        else {
	            this.updateDragOrClickTargetCell(emptyMetaCellNear, false, true, true);
	        }
	    }
	    vacateMetaCell() {
	        if (this.metaCell != null) {
	            if (this.targetMetaCell == this.metaCell) {
	                this.targetMetaCell = null;
	            }
	            this.metaCell.vacate(this);
	        }
	        this.metaCell = null;
	    }
	    updateDragOrClickTargetCell(newTargetCell, createGreenArrowFeedback = false, expectCurrentTargetMetaCellToBeNull = false, forceOccupyNewTargetImmediately = false) {
	        if (newTargetCell == null) {
	            this.clearCurrentPushList();
	            return;
	        }
	        if (this.targetMetaCell == null) {
	            if (!expectCurrentTargetMetaCellToBeNull) {
	                console.log("Existing target metacell is null in UpdateDragTargetCell()");
	            }
	        }
	        else if (forceOccupyNewTargetImmediately) {
	            this.occupyMetaCell(newTargetCell, false);
	        }
	        else if (this.targetMetaCell.equals(newTargetCell)) {
	            return;
	        }
	        let flag = false;
	        if (newTargetCell.equals(this.metaCell)) {
	            newTargetCell = this.metaCell;
	        }
	        let targetMetaCell = this.targetMetaCell;
	        this.targetMetaCell = newTargetCell;
	        this.removeGreenArrow();
	        targetMetaCell && targetMetaCell.unhighlightAnyRedCells();
	        this.clearMatchPartners();
	        this.setMatchState(MatchState.SwoopingToCell);
	        let flag2 = true;
	        if (this.targetMetaCell.canBeOccupiedBy(this)) {
	            this.tryOccupyTargetCell();
	            this.checkForMatchPartners();
	            if (createGreenArrowFeedback) {
	                this.addGreenArrow(this.targetMetaCell.center);
	            }
	            flag2 = false;
	        }
	        else if (this.targetMetaCell.canBeOverlapOccupiedBy(this)) {
	            this.checkForMatchPartners();
	            if (this.enoughMatchPartners()) {
	                this.occupyMetaCell(this.targetMetaCell, true);
	                flag2 = false;
	            }
	            else if (this.targetMetaCell.occupantsCanBePushedOutAndOccupiedBy(this)) {
	                flag2 = false;
	                flag = true;
	                this.updatePushListForNewTargetMetaCell();
	            }
	        }
	        else if (this.targetMetaCell.occupantsCanBePushedOutAndOccupiedBy(this)) {
	            this.checkForMatchPartners();
	            flag2 = false;
	            flag = true;
	        }
	        if (flag2) {
	            this.targetMetaCell.highlightRed_AnyObstructingCells(this);
	        }
	        if (flag) {
	            this.updatePushListForNewTargetMetaCell();
	        }
	        else {
	            this.clearCurrentPushList();
	        }
	    }
	    updatePushListForNewTargetMetaCell() {
	        let occupants = this.targetMetaCell.getOccupants();
	        if (this.pushList == null && occupants == null) {
	            return;
	        }
	        if (this.pushList != null && occupants != null) {
	            for (let num = this.pushList.length - 1; num >= 0; num--) {
	                if (occupants.indexOf(this.pushList[num]) < 0) {
	                    this.removeFromPushList(num);
	                }
	            }
	        }
	        if (occupants == null && this.pushList != null) {
	            this.clearCurrentPushList();
	        }
	        if (occupants != null) {
	            if (this.pushList == null) {
	                this.pushList = [];
	            }
	            for (let item of occupants) {
	                if (this.pushList.indexOf(item) < 0) {
	                    this.addToPushList(item, this.targetMetaCell);
	                }
	            }
	        }
	    }
	    clearCurrentPushList() {
	        if (this.pushList != null && this.pushList.length != 0) {
	            for (let num = this.pushList.length - 1; num >= 0; num--) {
	                this.removeFromPushList(num);
	            }
	        }
	    }
	    addToPushList(newPushedObj, pushZone) {
	        this.pushList.push(newPushedObj);
	        ThingAnim.playPushed(newPushedObj, pushZone);
	    }
	    removeFromPushList(atIndex) {
	        let pushedObj = this.pushList[atIndex];
	        this.pushList.splice(atIndex);
	        ThingAnim.stopPushed(pushedObj);
	    }
	    dragging_CanBeMovedMOM() {
	        if (this.matchState == MatchState.Idle) {
	            return true;
	        }
	        return false;
	    }
	    trySwapObjectWith_OrMatchOverlap(obj) {
	        if (obj == null) {
	            return false;
	        }
	        if (obj == this) {
	            console.log("Trying to Swap An UnityEngine.Object with Itself in TrySwapObjectWith_OrMatchOverlap(): " + this);
	            return false;
	        }
	        if (this.metaCell == null || obj.metaCell == null) {
	            return false;
	        }
	        if (!this.cfg.requiresCellPlacement || !obj.cfg.requiresCellPlacement) {
	            return false;
	        }
	        if (!this.isInADraggableState() || !obj.isInADraggableState()) {
	            return false;
	        }
	        if (this.cfg == obj.cfg && obj.metaCell.canBeOverlapOccupiedBy(this) && this.checkForEnoughMatchPartnersWithRespectToCell(obj.metaCell)) {
	            this.updateDragOrClickTargetCell(obj.metaCell, true, true);
	            return true;
	        }
	        return this.swapMetaCellsWith(obj);
	    }
	    swapMetaCellsWith(obj) {
	        if (obj == this) {
	            console.log("Trying to run SwapMetaCellsWith() on the same object as itself: " + this);
	            return false;
	        }
	        let metaCell = this.metaCell;
	        let metaCell2 = obj.metaCell;
	        this.vacateMetaCell();
	        obj.vacateMetaCell();
	        let emptyMetaCellNear = Glob.map.getEmptyMetaCellNear(metaCell2, true, 0, metaCell.widthCell, metaCell.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.PreferAdjacent, false);
	        if (emptyMetaCellNear == null) {
	            this.occupyMetaCell(metaCell);
	            obj.occupyMetaCell(metaCell2);
	            return false;
	        }
	        this.updateDragOrClickTargetCell(emptyMetaCellNear, true, true, true);
	        let emptyMetaCellNear2 = Glob.map.getEmptyMetaCellNear(metaCell, true, -1, metaCell2.widthCell, metaCell2.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.PreferAdjacent, false);
	        if (emptyMetaCellNear2 == null) {
	            LootOrb.createFromInstance(obj);
	            obj.destroyDrawnObject();
	        }
	        else {
	            obj.updateDragOrClickTargetCell(emptyMetaCellNear2, false, true, true);
	        }
	        return true;
	    }
	    addGreenArrow(target) {
	        if (this.greenDownArrow == null || this.greenDownArrow.isDispose) {
	            this.greenDownArrow = Thing.create(10041);
	        }
	        this.greenDownArrow.setRootPosition(target.x, target.y);
	        ThingAnim.playGreenArrowAppear(this.greenDownArrow);
	    }
	    removeGreenArrow() {
	        if (this.greenDownArrow == null)
	            return;
	        if (this.isDispose) {
	            this.greenDownArrow = null;
	            return;
	        }
	        Tween.StopTweensOn(this.greenDownArrow);
	        this.greenDownArrow.destroyDrawnObject(DeathReasonID.PurposeFulfilled);
	        this.greenDownArrow = null;
	    }
	    setDrawnPosition(pos) {
	        let x = pos.x;
	        let localPosition = this.localPositionAnimTarget.transform.localPosition;
	        let x2 = x - localPosition.x;
	        let y = pos.y;
	        let localPosition2 = this.localPositionAnimTarget.transform.localPosition;
	        this.setRootPosition(x2, y - localPosition2.y, this.z);
	    }
	    setRootPosition(x, y, z) {
	        if (this.destroyed)
	            return;
	        if (z == null) {
	            z = this.transform.position.z;
	        }
	        let pos = new Laya.Vector3(x, y, z);
	        MathUtil.nanCheck(pos);
	        this.transform.position = pos;
	    }
	    setLocalRootPosition(x, y) {
	        this.transform.localPosition = new Laya.Vector3(x, y, this.transform.localPosition.z);
	    }
	    checkForMatchPartners_CellBased() {
	        if (!Glob.campAllowChainReactions && Glob.inHome && this.chainReactionDepth > 0) {
	            return;
	        }
	        let metaCell = (this.targetMetaCell != null) ? this.targetMetaCell : this.metaCell;
	        if (Glob.campMergeRequiresOverlapToInitiate && Glob.inHome && this.chainReactionDepth <= 0) {
	            if (!this.metaCell.occupied) {
	                return;
	            }
	            let occs = metaCell.getOccupants();
	            for (let i in occs) {
	                let occupant = occs[i];
	                if (occupant == this || (occupant.cfg != this.cfg && !this.isValidInputCategoryMatch(occupant))) {
	                    return;
	                }
	            }
	        }
	        metaCell.findAvailableMatchesFor_Recursive(this.cfg, this.matchPartners, this);
	    }
	    isValidInputCategoryMatch(otherObject) {
	        if (!otherObject.verify()) {
	            return false;
	        }
	        if (this.cfg.matchRecipe == null || !this.cfg.matchRecipe.hasInputCategory) {
	            return false;
	        }
	        return otherObject.cfg.hasCategory(this.cfg.matchRecipe.inputCategory);
	    }
	    isMergeableFromDragonBookUI() {
	        return this.verify() && this.isInASelectableState();
	    }
	    static countMergesForDragonBookPIP() {
	        let num = 0;
	        for (let id in ThingList.lists) {
	            let value = ThingList.lists[id];
	            if (value != null && value.length >= (Glob.preferDragonMerge5 ? 5 : 3) && Thing.isTypeMergeableFromDragonBook(value[0].cfg)) {
	                let num2 = 0;
	                for (let item of value) {
	                    if (item.isMergeableFromDragonBookUI()) {
	                        num2++;
	                        if (num2 >= 3) {
	                            num++;
	                            break;
	                        }
	                    }
	                }
	            }
	        }
	        return num;
	    }
	    static isTypeMergeableFromDragonBook(definition) {
	        return definition.isAMonsterDef || (definition.isEgg && BreedsCfg.has(definition.breedId));
	    }
	    static getCanBringHomeList() {
	        let list = [];
	        for (let key in ThingList.lists) {
	            let things = ThingList.lists[key];
	            things.forEach(item => {
	                if (item.canBringHome()) {
	                    list.push(item);
	                }
	            });
	        }
	        if (list.length > 1) {
	            list.sort((a, b) => {
	                if (a.isMonster && !b.isMonster) {
	                    return -1;
	                }
	                if (b.isMonster && !a.isMonster) {
	                    return 1;
	                }
	                if (a.cfg.creationScore == b.cfg.creationScore) {
	                    return 0;
	                }
	                return (a.cfg.creationScore < b.cfg.creationScore) ? 1 : (-1);
	            });
	        }
	        return list;
	    }
	    verify() {
	        return !this.destroyed;
	    }
	    draggingCanBeMovedMOM() {
	        if (this.matchState == MatchState.Idle) {
	            return true;
	        }
	        return false;
	    }
	    onDrag(x, y) {
	        this.wakeUp(true);
	        if (this.dragMomentum != null) {
	            this.dragMomentum.onDrag(x, y);
	        }
	        if (!this.cfg.requiresCellPlacement) {
	            this.checkForMatchPartners_OffGrid();
	        }
	        if (!this.enoughMatchPartners()) {
	            let dropTarget = this.getDropTarget();
	            let flag = false;
	            if (dropTarget != null) {
	                flag = this.updateDragTargetFeedback(dropTarget);
	            }
	            if (!flag && Thing.dropTargetHighlight != null && Thing.dropTargetHighlight.active) {
	                this.hideDropTargetHighlightAndInfo();
	            }
	        }
	    }
	    updateDragTargetFeedback(dropTarget) {
	        return false;
	    }
	    hideDropTargetHighlightAndInfo() {
	        if (Thing.dropTargetHighlight != null && Thing.dropTargetHighlight.active) {
	            Thing.dropTargetHighlight.active = false;
	        }
	        if (DropTargetInfo.ins.active) {
	            DropTargetInfo.ins.setActive(false);
	        }
	    }
	    wakeUp(stayAwakeOnIdle) {
	        this.stayAwakeOnIdle = stayAwakeOnIdle;
	        if (!this.enabled) {
	            this.enabled = true;
	        }
	    }
	    checkForMatchPartners() {
	        if (this.cfg.matchable && !this.wasUnlockedWithGems) {
	            this.clearMatchPartners();
	            this.checkForMatchPartners_CellBased();
	            if (this.enoughMatchPartners()) {
	                this.addVisualsToPotentialMatchPartners();
	            }
	            else {
	                this.clearMatchPartners();
	            }
	        }
	    }
	    checkForMatchPartners_OffGrid() {
	        if (this.cfg.matchable && (!this.isMonster || !this.asMonster.summoned) && (Glob.campAllowChainReactions || !Glob.inHome || this.chainReactionDepth <= 0)) {
	            let tmp = this.matchPartners;
	            if (tmp != null) {
	                for (let item of tmp) {
	                    item.setMatchState(MatchState.ReservedForMatchRecheck);
	                }
	            }
	            this.matchPartners.length = 0;
	            this.checkForMatchPartners_OffGridSubroutine();
	            if (tmp != null) {
	                for (let item2 of tmp) {
	                    if (this.matchPartners.length == 0 || this.matchPartners.indexOf(item2) < 0) {
	                        item2.releaseMatchReservation();
	                    }
	                }
	            }
	            if (this.enoughMatchPartners()) {
	                for (let item3 of this.matchPartners) {
	                    if (tmp == null || tmp.indexOf(item3) < 0) {
	                        item3.addVisualsAsAMatchPartner(this, null);
	                    }
	                }
	                ThingAnim.playPotentialMatch_OnOwner(this);
	            }
	            else {
	                this.clearMatchPartners();
	            }
	        }
	    }
	    checkForEnoughMatchPartnersWithRespectToCell(cellToCheckWithRespectTo) {
	        cellToCheckWithRespectTo.findAvailableMatchesFor_Recursive(this.cfg, this.matchPartners, this);
	        return this.enoughMatchPartners();
	    }
	    checkForMatchPartners_OffGridSubroutine() {
	        let list = ThingList.lists[this.cfg.cid];
	        if (list.length >= 3) {
	            Glob.map.updateOffGridMatchLocations(list);
	            let cell = Glob.cellLayer.getCellCameraPos(this.x, this.y);
	            if (cell) {
	                cell.findAvailableMatchesFor_OffGrid(this, this.matchPartners, this);
	            }
	        }
	    }
	    tryClaimForMatch(requesterToIgnore) {
	        if (this == requesterToIgnore) {
	            return false;
	        }
	        if (this.matchState == MatchState.SwoopingToCell && this.userDirectedOnGridSwoop && this.swoopToCell_IsCloseEnoughToForceComplete()) {
	            this.swoopToCell_ForceComplete();
	        }
	        if (this.matchState != 0 && this.matchState != MatchState.ReservedForMatchRecheck) {
	            return false;
	        }
	        if (this.isMonster && !this.asMonster.isActive) {
	            return false;
	        }
	        if (this.wasUnlockedWithGems) {
	            return false;
	        }
	        this.setMatchState(MatchState.ReservedForMatch);
	        return true;
	    }
	    releaseMatchReservation() {
	        if (this.isParentNull)
	            return;
	        if (this.matchState != MatchState.ReservedForMatch && this.matchState != MatchState.ReservedForMatchRecheck && this.matchState != MatchState.Death) {
	            console.log("Releasing " + this.name + " from a match reservation, but it wasn't in the reserved state. It was " + this.matchState);
	        }
	        this.removeHighlight();
	        ThingAnim.stopPotentialMatch(this);
	        this.setMatchState(MatchState.Idle);
	    }
	    tryActivateMatch(bIsOnlyFive = false) {
	        if (!this.cfg.matchable || Debug.disableMatching) {
	            return false;
	        }
	        if (this.matchPartners.length == 0) {
	            return false;
	        }
	        this.setToMatchingState(this);
	        for (let item of this.matchPartners) {
	            ThingAnim.stopPotentialMatch(item);
	            item.setToMatchingState(this);
	        }
	        let num = this.matchPartners.length + 1;
	        this.matchInputOverflowPast3 = num - 3;
	        let num2 = num / 5;
	        if (num2 > 0) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.Match5Groups, thing: this, count: num2 });
	        }
	        this.bonusMatchOutputsFrom5Matches = 0;
	        this.extraMatchTriples = 0;
	        this.matchObjectRemainders = 0;
	        LevelUtils.stats.mergeCount++;
	        if (this.chainReactionDepth > 0) {
	            LevelUtils.stats.comboCount++;
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.MatchCombo, thing: this, count: this.chainReactionDepth });
	        }
	        if (!Glob.inAnEventArea_Type2_ScorePuzzle) {
	            if (bIsOnlyFive) {
	                this.tryActivateMatch_TallyMergeOutputs_NormalLevel_OnlyFive(num);
	            }
	            else {
	                this.tryActivateMatch_TallyMergeOutputs_NormalLevel(num);
	            }
	        }
	        return true;
	    }
	    tryActivateMatchAKey(bIsOnlyFive = false) {
	        if (!this.tryActivateMatch(bIsOnlyFive)) {
	            return false;
	        }
	        while (this.matchPartners.length > 0) {
	            this.matchPartners.pop().destroyDrawnObject(DeathReasonID.SlaveMatched);
	        }
	        this.updateMatching_CheckForFinaleReadinessEX();
	        return true;
	    }
	    addMatchPartners(item) {
	        this.clearMatchPartners();
	        for (let i = 1; i < item.length; ++i) {
	            this.matchPartners.push(item[i]);
	        }
	    }
	    tryActivateMatch_TallyMergeOutputs_NormalLevel(totalMatchInputs) {
	        while (totalMatchInputs > 0) {
	            if (totalMatchInputs == 9) {
	                this.extraMatchTriples += 3;
	                totalMatchInputs = 0;
	            }
	            else if (totalMatchInputs == 7) {
	                this.extraMatchTriples += 2;
	                this.matchObjectRemainders = 1;
	                totalMatchInputs = 0;
	            }
	            else if (totalMatchInputs == 6) {
	                this.extraMatchTriples += 2;
	                totalMatchInputs = 0;
	            }
	            else if (totalMatchInputs >= 5) {
	                this.bonusMatchOutputsFrom5Matches++;
	                this.extraMatchTriples++;
	                totalMatchInputs -= 5;
	            }
	            else if (totalMatchInputs >= 3) {
	                this.extraMatchTriples++;
	                totalMatchInputs -= 3;
	            }
	            else {
	                this.matchObjectRemainders = totalMatchInputs;
	                totalMatchInputs = 0;
	            }
	        }
	        this.extraMatchTriples--;
	    }
	    tryActivateMatch_TallyMergeOutputs_NormalLevel_OnlyFive(totalMatchInputs) {
	        while (totalMatchInputs > 0) {
	            if (totalMatchInputs >= 5) {
	                this.bonusMatchOutputsFrom5Matches++;
	                this.extraMatchTriples++;
	                totalMatchInputs -= 5;
	            }
	            else {
	                this.matchObjectRemainders = totalMatchInputs;
	                totalMatchInputs = 0;
	            }
	        }
	        this.extraMatchTriples--;
	    }
	    setToMatchingState(matchLeaderTarget) {
	        this.matchTarget = matchLeaderTarget;
	        this.setMatchState(MatchState.Matching);
	        MsgCenter.notify(MsgConst.THING_MERGE_START, this);
	    }
	    addVisualsToPotentialMatchPartners() {
	        for (let matchPartner of this.matchPartners) {
	            matchPartner.addVisualsAsAMatchPartner(this, this.targetMetaCell);
	        }
	        ThingAnim.playPotentialMatch_OnOwner(this);
	    }
	    addVisualsAsAMatchPartner(master, masterTargetMetaCell) {
	        this.highlightGreen();
	        ThingAnim.playPotentialMatch(master, this, masterTargetMetaCell);
	    }
	    clearMatchPartners() {
	        if (this.matchPartners.length > 0) {
	            for (let matchPartner of this.matchPartners) {
	                matchPartner.releaseMatchReservation();
	            }
	            ThingAnim.stopPotentialMatch_OnOwner(this);
	            this.matchPartners.length = 0;
	        }
	    }
	    swoopToCell_IsCloseEnoughToForceComplete() {
	        if (this.targetMetaCell == null) {
	            return false;
	        }
	        let num = MathUtil.getDistance(this.x, this.y, this.targetMetaCell.x, this.targetMetaCell.y);
	        return num <= 0.15;
	    }
	    swoopToCell_ForceComplete() {
	        if (this.targetMetaCell == null) {
	            return;
	        }
	        let center = this.targetMetaCell.center;
	        let flag = this.tryOccupyTargetCell();
	        if (!flag && this.enoughMatchPartners()) {
	            flag = this.tryOverlapOccupyTargetCell();
	        }
	        if (this._selected) {
	            this.setMatchState(MatchState.PostSwoopStillSelected);
	        }
	        else if (flag) {
	            this.setMatchState(MatchState.Idle);
	            let anchor = this.metaCell.anchor;
	            if (anchor.isKeyhole) {
	                let keyedFogGroupId = anchor.keyedFogGroupId;
	                CloudDungeon.unlockCloudDungeon(keyedFogGroupId);
	            }
	            this.tryActivateMatch();
	        }
	        else {
	            this.tryOccupyTargetMetaCellByPushingOccupants_OtherwiseInvalidPlacementDrop();
	        }
	        this.setRootPosition(center.x, center.y);
	        this.userDirectedOnGridSwoop = false;
	    }
	    enoughMatchPartners() {
	        if (this.matchPartners.length == 0) {
	            return false;
	        }
	        let num = 2;
	        let drawnObject = this.matchPartners[0];
	        let flag = drawnObject.hasCategory(CategoryID.Dragons) || drawnObject.hasCategory(CategoryID.Eggs);
	        if (Glob.inHome && Glob.preferDragonMerge5 && flag) {
	            num = 4;
	        }
	        return this.matchPartners.length >= num;
	    }
	    swoopOffGridTo(newWorldX, newWorldY, showGreenArrow, userDirected) {
	        this.setMatchState(MatchState.SwoopingToOffGridLocation);
	        this.offGridSwoopTarget = new Laya.Vector2(newWorldX, newWorldY);
	        this.userDirectedOffGridSwoop = userDirected;
	        if (showGreenArrow) {
	            this.addGreenArrow(this.offGridSwoopTarget);
	        }
	    }
	    hasCategory(category) {
	        if (this.cfg.categories == null) {
	            return false;
	        }
	        return this.cfg.categories.indexOf(category) >= 0;
	    }
	    tryOccupyTargetMetaCellByPushingOccupants_OtherwiseInvalidPlacementDrop() {
	        if (!this.tryOccupyTargetMetaCellByPushingOccupants()) {
	            this.invalidPlacementDrop();
	        }
	    }
	    invalidPlacementDrop() {
	        let cell = Glob.cellLayer.getCellCameraPos(this.x, this.y);
	        if (cell != null && cell.occupant != null) {
	            let searchCellRadius = 2;
	            if (Glob.inAnEventArea_Type2_ScorePuzzle) {
	                searchCellRadius = -1;
	            }
	            let allowStickyCells = !Glob.inAnEventArea_Type2_ScorePuzzle;
	            let emptyMetaCellNear = Glob.map.getEmptyMetaCellNear(cell.occupant.metaCell, false, searchCellRadius, this.cfg.widthCell, this.cfg.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.PreferAdjacent, false, allowStickyCells);
	            if (emptyMetaCellNear != null && (emptyMetaCellNear.isCloserToInCellRingCount(this.metaCell, cell.occupant.metaCell) || Glob.inAnEventArea_Type2_ScorePuzzle)) {
	                this.updateDragOrClickTargetCell(emptyMetaCellNear);
	                this.setMatchState(MatchState.SwoopingToCell);
	                return;
	            }
	        }
	        if (this.metaCell.isOverlapObject(this)) {
	            let emptyMetaCellNear2 = Glob.map.getEmptyMetaCellNear(this.metaCell, true, -1, this.cfg.widthCell, this.cfg.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.PreferAdjacent, false);
	            this.updateDragOrClickTargetCell(emptyMetaCellNear2);
	        }
	        else {
	            this.updateDragOrClickTargetCell(this.metaCell);
	        }
	        this.setMatchState(MatchState.SwoopingToCell);
	        SoundMgr.ins().playSound("m5");
	    }
	    checkForDropOnMonsterActionTarget(showFeedbackTextIfAvailable) {
	        if (this.isMonster && this.matchState == MatchState.Idle) {
	            let dropTarget = this.getDropTarget();
	            if (dropTarget != null) {
	                this.droppedOnPotentialActionObject(dropTarget, showFeedbackTextIfAvailable);
	            }
	        }
	    }
	    droppedOnPotentialActionObject(potentialTarget, showFeedbackTextIfAvailable) {
	    }
	    getDropTarget() {
	        let drawnObject = null;
	        let underThisPoint = InputMgr.mousePosCamera;
	        drawnObject = this.getDropTargetUnder(underThisPoint.x, underThisPoint.y);
	        if (drawnObject != null && drawnObject.hasActionsAvailable(AutonomyLevelID.UserDirected)) {
	            return drawnObject;
	        }
	        let wx = this.x + this.originalPosition.x * this.restingScale.x;
	        let wy = this.y + this.originalPosition.y * this.restingScale.y + this.originalHeightOffsetToTop;
	        return this.getDropTargetUnder(wx, wy);
	    }
	    getDropTargetUnder(wx, wy) {
	        let objectsUnderWorldPoint = Glob.scene.getObjectsUnderWorldPoint(wx, wy);
	        let drawnObject = null;
	        for (let item of objectsUnderWorldPoint) {
	            if (!(item == this) && !item.isMonster) {
	                if (drawnObject == null) {
	                    drawnObject = item;
	                }
	                else if (item.z < drawnObject.z) {
	                    drawnObject = item;
	                }
	            }
	        }
	        if (drawnObject != null) {
	            return drawnObject;
	        }
	        let cell = Glob.cellLayer.getCellCameraPos(wx, wy);
	        if (cell != null && cell.occupant != null) {
	            return cell.occupant;
	        }
	        return null;
	    }
	    update() {
	        if (this.matchState == MatchState.Idle) {
	            if (Debug.checkErrors_ThisIsASlowOperation && this.requiresCellPlacement && this.metaCell != this.targetMetaCell) {
	                if (this.metaCell == null) {
	                    console.log("ZOIKS! " + this.cfg.pref + "'s MetaCell is NULL");
	                }
	                else if (this.targetMetaCell == null) {
	                    console.log("ZOIKS! " + this.cfg.pref + "'s Target MetaCell is NULL");
	                }
	                else {
	                    console.log("ZOIKS! " + this.cfg.pref + this.metaCell + "\n      != target cell\n      " + this.targetMetaCell);
	                }
	            }
	            this.updateFirstIdle();
	        }
	        else if (this.matchState == MatchState.SwoopingToCell) {
	            this.updateSwoopToCell();
	        }
	        else if (this.matchState == MatchState.SwoopingToOffGridLocation) {
	            this.updateSwoopToOffGridLocation();
	        }
	        else if (this.matchState == MatchState.PostSwoopStillSelected) {
	            if (!this.hasActiveTimers()) {
	                this.sleep();
	            }
	        }
	        else if (this.matchState == MatchState.Matching) {
	            this.updateMatching();
	        }
	        else if (this.matchState == MatchState.FlyingToUI) {
	            this.updateFlyingToUI();
	        }
	        else if (this.matchState == MatchState.Dying) {
	            this.updateDying();
	        }
	        else if (this.matchState == MatchState.Icon && !this.hasActiveTimers()) {
	            this.sleep();
	        }
	        if (this.matchState != MatchState.Icon && this.matchState != MatchState.DrawOnly) {
	            this.updateLifetimeAndTimers();
	        }
	    }
	    lateUpdate() {
	        if (this.matchState != MatchState.Icon && this.matchState != MatchState.DrawOnly) {
	            this.updateZ(false);
	            this.transform.position.cloneTo(this.lastPosition);
	        }
	    }
	    updateFirstIdle() {
	        if (this.didFirstIdleUpdate && !this.stayAwakeOnIdle) {
	            if (!this.hasActiveTimers()) {
	                this.sleep();
	            }
	        }
	        else {
	            this.didFirstIdleUpdate = true;
	            this.updateZ(true);
	            this.tryChainReactionMatch();
	        }
	    }
	    hasActionsAvailable(forAutonomyLevel) {
	        if (this.cfg.dragonBreakable && this.availableForGeneralUse()) {
	            return true;
	        }
	        if (this.harvest_IsAvailable(forAutonomyLevel)) {
	            return true;
	        }
	        if (this.build_IsAvailable()) {
	            return true;
	        }
	        return false;
	    }
	    build_IsAvailable() {
	        if (this.constructible == null) {
	            return false;
	        }
	        return this.availableForGeneralUse();
	    }
	    harvest_IsAvailable(autonomyLevel) {
	        if (!this.availableForGeneralUse()) {
	            return false;
	        }
	        if (this.cfg.harvestLoot == null) {
	            return false;
	        }
	        if (autonomyLevel != AutonomyLevelID.UserDirected && this.cfg.harvestRequiresDeadLand && Glob.cellLayer.deadCells.length == 0) {
	            return false;
	        }
	        if (autonomyLevel == AutonomyLevelID.Autonomous && this.cfg.preventHomeAutonomyHarvest && (Glob.inHome || Glob.inAnEventArea)) {
	            return false;
	        }
	        if (!this.harvestSlotsAvailable(autonomyLevel)) {
	            return false;
	        }
	        if (this.harvestTimeoutTimer != null && !this.harvestTimeoutTimer.done) {
	            return false;
	        }
	        if (this.cfg.harvestIsExhaustible) {
	            if (this.harvesters.length == 0 && this.harvestChargesLeft <= 0) {
	                return false;
	            }
	            if (autonomyLevel == AutonomyLevelID.Autonomous && this.harvestChargesLeft <= this.harvesters.length) {
	                return false;
	            }
	        }
	        return true;
	    }
	    harvestSlotsAvailable(autonomyLevel) {
	        if (this.harvesters.length < this.cfg.maxConcurrentHarvesters) {
	            return true;
	        }
	        if (autonomyLevel == AutonomyLevelID.UserDirected) {
	            for (let i = 0; i < this.harvesters.length; i++) {
	                if (this.harvesters[i].autonomyLevel == AutonomyLevelID.Autonomous) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    availableForGeneralUse() {
	        if (this.matchState != 0) {
	            return false;
	        }
	        if (this.dead) {
	            return false;
	        }
	        return true;
	    }
	    hasActiveTimers() {
	        return (this.deathTimer ? this.deathTimer.going : null) == true
	            || (this.tapRechargeTimer ? this.tapRechargeTimer.going : null) == true
	            || (this.autoTapTimer ? this.autoTapTimer.going : null) == true
	            || (this.harvestTimeoutTimer ? this.harvestTimeoutTimer.going : null) == true;
	    }
	    sleep() {
	        this.stayAwakeOnIdle = false;
	        if (MergeDragonsAppConfig.UPDATE_OPTIMISATION_ENABLED && this.enabled) {
	            this.enabled = false;
	        }
	    }
	    updateLifetimeAndTimers() {
	        if (this.isTemporary) {
	            return;
	        }
	        if (this.harvestTimeoutTimer != null) {
	            this.harvestTimeoutTimer.update(Glob.deltaTime);
	        }
	        if (this.autoTapTimer != null) {
	            this.autoTapTimer.update(Glob.deltaTime);
	            if (this.autoTapTimer.done && this.matchState == MatchState.Idle) {
	                this.triggerTapBehavior();
	                if (this.tapsLeft > 0) {
	                    this.autoTapTimer.reset();
	                }
	                else {
	                    this.autoTapTimer = null;
	                }
	            }
	        }
	        if (this.tapRechargeTimer != null) {
	            this.tapRechargeTimer.update(Glob.deltaTime);
	            if (this.tapRechargeTimer.done) {
	                this.tryReplenishTap();
	                this.tapRechargeTimer.reset();
	            }
	        }
	        if (this.cfg.diesAfterTimeout && this.canLoseLifetimeRightNow()) {
	            this.deathTimer.update(Glob.deltaTime);
	            if (this.deathTimer.done) {
	                this.trySetToSetToDying(DeathReasonID.LifeTimedOut);
	            }
	        }
	    }
	    trySetToSetToDying(deathReason, instakillOverride = false, timeToShrinkAndDie = 0.5) {
	        if (!this.canDieFromTimeoutRightNow()) {
	            return false;
	        }
	        this.setMatchState(MatchState.Dying);
	        this.deathReason = deathReason;
	        if (Thing.dropTargetMostRecentTarget == this) {
	            this.hideDropTargetHighlightAndInfo();
	        }
	        if (instakillOverride) {
	            this.instakillOverride = true;
	        }
	        if (this.cfg.instaDeathOnDie || instakillOverride) {
	            return true;
	        }
	        if (this.deathTimer == null) {
	            this.deathTimer = new Clock();
	        }
	        this.deathTimer.set(timeToShrinkAndDie);
	        ThingAnim.playDieFromTimeout(this);
	        return true;
	    }
	    canDieFromTimeoutRightNow() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.ReservedByEnemy || this.matchState == MatchState.Dying
	            || this.matchState == MatchState.Death || this.matchState == MatchState.Matching || this.matchState == MatchState.BeingCarried
	            || this.matchState == MatchState.ReservedForMatch || this.matchState == MatchState.Keyhole || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        return true;
	    }
	    canLoseLifetimeRightNow() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.Dying || this.matchState == MatchState.Death
	            || this.matchState == MatchState.Matching || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.FlyingToUI
	            || this.matchState == MatchState.Keyhole || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        if (this.dead) {
	            return false;
	        }
	        if (Glob.inAnEventArea_Type2_ScorePuzzle && !this.cfg.isUIKindOfObject) {
	            return false;
	        }
	        return true;
	    }
	    canSpawnObjectsRightNow() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.ReservedByEnemy || this.matchState == MatchState.Dying || this.matchState == MatchState.Death || this.matchState == MatchState.Matching || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.ReservedForMatch || this.matchState == MatchState.FlyingToUI || this.matchState == MatchState.Keyhole || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        if (this.dead) {
	            return false;
	        }
	        return true;
	    }
	    idle() {
	        return this.matchState == MatchState.Idle;
	    }
	    shouldCheckForSpriteFlip() {
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.Dying || this.matchState == MatchState.Death || this.matchState == MatchState.ReservedByEnemy || this.matchState == MatchState.Matching || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.ReservedForMatch || this.matchState == MatchState.Keyhole || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        return true;
	    }
	    shouldSave() {
	        if (!this.verify()) {
	            return false;
	        }
	        if (this.matchState == MatchState.Icon || this.matchState == MatchState.BeingCarried || this.matchState == MatchState.DrawOnly) {
	            return false;
	        }
	        if ((this.matchState == MatchState.Death || this.matchState == MatchState.Dying) && (!this.isMonster || this.deathReason != DeathReasonID.UnSummoned)) {
	            return false;
	        }
	        return this.cfg.saves;
	    }
	    tryReplenishTap() {
	        if (this.tapsLeft < this.startingTaps) {
	            this.tapsLeft++;
	            if (this.tapVisualizer != null) {
	                this.tapVisualizer.tapAmountChanged();
	            }
	            this.tryAddTapArrow();
	            this.refreshShrinkScaleFromTapOrHarvest();
	        }
	    }
	    triggerTapBehavior() {
	        if (this.cfg.tapBehavior != null) {
	            let flag = this.tapsLeft > 0 || this.cfg.infiniteTaps;
	            this.cfg.tapBehavior.activateTapBehavior(this);
	            if (flag) {
	                this.tapToSendDragonTimeStamp = TimeStamp.current;
	            }
	        }
	    }
	    tapPaymentConfirmed() {
	        let cost = this.cfg.tapBehavior.onTapGemCost;
	        if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, cost)) {
	            GuiMgr.errorMessage("Somehow confirmed a tap unlock payment when it wasn't affordable. Cost: " + cost + " " + ECurrency.Diamond);
	            return;
	        }
	        CurrencyMgr.ins().charge2(ECurrency.Diamond, cost, EnumEconSpendType.UNLOCK, this.cfg, this.guid);
	        ApiMgr.addYbRecord(cost, LogCostType.DiamondChest);
	        if (this.hasCategory(CategoryID.EggChests) || this.hasCategory(CategoryID.NestVaults)) {
	        }
	        this.onTapCostPaid = true;
	        this.tryRemoveLock(true);
	    }
	    tween_MoveTo_Root_OnCompleteCallback() {
	        this.updateZ(true);
	    }
	    updateZ(forceUpdate) {
	        if (forceUpdate || this.forceUpdateZ || ((this.x != this.lastPosition.x || this.y != this.lastPosition.y) && (this.matchState != 0 || this._selected || this.isBeing))) {
	            let properZDepth = this.getProperZDepth();
	            this.setRootPosition(this.x, this.y, properZDepth);
	        }
	    }
	    getProperZDepth() {
	        let result = 0;
	        if (this.transform == null) {
	            return result;
	        }
	        if (this.matchState == MatchState.BeingCarried) {
	            result = this.y;
	        }
	        else {
	            result = this.y + this.cfg.zPush;
	        }
	        result += this.adjustZ;
	        return result;
	    }
	    tryChainReactionMatch() {
	        if (this.checkedForChainReactions) {
	            return;
	        }
	        this.checkedForChainReactions = true;
	        if (this.matchChainOriginatorGuid != 0) {
	            if (!this.cfg.matchable) {
	                ChainMatchInfo.pingFromNonMatchableMatchOutput(this);
	                this.chainReactionDepth = 0;
	            }
	            else if (this.matchState != 0) {
	                ChainMatchInfo.objectFailedToChain(this);
	                this.chainReactionDepth = 0;
	            }
	            else if (!this.masterCreatedByMatch && !this.isLeftoverFromMatch) {
	                ChainMatchInfo.objectFailedToChain(this);
	                this.chainReactionDepth = 0;
	            }
	            else if (!this.tryFindAndTriggerAnyMerges()) {
	                ChainMatchInfo.objectFailedToChain(this);
	                this.chainReactionDepth = 0;
	            }
	        }
	    }
	    tryFindAndTriggerAnyMerges() {
	        if (this.cfg.requiresCellPlacement) {
	            this.checkForMatchPartners();
	        }
	        else {
	            this.checkForMatchPartners_OffGrid();
	        }
	        return this.tryActivateMatch();
	    }
	    updateSwoopToCell() {
	        if (this.targetMetaCell == null) {
	            console.log("Object " + this.name + " is trying to run Update_SwoopToCell() with a null m_targetMetaCell.");
	            ThingAnim.playHitBoundary(this);
	            return;
	        }
	        let num = MathUtil.getDistance(this.x, this.y, this.targetMetaCell.center.x, this.targetMetaCell.center.y);
	        let x = this.targetMetaCell.center.x - this.x;
	        x *= 0.125 * Glob.deltaTime * 60;
	        let y = this.targetMetaCell.center.y - this.y;
	        y *= 0.125 * Glob.deltaTime * 60;
	        if (MathUtil.magnitude(x, y) + 0.01 >= num) {
	            this.swoopToCell_ForceComplete();
	        }
	        else {
	            x = x + this.x;
	            y = y + this.y;
	            this.setRootPosition(x, y);
	        }
	    }
	    updateSwoopToOffGridLocation() {
	        if (this.requiresCellPlacement) {
	            console.log("Calling Update_SwoopToOffGridLocation() on an object that requires cell placement. Is this okay?");
	        }
	        let num = MathUtil.getDistance(this.x, this.y, this.offGridSwoopTarget.x, this.offGridSwoopTarget.y);
	        let x = this.offGridSwoopTarget.x - this.x;
	        x *= 0.125 * Glob.deltaTime * 60;
	        let y = this.offGridSwoopTarget.y - this.y;
	        y *= 0.125 * Glob.deltaTime * 60;
	        this.setRootPosition(x + this.x, y + this.y);
	        if (MathUtil.magnitude(x, y) + 0.01 >= num) {
	            this.setRootPosition(this.offGridSwoopTarget.x, this.offGridSwoopTarget.y);
	            this.setMatchState(MatchState.Idle);
	            if (this.userDirectedOffGridSwoop) {
	                this.checkForMatchPartners_OffGrid();
	                this.tryActivateMatch();
	            }
	            if (this.userDirectedOffGridSwoop) {
	                this.checkForDropOnMonsterActionTarget(true);
	            }
	            this.userDirectedOffGridSwoop = false;
	        }
	    }
	    updateMatching() {
	        if (this.matchTarget == this) {
	            this.updateMatching_CheckForFinaleReadiness();
	        }
	        else {
	            this.updateMatching_MatchSlaveUpdate();
	        }
	    }
	    tryFlyToUIAtScreenLocation(uiTarget, hitUICallback) {
	        if (this.canDieFromTimeoutRightNow()) {
	            this.hitUICallback = hitUICallback;
	            this.uiTarget = uiTarget;
	            this.setMatchState(MatchState.FlyingToUI);
	        }
	    }
	    updateFlyingToUI() {
	        let uiPos = GuiMgr.getWorldPositionOfGUI(this.uiTarget);
	        let x = uiPos.x - this.drawnX;
	        let y = uiPos.y - this.drawnY;
	        let coord = CameraMgr.screenWidthHeightFactorInWorldCoords;
	        let magnitude = MathUtil.magnitude(x, y);
	        let nor = MathUtil.normalize(x, y);
	        nor[0] = nor[0] * 1.5 * coord * Glob.deltaTime;
	        nor[1] = nor[1] * 1.5 * coord * Glob.deltaTime;
	        let magnitude2 = MathUtil.magnitude(nor[0], nor[1]);
	        if (magnitude2 > magnitude) {
	            if (this.hitUICallback != null) {
	                this.hitUICallback.run();
	            }
	            else {
	                this.trySetToSetToDying(DeathReasonID.ReachedTarget, true);
	            }
	        }
	        else {
	            let x1 = this.x + nor[0];
	            let y1 = this.y + nor[1];
	            this.setRootPosition(x1, y1);
	        }
	    }
	    updateDying() {
	        if (this.cfg.instaDeathOnDie || this.instakillOverride) {
	            this.triggerDeathLootTableAndKillMe();
	            return;
	        }
	        this.deathTimer.update(Glob.deltaTime);
	        if (this.deathTimer.done) {
	            this.triggerDeathLootTableAndKillMe();
	        }
	    }
	    updateMatching_MatchSlaveUpdate() {
	        if (!this.readyToBeDestroyedOnMatchComplete) {
	            let num = MathUtil.getDistance(this.x, this.y, this.matchTarget.x, this.matchTarget.y);
	            let x = this.matchTarget.x - this.x;
	            x *= 0.2 * Glob.deltaTime * 60;
	            let y = this.matchTarget.y - this.y;
	            y *= 0.2 * Glob.deltaTime * 60;
	            if (MathUtil.magnitude(x, y) + 0.01 >= num) {
	                this.readyToBeDestroyedOnMatchComplete = true;
	                return;
	            }
	            x = x + this.x;
	            y = y + this.y;
	            this.setRootPosition(x, y);
	        }
	    }
	    updateMatching_CheckForFinaleReadiness() {
	        if (this.matchPartners != null && this.matchPartners.length > 0) {
	            for (let i in this.matchPartners) {
	                let matchPartner = this.matchPartners[i];
	                if (!matchPartner.readyToBeDestroyedOnMatchComplete) {
	                    return;
	                }
	            }
	            while (this.matchPartners.length > 0) {
	                this.matchPartners.pop().destroyDrawnObject(DeathReasonID.SlaveMatched);
	            }
	        }
	        this.updateMatching_CheckForFinaleReadinessEX();
	    }
	    updateMatching_CheckForFinaleReadinessEX() {
	        let chainReactionDepth = this.chainReactionDepth;
	        let num = (this.matchChainOriginatorGuid != 0) ? this.matchChainOriginatorGuid : this.guid;
	        let matchOutputList = this.cfg.getMatchOutputList();
	        if (matchOutputList.length == 0) {
	            console.log("Match Outputs for matching [" + this.cfg.pref + "] has zero elements! Killing this object.");
	            this.destroyDrawnObject(DeathReasonID.Error);
	            return;
	        }
	        let text = matchOutputList[0];
	        if (PropsCfg.get(text)) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.Match, thing: this });
	            ChainMatchInfo.masterCreatedAMatch(this, this.cfg.cid);
	            let x = this.x;
	            let y = this.y;
	            this.destroyDrawnObject(DeathReasonID.MasterMatched);
	            this.dragonPowerCreatedInMatch = 0;
	            let drawnObject = Thing.createAtPointAndSwoopToFreeCell(text, x, y);
	            this.dragonPowerCreatedInMatch += drawnObject.cfg.dragonPower;
	            drawnObject.chainReactionDepth = chainReactionDepth + 1;
	            matchOutputList.shift();
	            drawnObject.matchChainOriginatorGuid = num;
	            drawnObject.createdByMatch = true;
	            drawnObject.wasTheMasterMatchOutput = true;
	            ChainMatchInfo.matchOutputCreated(drawnObject);
	            ThingAnim.playNewObjectAppear(drawnObject, true);
	            drawnObject.playMatchCreatedSound();
	            drawnObject.masterCreatedByMatch = true;
	            if (drawnObject.isMonster && this.isMonster && this.asMonster.firstName != null) {
	                drawnObject.asMonster.firstName = this.asMonster.firstName;
	            }
	            if (!Glob.inAnEventArea_Type2_ScorePuzzle) {
	                this.updateMatching_HandleChanceDrops(num, chainReactionDepth, matchOutputList, x, y);
	            }
	            this.updateMatching_HandleExcessInputs(num, chainReactionDepth, drawnObject, this.cfg);
	            ChainMatchInfo.matchLeaderRetired(this);
	            this.handletDragonPowerDeltaForCurrentMatch(drawnObject);
	            drawnObject.matchCreated_HandleSpecialCelebrations();
	            Thing.matchCreated_UpdateEzraHUD(drawnObject);
	        }
	    }
	    updateMatching_HandleChanceDrops(matchOriginatorGuid, originatorChainDepth, prefabsToCreate, wx, wy) {
	        let lootOrb = null;
	        let drawnObject = null;
	        let drawnObject2 = null;
	        for (let item of prefabsToCreate) {
	            drawnObject = Thing.createAtPointAndSwoopToFreeCell(item, wx, wy, lootOrb);
	            drawnObject.chainReactionDepth = originatorChainDepth + 1;
	            drawnObject.matchChainOriginatorGuid = matchOriginatorGuid;
	            drawnObject.createdByMatch = true;
	            if (drawnObject2 == null) {
	                drawnObject2 = drawnObject;
	            }
	            ChainMatchInfo.matchOutputCreated(drawnObject);
	            this.dragonPowerCreatedInMatch += drawnObject.cfg.dragonPower;
	            if (lootOrb == null) {
	                lootOrb = drawnObject.getComponent(LootOrb);
	            }
	        }
	        return drawnObject2;
	    }
	    updateMatching_HandleExcessInputs(matchOriginatorGuid, originatorChainDepth, matchOutput, definitionOfMatchInputs) {
	        for (let i = 0; i < this.extraMatchTriples; i++) {
	            this.updateMatching_HandleChanceDrops(matchOriginatorGuid, originatorChainDepth, definitionOfMatchInputs.getMatchOutputList(), matchOutput.x, matchOutput.y);
	        }
	        for (let j = 0; j < this.bonusMatchOutputsFrom5Matches; j++) {
	            let drawnObject = this.updateMatching_HandleChanceDrops(matchOriginatorGuid, originatorChainDepth, definitionOfMatchInputs.getMatchOutputList(), matchOutput.x, matchOutput.y);
	            FloatingText.CreateInfoText3(LanCfg.get("10020028"), InfoTextColorID.Green, drawnObject, true, false, false, false, TextAppearLocationID.Above);
	            if (Glob.inHome || Glob.inAnEventArea) {
	                GGProgressionDupeController.ins().CreateCase(drawnObject);
	            }
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.Match5Plus, thing: this });
	        }
	        for (let k = 0; k < this.matchObjectRemainders; k++) {
	            let drawnObject2 = Thing.createAtPointAndSwoopToFreeCell(definitionOfMatchInputs.cid, matchOutput.x, matchOutput.y);
	            drawnObject2.isLeftoverFromMatch = true;
	            drawnObject2.matchChainOriginatorGuid = matchOriginatorGuid;
	            ChainMatchInfo.matchOutputCreated(drawnObject2);
	        }
	    }
	    matchCreated_HandleSpecialCelebrations() {
	    }
	    handletDragonPowerDeltaForCurrentMatch(newObject) {
	        let numItemsUsedInMatch = 3 + this.matchInputOverflowPast3 - this.matchObjectRemainders;
	        let num = numItemsUsedInMatch * this.cfg.dragonPower;
	        let num2 = this.dragonPowerCreatedInMatch - num;
	        if (num2 > 0) {
	        }
	    }
	    playMatchCreatedSound() {
	        if (this.cfg.SFX_UniqueAppearByMatchingSound == null) {
	            SoundMgr.ins().playSounds(["m171", "m172", "m173"]);
	        }
	        else {
	            SoundMgr.ins().playSound(this.cfg.SFX_UniqueAppearByMatchingSound);
	        }
	    }
	    attachParticles(particlesPrefab, particleZPush = -0.5) {
	        if (particlesPrefab && this.parent && this.activeSelf) {
	            let position = this.body.transform.position;
	            Globals.createFromPrefabAt(particlesPrefab, new Laya.Vector3(position.x, position.y, this.getProperZDepth() + particleZPush), this);
	        }
	    }
	    triggerDeathLootTableAndKillMe() {
	        if (this.deathReason == DeathReasonID.LifeTimedOut) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.DieFromTimeout, thing: this });
	        }
	        if (this.cfg.deathLootTable != null && (this.deathReason == DeathReasonID.HarvestedAway || this.deathReason == DeathReasonID.LifeTimedOut || this.deathReason == DeathReasonID.Tapped)) {
	            let prefabName = this.cfg.deathLootTable.dropPrefabId();
	            let x = this.x;
	            let y = this.y;
	            this.destroyDrawnObject();
	            Thing.createAtPointAndSwoopToFreeCell(prefabName, x, y);
	            SoundMgr.ins().playSound("m101");
	        }
	        else {
	            this.destroyDrawnObject();
	        }
	    }
	    static matchCreated_UpdateEzraHUD(createdObject) {
	        if (Glob.inAnEventArea || Glob.inHome) {
	            GGProgressionDupeController.ins().CreateCase(createdObject);
	        }
	    }
	    static create(propId, particlesToAddPrefab = null, particleZPush = -0.5) {
	        let def = null;
	        if (!propId) {
	            console.log("Tried to create drawnObject with null prefab!");
	            return null;
	        }
	        if (propId == Glob.k_LEVEL_EGG) {
	            def = ((Glob.map.levelEggPrefabNames.length <= 0) ? Glob.currLevelData.GetRandomEggRewardDef()
	                : PropsCfg.get(Globals.randomElement(Glob.map.levelEggPrefabNames)));
	            if (def == null) {
	                def = PropsCfg.get(Glob.k_DEFAULT_EGG);
	            }
	            if ((Glob.inHome || Glob.inAnEventArea || Glob.inAChallengeArea) && def.LEVEL_EGG_HomeProxy) {
	                if (this.totalDragonPower < def.LEVEL_EGG_Proxy_MinDragonPower || Glob.inAnEventArea || Glob.inAChallengeArea) {
	                    let key = LootTablesCfg.get(60442).dropPrefabId();
	                    def = PropsCfg.get(key);
	                }
	                else {
	                    let num = (Globals.k_minDragonPowerMultiplierToDropT2ProxyChest * def.LEVEL_EGG_Proxy_MinDragonPower);
	                    def = (!def.LEVEL_EGG_HomeProxy_Tier2 || this.totalDragonPower < num || !MathUtil.chance(0.2))
	                        ? PropsCfg.get(def.LEVEL_EGG_HomeProxy) : PropsCfg.get(def.LEVEL_EGG_HomeProxy_Tier2);
	                }
	            }
	        }
	        else if (PropsCfg.get(propId)) {
	            def = PropsCfg.get(propId);
	            if (Glob.inAnEventArea && def.hasCategory(CategoryID.NotInEvents)) {
	                let key2 = LootTablesCfg.get(60442).dropPrefabId();
	                def = PropsCfg.get(key2);
	            }
	        }
	        if (def == null) {
	            return null;
	        }
	        if (!this.canCreateObjectPrefab(def.cid)) {
	            let widthInTiles = def.widthCell;
	            let heightInTiles = def.heightCell;
	            return Thing.createTemporaryObject(propId, widthInTiles, heightInTiles, def);
	        }
	        var thing = Glob.thingLayer.create(def);
	        thing.setDefinition(def);
	        ThingCompMgr.add(thing, def);
	        if (particlesToAddPrefab != null) {
	            thing.attachParticles(particlesToAddPrefab, particleZPush);
	        }
	        return thing;
	    }
	    static createTemporaryObject(propId, width, height, originalDef) {
	        let temporaryObjectDef = Thing.getTemporaryObjectDef(width, height);
	        if (temporaryObjectDef == null) {
	            return null;
	        }
	    }
	    setAsTemporary(prefabName, temporaryDef, originalDef) {
	        this.cfg = temporaryDef;
	        this.originalCfg = originalDef;
	        this.isTemporary = true;
	        if (originalDef && originalDef.cid) {
	            this.prefabName = originalDef.cid;
	        }
	        else {
	            this.prefabName = prefabName;
	        }
	    }
	    static getTemporaryObjectDef(width, height) {
	        return null;
	    }
	    static createAtPointAndSwoopToFreeCell(propId, wx, wy, lootOrb = null, particlesPrefab = null, shakeCameraVerticalImpact = false, particleZPush = -0.5) {
	        if (!propId) {
	            console.error("Trying to create a null prefab, most likely from requesting a prefab for an malformed ID.");
	            return null;
	        }
	        let drawnObject;
	        var cfg = PropsCfg.get(propId);
	        if (cfg) {
	            if (!Glob.cellLayer.boardTooFullFor(propId)) {
	                drawnObject = ((cfg.requiresCellPlacement || this.canCreateObjectPrefab(propId)) ? this.create(propId) : LootOrb.create(propId));
	            }
	            else {
	                if (lootOrb) {
	                    lootOrb.addTreasure(propId);
	                    return lootOrb.owner;
	                }
	                drawnObject = LootOrb.create(propId);
	            }
	        }
	        else {
	            drawnObject = LootOrb.create(propId);
	        }
	        if (!drawnObject)
	            return;
	        drawnObject.setRootPosition(wx, wy);
	        ThingAnim.playNewObjectAppear(drawnObject);
	        this.createMatchParticlesFor(drawnObject);
	        if (drawnObject.isBeing && !drawnObject.requiresCellPlacement) {
	            Globals.swoopOffGridObjectToLocationInCellRadius(drawnObject, 2, wx, wy);
	        }
	        else {
	            Globals.swoopDropToFreeMetaCell(drawnObject);
	        }
	        if (particlesPrefab != null) {
	            let position = drawnObject.transform.position;
	            Globals.createFromPrefabAt(particlesPrefab, new Laya.Vector3(position.x, position.y, drawnObject.getProperZDepth() + particleZPush), drawnObject);
	        }
	        if (shakeCameraVerticalImpact) {
	            Tween.ShakeCamera_VerticalImpact();
	        }
	        return drawnObject;
	    }
	    static canCreateObjectPrefab(propId) {
	        if (!propId) {
	            return false;
	        }
	        return true;
	    }
	    static createMatchParticlesFor(obj) {
	        let gameObject = Globals.createFromPrefabAt("ParticleRoot_MatchLow", obj.body.transform.position);
	        if (gameObject.sp) {
	            let part = gameObject.sp;
	            let component = part.particleSystem;
	            let startSize = 0.29;
	            startSize += (obj.cfg.itemLevel - 1) * startSize * 0.2;
	            component.startSizeConstant = startSize;
	            let num = (obj.cfg.itemLevel - 1) * 3;
	            let emission = component.emission;
	            ;
	            emission.clearBurst();
	            emission.addBurst(new Laya.Burst(0, num, num));
	        }
	        if (Glob.inHome && obj.isMonster) {
	            Globals.createFromPrefabAt("ParticleRoot_ShopBuyImpact", obj.transform.position, obj.localPositionAnimTarget);
	        }
	    }
	    intersects(target) {
	        return this.bounds.calculateBoundsintersection(target.bounds) > 0;
	    }
	    doDamage(delta) {
	        Flasher.flashWhite(this);
	        return this.updateHP(0 - delta);
	    }
	    updateHP(delta) {
	        if (this.killed) {
	            return false;
	        }
	        if (Math.abs(delta) < 0.001) {
	            return false;
	        }
	        this.hp += delta;
	        this.tryShowHealthMeter();
	        if (this.hp <= 0.01) {
	            this.hp = 0;
	            this.dieFromNoHP();
	            return true;
	        }
	        this.updateHealthMeter();
	        if (this.meterTimeout != null) {
	            this.meterTimeout.reset();
	        }
	        return false;
	    }
	    tryShowHealthMeter() {
	        if (this.meter != null) {
	            return;
	        }
	        if (this.meterTimeout == null) {
	            this.meterTimeout = new Clock(6);
	        }
	        else {
	            this.meterTimeout.set(6);
	        }
	        this.attachProgressBar(ProgHp, true);
	        if (this.meter) {
	            let num = (100 + 100 * (this.cfg.startingHP / PropCfgVo.maxStartingHPFound)) >> 0;
	            this.meter.setWidth(num);
	        }
	    }
	    updateHealthMeter() {
	        if (this.meter == null) {
	            return;
	        }
	        let num = this.hp / this.cfg.startingHP;
	        this.meter.setValue(num);
	        if (this.meter.hasLabel) {
	            let num2 = this.hp >> 0;
	            if (num2 <= 0 && this.hp > 0.001) {
	                num2 = 1;
	            }
	            this.meter.setLabel(LanCfg.get("10020015") + " " + num2 + "/" + this.cfg.startingHP);
	        }
	        if (this.meterTimeout != null) {
	            this.meterTimeout.update(Glob.deltaTime);
	            if (this.meterTimeout.done) {
	                this.detachProgressBar();
	            }
	        }
	    }
	    dieFromNoHP() {
	        this.killed = true;
	        MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.DestroyFromNoHP, thing: this });
	        if (this.cfg.breaksInto != null) {
	            let num = this.cfg.breakIntoCountRange.random();
	            for (let i = 0; i < num; i++) {
	                Thing.createAtPointAndSwoopToFreeCell(this.cfg.breaksInto.dropPrefabId(), this.x, this.y);
	            }
	        }
	        if (this.cfg.onDefeated_Loot1 != null) {
	            this.cfg.onDefeated_Loot1.tryDropWithinRadius(this, -1, true);
	        }
	        if (this.cfg.onDefeated_Loot2 != null) {
	            let num2 = this.cfg.onDefeated_Loot2CountRange.random();
	            for (let j = 0; j < num2; j++) {
	                this.cfg.onDefeated_Loot2.tryDropWithinRadius(this, -1, true);
	            }
	        }
	        if (this.cfg.dieVFXPrefabName) {
	            Globals.createFromPrefabAt(this.cfg.dieVFXPrefabName, this.drawnObjectPosition);
	        }
	        if (!this.trySetToSetToDying(DeathReasonID.NoHPLeft)) {
	            this.destroyDrawnObject(DeathReasonID.NoHPLeft);
	        }
	        if (this.cfg.SFX_Destroyed) {
	            SoundMgr.ins().playSound(this.cfg.SFX_Destroyed);
	        }
	    }
	    moveRootTowardAtSpeed(x, y, speed) {
	        let x1 = x - this.x;
	        let y1 = y - this.y;
	        this.moveRootPositionAtSpeedInDirection(x1, y1, speed);
	    }
	    moveRootPosition(x, y) {
	        this.transform.position = new Laya.Vector3(x + this.x, y + this.y, this.z);
	    }
	    moveRootPositionAtSpeedInDirection(x, y, speed) {
	        let movement = MathUtil.normalize(x, y);
	        speed *= Glob.deltaTime;
	        let x1 = movement[0] * speed;
	        let y1 = movement[1] * speed;
	        this.moveRootPosition(x1, y1);
	    }
	    moveRootToward_WithRubberBand(x, y, ratioOfDistanceToCoverPerFrame, maxSpeed) {
	        let num = MathUtil.getDistance(this.x, this.y, x, y);
	        let x1 = (x - this.x) * ratioOfDistanceToCoverPerFrame;
	        let y1 = (y - this.y) * ratioOfDistanceToCoverPerFrame;
	        let x2 = x1 + this.x;
	        let y2 = y1 + this.y;
	        let num2 = MathUtil.getDistance(x2, y2, x, y);
	        let num3 = Math.abs(num - num2);
	        let num4 = num3 / Glob.deltaTime;
	        if (num4 > maxSpeed) {
	            x1 *= maxSpeed / num4;
	            y1 *= maxSpeed / num4;
	        }
	        this.moveRootPosition(x1, y1);
	    }
	    moveOffGridObjInBoundsIfNeeded() {
	        let bounds = Glob.map.bounds;
	        if (!this.requiresCellPlacement && !GameUtil.boundsContains(bounds, this.x, this.y)) {
	            let min = bounds.getMin();
	            let max = bounds.getMax();
	            let x = MathUtil.randNum(min.x, max.x);
	            let y = MathUtil.randNum(min.y, max.y);
	            this.setRootPosition(x, y);
	        }
	    }
	    youAreBeingCarried(carrier) {
	        this.setMatchState(MatchState.BeingCarried);
	        Globals.setLocalScaleToXOnLargestSide(this.body, 0.4);
	        let localPosition = this.localPositionAnimTarget.transform.localPosition;
	        let num = localPosition.y * 0.4;
	        let x = carrier.x;
	        let max = carrier.bounds.getMax();
	        let y = max.y - num;
	        carrier.localPositionAnimTarget.addChild(this);
	        this.adjustZ = -0.5;
	        this.setRootPosition(x, y);
	        ThingAnim.playNewObjectAppear(this, false);
	    }
	    get bounds() {
	        let b = this.spBounds;
	        if (b) {
	            return b;
	        }
	        this._bounds.setCenter(this.transform.position);
	        return this._bounds;
	    }
	    get spBounds() {
	        if (!this.sp)
	            return null;
	        try {
	            let mesh = this.sp.getChildAt(0);
	            return mesh.meshRenderer.bounds;
	        }
	        catch (e) { }
	        return null;
	    }
	    beDroppedFromCarry(targetMetaCell) {
	        let x = this.x;
	        let y = this.y;
	        this.adjustZ = 0;
	        Glob.thingLayer.addChild(this);
	        this.setRootPosition(x, y);
	        if (this.cfg.requiresCellPlacement) {
	            this.occupyMetaCell(targetMetaCell);
	            ThingAnim.playDropFromCarry(this, targetMetaCell.center);
	        }
	        else {
	            ThingAnim.playDropFromCarry_ScaleUpOnly(this);
	            this.swoopOffGridTo(targetMetaCell.x, targetMetaCell.y, false, false);
	        }
	        SoundMgr.ins().playSounds(["m209", "m210"]);
	        this.setMatchState(MatchState.Idle);
	        this.tryAddTapArrow();
	        if (this.cfg.SFX_UniqueAppearByMatchingSound != null) {
	            SoundMgr.ins().playSound(this.cfg.SFX_UniqueAppearByMatchingSound);
	        }
	    }
	    isLockedStarterBundleObject() {
	        if (!this.hasCategory(CategoryID.StarterBundle_1)) {
	            return false;
	        }
	        if (ShopSaveMgr.DidPurchaseStarterPack) {
	            return false;
	        }
	        return true;
	    }
	    isLockedTimedBundleChest() {
	        if (this.cfg.pref.substring(0, 10) == ("BaoXianGui")) {
	            return true;
	        }
	        return false;
	    }
	    tryAddLock() {
	        if ((!this.isLockedTimedBundleChest() && !this.isLockedStarterBundleObject() && (this.cfg.tapBehavior == null || !this.cfg.tapBehavior.hasOnTapGemCost || this.onTapCostPaid || !Glob.currentLevel.data.isHome)) || this.lock != null) {
	            return;
	        }
	        this.lock = Globals.createFromPrefabAt("Lock", this.drawnCenter, this.body);
	        if (this.lock == null) {
	            GuiMgr.errorMessage("Tried to create lock on object: " + this + " but it failed.");
	            return;
	        }
	        let trans = this.lock.transform;
	        if (this.matchState == MatchState.BeingCarried) {
	            let localScale = this.body.transform.localScale;
	            let num = localScale.x / this.restingScale.x;
	            let localScale2 = trans.localScale;
	            let x = localScale2.x * num;
	            let y = localScale2.y * num;
	            trans.localScale = new Laya.Vector3(x, y, localScale2.z);
	        }
	        let y = trans.localPosition.y;
	        trans.localPosition = new Laya.Vector3(0, y, -2);
	    }
	    tryRemoveLock(playUnlockVFXandAudio = false) {
	        if (this.lock) {
	            if (playUnlockVFXandAudio) {
	                SoundMgr.ins().playSound("m54");
	                Globals.createFromPrefabAt("ParticleRoot_ChestUnlock", this.lock.transform.position);
	            }
	            this.lock.destroy(true);
	            this.lock = null;
	        }
	    }
	    tryAddTapArrow(showEvenIfItemTypeHadArrowBefore = false) {
	        if (!Glob.inAnEventArea_Type2_ScorePuzzle && this.cfg.tapBehavior != null && this.hasTapsAvailable && !this.dead && this.matchState != MatchState.BeingCarried && !this.tapArrow && (showEvenIfItemTypeHadArrowBefore || (this.cfg.showTapArrowBeforeFirstTap && !this.cfg.everTapped))) {
	            this.tapArrow = Globals.createFromPrefab("JianTou");
	            this.adjustTapArrow();
	        }
	    }
	    adjustTapArrow() {
	        if (!this.tapArrow)
	            return;
	        if (!this.sp)
	            return;
	        let totalBounds = Globals.getTotalBounds(this);
	        this.addChild(this.tapArrow);
	        let transform = this.tapArrow.transform;
	        let max = totalBounds.getMax();
	        transform.position = new Laya.Vector3(this.x, max.y, -2);
	    }
	    static shouldSpawnIntoLootOrb(prefabName) {
	        let value = PropsCfg.get(prefabName);
	        if (!value) {
	            return true;
	        }
	        if (!value.requiresCellPlacement && !this.canCreateObjectPrefab(prefabName)) {
	            return true;
	        }
	        return false;
	    }
	    static create_SaveData(defToCreateFrom) {
	        let drawnObject = this.create(defToCreateFrom.cid);
	        drawnObject.initMain();
	        if (drawnObject.isMonster) {
	            drawnObject.asMonster.currentLevelID = 0;
	        }
	        let saveDataObject = drawnObject.getSaveDataObject();
	        drawnObject.destroyDrawnObject_Immediate();
	        return saveDataObject;
	    }
	    getSaveDataObject() {
	        let st = new SL_Thing();
	        let def = st.definition = this.originalCfg;
	        st.guid = this.guid;
	        st.isOriginalObjectInitialized = this.isOriginalObjectInitialized;
	        st.tapsLeft = this.tapsLeft;
	        st.startingTaps = this.startingTaps;
	        st.tapRechargeTimer = this.tapRechargeTimer ? this.tapRechargeTimer.getSaveDataObject() : null;
	        st.onTapCostPaid = this.onTapCostPaid;
	        st.harvestChargesLeft = this.harvestChargesLeft;
	        st.startingHarvestCharges = this.startingHarvestCharges;
	        st.deathTimerData = this.deathTimer ? this.deathTimer.getSaveDataObject() : null;
	        if (def) {
	            st.prefabName = def.cid;
	            st.widthInTiles = def.widthCell;
	            st.heightInTiles = def.heightCell;
	            st.requiresCellPlacement = def.requiresCellPlacement;
	            st.exists_tapsLeft = def.numTaps.max != 0;
	            st.exists_tapRechargeTimer = def.tapBehavior && def.tapBehavior.rechargesTaps && this.tapRechargeTimer != null;
	            st.exists_harvestCharges = def.harvestIsExhaustible;
	            st.exists_deathTimer = def.diesAfterTimeout && this.deathTimer != null;
	            st.exists_dynamicStrength = def.usesDynamicStrength;
	        }
	        else {
	            st.prefabName = this.prefabName;
	            st.widthInTiles = this.cfg.widthCell;
	            st.heightInTiles = this.cfg.heightCell;
	            st.requiresCellPlacement = this.requiresCellPlacement;
	            st.exists_tapsLeft = false;
	            st.exists_tapRechargeTimer = false;
	            st.exists_deathTimer = false;
	            st.exists_dynamicStrength = false;
	        }
	        if (this.matchState != MatchState.Icon && this.matchState != MatchState.DrawOnly) {
	            st.exists_position = true;
	            let position2;
	            if (st.requiresCellPlacement && this.metaCell != null) {
	                let x = this.metaCell.x;
	                let y = this.metaCell.y;
	                let position = this.transform.position;
	                position2 = new Laya.Vector3(x, y, position.z);
	            }
	            else {
	                position2 = this.transform.position;
	            }
	            st.position = position2;
	            if (def) {
	                st.position = Globals.wideLevelBoundsCheck(this.cfg, st.position);
	            }
	        }
	        if (this.constructible != null) {
	            st.exists_constructible = true;
	            st.constructibleData = this.constructible.getSaveDataObject();
	        }
	        if (this.hasCustomLoot) {
	            st.exists_customLootBundle = true;
	            st.customLootData = this.customLootBundle.getSaveDataObject();
	        }
	        if ((this.spawnComponent != null && !this.spawnComponent.spawnDef.hasInfiniteSpawns) || (this.isTemporary && this.spawnComponentExists)) {
	            st.exists_spawnChargesLeft = true;
	            st.spawnChargesLeft = this.spawnChargesLeft;
	        }
	        if (this.isMonster) {
	            st.exists_monsterData = true;
	            st.monsterData = this.asMonster.getMonsterSaveDataObject();
	        }
	        if (this.enemySpawnNexus) {
	            st.exists_enemyNexus = true;
	            st.enemyNexus = this.enemySpawnNexus.getSaveDataObject();
	        }
	        st.hp = this.hp;
	        st.dynamicStrength = this.dynamicStrength;
	        if (this.homeComponent != null) {
	            st.exists_monsterHome = true;
	            st.monsterHomeComponent = this.homeComponent.getSaveDataObject();
	        }
	        if (this.matchState == MatchState.BeingCarried) {
	            st.isBeingCarried = true;
	        }
	        st.wasDeadWhenSaved = this.dead;
	        return st;
	    }
	    static getSaveDataForAllDrawnObjects() {
	        let saveList = this.getSaveList();
	        if (Debug.printSaveLoadMessages) {
	            console.log("SAVE: Getting Save List > " + saveList.length + " DrawnObjects");
	        }
	        let list = [];
	        for (let item of saveList) {
	            list.push(item.getSaveDataObject());
	        }
	        return list;
	    }
	    static loadFromSave_Entity(loadData, droppedFromInstanceLoot = false) {
	        if (loadData == null) {
	            return null;
	        }
	        let text = loadData.prefabName;
	        if (this.halloweenEventItemsToNormalItems == null) {
	            this.halloweenEventItemsToNormalItems = {};
	            this.halloweenEventItemsToNormalItems[11265] = 11276;
	            this.halloweenEventItemsToNormalItems[11266] = 11277;
	            this.halloweenEventItemsToNormalItems[11267] = 11278;
	            this.halloweenEventItemsToNormalItems[11268] = 11279;
	            this.halloweenEventItemsToNormalItems[11269] = 11280;
	            this.halloweenEventItemsToNormalItems[11270] = 11281;
	            this.halloweenEventItemsToNormalItems[11271] = 11282;
	            this.halloweenEventItemsToNormalItems[11272] = 11283;
	            this.halloweenEventItemsToNormalItems[11273] = 11284;
	            this.halloweenEventItemsToNormalItems[11274] = 11285;
	            this.halloweenEventItemsToNormalItems[11275] = 11286;
	            this.halloweenEventItemsToNormalItems[11291] = 11292;
	            this.halloweenEventItemsToNormalItems[11287] = 10255;
	            this.halloweenEventItemsToNormalItems[11288] = 10255;
	            this.halloweenEventItemsToNormalItems[11289] = 10255;
	            this.halloweenEventItemsToNormalItems[11290] = 10255;
	            this.halloweenEventItemsToNormalItems[11293] = 10255;
	            this.halloweenEventItemsToNormalItems[11294] = 10255;
	            this.halloweenEventItemsToNormalItems[11295] = 10255;
	            this.halloweenEventItemsToNormalItems[11296] = 10255;
	            this.halloweenEventItemsToNormalItems[11297] = 10255;
	        }
	        if (Glob.inHome && this.halloweenEventItemsToNormalItems[text]) {
	            text = this.halloweenEventItemsToNormalItems[text];
	        }
	        let drawnObject = this.create(text);
	        if (drawnObject != null) {
	            if (droppedFromInstanceLoot) {
	                drawnObject.droppedFromInstanceLoot = true;
	            }
	            drawnObject.initFromSaveData(loadData);
	            return drawnObject;
	        }
	        if (loadData.widthInTiles > 0 && loadData.heightInTiles > 0) {
	            let value = PropsCfg.get(text);
	            let drawnObject2 = this.createTemporaryObject(text, loadData.widthInTiles, loadData.heightInTiles, value);
	            drawnObject2.initFromSaveData(loadData);
	            return drawnObject2;
	        }
	        let list = [];
	        list.push(loadData);
	        let drawnObject3 = LootOrb.createSL(list);
	        drawnObject3.setRootPosition(loadData.position.x, loadData.position.y);
	        return drawnObject3;
	    }
	    initFromSaveData(data) {
	        this.loadedFromSave = true;
	        this._guid = data.guid;
	        this._guidString = this._guid.toString();
	        this.isOriginalObjectInitialized = data.isOriginalObjectInitialized;
	        this._requiresCellPlacement = data.definition ? data.definition.requiresCellPlacement : data.requiresCellPlacement;
	        this.prefabName = data.prefabName;
	        this.addToGuidMap();
	        let originalDefinition = this.originalCfg;
	        if (data.exists_position) {
	            if (originalDefinition != null) {
	                data.position = Globals.wideLevelBoundsCheck(originalDefinition, data.position);
	            }
	            this.setRootPosition(data.position.x, data.position.y, data.position.z);
	        }
	        if (!data.exists_tapsLeft && originalDefinition != null) {
	            this.tapsLeft = originalDefinition.numTaps.random();
	            this.startingTaps = this.tapsLeft;
	        }
	        else {
	            this.tapsLeft = data.tapsLeft;
	            this.startingTaps = data.startingTaps;
	        }
	        if (originalDefinition && originalDefinition.numTaps.min > 0) {
	            if (originalDefinition.numTaps.max > 0 && this.startingTaps == 0) {
	                this.tapsLeft = originalDefinition.numTaps.random();
	                this.startingTaps = this.tapsLeft;
	            }
	        }
	        this.onTapCostPaid = data.onTapCostPaid;
	        if (!this.isTemporary) {
	            if (originalDefinition.tapBehavior != null && originalDefinition.tapBehavior.rechargesTaps) {
	                if (data.exists_tapRechargeTimer) {
	                    this.tapRechargeTimer = new Clock();
	                    this.tapRechargeTimer.initFromSaveData(data.tapRechargeTimer);
	                    this.tapRechargeTimer.setOriginalTime(originalDefinition.tapBehavior.rechargeTapEveryNSeconds);
	                }
	                else {
	                    this.tapRechargeTimer = new Clock(originalDefinition.tapBehavior.rechargeTapEveryNSeconds);
	                }
	            }
	            this.tryInitTapVisualizer();
	            if (originalDefinition.harvestIsExhaustible) {
	                if (data.exists_harvestCharges) {
	                    this.harvestChargesLeft = data.harvestChargesLeft;
	                    this.startingHarvestCharges = data.startingHarvestCharges;
	                }
	                else {
	                    this.harvestChargesLeft = originalDefinition.harvestCharges;
	                    this.startingHarvestCharges = this.harvestChargesLeft;
	                }
	            }
	            if (originalDefinition.diesAfterTimeout) {
	                this.deathTimer = new Clock();
	                this.deathTimer.setRange(originalDefinition.lifetimeRange);
	                if (data.exists_deathTimer) {
	                    this.deathTimer.initFromSaveData(data.deathTimerData);
	                }
	            }
	            if (this.constructible != null) {
	                if (!data.exists_constructible) {
	                    GuiMgr.errorMessage("Destroying object marked as Constructible in its definition, but the save data for it had no Constructible entry: " + this);
	                    this.destroyDrawnObject_Immediate();
	                    return;
	                }
	                this.constructible.initFromSaveData(data.constructibleData);
	            }
	        }
	        else {
	            if (data.exists_tapRechargeTimer) {
	                this.tapRechargeTimer = new Clock();
	                this.tapRechargeTimer.initFromSaveData(data.tapRechargeTimer);
	            }
	            if (data.exists_harvestCharges) {
	                this.harvestChargesLeft = data.harvestChargesLeft;
	                this.startingHarvestCharges = data.startingHarvestCharges;
	            }
	            if (data.exists_deathTimer) {
	                this.deathTimer = new Clock();
	                this.deathTimer.setRange(originalDefinition.lifetimeRange);
	                this.deathTimer.initFromSaveData(data.deathTimerData);
	            }
	            if (this.constructible != null && data.exists_constructible) {
	                this.constructible.initFromSaveData(data.constructibleData);
	            }
	        }
	        if (data.exists_customLootBundle) {
	            if (this._customLootBundle == null) {
	                this._customLootBundle = new LootBundle();
	                this._customLootBundle.initFromSaveData(data.customLootData);
	            }
	            else {
	            }
	        }
	        if (data.exists_spawnChargesLeft) {
	            this.spawnChargesLeft = data.spawnChargesLeft;
	            this.spawnComponentExists = true;
	        }
	        if (data.exists_monsterData) {
	            this.asMonster.initMonsterFromSaveData(data.monsterData);
	        }
	        this.hp = data.hp;
	        if (data.exists_monsterHome) {
	            if (this.homeComponent != null) {
	                this.homeComponent.initFromSaveData(data.monsterHomeComponent);
	            }
	        }
	        if (!this.isTemporary) {
	            if (data.exists_dynamicStrength && originalDefinition.usesDynamicStrength) {
	                this.dynamicStrength = data.dynamicStrength;
	            }
	        }
	        else if (data.exists_dynamicStrength) {
	            this.dynamicStrength = data.dynamicStrength;
	        }
	        if (data.isBeingCarried) {
	            this.setMatchState(MatchState.BeingCarried);
	        }
	        this.wasDeadWhenSaved = data.wasDeadWhenSaved;
	        this.makeImmuneToDeathOnCreation = !this.wasDeadWhenSaved && this.makeImmuneToDeathOnCreation;
	        this.initMain();
	    }
	    static getSaveList() {
	        let list = [];
	        for (let i in ThingList.lists) {
	            let drawnObjectList = ThingList.lists[i];
	            for (let item of drawnObjectList) {
	                if (item == null) {
	                    console.log("NullDrawnObjectInSaveList", "Found a null drawnObject in DrawnObjectLists.Values for obj {drawnObjectList.Key?.PrefabName}");
	                }
	                else if (item.shouldSaveToLevelFile()) {
	                    list.push(item);
	                }
	            }
	        }
	        return list;
	    }
	    shouldSaveToLevelFile() {
	        if (this.isMonster) {
	            return OwnedMonsterMgr.shouldSaveMonsterToNormalLevelFile(this.asMonster);
	        }
	        return this.shouldSave();
	    }
	    setLabel(newLabel) {
	    }
	    clearLabel() {
	        this.setLabel(null);
	    }
	    tryReserveForBuild(reserver) {
	        if (!this.build_IsAvailable()) {
	            return false;
	        }
	        if (!this.tryReserveForGeneralUse(reserver)) {
	            return false;
	        }
	        return true;
	    }
	    tryReserveForGeneralUse(reserver) {
	        if (!this.availableForGeneralUse()) {
	            return false;
	        }
	        if (Debug.checkErrors_ThisIsASlowOperation && this.users != null && this.users.indexOf(reserver) >= 0) {
	            return false;
	        }
	        if (this.users == null) {
	            this.users = [];
	        }
	        this.users.push(reserver);
	        return true;
	    }
	    tryReserveForHarvest(reserver, autonomyLevel) {
	        if (!this.harvest_IsAvailable(autonomyLevel)) {
	            return false;
	        }
	        this.addReserverToHarvestList(reserver, autonomyLevel);
	        if (!this.tryReserveForGeneralUse(reserver)) {
	            ArrayUtil.remove(this.harvesters, reserver);
	            return false;
	        }
	        return true;
	    }
	    addReserverToHarvestList(reserver, autonomyLevel) {
	        if (this.harvesters.length < this.cfg.maxConcurrentHarvesters) {
	            this.harvesters.push(reserver);
	        }
	        else if (autonomyLevel == AutonomyLevelID.UserDirected) {
	            for (let harvester of this.harvesters) {
	                if (harvester.autonomyLevel == AutonomyLevelID.Autonomous && harvester.setToIdleIfInterruptible(false)) {
	                    this.harvesters.push(reserver);
	                    return;
	                }
	            }
	        }
	    }
	    releaseFromHarvestReservation(harvester) {
	        ArrayUtil.remove(this.harvesters, harvester);
	        this.releaseFromUse(harvester);
	    }
	    harvest() {
	        MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.HarvestFrom, thing: this });
	        let result = this.cfg.harvestLoot.drop();
	        if (this.cfg.harvestTimeoutSeconds > 0) {
	            if (this.harvestTimeoutTimer == null) {
	                this.harvestTimeoutTimer = new Clock(this.cfg.harvestTimeoutSeconds);
	            }
	            else {
	                this.harvestTimeoutTimer.reset();
	            }
	        }
	        if (this.cfg.harvestIsExhaustible) {
	            this.harvestChargesLeft--;
	            this.refreshShrinkScaleFromTapOrHarvest();
	            if (this.harvestChargesLeft <= 0) {
	                this.harvestExhausted();
	            }
	        }
	        return result;
	    }
	    harvestExhausted() {
	        this.trySetToSetToDying(DeathReasonID.HarvestedAway);
	    }
	    tweenRotateByOnCompleteCallback(animationName) {
	        if (this.isParentNull)
	            return;
	        this.tweenRotateThrottle++;
	        this.tweenRotateThrottle %= 2;
	        if (this.tweenRotateThrottle != 0 && animationName == "Harvest_MonsterAnim") {
	            this.asMonster.actionTarget.activateHarvestVFX();
	        }
	    }
	    releaseFromUse(user) {
	        if (Debug.checkErrors_ThisIsASlowOperation && (this.users == null || this.users.indexOf(user) < 0)) {
	            console.log("Trying to remove a user from an object that isn't using it. Object: " + this.name + ". User: " + user.name);
	        }
	        ArrayUtil.remove(this.users, user);
	    }
	    refreshShrinkScaleFromTapOrHarvest() {
	        if (this.matchState == MatchState.BeingCarried || this.matchState == MatchState.Icon || this.matchState == MatchState.DrawOnly) {
	            return;
	        }
	        let num = 0;
	        let num2 = 0;
	        if (!this.cfg.shrinkWithHarvest && (this.cfg.tapBehavior == null || !this.cfg.tapBehavior.shrinkOnTap)) {
	            return;
	        }
	        if (this.startingHarvestCharges == 0 && this.startingTaps == 0) {
	            return;
	        }
	        if (this.startingHarvestCharges > 0 && this.cfg.shrinkWithHarvest) {
	            num += this.startingHarvestCharges;
	            num2 += this.harvestChargesLeft;
	        }
	        if (this.startingTaps > 0 && this.cfg.tapBehavior != null && this.cfg.tapBehavior.shrinkOnTap) {
	            num += this.startingTaps;
	            num2 += this.tapsLeft;
	        }
	        if (this.lastHarvestTapChargeTotalForShrink != num2) {
	            this.lastHarvestTapChargeTotalForShrink = num2;
	            let num3 = 0.5 + 0.5 * (num2 / num);
	            this.restingScale = new Laya.Vector3(this.originalScale.x * num3, this.originalScale.y * num3, this.originalScale.z);
	            Tween.EaseBackToOriginalScale(this);
	        }
	    }
	    workOnIsAvailable() {
	        if (!this.availableForGeneralUse()) {
	            return false;
	        }
	        return this.workableComponent != null;
	    }
	    showDropTargetHighlight(dropTarget, infoText) {
	        let blueHighlightPrefabName = dropTarget.getBlueHighlightPrefabName();
	        if (Thing.dropTargetHighlight == null) {
	            Thing.dropTargetHighlight = Globals.createFromPrefabAt(blueHighlightPrefabName, dropTarget.transform.position);
	            Thing.dropTargetHighlight.name = blueHighlightPrefabName;
	        }
	        else if (Thing.dropTargetHighlight.name != blueHighlightPrefabName) {
	            Thing.dropTargetHighlight.dispose();
	            Thing.dropTargetHighlight = Globals.createFromPrefabAt(blueHighlightPrefabName, dropTarget.transform.position);
	            Thing.dropTargetHighlight.name = blueHighlightPrefabName;
	        }
	        else {
	            Thing.dropTargetHighlight.active = true;
	            Thing.dropTargetHighlight.transform.position = dropTarget.transform.position;
	        }
	        Thing.dropTargetMostRecentTarget = dropTarget;
	        DropTargetInfo.ins.setActive(true);
	        DropTargetInfo.ins.setPos(dropTarget.positionTopCenter);
	        DropTargetInfo.ins.setText(infoText);
	    }
	    attackers_DragonStartedAttacking() {
	        this.numDragonAttackers++;
	    }
	    attackers_DragonFinishedAttacking() {
	        this.numDragonAttackers--;
	    }
	    attachProgressBar(bar, searchForLabelToUpdate, verticalOffset = 0, overrideRelativePosition = null) {
	        if (this.meter != null) {
	            GuiMgr.errorMessage("Trying to attach a new progress meter in DrawnObject " + this.name + " but there already is one!");
	            return this.meter;
	        }
	        this.meter = Laya.Pool.createByClass(bar);
	        this.meter.setOwner(this);
	        let positionRelativeTo = overrideRelativePosition ? overrideRelativePosition : this;
	        this.meter.setHook(positionRelativeTo, this.originalHeightOffsetToTop + verticalOffset);
	        return this.meter;
	    }
	    detachProgressBar() {
	        if (this.meter) {
	            this.meter.detachProgressBar(this);
	            this.meter = null;
	        }
	    }
	    adjustMeter() {
	        if (!this.meter)
	            return;
	        let tmpY = this.originalHeightOffsetToTop + this.meter.offsetY;
	        this.meter.updateHookPos(tmpY);
	    }
	    initAsKeyhole() {
	        this.setMatchState(MatchState.Keyhole);
	    }
	    setGuid() {
	        if (this.loadedFromSave) {
	            if (this._guid > Thing.highestGuidFound) {
	                Thing.highestGuidFound = this._guid;
	                if (Thing.highestGuidFound > Thing.guidCounter) {
	                    Thing.guidCounter = Thing.highestGuidFound + 1;
	                }
	            }
	        }
	        else {
	            this.resetToNewGuid();
	        }
	    }
	    resetToNewGuid() {
	        this._guid = Thing.guidCounter;
	        Thing.guidCounter++;
	        this._guidString = this._guid.toString();
	    }
	    addToGuidMap() {
	        while (ThingList.guidMap[this.guid]) {
	            let guidString = this._guidString;
	            this.resetToNewGuid();
	            let guidString2 = this._guidString;
	            console.log("Trying to add dupe GUID to GUID map:" + this.name + ", resetting guid:", guidString, guidString2);
	        }
	        ThingList.guidMap[this.guid] = this;
	    }
	    static createAndSwoopAndSetCustomLootBundle(prefabName, creationPoint, loot, particlesPrefab = null, shakeCameraVerticalImpact = false, particleZPush = -0.5) {
	        let drawnObject = this.create(prefabName);
	        drawnObject.customLootBundle.addLoot(loot);
	        drawnObject.setRootPosition(creationPoint.x, creationPoint.y);
	        ThingAnim.playNewObjectAppear(drawnObject);
	        this.createMatchParticlesFor(drawnObject);
	        Globals.swoopDropToFreeMetaCell(drawnObject);
	        if (particlesPrefab != null) {
	            let position = drawnObject.transform.position;
	            Globals.createFromPrefabAt(particlesPrefab, new Laya.Vector3(position.x, position.y, drawnObject.getProperZDepth() + particleZPush), drawnObject);
	        }
	        if (shakeCameraVerticalImpact) {
	            Tween.ShakeCamera_VerticalImpact();
	        }
	        return drawnObject;
	    }
	    setDefinition(def) {
	        this.cfg = def;
	        this.originalCfg = def;
	    }
	    initLocalDataFromDefinition_Universal() {
	        if (this.cfg.spawnDefinition) {
	            this.spawnComponent = this.addComponent(CompSpawner);
	            this.spawnComponent.init(this);
	        }
	        if (!this.loadedFromSave || !this.isOriginalObjectInitialized) {
	            if (this.spawnComponent && !this.spawnComponent.spawnDef.hasInfiniteSpawns) {
	                this.spawnChargesLeft = this.spawnComponent.spawnDef.spawnCycleCharges;
	            }
	            this.tapsLeft = this.cfg.numTaps.random();
	            this.startingTaps = this.tapsLeft;
	            if (this.cfg.tapBehavior && this.cfg.tapBehavior.rechargesTaps) {
	                this.tapRechargeTimer = new Clock(this.cfg.tapBehavior.rechargeTapEveryNSeconds);
	            }
	            if (this.cfg.harvestIsExhaustible) {
	                this.harvestChargesLeft = this.cfg.harvestCharges;
	                this.startingHarvestCharges = this.harvestChargesLeft;
	            }
	            if (this.cfg.diesAfterTimeout) {
	                this.deathTimer = new Clock();
	                this.deathTimer.setRange(this.cfg.lifetimeRange);
	            }
	            this.hp = this.cfg.startingHP;
	        }
	    }
	    destroyAndReplaceWith(cfgVo, wasConstructed) {
	        if (cfgVo.widthCell > this.cfg.widthCell || cfgVo.heightCell > this.cfg.heightCell) {
	            this.destroyDrawnObject();
	            return null;
	        }
	        let metaCell;
	        let x = this.x;
	        let y = this.y;
	        let drawnObject = Thing.create(cfgVo.cid);
	        drawnObject.justBuilt = wasConstructed;
	        if (drawnObject.cfg.requiresCellPlacement) {
	            metaCell = !this.targetMetaCell ? this.metaCell : this.targetMetaCell;
	            if (drawnObject.cfg.widthCell != this.cfg.widthCell || drawnObject.cfg.heightCell != this.cfg.heightCell) {
	                let tx = x;
	                let ty = y;
	                if (metaCell) {
	                    tx = metaCell.center.x;
	                    ty = metaCell.center.y;
	                }
	                metaCell = Glob.map.getMetaCell(tx, ty, drawnObject.cfg.widthCell, drawnObject.cfg.heightCell, true);
	            }
	        }
	        this.destroyDrawnObject(DeathReasonID.Replaced);
	        if (metaCell != null) {
	            drawnObject.setRootPosition(metaCell.x, metaCell.y);
	            drawnObject.occupyMetaCell(metaCell);
	        }
	        else {
	            drawnObject.setRootPosition(x, y);
	        }
	        ThingAnim.playNewObjectAppear(drawnObject);
	        Thing.createMatchParticlesFor(drawnObject);
	        drawnObject.playMatchCreatedSound();
	        return drawnObject;
	    }
	    destroyDrawnObject_Immediate(deathReason = null) {
	        if (deathReason == null) {
	            deathReason = this.deathReason;
	        }
	        this.destroyedImmediately = true;
	        this.destroyDrawnObject();
	    }
	    destroyDrawnObject(deathReason = null) {
	        if (deathReason == null) {
	            deathReason = this.deathReason;
	        }
	        if (!this.initialized && !this.destroyedImmediately) {
	            this.destroyedImmediately = true;
	        }
	        this.deathReason = deathReason;
	        if (Debug.printObjectDestruction) {
	        }
	        if (!this.destroyedImmediately) {
	            MsgCenter.notify(MsgConst.THING_DESTROY, this);
	        }
	        this.reduceDragonPower();
	        this.setMatchState(MatchState.Death);
	        if (this.deathReason == DeathReasonID.SlaveMatched) {
	            ChainMatchInfo.pingFromDyingMatchSlaveInput(this);
	        }
	        if (this.cfg != null && this.cfg.eventDestroyed && !this.isIcon && deathReason != DeathReasonID.Clear) {
	            this.cfg.eventDestroyed.runWith([this, this.deathReason]);
	        }
	        if (Thing.dropTargetMostRecentTarget == this) {
	            this.hideDropTargetHighlightAndInfo();
	        }
	        this.removeGreenArrow();
	        this.cleanUpProjectiles();
	        this.vacateMetaCell();
	        this.clearMatchPartners();
	        this.removeHighlight();
	        this.detachProgressBar();
	        this.removeFromCategoryLists();
	        this.tryRemoveTapArrow();
	        this.tryRemoveLock();
	        Tween.StopTweensOn(this);
	        if (!this.destroyedProperly) {
	            this.dispose();
	        }
	        this.destroyedProperly = true;
	        this.setActive(false);
	        if (!this.onDestroyCalled) {
	            this.destroy(true);
	        }
	    }
	    release() {
	        super.release();
	        if (this.deathComponent) {
	            this.deathComponent.release();
	            this.deathComponent = null;
	        }
	        this.clearTimer(this, this.initMain);
	        this.clearTimer(this, this.loop);
	    }
	    onDestroy() {
	        if (this.didDestroyComponent) {
	            return;
	        }
	        this.onDestroyCalled = true;
	        if (Glob.isChangingScenes || Glob.isShuttingDown) {
	            return;
	        }
	        if (!this.destroyedProperly) {
	            if (this.matchState == MatchState.Icon || this.matchState == MatchState.DrawOnly) {
	            }
	        }
	        else if (ThingList.lists[this.cfg.cid]) {
	            let list = ThingList.lists[this.cfg.cid];
	            if (list.indexOf(this) >= 0) {
	                this.removeFromCategoryLists();
	            }
	        }
	    }
	    cleanUpProjectiles() {
	        if (this.projectileLauncher != null) {
	            this.projectileLauncher.stopShooting();
	        }
	    }
	    initLocalDataFromDefinition_InLevelOnly() {
	        if (this.cfg.projectileDef_BasicAttack) {
	            this.projectileLauncher = this.addComponent(CompProjectileLauncher);
	            this.projectileLauncher.init(this);
	        }
	        if (this.cfg.tapBehavior != null && this.cfg.tapBehavior.has_AutoTap) {
	            this.autoTapTimer = new Clock(this.cfg.tapBehavior.autoTap_Seconds);
	        }
	        if (this.tapVisualizer != null) {
	            this.tapVisualizer.tapAmountChanged();
	        }
	    }
	    addToCategoryLists() {
	        if (!this.loadedFromSave) {
	            this.addToGuidMap();
	            SaveMgr.allowSave = true;
	        }
	        let cfg = this.cfg;
	        if (cfg.harvestLoot != null) {
	            ThingList.harvestables.push(this);
	        }
	        if (cfg.stealable) {
	            ThingList.stealables.push(this);
	        }
	        if (cfg.enemyBreakable) {
	            ThingList.enemyBreakables.push(this);
	        }
	        if (cfg.dragonBreakable && !this.dead) {
	            ThingList.livingDragonBreakables.push(this);
	        }
	        if (this.constructible) {
	            ThingList.buildables.push(this);
	        }
	        if (!cfg.requiresCellPlacement) {
	            ThingList.offGridObjects.push(this);
	        }
	        if (!ThingList.lists[cfg.cid]) {
	            ThingList.lists[cfg.cid] = [];
	        }
	        let list = ThingList.lists[cfg.cid];
	        list.push(this);
	        if (cfg.categories != null) {
	            for (let category of cfg.categories) {
	                if (!ThingList.categories[category]) {
	                    ThingList.categories[category] = [];
	                }
	                ThingList.categories[category].push(this);
	                MsgCenter.notify(MsgConst.CATEGORIES_ADD);
	            }
	        }
	    }
	    removeFromCategoryLists() {
	        if (this.cfg == null) {
	            return;
	        }
	        if (ThingList.guidMap[this.guid]) {
	            delete ThingList.guidMap[this.guid];
	        }
	        if (this.cfg.harvestLoot != null) {
	            ArrayUtil.remove(ThingList.harvestables, this);
	        }
	        if (this.constructible != null) {
	            ArrayUtil.remove(ThingList.buildables, this);
	        }
	        if (this.cfg.enemyBreakable) {
	            ArrayUtil.remove(ThingList.enemyBreakables, this);
	        }
	        if (this.cfg.dragonBreakable) {
	            ArrayUtil.remove(ThingList.livingDragonBreakables, this);
	        }
	        if (this.cfg.stealable) {
	            ArrayUtil.remove(ThingList.stealables, this);
	        }
	        if (!this.cfg.requiresCellPlacement) {
	            ArrayUtil.remove(ThingList.offGridObjects, this);
	        }
	        if (this.cfg.categories != null) {
	            for (let category of this.cfg.categories) {
	                if (ThingList.categories[category]) {
	                    ArrayUtil.remove(ThingList.categories[category], this);
	                    MsgCenter.notify(MsgConst.CATEGORIES_REMOVE);
	                }
	            }
	        }
	        if (ThingList.lists[this.cfg.cid]) {
	            ArrayUtil.remove(ThingList.lists[this.cfg.cid], this);
	        }
	    }
	    shouldCountDragonPower() {
	        return this.matchState != MatchState.Icon && this.matchState != MatchState.DrawOnly && this.cfg.dragonPower > 0;
	    }
	    reduceDragonPower() {
	        if (this.shouldCountDragonPower()) {
	            this.addDragonPower(-this.cfg.dragonPower);
	            GoalMgr.ins().DragonPowerChanged();
	        }
	    }
	    addDragonPower(amount) {
	        Thing.totalDragonPower += amount;
	        if (Glob.inHome) {
	            ProxyMgr.player.sSave(ECurrency.DragonPower, Thing.totalDragonPower);
	        }
	    }
	    tryTrackNewDragonPower() {
	        if (this.dragonPowerTalliedThisLoad) {
	            return;
	        }
	        if (this.shouldCountDragonPower()) {
	            this.addDragonPower(this.cfg.dragonPower);
	            GoalMgr.ins().DragonPowerChanged();
	            if (!this.loadedFromSave && Glob.inHome) {
	                ApiMgr.addDragonForceRecord(this.cfg.dragonPower, Thing.totalDragonPower, this.isMonster ? LogEarnType.DragonMerge : LogEarnType.PropAdd);
	            }
	        }
	        this.dragonPowerTalliedThisLoad = true;
	    }
	    neighborCellJustRevived(neighborNowLiving) {
	        if (this.cfg.eventAdjacent) {
	            this.cfg.eventAdjacent.runWith(this);
	        }
	    }
	    tryAddDeathComponents() {
	        if (this.cfg.immuneToDeathComponent || this.dead) {
	            return;
	        }
	        if (this.requiresCellPlacement) {
	            if (this.metaCell == null) {
	                return;
	            }
	            let averageDeathLevel = this.metaCell.getAverageDeathLevel();
	            if (averageDeathLevel == 0 || this.deathComponent != null) {
	                return;
	            }
	            this.deathComponent = this.addComponent(CompFilledWithDeath);
	            this.deathComponent.initDeadLevel(averageDeathLevel, this, false);
	            if (this.onDeathComponentAdded != null) {
	                this.onDeathComponentAdded.runWith(this.deathComponent);
	            }
	        }
	        else {
	            let cell = Glob.cellLayer.getCellCameraPos(this.x, this.y);
	            if (cell == null || cell.deathComponent == null || this.deathComponent != null) {
	                return;
	            }
	            this.deathComponent = this.addComponent(CompFilledWithDeath);
	            this.deathComponent.initDeadLevel(cell.deathComponent.deadLevel.level, this, false);
	            if (this.onDeathComponentAdded != null) {
	                this.onDeathComponentAdded.runWith(this.deathComponent);
	            }
	        }
	        if (this.cfg.dragonBreakable && ThingList.livingDragonBreakables.indexOf(this) >= 0) {
	            ArrayUtil.remove(ThingList.livingDragonBreakables, this);
	        }
	    }
	    tryRemoveDeathComponents() {
	        if (this.dead && !this.onAnyDeadCell()) {
	            this.deathComponent.removeAllDeathComponents();
	            this.deathComponent = null;
	            if (this.onDeathComponentRemoved != null) {
	                this.onDeathComponentRemoved.run();
	            }
	            if (this.cfg.dragonBreakable) {
	                ThingList.livingDragonBreakables.push(this);
	            }
	            this.tryAddTapArrow();
	            if (this.hasCategory(CategoryID.EggChests) || this.hasCategory(CategoryID.NestVaults)) {
	            }
	            MsgCenter.notify(MsgConst.THING_BECOME_ALIVE, this);
	        }
	    }
	    onAnyDeadCell() {
	        if (this.metaCell != null) {
	            return this.metaCell.hasAnyDeadCells();
	        }
	        return false;
	    }
	    tryGiveCreationPoints() {
	        if (this.createdByMatch && this.cfg.creationScore > 0) {
	            let creationScore = this.cfg.creationScore;
	            let num = this.chainReactionDepth - 1;
	            creationScore += (this.cfg.creationScore * (num * 0.8)) >> 0;
	            FloatingText.CreateObjectMatchedPointsText(creationScore, FloatingTextManager.ins().pointsAmountPrefabs[0], this);
	            Glob.currentLevel.updatePointsCount(creationScore);
	            let chanceOfSuccess = 0.05 + 0.25 * this.chainReactionDepth;
	            if (MathUtil.chance(chanceOfSuccess)) {
	                this.dropBonusPoints();
	            }
	        }
	    }
	    tryCreateChainBonusEssence() {
	        return;
	    }
	    tryShowCreationDialog() {
	        if (this.cfg.onCreatedDialogID) {
	            Laya.timer.once(2500, this, () => {
	                TomeTip.showDialog(this.cfg.onCreatedDialogID);
	            });
	        }
	    }
	    dropBonusPoints() {
	    }
	    restoreLocalPositionScaleRotation() {
	        if (this.isParentNull)
	            return;
	        this.body.transform.localScale = this.restingScale;
	        this.body.transform.localRotation = this.originalRotation;
	        if (this.localPositionAnimTarget.transform != null) {
	            this.localPositionAnimTarget.transform.localPosition = this.originalPosition;
	        }
	    }
	    restoreLocalRotation() {
	        this.body.transform.localRotation = this.originalRotation;
	    }
	    restoreLocalScale() {
	        this.body.transform.localScale = this.restingScale;
	    }
	    scaleRestingScale(scaleAmount) {
	        this.restingScale.x *= scaleAmount;
	        this.restingScale.y *= scaleAmount;
	        this.restingScale.z *= scaleAmount;
	    }
	    setDynamicSellValue(coinAmount) {
	        this.hasDynamicSellValue = true;
	        this.dynamicSellValue = coinAmount;
	    }
	    trySell(disableConfirm = false, ignoreSellable = false) {
	        if (!this.isInASellableState(ignoreSellable)) {
	            return;
	        }
	        if (this.cfg.preventSellIfLastInThisCategory != 0 && ThingList.categories[this.cfg.preventSellIfLastInThisCategory]) {
	            let list = ThingList.categories[this.cfg.preventSellIfLastInThisCategory];
	            if (list != null && list.length == 1) {
	                return;
	            }
	        }
	        if (this.cfg.confirmSell && !disableConfirm) {
	        }
	        else {
	            this.Event_TrySellConfirmed();
	        }
	    }
	    Event_TrySellConfirmed() {
	        if (!this.trySetToSetToDying(DeathReasonID.Sold)) {
	            return;
	        }
	        let sellValue = this.sellValue;
	        if (sellValue > 0) {
	            CurrencyMgr.ins().credit2(ECurrency.Gold, sellValue, EnumEconEarnType.SELL, this);
	            ApiMgr.addGoldRecord(sellValue, LogEarnType.SellProp);
	            if (this.isMonster) {
	                ApiMgr.addDragonForceRecord(this.cfg.dragonPower, Thing.totalDragonPower, LogCostType.SellDragon);
	            }
	            else {
	                if (this.cfg.dragonPower > 0) {
	                    ApiMgr.addDragonForceRecord(this.cfg.dragonPower, Thing.totalDragonPower, LogCostType.SellProp);
	                }
	            }
	            SoundMgr.ins().playSound("m61");
	        }
	        else {
	            SoundMgr.ins().playSound("m87");
	            if (this.hasCategory(CategoryID.EggChests) || this.hasCategory(CategoryID.NestVaults)) {
	            }
	        }
	        DragonBookMgr.ins().tryUpdateDragonBookPIP(this);
	        Globals.createFromPrefabAt("ParticleRoot_SellOrTrash", this.drawnObjectPosition);
	    }
	    static createInFreeCell(prefabName, particlesPrefab, shakeCameraVerticalImpact, allowLootOrb = true, specifySearchCenter = false, searchCenterOverride = null, particleZPush = -0.5, forceLootOrb = false) {
	        let matchObjectDefinition = PropsCfg.get(prefabName);
	        if (!matchObjectDefinition) {
	            console.log("createInFreeCell prefabName no!prefabName is " + prefabName);
	            return;
	        }
	        let vector = CameraMgr.screenCenterWorldCoords;
	        if (specifySearchCenter) {
	            vector.x = searchCenterOverride.x;
	            vector.y = searchCenterOverride.y;
	        }
	        let metaCell_CenteredOn = Glob.map.getMetaCell(vector.x, vector.y, matchObjectDefinition.widthCell, matchObjectDefinition.heightCell, false);
	        let emptyMetaCellNear = Glob.map.getEmptyMetaCellNear(metaCell_CenteredOn, true, -1, matchObjectDefinition.widthCell, matchObjectDefinition.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.AllowAll, false);
	        let drawnObject;
	        if ((matchObjectDefinition.requiresCellPlacement && emptyMetaCellNear == null) || (matchObjectDefinition.requiresCellPlacement && Glob.cellLayer.boardTooFullFor(prefabName)) || forceLootOrb) {
	            if (!allowLootOrb) {
	                return null;
	            }
	            drawnObject = LootOrb.create(prefabName);
	            drawnObject.setRootPosition(vector.x, vector.y);
	            ThingAnim.playNewObjectAppear(drawnObject);
	            Globals.swoopDropToFreeMetaCell(drawnObject);
	            return drawnObject;
	        }
	        drawnObject = this.create(prefabName);
	        if (drawnObject.cfg.requiresCellPlacement) {
	            drawnObject.occupyMetaCell(emptyMetaCellNear);
	            drawnObject.setRootPosition(emptyMetaCellNear.center.x, emptyMetaCellNear.center.y);
	        }
	        else {
	            let randomLivingCell = Glob.map.getRandomLivingCell(true);
	            drawnObject.setRootPosition(randomLivingCell.x, randomLivingCell.y);
	        }
	        ThingAnim.playNewObjectAppear(drawnObject);
	        if (particlesPrefab != null) {
	            let position = drawnObject.transform.position;
	            let gameObject = Globals.createFromPrefabAt(particlesPrefab, new Laya.Vector3(position.x, position.y, drawnObject.getProperZDepth() + particleZPush));
	        }
	        if (shakeCameraVerticalImpact) {
	            Tween.ShakeCamera_VerticalImpact();
	        }
	        return drawnObject;
	    }
	    enemeyCanTargetForUse() {
	        if (!this.availableForGeneralUse()) {
	            return false;
	        }
	        return true;
	    }
	    tryClaimForEnemyAction() {
	        if (!this.enemeyCanTargetForUse()) {
	            return false;
	        }
	        this.setMatchState(MatchState.ReservedByEnemy);
	        return true;
	    }
	    unclaimByEnemy() {
	        this.setMatchState(MatchState.Idle);
	    }
	}
	Thing.totalDragonPower = 0;
	Thing.highestGuidFound = 0;
	Thing.guidCounter = 1;
	Thing.dropTargetHighlight = null;
	Thing.dropTargetMostRecentTarget = null;
	Thing.halloweenEventItemsToNormalItems = {};
	class Being extends Thing {
	    constructor() {
	        super();
	        this.autonomyLevel = AutonomyLevelID.Autonomous;
	        this.travelDestination = new Laya.Vector2();
	        this.usageTimer = new Clock();
	        this.attackPositionOffsetFromTarget = new Laya.Vector2(-2, 0);
	    }
	    get beingCfg() {
	        return this.cfg;
	    }
	    get actionTarget() {
	        return this._actionTarget;
	    }
	    badActionTarget() {
	        if (this._actionTarget == null) {
	            return true;
	        }
	        if (this._actionTarget.transform == null) {
	            return true;
	        }
	        if (this._actionTarget.cfg.harvestIsExhaustible && (this._actionTarget.matchState == MatchState.Matching || this._actionTarget.matchState == MatchState.ReservedForMatch)) {
	            return true;
	        }
	        return false;
	    }
	    onAwake() {
	        this.flipController = this.addComponent(RotatesWithMovement);
	        this.idleTimer = new Clock();
	        this.idleTimer.setRange(new Range(1.5, 3));
	        super.onAwake();
	    }
	    disableFlipController() {
	        if (this.flipController) {
	            this.flipController.enabled = false;
	        }
	    }
	    enableFlipController() {
	        if (this.flipController == null) {
	            this.flipController.enabled = true;
	        }
	    }
	    setFlipTarget(target) {
	        if (target != null && target.verify()) {
	            this.flipController.flipTarget = target;
	        }
	    }
	    clearFlipTarget() {
	        this.flipController.flipTarget = null;
	    }
	    wakeUp(stayAwakeOnIdle) {
	    }
	    sleep() {
	    }
	    setToIdle() {
	        this.beingSubState_DropItemState = BeingSubState_DropItemID.NONE;
	        this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.NONE;
	        this.beingSubState_InteractingWithCellState = BeingSubState_InteractWithCellID.NONE;
	        this.beingSubstate_InBattleState = BeingSubstate_InBattleID.NONE;
	        this.targetCell = null;
	        this._actionTarget = null;
	        this.metaCellToTravelTo = null;
	        this.idleTimer.reset();
	        this.detachProgressBar();
	    }
	    isOverDeadTile() {
	        let cell = Glob.cellLayer.getCellCameraPos(this.x, this.y);
	        if (cell == null || !cell.dead) {
	            return false;
	        }
	        return true;
	    }
	    update_EnRoute(moveSpeed, range = 0.4) {
	        let magnitude = MathUtil.magnitudeMinus(this._actionTarget.x, this._actionTarget.y, this.x, this.y);
	        if (moveSpeed * Glob.deltaTime + range > magnitude) {
	            this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.JustArrivedAtObject;
	        }
	        else {
	            this.moveRootTowardAtSpeed(this._actionTarget.x, this._actionTarget.y, moveSpeed);
	        }
	    }
	    droppedOnPotentialActionObject(potentialTarget, showFeedbackTextIfAvailable) {
	    }
	    update_InteractWithCell_EnRoute(interactionRange, speed) {
	        let magnitude = MathUtil.magnitudeMinus(this.targetCell.center.x, this.targetCell.center.y, this.x, this.y);
	        if (this.beingCfg.carrySpeed * Glob.deltaTime + interactionRange > magnitude) {
	            this.moveRootTowardAtSpeed(this.targetCell.center.x, this.targetCell.center.y, speed);
	            this.beingSubState_InteractingWithCellState = BeingSubState_InteractWithCellID.JustArrived;
	        }
	        else {
	            this.moveRootTowardAtSpeed(this.targetCell.center.x, this.targetCell.center.y, speed);
	        }
	    }
	    update_DropItem_EnterPausingToThinkState() {
	        this.beingSubState_DropItemState = BeingSubState_DropItemID.PausingToThink;
	        this.idleTimer.reset();
	    }
	    update_TravelToCell_PickingDestination(objToDrop) {
	        if (!this.idleTimer.done) {
	            this.idleTimer.update(Glob.deltaTime);
	            return;
	        }
	        let metaWidth = 1;
	        let metaHeight = 1;
	        if (objToDrop != null && objToDrop.cfg.requiresCellPlacement) {
	            metaWidth = objToDrop.cfg.widthCell;
	            metaHeight = objToDrop.cfg.heightCell;
	        }
	        let flag = false;
	        if (Glob.inHome || MathUtil.chance(0.5)) {
	            let list = Glob.map.getMetaCellsWithOccupantOfType(objToDrop.cfg);
	            if (list.length == 0) {
	                list = Glob.map.getMetaCellsWithOccupantOfSameChainAs(objToDrop.cfg.englishChainName, objToDrop.cfg.chainPosition);
	            }
	            if (list.length != 0) {
	                let searchAround = MathUtil.randElement(list);
	                this.metaCellToTravelTo = Glob.map.getEmptyMetaCellNear(searchAround, false, -1, metaWidth, metaHeight, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.PreferAdjacent, false);
	                flag = (this.metaCellToTravelTo != null);
	            }
	        }
	        if (!flag) {
	            this.metaCellToTravelTo = Glob.map.getMetaCellNear(this.x, this.y, this.cfg.widthCell, this.cfg.heightCell, true, -1, metaWidth, metaHeight, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.AllowAll, false, false, true);
	        }
	        if (this.metaCellToTravelTo == null || Glob.cellLayer.boardTooFullForCfg(objToDrop.cfg)) {
	            this.idleTimer.reset();
	        }
	        else {
	            this.beingSubState_DropItemState = BeingSubState_DropItemID.EnRoute;
	        }
	    }
	    update_DropItem_TravelToCell_EnRoute() {
	        if (this.metaCellToTravelTo == null) {
	            this.update_DropItem_EnterPausingToThinkState();
	            return;
	        }
	        let magnitude = MathUtil.magnitudeMinus(this.metaCellToTravelTo.center.x, this.metaCellToTravelTo.center.y, this.x, this.y);
	        if (this.beingCfg.carrySpeed * Glob.deltaTime > magnitude) {
	            this.setRootPosition(this.metaCellToTravelTo.x, this.metaCellToTravelTo.y);
	            this.beingSubState_DropItemState = BeingSubState_DropItemID.JustArrived;
	        }
	        else {
	            this.moveRootTowardAtSpeed(this.metaCellToTravelTo.center.x, this.metaCellToTravelTo.center.y, this.beingCfg.carrySpeed);
	        }
	    }
	    update_DropItem_TravelToCell_JustArrivedAtCell(objectToDrop) {
	        if (objectToDrop == null || objectToDrop.isParentNull) {
	            this.carryObject = null;
	            this.setToIdle();
	        }
	        else if (this.metaCellToTravelTo == null || this.metaCellToTravelTo.occupied || Glob.cellLayer.boardTooFullForCfg(objectToDrop.cfg)) {
	            this.update_DropItem_EnterPausingToThinkState();
	        }
	        else {
	            this.dropCarriedItemNow(false);
	        }
	    }
	    chooseDesiredAttackPosition() {
	        if (this.cfg.attackDistanceRange == null) {
	            console.log("Being does not have an attack range specified in data: " + this.cfg.pref);
	            return;
	        }
	        let num = this.cfg.attackDistanceRange.random();
	        let f = MathUtil.random(num * 0.33);
	        num = MathUtil.randSignFlip(num);
	        f = MathUtil.randSignFlip(f);
	        if (!Glob.map.inBoundsBy(num, f)) {
	            num = 0 - num;
	        }
	        this.attackPositionOffsetFromTarget = new Laya.Vector2(num, f);
	    }
	    beingUpdate_Attack_GetIntoPosition(target, speed) {
	        let x = this._actionTarget.x + this.attackPositionOffsetFromTarget.x;
	        let y = this._actionTarget.y + this.attackPositionOffsetFromTarget.y;
	        let num = MathUtil.getDistance(x, y, this.x, this.y);
	        if (num < 0.5) {
	            this.beingSubstate_InBattleState = BeingSubstate_InBattleID.JustArrivedAtTarget;
	        }
	        else {
	            this.moveRootTowardAtSpeed(x, y, speed);
	        }
	    }
	    beingUpdate_Attack_JustArrivedAtTarget() {
	        this.beingSubstate_InBattleState = BeingSubstate_InBattleID.Attacking;
	    }
	    beingUpdate_Attack_Attacking(maxSpeed) {
	        this.maintainAttackPosition(maxSpeed);
	    }
	    maintainAttackPosition(maxSpeed) {
	        let x = this._actionTarget.x + this.attackPositionOffsetFromTarget.x;
	        let y = this._actionTarget.y + this.attackPositionOffsetFromTarget.y;
	        this.moveRootToward_WithRubberBand(x, y, 0.5, maxSpeed);
	    }
	    carryAndDrop(carryObject) {
	        if (this.autonomyLevel == AutonomyLevelID.UserDirected) {
	            this.autonomyLevel = AutonomyLevelID.Autonomous;
	        }
	        this.carryObject = carryObject;
	        this.carryObject.youAreBeingCarried(this);
	        this.update_DropItem_EnterPausingToThinkState();
	    }
	    beingUpdate_DropItem() {
	        if (this.beingSubState_DropItemState == BeingSubState_DropItemID.PausingToThink) {
	            this.update_TravelToCell_PickingDestination(this.carryObject);
	        }
	        else if (this.beingSubState_DropItemState == BeingSubState_DropItemID.EnRoute) {
	            this.update_DropItem_TravelToCell_EnRoute();
	        }
	        else if (this.beingSubState_DropItemState == BeingSubState_DropItemID.JustArrived) {
	            this.update_DropItem_TravelToCell_JustArrivedAtCell(this.carryObject);
	        }
	    }
	    dropCarriedItemNow(wasForcedByPlayerInteraction) {
	        this.carryObject.beDroppedFromCarry(this.metaCellToTravelTo);
	        let carryObject = this.carryObject;
	        this.carryObject = null;
	        this.metaCellToTravelTo = null;
	        this.setToIdle();
	        this.justDroppedCarryItem(carryObject, wasForcedByPlayerInteraction);
	    }
	    justDroppedCarryItem(carryItem, wasForcedByPlayerInteraction) {
	    }
	    destroyCarryObjectWhileCarried() {
	        this.carryObject.dispose();
	        this.carryObject = null;
	        this.metaCellToTravelTo = null;
	        this.setToIdle();
	    }
	    tryForceDropCarriedItem(destroyObjectIfNoRoom) {
	        if (this.carryObject == null || this.carryObject.isParentNull) {
	            this.carryObject = null;
	            return true;
	        }
	        if (Glob.cellLayer.boardTooFullForCfg(this.carryObject.cfg)) {
	            this.carryObject.setMatchState(MatchState.Idle);
	            let ins = LootOrb.createFromInstance(this.carryObject);
	            this.carryObject.removeSelf();
	            if (ins != null || destroyObjectIfNoRoom) {
	                this.destroyCarryObjectWhileCarried();
	                return true;
	            }
	            return false;
	        }
	        let metaWidth = 1;
	        let metaHeight = 1;
	        if (this.carryObject != null && this.carryObject.requiresCellPlacement) {
	            metaWidth = this.carryObject.cfg.widthCell;
	            metaHeight = this.carryObject.cfg.heightCell;
	        }
	        this.metaCellToTravelTo = Glob.map.getMetaCellNear(this.x, this.y, 1, 1, true, -1, metaWidth, metaHeight, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.AllowAll, false, false, true);
	        if (this.metaCellToTravelTo == null) {
	            return false;
	        }
	        this.dropCarriedItemNow(true);
	        return true;
	    }
	    setToWander() {
	        this.setToIdle();
	        this.beingSubState_DropItemState = BeingSubState_DropItemID.PausingToThink;
	    }
	    beingUpdate_Wander() {
	        if (this.beingSubState_DropItemState == BeingSubState_DropItemID.PausingToThink) {
	            if (this.idleTimer.done) {
	                this.pickWanderDestination();
	                this.beingSubState_DropItemState = BeingSubState_DropItemID.EnRoute;
	            }
	            else {
	                this.idleTimer.update(Glob.deltaTime);
	            }
	        }
	        else if (this.beingSubState_DropItemState == BeingSubState_DropItemID.EnRoute) {
	            this.update_TravelToWorldPoint();
	        }
	        else if (this.beingSubState_DropItemState == BeingSubState_DropItemID.JustArrived) {
	            this.setToIdle();
	        }
	    }
	    pickWanderDestination() {
	        if (Glob.inHome && this.beingHomeObject != null && this.beingHomeObject.verify() && MathUtil.chance(0.75)) {
	            let x = this.beingHomeObject.x + MathUtil.randNum(-3, 3);
	            let y = this.beingHomeObject.y + MathUtil.randNum(-3, 3);
	            this.travelDestination = new Laya.Vector2(x, y);
	        }
	        else {
	            this.travelDestination = Glob.map.getRandomPointOnInternalGridJoint();
	        }
	    }
	    update_TravelToWorldPoint() {
	        let magnitude = MathUtil.magnitudeMinus(this.travelDestination.x, this.travelDestination.y, this.x, this.y);
	        if (this.beingCfg.walkSpeed * 0.65 * Glob.deltaTime > magnitude) {
	            this.setRootPosition(this.travelDestination.x, this.travelDestination.y);
	            this.beingSubState_DropItemState = BeingSubState_DropItemID.JustArrived;
	        }
	        else {
	            this.moveRootTowardAtSpeed(this.travelDestination.x, this.travelDestination.y, this.beingCfg.walkSpeed * 0.65);
	        }
	    }
	    release() {
	        super.release();
	        if (!Glob.isChangingScenes && !Glob.isShuttingDown) {
	            this.tryForceDropCarriedItem(true);
	        }
	    }
	}
	class Enemy extends Being {
	    constructor() {
	        super(...arguments);
	        this.enemyState = 0;
	        this.darkMagicAudioLoopID = -1;
	    }
	    get enemyCfg() {
	        return this.cfg;
	    }
	    updateBody() {
	        super.updateBody();
	        let num = Enemy.scaleVariation.random();
	        let transform = this.body.transform;
	        let localScale = transform.localScale;
	        transform.localScale = new Laya.Vector3(localScale.x * num, localScale.y * num, 1);
	        transform.localScale.cloneTo(this.restingScale);
	        this.restingScale.cloneTo(this.originalScale);
	    }
	    initMain() {
	        if (!this.initialized) {
	            super.initMain();
	            this.idleTimer = new Clock();
	            this.idleTimer.setRange(this.enemyCfg.idleTimeRange);
	            Enemy.enemies.push(this);
	        }
	    }
	    spawnInit() {
	        this.enemyState = EnemyStateID.Spawning;
	        this.spawnTimer = new Clock();
	        this.spawnTimer.setRange(Enemy.spawnIdleTimeRange);
	    }
	    tapped() {
	        super.tapped();
	        if (this.beingIsAttackable()) {
	            Monster.trySendAttackerToTarget(this);
	        }
	    }
	    doubleTapped() {
	        super.doubleTapped();
	        if (this.beingIsAttackable()) {
	            Monster.trySendAllAttackersToTarget(this);
	        }
	    }
	    static getEnemyWithLeastLife() {
	        let num = Number.MAX_VALUE;
	        let result = null;
	        for (let enemy of Enemy.enemies) {
	            if (!enemy.killed && enemy.isInAKillableState() && enemy.hp < num) {
	                num = enemy.hp;
	                result = enemy;
	            }
	        }
	        return result;
	    }
	    update() {
	        super.update();
	        if (!Glob.isSimulationPaused() && this.matchState == MatchState.Idle) {
	            this.enemyUpdate();
	        }
	    }
	    enemyUpdate() {
	        if (this.enemyState == EnemyStateID.Idle) {
	            this.enemyUpdate_Idle();
	        }
	        else if (this.enemyState == EnemyStateID.Spawning) {
	            this.enemyUpdate_Spawning();
	        }
	        else if (this.enemyState == EnemyStateID.DropItem) {
	            this.beingUpdate_DropItem();
	        }
	        else if (this.enemyState == EnemyStateID.Wander) {
	            this.beingUpdate_Wander();
	        }
	        else if (this.enemyState == EnemyStateID.BreakSomething) {
	            this.enemyUpdate_BreakSomething();
	        }
	        else if (this.enemyState == EnemyStateID.StealSomething) {
	            this.enemyUpdate_StealSomething();
	        }
	        else if (this.enemyState == EnemyStateID.KillTile) {
	            this.enemyUpdate_KillTile();
	        }
	        else {
	            GuiMgr.errorMessage("Unandled Enemey State: " + this.enemyState);
	        }
	    }
	    setToIdle() {
	        super.setToIdle();
	        this.enemyState = EnemyStateID.Idle;
	        if (this.eyesEvil != null) {
	            this.eyesEvil.active = false;
	        }
	    }
	    static tryForceAllEnemiesToIdle() {
	        for (let enemy of Enemy.enemies) {
	            enemy.setToIdleIfInterruptible(true, false);
	        }
	    }
	    setToIdleIfInterruptible(allowForceDropOfItem, allowDestructionOfDropItem) {
	        if (this.enemyState == EnemyStateID.DropItem) {
	            if (!allowForceDropOfItem) {
	                return false;
	            }
	            if (!this.tryForceDropCarriedItem(allowDestructionOfDropItem)) {
	                return false;
	            }
	        }
	        else if (this.enemyState != 0 && this.enemyState != EnemyStateID.Wander) {
	            GuiMgr.errorMessage("Unhandled state in Enemy.cs::SetToIdleIfInterruptible()");
	            return false;
	        }
	        this.setToIdle();
	        return true;
	    }
	    enemyUpdate_Idle() {
	        this.idleTimer.update(Glob.deltaTime);
	        if (this.idleTimer.done) {
	            this.chooseAnAction();
	        }
	    }
	    enemyUpdate_Spawning() {
	        this.spawnTimer.update(Glob.deltaTime);
	        if (!this.spawnTimer.going) {
	            if (MathUtil.chance(0.2)) {
	                ShoutsCfg.shout(ShoutCategoryID.EnemyAppear, ShoutPrefabID.Red, this);
	            }
	            this.chooseAnAction();
	        }
	    }
	    setToWander() {
	        super.setToWander();
	        this.enemyState = EnemyStateID.Wander;
	    }
	    chooseAnAction() {
	        if (Glob.currentLevel.data.isHome) {
	            this.chooseBenignAction();
	        }
	        else if (MathUtil.chance(this.enemyCfg.chance_EvilAction)) {
	            this.chooseEvilAction();
	        }
	        else {
	            this.chooseBenignAction();
	        }
	    }
	    chooseEvilAction() {
	        let chanceBag = new ChanceBag();
	        if (this.enemyCfg.steals) {
	            chanceBag.add(EnemyStateID.StealSomething, this.enemyCfg.weight_Steal);
	        }
	        if (this.enemyCfg.breaks) {
	            chanceBag.add(EnemyStateID.BreakSomething, this.enemyCfg.weight_Break);
	        }
	        if (this.enemyCfg.killsTiles && (!Glob.inAnEventArea || (Glob.cellLayer.livingCells.length > 30 && Monster.activeMonsters.length > 0))) {
	            chanceBag.add(EnemyStateID.KillTile, this.enemyCfg.weight_KillTile);
	        }
	        let flag = false;
	        while (chanceBag.hasElements && !flag) {
	            let chanceBagPair = chanceBag.randomPair();
	            flag = this.tryInitiateEvilAction(chanceBagPair.item);
	            if (!flag) {
	                chanceBag.remove(chanceBagPair);
	            }
	        }
	        if (flag) {
	            if (this.eyesEvil != null) {
	                this.eyesEvil.active = true;
	            }
	        }
	        else {
	            this.chooseBenignAction();
	        }
	    }
	    chooseBenignAction() {
	        if (this.isOverDeadTile()) {
	            if (MathUtil.chance(0.8)) {
	                this.setToWander();
	            }
	            else {
	                this.setToIdle();
	            }
	        }
	        else {
	            this.setToWander();
	        }
	    }
	    tryInitiateEvilAction(actionToTake) {
	        switch (actionToTake) {
	            case EnemyStateID.StealSomething:
	                return this.trySetToStealSomething();
	            case EnemyStateID.BreakSomething:
	                return this.trySetToBreakSomething();
	            case EnemyStateID.KillTile:
	                return this.trySetToKillTile();
	            default:
	                GuiMgr.errorMessage("Unhandled EnemyStateID in TryInitiateEvilAction() --> " + actionToTake);
	                return false;
	        }
	    }
	    droppedOnPotentialActionObject(potentialTarget, showFeedbackTextIfAvailable) {
	        if (this.enemyState == EnemyStateID.Idle) {
	        }
	    }
	    trySetToStealSomething() {
	        return false;
	    }
	    enemyUpdate_StealSomething() {
	    }
	    trySetToBreakSomething() {
	        let list = MathUtil.randomizedListCopy(ThingList.enemyBreakables);
	        if (list.length == 0) {
	            return false;
	        }
	        if (Glob.map.boardTooFullForBeingToMakeNewObjects) {
	            return false;
	        }
	        for (let item of list) {
	            if (item.enemeyCanTargetForUse() && item.cfg.itemLevel <= this.enemyCfg.break_UpToLevel) {
	                this.initiateBreak(item);
	                return true;
	            }
	        }
	        return false;
	    }
	    initiateBreak(target) {
	        this._actionTarget = target;
	        this.enemyState = EnemyStateID.BreakSomething;
	        this.beingSubstate_InBattleState = BeingSubstate_InBattleID.GetIntoPosition;
	        this.chooseDesiredAttackPosition();
	        this.projectileLauncher.startShootingAt(this._actionTarget);
	        if (MathUtil.chance(0.33)) {
	            SoundMgr.ins().playSounds(["m193", "m194", "m195"]);
	        }
	    }
	    enemyUpdate_BreakSomething() {
	        if (this.badActionTarget()) {
	            this.breakObject_StopAndCleanUp();
	            this.setToIdle();
	        }
	        else if (this.beingSubstate_InBattleState == BeingSubstate_InBattleID.GetIntoPosition) {
	            this.beingUpdate_Attack_GetIntoPosition(this._actionTarget, this.enemyCfg.fastSpeed);
	        }
	        else if (this.beingSubstate_InBattleState == BeingSubstate_InBattleID.JustArrivedAtTarget) {
	            this.enemyUpdate_BreakObject_JustArrivedAtTarget();
	        }
	        else if (this.beingSubstate_InBattleState == BeingSubstate_InBattleID.Attacking) {
	            this.usageTimer.update(Glob.deltaTime);
	            if (this.usageTimer.done || this.actionTarget.killed) {
	                this.breakObject_StopAndCleanUp();
	                this.setToIdle();
	            }
	        }
	    }
	    enemyUpdate_BreakObject_JustArrivedAtTarget() {
	        if (!this._actionTarget.tryClaimForEnemyAction() || Glob.map.boardTooFullForBeingToMakeNewObjects) {
	            this.setToIdle();
	            return;
	        }
	        this.usageTimer.set(this.enemyCfg.secondsToAttackForRange.random());
	        this.setFlipTarget(this._actionTarget);
	        this.beingUpdate_Attack_JustArrivedAtTarget();
	    }
	    breakObject_StopAndCleanUp() {
	        this.detachProgressBar();
	        this.clearFlipTarget();
	        this.projectileLauncher.stopShootingAt(this._actionTarget);
	        if (this._actionTarget != null) {
	            this._actionTarget.unclaimByEnemy();
	        }
	    }
	    trySetToKillTile() {
	        if (Glob.cellLayer.livingCells.length == 0) {
	            return false;
	        }
	        let targetCell = Globals.randomElement(Glob.cellLayer.livingCells);
	        this.initiateKillTile(targetCell);
	        return true;
	    }
	    initiateKillTile(targetCell) {
	        this.targetCell = targetCell;
	        this.enemyState = EnemyStateID.KillTile;
	        this.beingSubState_InteractingWithCellState = BeingSubState_InteractWithCellID.EnRoute;
	        if (MathUtil.chance(0.33)) {
	            SoundMgr.ins().playSounds(["m193", "m194", "m195"]);
	        }
	    }
	    enemyUpdate_KillTile() {
	        if (this.beingSubState_InteractingWithCellState == BeingSubState_InteractWithCellID.EnRoute) {
	            this.update_InteractWithCell_EnRoute(this.enemyCfg.attackObjectRange, this.enemyCfg.fastSpeed);
	        }
	        else if (this.beingSubState_InteractingWithCellState == BeingSubState_InteractWithCellID.JustArrived) {
	            this.update_InteractWithCell_JustArrived();
	        }
	        else if (this.beingSubState_InteractingWithCellState == BeingSubState_InteractWithCellID.Interacting) {
	            this.update_InteractWithCell_Interacting();
	        }
	    }
	    update_InteractWithCell_JustArrived() {
	        this.beingSubState_InteractingWithCellState = BeingSubState_InteractWithCellID.Interacting;
	        SoundMgr.ins().playSounds(["m177", "m178"]);
	    }
	    update_InteractWithCell_Interacting() {
	        let percentTowardDead = Glob.deltaTime / this.enemyCfg.killTile_Seconds;
	        this.targetCell.addDeadeningProgress(percentTowardDead, this.enemyCfg.killTile_UpToLevel);
	        if (this.targetCell.dead) {
	            this.killTile_StopAndCleanUp();
	            this.setToIdle();
	        }
	    }
	    killTile_StopAndCleanUp() {
	    }
	    carryAndDrop(carryObject) {
	        this.enemyState = EnemyStateID.DropItem;
	        super.carryAndDrop(carryObject);
	    }
	    static enemy_SceneChangeCleanup() {
	        if (this.enemies != null) {
	            this.enemies.length = 0;
	        }
	    }
	    dieFromNoHP() {
	        GoalMgr.ins().ZomblinKilled();
	        super.dieFromNoHP();
	    }
	    destroyDrawnObject(deathReason) {
	        if (this.enemyState == EnemyStateID.BreakSomething) {
	            this.breakObject_StopAndCleanUp();
	        }
	        else if (this.enemyState == EnemyStateID.KillTile) {
	            this.killTile_StopAndCleanUp();
	        }
	        if (!ArrayUtil.contains(Enemy.enemies, this)) {
	            if (this.matchState != MatchState.Icon && !this.destroyedImmediately) {
	                GuiMgr.errorMessage("Trying to remove Enemy from Enemies List, but it isn't there: " + this.name + " " + this.guid);
	            }
	        }
	        else {
	            ArrayUtil.remove(Enemy.enemies, this);
	        }
	        super.destroyDrawnObject(deathReason);
	    }
	    static getNumLivingEnemies() {
	        return this.enemies.length;
	    }
	    static countNumInState(enemyState) {
	        let num = 0;
	        for (let i = 0; i < this.enemies.length; i++) {
	            if (this.enemies[i].enemyState == enemyState) {
	                num++;
	            }
	        }
	        return num;
	    }
	    beingIsAttackable() {
	        if (this.matchState == MatchState.Idle || this.matchState == MatchState.PostSwoopStillSelected || this.matchState == MatchState.SwoopingToCell || this.matchState == MatchState.SwoopingToOffGridLocation) {
	            return true;
	        }
	        return false;
	    }
	}
	Enemy.enemies = [];
	Enemy.spawnIdleTimeRange = new Range(4, 10);
	Enemy.scaleVariation = new Range(0.8, 1.2);
	class Monster extends Being {
	    constructor() {
	        super(...arguments);
	        this.idleTimeRange = new Range(2.5, 5.5);
	        this.idleTimeRangeJustHarvested = new Range(0.5, 1.5);
	        this.workCapacityLeft = 0;
	        this.workCapacityInitial = 0;
	        this.monsterState = 0;
	        this.firstName = "";
	        this.monsterStateDelay = new Clock(1);
	        this.harvestSecondsLeft = 0;
	        this.homeLevelID = 0;
	        this.currentLevelID = 0;
	        this.userCampIntent = new DragonIntent();
	        this.workOnTimer = new Clock(0.5);
	    }
	    static get numMonsters() {
	        return this.monsters.length;
	    }
	    static get allMonstersAlseep() {
	        return this.activeMonsters.length == 0 && Thing.totalDragonPower > 0;
	    }
	    static get numConcurrentHarvestersAllowed() {
	        return this.baseNumConcurrentHarvesters + this.earnedAdditionalConcurrentHarvesters;
	    }
	    get isActive() {
	        return Monster.activeMonsters.indexOf(this) >= 0;
	    }
	    get harvesterCapHit() {
	        return Monster.countNumInState(MonsterStateID.Harvest) + Monster.countNumInState(MonsterStateID.DropItem) >= Monster.numConcurrentHarvestersAllowed;
	    }
	    get harvesterCapForHomeStartHit() {
	        return Monster.countNumInState(MonsterStateID.Harvest) + Monster.countNumInState(MonsterStateID.DropItem) >= 1;
	    }
	    get monsterCfg() {
	        return this.cfg;
	    }
	    get hasAHome() {
	        return this.homeLevelID != 0;
	    }
	    get isHome() {
	        return this.hasAHome && this.homeLevelID == Glob.currentLevel.ID;
	    }
	    get awayFromHome() {
	        return this.hasAHome && this.homeLevelID != Glob.currentLevel.ID;
	    }
	    get summoned() {
	        return this.awayFromHome;
	    }
	    get enemyTarget() {
	        return this._actionTarget.asEnemy;
	    }
	    get inAHome() {
	        return this.monsterState == MonsterStateID.Sleep || this.monsterState == MonsterStateID.Relax;
	    }
	    onAwake() {
	        super.onAwake();
	        this.idleTimer.setRange(this.idleTimeRange);
	    }
	    static levelLoadComplete() {
	        GoalMgr.ins().DragonPowerChanged();
	    }
	    initMain() {
	        if (this.initialized)
	            return;
	        super.initMain();
	        if (this.matchState != MatchState.Icon && this.matchState != MatchState.DrawOnly && Glob.currentLevel != null) {
	            Monster.monsters.push(this);
	            this.insertInBestBuildersList();
	            this.initLevelIDs();
	            this.initLocalMonsterDataFromDefinition();
	            this.findTemporaryHomeObject();
	            if (!this.loadedFromSave) {
	                this.justBorn();
	            }
	            this.triggerObjSpawnEvent();
	        }
	    }
	    static countNumInState(monsterState) {
	        let num = 0;
	        for (let i = 0; i < this.monsters.length; i++) {
	            if (this.monsters[i].monsterState == monsterState) {
	                num++;
	            }
	        }
	        return num;
	    }
	    get spBounds() {
	        if (!this.sp)
	            return null;
	        try {
	            let mesh = this.sp.getChildAt(0).getChildAt(0);
	            return mesh.meshRenderer.bounds;
	        }
	        catch (e) { }
	        return null;
	    }
	    justBorn() {
	        Monster.activeMonsters.push(this);
	        this.tryShowGreeting();
	        if (this.firstName == "") {
	            let term = "DragonName/Name_" + MathUtil.randInt(0, 279);
	            this.firstName = LanCfg.get(term);
	            if (WorldMgr.ins().GetNumLevelsWon() == 0) {
	                this.firstName = "";
	            }
	        }
	        this.tryAddExtraActionsOnBeingHatched();
	    }
	    findTemporaryHomeObject() {
	        if (!Glob.inHome || (this.beingHomeObject && this.beingHomeObject.verify()) || !ThingList.categories[CategoryID.MonsterHouse]) {
	            return;
	        }
	        let list = ThingList.categories[CategoryID.MonsterHouse];
	        if (list.length != 0) {
	            let drawnObject = MathUtil.randElement(list);
	            if (drawnObject != null && drawnObject.verify()) {
	                this.beingHomeObject = drawnObject;
	            }
	        }
	    }
	    tryAddExtraActionsOnBeingHatched() {
	        if (Glob.inHome && this.cfg.itemLevel == 1) {
	            if (Thing.totalDragonPower < 2) {
	                this.workCapacityLeft += 8;
	            }
	            else if (Thing.totalDragonPower < 3) {
	                this.workCapacityLeft += 7;
	            }
	            else if (Thing.totalDragonPower < 5) {
	                this.workCapacityLeft += 6;
	            }
	            else if (Thing.totalDragonPower < 7) {
	                this.workCapacityLeft += 6;
	            }
	            else if (Thing.totalDragonPower < 10) {
	                this.workCapacityLeft += 6;
	            }
	            else {
	                this.workCapacityLeft += 5;
	            }
	            this.workCapacityInitial = this.workCapacityLeft;
	        }
	    }
	    initiatePlayerDirectedAttackOn(target) {
	        this.initiateAttackOn(target);
	        if (MathUtil.chance(0.15)) {
	            ShoutsCfg.shout(ShoutCategoryID.BattleCry, ShoutPrefabID.YelloPurple, this);
	        }
	        SoundMgr.ins().playSound("m44");
	    }
	    initLocalMonsterDataFromDefinition() {
	        if (!this.loadedFromSave) {
	            this.workCapacityLeft = this.monsterCfg.workCapacity;
	            this.workCapacityInitial = this.monsterCfg.workCapacity;
	        }
	    }
	    insertInBestBuildersList() {
	        for (let i = 0; i < Monster.bestBuilders.length; i++) {
	            if (Monster.bestBuilders[i].monsterCfg.buildSpeedMultiplier <= this.monsterCfg.buildSpeedMultiplier) {
	                Monster.bestBuilders.splice(i, 0, this);
	                return;
	            }
	        }
	        Monster.bestBuilders.push(this);
	    }
	    initLevelIDs() {
	        this.currentLevelID = Glob.currLevelData.cid;
	        if (Glob.currLevelData.isHome && this.homeLevelID == 0) {
	            this.homeLevelID = this.currentLevelID;
	        }
	        OwnedMonsterMgr.updateMonsterData(this);
	    }
	    static tryGetCampTotalStars() {
	    }
	    tryShowGreeting() {
	        if (!this.loadedFromSave && Glob.inLevelOrHome && (Glob.inHome || MathUtil.chance(0.3))) {
	        }
	    }
	    update() {
	        super.update();
	        if (Glob.currentLevel != null && !Glob.isSimulationPaused() && this.matchState == MatchState.Idle) {
	            this.monsterUpdate();
	        }
	    }
	    monsterUpdate() {
	        Monster.playedUserDirectedFeedbackThisFrame = false;
	        if (this.monsterState == MonsterStateID.Idle) {
	            this.monsterUpdate_Idle();
	        }
	        else if (this.monsterState == MonsterStateID.Harvest) {
	            this.monsterUpdate_Harvest();
	        }
	        else if (this.monsterState == MonsterStateID.Build) {
	            this.monsterUpdate_Build();
	        }
	        else if (this.monsterState == MonsterStateID.WorkOn) {
	            this.monsterUpdate_WorkOn();
	        }
	        else if (this.monsterState == MonsterStateID.DropItem) {
	            this.beingUpdate_DropItem();
	        }
	        else if (this.monsterState == MonsterStateID.Attack) {
	            this.monsterUpdate_Attack();
	        }
	        else if (this.monsterState == MonsterStateID.Wander) {
	            this.beingUpdate_Wander();
	        }
	        else if (this.monsterState == MonsterStateID.Sleep) {
	            this.monsterUpdate_SleepOrRelax(HomeEnterReasonID.Sleep);
	        }
	        else if (this.monsterState == MonsterStateID.Relax) {
	            this.monsterUpdate_SleepOrRelax(HomeEnterReasonID.Relax);
	        }
	        else {
	        }
	    }
	    setToIdle() {
	        super.setToIdle();
	        this.monsterState = MonsterStateID.Idle;
	        this.autonomyLevel = AutonomyLevelID.Autonomous;
	    }
	    static save_TryForceAllMonstersToIdle() {
	        for (let monster of this.monsters) {
	            monster.setToIdleIfInterruptible(false);
	        }
	    }
	    setToIdleIfInterruptible(allowForceDropOfItem) {
	        if (this.monsterState == MonsterStateID.DropItem) {
	            if (!allowForceDropOfItem) {
	                return false;
	            }
	            if (!this.tryForceDropCarriedItem(false)) {
	                return false;
	            }
	        }
	        else {
	            if (this.monsterState == MonsterStateID.Sleep || this.monsterState == MonsterStateID.Relax) {
	                return false;
	            }
	            if (this.monsterState == MonsterStateID.Harvest) {
	                this.stopHarvesting();
	            }
	            else if (this.monsterState == MonsterStateID.Build) {
	                this.stopBuilding();
	            }
	            else if (this.monsterState == MonsterStateID.WorkOn) {
	                this.stopWorkingOn();
	            }
	            else if (this.monsterState != 0 && this.monsterState != MonsterStateID.Wander) {
	                if (this.monsterState != MonsterStateID.Attack) {
	                    return false;
	                }
	                this.stopAttacking();
	            }
	        }
	        this.setToIdle();
	        return true;
	    }
	    monsterUpdate_Idle() {
	        if (Monster.cheat_AllAutonomyOn && (Glob.campAutonomyOn || !Glob.inHome)) {
	            this.idleTimer.update(Glob.deltaTime);
	            if (!this.selected && !this.highlight && this.idleTimer.done) {
	                this.chooseAnAutonomousAction();
	            }
	        }
	    }
	    getDescriptionForInfoBar() {
	        let str = LanCfg.get("20014112");
	        if (Glob.currLevelData.isHome) {
	            str = StringUtil.format(LanCfg.get("20014113"), this.workCapacityLeft, this.monsterCfg.workCapacity);
	        }
	        return str + " " + this.cfg.descriptionShort_Base;
	    }
	    static getMostEligibleBuilder() {
	        for (let bestBuilder of Monster.bestBuilders) {
	            if (bestBuilder.isFreeToBuild() && bestBuilder.setToIdleIfInterruptible(false)) {
	                return bestBuilder;
	            }
	        }
	        for (let bestBuilder2 of Monster.bestBuilders) {
	            if (bestBuilder2.canInterruptToBuild() && bestBuilder2.setToIdleIfInterruptible(false)) {
	                return bestBuilder2;
	            }
	        }
	        return null;
	    }
	    setToWander() {
	        super.setToWander();
	        this.monsterState = MonsterStateID.Wander;
	    }
	    select() {
	        super.select();
	        this.setToIdleIfInterruptible(true);
	        this.setLabel(this.firstName);
	    }
	    deselect() {
	        super.deselect();
	        this.clearLabel();
	    }
	    chooseAnAutonomousAction() {
	        let flag = false;
	        let potentialEnemyTargets = this.getPotentialEnemyTargets();
	        if (potentialEnemyTargets.length > 0) {
	            let closestEnemy = this.getClosestEnemy(potentialEnemyTargets);
	            this.initiateAttackOn(closestEnemy);
	            flag = true;
	        }
	        if (!flag && Glob.inHome) {
	            if (this.workCapacityLeft <= 0 || Debug.forceAllMonstersToSleep) {
	                flag = this.trySendToSleep();
	                if (!flag) {
	                    this.pickFillerAction();
	                    return;
	                }
	            }
	            else if ((Monster.isBoardTooFullOfActiveMonsters() && MathUtil.chance(0.33)) || Debug.forceAllMonstersToRelax) {
	                flag = this.trySendToRelax();
	            }
	        }
	        if (!flag) {
	            if ((this.monsterCfg.monsterType == MonsterTypeID.Builder || MathUtil.chance(0.3)) && Monster.buildingAvailableForWork()) {
	                flag = Monster.tryReserveABuildTarget(this, AutonomyLevelID.Autonomous);
	            }
	            if (!flag && this.monsterCfg.harvests && !this.harvesterCapHit && (!Glob.inHome || (Glob.inHome && Thing.totalDragonPower != 2) || (Glob.inHome && Thing.totalDragonPower == 2 && !this.harvesterCapForHomeStartHit))) {
	                if (Glob.cellLayer.emptyLivingCells.length > 3) {
	                    flag = this.tryFindHarvestTarget();
	                }
	                else {
	                    FloatingText.CreateInfoText(LanCfg.get("10020005"), InfoTextColorID.Red, this);
	                }
	            }
	        }
	        if (!flag) {
	            this.pickFillerAction();
	        }
	    }
	    pickFillerAction() {
	        if (this.isOverDeadTile()) {
	            if (MathUtil.chance(0.2)) {
	                this.setToWander();
	            }
	            else {
	                this.setToIdle();
	            }
	        }
	        else {
	            this.setToWander();
	        }
	    }
	    hasWorkCapacityAvailable() {
	        if (this.workCapacityLeft <= 0 && Glob.inHome) {
	            return false;
	        }
	        return true;
	    }
	    droppedOnPotentialActionObject(potentialTarget, showFeedbackTextIfAvailable) {
	        if (this.monsterState != 0) {
	            return;
	        }
	        if (potentialTarget.cfg.dragonBreakable && potentialTarget.availableForGeneralUse()) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.DropDragonOn, thing: potentialTarget });
	            this.initiatePlayerDirectedAttackOn(potentialTarget);
	        }
	        else if (!this.hasWorkCapacityAvailable()) {
	            if (showFeedbackTextIfAvailable) {
	            }
	        }
	        else if (potentialTarget.tryReserveForBuild(this)) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.DropDragonOn, thing: potentialTarget });
	            this.initiateBuildOnReservedObject(potentialTarget, AutonomyLevelID.UserDirected);
	            this.playUserDirectedFeedback();
	        }
	        else if (potentialTarget.tryReserveForHarvest(this, AutonomyLevelID.UserDirected)) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.DropDragonOn, thing: potentialTarget });
	            this.initiateHarvestOnReservedObject(potentialTarget, AutonomyLevelID.UserDirected);
	            this.playUserDirectedFeedback();
	        }
	        else if (potentialTarget.workOnIsAvailable()) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.DropDragonOn, thing: potentialTarget });
	            this.initiateWorkOnObject(potentialTarget, AutonomyLevelID.UserDirected);
	            this.playUserDirectedFeedback();
	        }
	    }
	    playUserDirectedFeedback() {
	        if (!Monster.playedUserDirectedFeedbackThisFrame) {
	            SoundMgr.ins().playSound("m43");
	            Globals.createFromPrefabAt("ParticleRoot_UserDirectedAction", this.actionTarget.transform.position);
	        }
	        if (MathUtil.chance(0.05)) {
	            ShoutsCfg.shout(ShoutCategoryID.UserDirect, ShoutPrefabID.YelloPurple, this);
	        }
	    }
	    updateDragTargetFeedback(dropTarget) {
	        let flag = false;
	        let infoText;
	        if (this.monsterState != 0) {
	            flag = false;
	        }
	        else if (dropTarget.cfg.dragonBreakable && dropTarget.availableForGeneralUse()) {
	            flag = true;
	            infoText = LanCfg.get("10020033");
	            this.clearLabel();
	        }
	        else if (dropTarget.build_IsAvailable()) {
	            flag = true;
	            infoText = LanCfg.get("10020034");
	            this.clearLabel();
	        }
	        else if (dropTarget.harvest_IsAvailable(AutonomyLevelID.UserDirected)) {
	            flag = true;
	            infoText = LanCfg.get("10020035");
	            this.clearLabel();
	        }
	        if (flag) {
	            this.showDropTargetHighlight(dropTarget, infoText);
	            return true;
	        }
	        this.hideDropTargetHighlightAndInfo();
	        return false;
	    }
	    monsterUpdate_Build() {
	        if (this.badActionTarget()) {
	            this.stopBuilding();
	            this.setToIdle();
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.EnRoute) {
	            let num = this.monsterCfg.walkSpeed;
	            if (this.autonomyLevel == AutonomyLevelID.UserDirected) {
	                num *= 5;
	            }
	            this.update_EnRoute(num);
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.JustArrivedAtObject) {
	            this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.UsingObject;
	            ThingAnim.playBuild(this);
	            this.tryUseAWorkCapacity();
	        }
	        else {
	            if (this.beingSubState_UseObjectState != BeingSubState_UseObjectStateID.UsingObject) {
	                return;
	            }
	            if (this.actionTarget.selected) {
	                this.stopBuilding();
	                this.setToIdle();
	                return;
	            }
	            let secondsOfProgress = Glob.deltaTime * this.monsterCfg.buildSpeedMultiplier;
	            this.actionTarget.constructible.addProgress(secondsOfProgress);
	            if (this.actionTarget.constructible.done) {
	                this.stopBuilding();
	                this.setToIdle();
	            }
	        }
	    }
	    stopBuilding() {
	        ThingAnim.stopBuild(this);
	        if (this._actionTarget != null) {
	            this._actionTarget.releaseFromUse(this);
	            this._actionTarget = null;
	        }
	    }
	    static sendAllAvailableToWorkOn(target) {
	        if (target.workOnIsAvailable()) {
	            let num = 0;
	            for (let monster of Monster.monsters) {
	                if ((monster.monsterState == MonsterStateID.Wander || monster.monsterState == MonsterStateID.Idle || monster.monsterState == MonsterStateID.DropItem || monster.monsterState == MonsterStateID.Harvest) && monster.autonomyLevel == AutonomyLevelID.Autonomous && monster.hasWorkCapacityAvailable() && monster.setToIdleIfInterruptible(true)) {
	                    monster.droppedOnPotentialActionObject(target, true);
	                    target.deselect();
	                    num++;
	                    LevelUtils.stats.orderCount++;
	                }
	            }
	            if (num == 0 && !target.hasUsers && !target.hasDragonAttackers) {
	                FloatingText.CreateInfoText(LanCfg.get("10020003"), InfoTextColorID.Red, target);
	            }
	        }
	    }
	    monsterUpdate_WorkOn() {
	        if (this.badActionTarget()) {
	            this.stopWorkingOn();
	            this.setToIdle();
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.EnRoute) {
	            let num = this.monsterCfg.walkSpeed;
	            if (this.autonomyLevel == AutonomyLevelID.UserDirected) {
	                num *= 5;
	            }
	            this.update_EnRoute(num);
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.JustArrivedAtObject) {
	            if (this._actionTarget.workableComponent == null) {
	            }
	            this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.UsingObject;
	            ThingAnim.playBuild(this);
	            this.tryUseAWorkCapacity();
	            this.workOnTimer.reset();
	        }
	        else {
	            if (this.beingSubState_UseObjectState != BeingSubState_UseObjectStateID.UsingObject) {
	                return;
	            }
	            this.workOnTimer.update(Glob.deltaTime);
	            if (this._actionTarget.selected) {
	                this.stopWorkingOn();
	                this.setToIdle();
	                return;
	            }
	            let num2 = Glob.deltaTime / this.workOnTimer.originalTime;
	            this._actionTarget.workableComponent.addWorkProgress(this.cfg.visibleLv * num2);
	            if (this.workOnTimer.done) {
	                if (this.workCapacityLeft > 0) {
	                    this.workOnTimer.reset();
	                    this.tryUseAWorkCapacity();
	                }
	                else {
	                    this.stopWorkingOn();
	                    this.setToIdle();
	                }
	            }
	        }
	    }
	    stopWorkingOn() {
	        ThingAnim.stopBuild(this);
	        this._actionTarget = null;
	    }
	    tryFindHarvestTarget() {
	        let harvestablesToTry;
	        if (this.userCampIntent.itemsAvailableForIntent(MonsterStateID.Harvest)) {
	            if (this.userCampIntent.target != null && this.userCampIntent.target.verify() && this.userCampIntent.target.tryReserveForHarvest(this, AutonomyLevelID.Autonomous)) {
	                this.initiateHarvestOnReservedObject(this.userCampIntent.target, AutonomyLevelID.Autonomous);
	                return true;
	            }
	            harvestablesToTry = MathUtil.randomizedListCopy(ThingList.lists[this.userCampIntent.targetDef.cid]);
	            if (this.tryFindHarvestTarget_FromList(harvestablesToTry)) {
	                return true;
	            }
	        }
	        harvestablesToTry = MathUtil.randomizedListCopy(ThingList.harvestables);
	        if (this.tryFindHarvestTarget_FromList(harvestablesToTry)) {
	            return true;
	        }
	        return false;
	    }
	    tryFindHarvestTarget_FromList(harvestablesToTry) {
	        for (let item of harvestablesToTry) {
	            if (item.tryReserveForHarvest(this, AutonomyLevelID.Autonomous)) {
	                this.initiateHarvestOnReservedObject(item, AutonomyLevelID.Autonomous);
	                return true;
	            }
	        }
	        return false;
	    }
	    initiateHarvestOnReservedObject(target, autonomyLevel) {
	        this._actionTarget = target;
	        this.monsterState = MonsterStateID.Harvest;
	        this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.EnRoute;
	        this.autonomyLevel = autonomyLevel;
	        if (autonomyLevel == AutonomyLevelID.UserDirected) {
	            this.userCampIntent.set(target, MonsterStateID.Harvest);
	        }
	    }
	    initiateBuildOnReservedObject(target, autonomyLevel) {
	        this._actionTarget = target;
	        this.monsterState = MonsterStateID.Build;
	        this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.EnRoute;
	        this.autonomyLevel = autonomyLevel;
	        if (autonomyLevel == AutonomyLevelID.UserDirected) {
	            this.userCampIntent.set(target, MonsterStateID.Build);
	        }
	    }
	    initiateWorkOnObject(target, autonomyLevel) {
	        this._actionTarget = target;
	        this.monsterState = MonsterStateID.WorkOn;
	        this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.EnRoute;
	        this.autonomyLevel = autonomyLevel;
	        if (autonomyLevel == AutonomyLevelID.UserDirected) {
	            this.userCampIntent.set(target, MonsterStateID.WorkOn);
	        }
	    }
	    monsterUpdate_Harvest() {
	        if (this.badActionTarget()) {
	            this.stopHarvesting();
	            this.setToIdle();
	            return;
	        }
	        if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.EnRoute) {
	            let num = this.monsterCfg.walkSpeed;
	            if (this.autonomyLevel == AutonomyLevelID.UserDirected) {
	                num *= 5;
	            }
	            this.update_EnRoute(num);
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.JustArrivedAtObject) {
	            this.harvestSecondsLeft = this._actionTarget.cfg.harvestSeconds;
	            this.harvestSecondsLeft /= this.monsterCfg.harvestSpeedMultiplier;
	            this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.UsingObject;
	            this._meter = this.attachProgressBar(ProgHarvest, false);
	            ThingAnim.playHarvest(this);
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.UsingObject) {
	            if (this._actionTarget.selected) {
	                this.stopHarvesting();
	                this.setToIdle();
	                return;
	            }
	            this.harvestSecondsLeft -= Glob.deltaTime;
	            if (this.harvestSecondsLeft <= 0) {
	                this.finishHarvest();
	            }
	        }
	        this.updateHarvestProgressMeter();
	    }
	    finishHarvest() {
	        this.detachProgressBar();
	        let carryObject = this._actionTarget.harvest();
	        if (carryObject) {
	            this.carryAndDrop(carryObject);
	        }
	        else {
	            console.error("Monster.finishHarvest.carryObject收获是null!");
	        }
	        this.tryUseAWorkCapacity();
	        this.stopHarvesting();
	    }
	    stopHarvesting() {
	        ThingAnim.stopHarvest(this);
	        if (this._actionTarget != null) {
	            this._actionTarget.releaseFromHarvestReservation(this);
	            this._actionTarget = null;
	        }
	    }
	    carryAndDrop(carryObject) {
	        this.monsterState = MonsterStateID.DropItem;
	        super.carryAndDrop(carryObject);
	        this.idleTimer.timeTravelTo(this.idleTimeRangeJustHarvested.random());
	    }
	    justDroppedCarryItem(carryItem, wasForcedByPlayerInteraction) {
	        if (!wasForcedByPlayerInteraction && carryItem.constructible != null && carryItem.tryReserveForBuild(this)) {
	            this.initiateBuildOnReservedObject(carryItem, AutonomyLevelID.Autonomous);
	        }
	    }
	    updateHarvestProgressMeter() {
	        if (this._meter && this._actionTarget) {
	            let num = this._actionTarget.cfg.harvestSeconds / this.monsterCfg.harvestSpeedMultiplier;
	            let num2 = (num - this.harvestSecondsLeft) / num;
	            this._meter.setValue(num2);
	        }
	    }
	    static trySendDragonToInteractWithTarget_FromDoubleTap(target) {
	        if (target.hasActionsAvailable(AutonomyLevelID.UserDirected)) {
	            let monster = this.findAvailableDragon();
	            if (monster != null) {
	                monster.droppedOnPotentialActionObject(target, true);
	                target.deselect();
	                LevelUtils.stats.orderCount++;
	            }
	            else if (!target.hasUsers && !target.hasDragonAttackers) {
	                FloatingText.CreateInfoText(LanCfg.get("10020003"), InfoTextColorID.Red, target);
	            }
	        }
	    }
	    static findAvailableDragon() {
	        for (let monster of Monster.monsters) {
	            if ((monster.monsterState == MonsterStateID.Wander || monster.monsterState == MonsterStateID.Idle) && monster.autonomyLevel == AutonomyLevelID.Autonomous && monster.hasWorkCapacityAvailable() && monster.setToIdleIfInterruptible(true)) {
	                return monster;
	            }
	        }
	        for (let monster2 of Monster.monsters) {
	            if (monster2.monsterState != MonsterStateID.Attack && monster2.autonomyLevel == AutonomyLevelID.Autonomous && monster2.hasWorkCapacityAvailable() && monster2.setToIdleIfInterruptible(true)) {
	                return monster2;
	            }
	        }
	        if (MergeDragonsAppConfig.MANUAL_WAKE_SLEEP_ENABLED) {
	            for (let monster3 of Monster.monsters) {
	                if (monster3.inAHome && monster3.homeCurrentlyInside != null) {
	                    let list = monster3.homeCurrentlyInside.wake_N_Sleepers(1);
	                    if (list.length > 0) {
	                        return list[0];
	                    }
	                }
	            }
	        }
	        return null;
	    }
	    monsterUpdate_SleepOrRelax(sleepOrRelax) {
	        if (this.badActionTarget()) {
	            this.setToIdle();
	        }
	        else if (this.selected || this.highlight != null) {
	            this.setToIdle();
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.EnRoute) {
	            this.update_EnRoute(this.monsterCfg.walkSpeed);
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.JustArrivedAtObject) {
	            if (sleepOrRelax == HomeEnterReasonID.Relax && !Monster.isBoardTooFullOfActiveMonsters() && !Debug.forceAllMonstersToRelax) {
	                this.setToIdle();
	                return;
	            }
	            this.monsterStateDelay.set(ThingAnim.k_PlayGoInside_AnimTime);
	            this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.StartUsingObject;
	            ThingAnim.playGoInside(this, this._actionTarget.home);
	        }
	        else if (this.beingSubState_UseObjectState == BeingSubState_UseObjectStateID.StartUsingObject) {
	            this.monsterStateDelay.update(Glob.deltaTime);
	            if (!this.monsterStateDelay.going) {
	                this._actionTarget.home.enterHome(this, sleepOrRelax, false);
	                this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.UsingObject;
	            }
	        }
	        else if (this.beingSubState_UseObjectState != BeingSubState_UseObjectStateID.UsingObject) {
	        }
	    }
	    tryUseAWorkCapacity() {
	        if (Glob.inHome) {
	            this.workCapacityLeft--;
	        }
	        if (this.workCapacityLeft < 0) {
	            this.workCapacityLeft = 0;
	        }
	    }
	    setActiveState(active) {
	        this.setActive(active);
	        if (active) {
	            if (Monster.activeMonsters.indexOf(this) < 0) {
	                Monster.activeMonsters.push(this);
	            }
	        }
	        else {
	            ArrayUtil.remove(Monster.activeMonsters, this);
	        }
	    }
	    forceSleep() {
	        if (this.inAHome && this.homeCurrentlyInside != null) {
	            if (ArrayUtil.contains(this.homeCurrentlyInside.relaxers, this)) {
	                ArrayUtil.remove(this.homeCurrentlyInside.relaxers, this);
	                this.homeCurrentlyInside.sleepers.push(this);
	                this.monsterState = MonsterStateID.Sleep;
	            }
	        }
	        else {
	            this.setToIdleIfInterruptible(true);
	            this.trySendToSleep();
	        }
	    }
	    trySendToSleep() {
	        let list = ThingList.categories[CategoryID.MonsterHouse];
	        if (!list) {
	            return false;
	        }
	        if (list.length == 0) {
	            return false;
	        }
	        let component_MonsterHome = null;
	        let num = Number.MAX_VALUE;
	        for (let item of list) {
	            let sleepSecondsLeftForAllOccupants = item.home.getSleepSecondsLeftForAllOccupants();
	            if (component_MonsterHome == null || sleepSecondsLeftForAllOccupants < num || (sleepSecondsLeftForAllOccupants == num && MathUtil.coinFlip())) {
	                component_MonsterHome = item.home;
	                num = sleepSecondsLeftForAllOccupants;
	            }
	        }
	        this._actionTarget = component_MonsterHome.drawnObject;
	        this.monsterState = MonsterStateID.Sleep;
	        this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.EnRoute;
	        this.autonomyLevel = AutonomyLevelID.Autonomous;
	        return true;
	    }
	    refreshWorkCapacity(bonusEnergy = 0) {
	        this.workCapacityLeft = this.monsterCfg.workCapacity;
	        this.workCapacityLeft += bonusEnergy;
	        this.workCapacityInitial = this.workCapacityLeft;
	    }
	    exitedHome(setToWander, homeObject) {
	        this.beingHomeObject = homeObject;
	        if (setToWander) {
	            this.setToWander();
	        }
	        else {
	            this.setToIdle();
	        }
	    }
	    trySendToRelax() {
	        if (!ThingList.categories[CategoryID.MonsterHouse]) {
	            return false;
	        }
	        let list = ThingList.categories[CategoryID.MonsterHouse];
	        if (list.length == 0) {
	            return false;
	        }
	        let drawnObject = MathUtil.randElement(list);
	        if (drawnObject == null || !drawnObject.verify()) {
	            return false;
	        }
	        this._actionTarget = drawnObject;
	        this.monsterState = MonsterStateID.Relax;
	        this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.EnRoute;
	        this.autonomyLevel = AutonomyLevelID.Autonomous;
	        return true;
	    }
	    initiateAttackOn(enemy) {
	        this.setFlipTarget(enemy);
	        this.monsterState = MonsterStateID.Attack;
	        this.beingSubstate_InBattleState = BeingSubstate_InBattleID.GetIntoPosition;
	        this._actionTarget = enemy;
	        this.projectileLauncher.startShootingAt(this._actionTarget);
	        this.chooseDesiredAttackPosition();
	    }
	    static trySendAttackerToTarget(target) {
	        for (let monster of Monster.monsters) {
	            if (monster.monsterState != MonsterStateID.Attack && monster.setToIdleIfInterruptible(true)) {
	                monster.initiatePlayerDirectedAttackOn(target);
	                break;
	            }
	        }
	    }
	    static trySendAllAttackersToTarget(enemy) {
	        for (let monster of this.monsters) {
	            if (monster.monsterState != MonsterStateID.Attack && monster.setToIdleIfInterruptible(true)) {
	                monster.initiatePlayerDirectedAttackOn(enemy);
	            }
	        }
	    }
	    monsterUpdate_Attack() {
	        if (this.badActionTarget()) {
	            this.stopAttacking();
	            this.setToIdle();
	        }
	        else if (this.beingSubstate_InBattleState == BeingSubstate_InBattleID.GetIntoPosition) {
	            this.beingUpdate_Attack_GetIntoPosition(this.enemyTarget, this.monsterCfg.fastSpeed);
	        }
	        else if (this.beingSubstate_InBattleState == BeingSubstate_InBattleID.JustArrivedAtTarget) {
	            this._actionTarget.attackers_DragonStartedAttacking();
	            this.beingUpdate_Attack_JustArrivedAtTarget();
	        }
	        else if (this.beingSubstate_InBattleState == BeingSubstate_InBattleID.Attacking) {
	            this.beingUpdate_Attack_Attacking(this.monsterCfg.fastSpeed);
	        }
	        else {
	            this.setToIdle();
	        }
	    }
	    stopAttacking() {
	        this._actionTarget.attackers_DragonFinishedAttacking();
	        this.clearFlipTarget();
	        this.projectileLauncher.stopShootingAt(this._actionTarget);
	    }
	    getPotentialEnemyTargets() {
	        let list = [];
	        for (let i = 0; i < Enemy.enemies.length; i++) {
	            if (this.canAutonomouslyAttack(Enemy.enemies[i])) {
	                list.push(Enemy.enemies[i]);
	            }
	        }
	        if (list.length != 0) {
	            return list;
	        }
	        for (let j = 0; j < ThingList.livingDragonBreakables.length; j++) {
	            if (this.canAutonomouslyAttack(ThingList.livingDragonBreakables[j])) {
	                list.push(ThingList.livingDragonBreakables[j]);
	            }
	        }
	        return list;
	    }
	    getClosestEnemy(objs) {
	        let result = null;
	        let num = Number.MAX_VALUE;
	        for (let obj of objs) {
	            let num2 = MathUtil.magnitudeMinus(obj.x, obj.y, this.x, this.y);
	            if (num2 < num) {
	                num = num2;
	                result = obj;
	            }
	        }
	        return result;
	    }
	    canAutonomouslyAttack(target) {
	        if (target.isEnemy) {
	            if (!target.asEnemy.beingIsAttackable()) {
	                return false;
	            }
	        }
	        else if (!target.availableForGeneralUse()) {
	            return false;
	        }
	        if (!this.inRangeToAttack(target)) {
	            return false;
	        }
	        return true;
	    }
	    static setBestDragons() {
	        let pool = this.monsters.concat();
	        let monster = this.getAndRemoveBestDragonFrom(pool);
	        let monster2 = this.getAndRemoveBestDragonFrom(pool);
	        let monster3 = this.getAndRemoveBestDragonFrom(pool);
	        let bestDragon1 = monster ? monster.cfg.cid : 0;
	        let bestDragon2 = monster2 ? monster2.cfg.cid : 0;
	        let bestDragon3 = monster3 ? monster3.cfg.cid : 0;
	        return { bestDragon1, bestDragon2, bestDragon3 };
	    }
	    static getAndRemoveBestDragonFrom(pool) {
	        let monster = null;
	        for (let item of pool) {
	            if (monster == null) {
	                monster = item;
	            }
	            else if (item.monsterCfg.dragonPower > monster.monsterCfg.dragonPower) {
	                monster = item;
	            }
	            else if (item.monsterCfg.dragonPower == monster.monsterCfg.dragonPower && MathUtil.coinFlip()) {
	                monster = item;
	            }
	        }
	        if (monster != null) {
	            ArrayUtil.remove(pool, monster);
	        }
	        return monster;
	    }
	    static monster_SceneChangeCleanup() {
	        if (Monster.monsters != null) {
	            Monster.monsters.length = 0;
	        }
	        if (Monster.activeMonsters != null) {
	            Monster.activeMonsters.length = 0;
	        }
	        if (Monster.bestBuilders != null) {
	            Monster.bestBuilders.length = 0;
	        }
	        Thing.totalDragonPower = 0;
	    }
	    destroyDrawnObject(deathReason) {
	        if (deathReason == null) {
	            deathReason = this.deathReason;
	        }
	        if (this.monsterState == MonsterStateID.Harvest) {
	            this.stopHarvesting();
	        }
	        else if (this.monsterState == MonsterStateID.Build) {
	            this.stopBuilding();
	        }
	        if (Monster.monsters.indexOf(this) < 0) {
	            if (this.matchState != MatchState.Icon && !this.destroyedImmediately) {
	                console.error("Trying to remove Monster from monsters List, but it isn't there: " + this.name + " " + this.guid);
	            }
	        }
	        else {
	            ArrayUtil.remove(Monster.monsters, this);
	        }
	        ArrayUtil.remove(Monster.activeMonsters, this);
	        if (Monster.bestBuilders.indexOf(this) < 0) {
	            if (this.matchState != MatchState.Icon && !this.destroyedImmediately) {
	                console.error("Trying to remove Monster from Best Builders List, but it isn't there: " + this.name + " " + this.guid);
	            }
	        }
	        else {
	            ArrayUtil.remove(Monster.bestBuilders, this);
	        }
	        if (deathReason != DeathReasonID.UnSummoned && deathReason != DeathReasonID.Clear) {
	            OwnedMonsterMgr.tryRemoveMonster(this);
	        }
	        super.destroyDrawnObject(deathReason);
	    }
	    static isBoardTooFullOfActiveMonsters() {
	        return this.activeMonsters.length >= 16;
	    }
	    static wouldBoardBeTooFullOfActiveMonstersWithNMore(numToAdd) {
	        return this.activeMonsters.length + numToAdd >= 16;
	    }
	    isFreeToBuild() {
	        if (this.matchState != 0) {
	            return false;
	        }
	        if (this.monsterState == MonsterStateID.Wander || this.monsterState == MonsterStateID.Idle) {
	            return true;
	        }
	        return false;
	    }
	    canInterruptToBuild() {
	        if (this.matchState != 0) {
	            return false;
	        }
	        if (this.inAHome) {
	            return false;
	        }
	        return true;
	    }
	    static getTotalWorkCapacity() {
	        let num = 0;
	        for (let i = 0; i < Monster.monsters.length; i++) {
	            num += Monster.monsters[i].workCapacityInitial;
	        }
	        return num;
	    }
	    static getTotalRemainingWorkCapacity() {
	        let num = 0;
	        for (let i = 0; i < Monster.monsters.length; i++) {
	            num += Monster.monsters[i].workCapacityLeft;
	        }
	        return num;
	    }
	    tryClaimForMatch(requesterToIgnore) {
	        if (this.awayFromHome) {
	            return false;
	        }
	        if (this.inAHome) {
	            return false;
	        }
	        return super.tryClaimForMatch(requesterToIgnore);
	    }
	    static getTotalDragonsDiscovered() {
	        let num = 0;
	        return num;
	    }
	    isMergeableFromDragonBookUI() {
	        if (!this.cfg.matchable) {
	            return false;
	        }
	        if (this.matchPartners != null && this.matchPartners.length > 0) {
	            return false;
	        }
	        if (this.homeCurrentlyInside != null) {
	            return true;
	        }
	        return super.isMergeableFromDragonBookUI();
	    }
	    tryEjectFromHome() {
	        if (this.homeCurrentlyInside != null) {
	            this.homeCurrentlyInside.forceDragonOutOfHome(this, ExitHomeMovementTypeID.SwoopNearby, false);
	        }
	    }
	    initMonsterFromSaveData(data) {
	        this.currentLevelID = data.currentLevelID;
	        this.homeLevelID = data.homeLevelID;
	        this.firstName = data.name;
	        Monster.activeMonsters.push(this);
	        if (data.exists_carryObject) {
	            this.goIntoCarryOfSavedCarryObject(data.carryObject);
	        }
	        else {
	            this.initMonsterFromSaveData_TryRestoreSleepingOrRelaxingState();
	        }
	        this.workCapacityLeft = data.workCapacityLeft;
	        this.workCapacityInitial = data.workCapacityLeft;
	    }
	    initMonsterFromSaveData_TryRestoreSleepingOrRelaxingState() {
	        if (!Glob.inHome) {
	            return;
	        }
	        let drawnObject = null;
	        if (Monster.loadingSleeperToHomeGuidMap[this.guid]) {
	            let guid = Monster.loadingSleeperToHomeGuidMap[this.guid];
	            delete Monster.loadingSleeperToHomeGuidMap[this.guid];
	            drawnObject = ThingList.tryGetFromGuidMap(guid);
	            if (drawnObject != null) {
	                this.monsterState = MonsterStateID.Sleep;
	                this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.UsingObject;
	                drawnObject.home.enterHome(this, HomeEnterReasonID.Sleep, true);
	            }
	        }
	        else if (Monster.loadingRelaxerToHomeGuidMap[this.guid]) {
	            let guid = Monster.loadingRelaxerToHomeGuidMap[this.guid];
	            delete Monster.loadingRelaxerToHomeGuidMap[this.guid];
	            drawnObject = ThingList.tryGetFromGuidMap(guid);
	            if (drawnObject != null) {
	                this.monsterState = MonsterStateID.Relax;
	                this.beingSubState_UseObjectState = BeingSubState_UseObjectStateID.UsingObject;
	                drawnObject.home.enterHome(this, HomeEnterReasonID.Relax, false);
	            }
	        }
	    }
	    goIntoCarryOfSavedCarryObject(savedCarryObject) {
	        let drawnObject = Thing.loadFromSave_Entity(savedCarryObject);
	        if (drawnObject) {
	            this.carryAndDrop(drawnObject);
	        }
	    }
	    getMonsterSaveDataObject() {
	        let saveData_Monster = new SL_Monster();
	        saveData_Monster.currentLevelID = this.currentLevelID;
	        saveData_Monster.homeLevelID = this.homeLevelID;
	        saveData_Monster.name = this.firstName;
	        saveData_Monster.exists_carryObject = this.carryObject != null && !this.carryObject.isParentNull;
	        if (saveData_Monster.exists_carryObject) {
	            saveData_Monster.carryObject = this.carryObject.getSaveDataObject();
	        }
	        saveData_Monster.workCapacityLeft = this.workCapacityLeft;
	        return saveData_Monster;
	    }
	    static setHomeFocus() {
	        if (!ThingList.categories[CategoryID.MonsterHouse]) {
	            return;
	        }
	        let list = ThingList.categories[CategoryID.MonsterHouse];
	        if (list.length != 0) {
	            let component_MonsterHome = null;
	            let num = 0;
	            for (let item of list) {
	                let num2 = item.home.sleepers.length + 0.01 * item.cfg.itemLevel;
	                if (component_MonsterHome == null || num < num2) {
	                    component_MonsterHome = item.home;
	                    num = num2;
	                }
	            }
	            if (component_MonsterHome != null) {
	                component_MonsterHome.setFocused();
	            }
	        }
	    }
	    static buildingAvailableForWork() {
	        for (let buildable of ThingList.buildables) {
	            if (buildable.build_IsAvailable()) {
	                return true;
	            }
	        }
	        return false;
	    }
	    static tryReserveABuildTarget(monster, autonomyLevel) {
	        let list = MathUtil.randomizedListCopy(ThingList.buildables);
	        for (let item of list) {
	            if (item.tryReserveForBuild(monster)) {
	                monster.initiateBuildOnReservedObject(item, autonomyLevel);
	                return true;
	            }
	        }
	        return false;
	    }
	    inRangeToAttack(target) {
	        let num = Math.abs(target.x - this.x);
	        let num2 = Math.abs(target.y - this.y);
	        if (num < this.cfg.attackInitiationRange && num2 < this.cfg.attackInitiationRange) {
	            return true;
	        }
	        return false;
	    }
	}
	Monster.cheat_AllAutonomyOn = true;
	Monster.monsters = [];
	Monster.activeMonsters = [];
	Monster.bestBuilders = [];
	Monster.loadingSleeperToHomeGuidMap = {};
	Monster.loadingRelaxerToHomeGuidMap = {};
	Monster.earnedAdditionalConcurrentHarvesters = 0;
	Monster.playedUserDirectedFeedbackThisFrame = false;

	class CurrencyDetailIcon extends ui.data.module.currency.CurrencyDetailIconUI {
	    onAwake() {
	        super.onAwake();
	        this.on(Laya.Event.CLICK, this, this.openToMatchWin);
	    }
	    setData(data) {
	        this.lblName.text = data.name;
	        this.imgIcon.skin = data.icon;
	        this.type = data.type;
	    }
	    openToMatchWin() {
	        switch (this.type) {
	            case 0:
	                let isEmpty = BankMgr.ins().isEmpty();
	                if (isEmpty) {
	                    LayerMgr.ins().open(UiConst.EggTreasuryView);
	                }
	                break;
	            case 1:
	                LayerMgr.ins().open(UiConst.ShopView, 3);
	                break;
	            case 2:
	                LayerMgr.ins().open(UiConst.ShopView);
	                break;
	        }
	    }
	    CustomCall_OnDailyChestPlinthTapped() {
	        let chest = DailyChestMgr.ins().tryClaimChest();
	        let list = [];
	        let eggList = [];
	        if (chest != null) {
	            list.push(chest);
	            if (BankMgr.ins().isFeatureActive()) {
	                let amount = DailyChestCfg.getDropAmount();
	                eggList = BankMgr.ins().trySpawnEggBankItems(amount);
	                list = list.concat(eggList);
	            }
	        }
	        list.forEach(item => {
	            let isChest = item == chest;
	            let chestObj = Thing.createAtPointAndSwoopToFreeCell(item, 0, 0, null, (!isChest) ? null : "ParticleRoot_ShopBuyImpact", isChest);
	            if (isChest) {
	                FloatingText.CreateInfoText3("+" + chestObj.cfg.name + "!", InfoTextColorID.Green, chestObj, true, true, true, true, TextAppearLocationID.Above);
	                CameraMgr.setFollowTarget(chestObj, true);
	            }
	            else {
	                TomeTip.showGameTip(GameTipTypeID.Tip_EggBank);
	            }
	        });
	    }
	}

	class CurrencyDetailItem extends ui.data.module.currency.CurrencyDetailItemUI {
	    setData(data) {
	        this.lblTitle.text = data.title;
	        this.lblDesc.text = data.desc;
	        this.boxItems.removeChildren();
	        this.height = data.icons.length > 1 ? 160 : 120;
	        data.icons.forEach(iconData => {
	            let icon = new CurrencyDetailIcon();
	            icon.setData(iconData);
	            this.boxItems.addChild(icon);
	        });
	    }
	}

	class CurrencyDetailView extends BaseModal {
	    setIcon(skin) {
	        this.imgIcon.skin = skin;
	    }
	    setBarSkin(skin) {
	        this.pbGold.bar.skin = skin;
	    }
	    setPercent(amount, total) {
	        this.pbGold.value = amount / total;
	        this.lblPercent.text = amount + "/" + total;
	    }
	    setDetail(list) {
	        this.boxItems.removeChildren();
	        list.forEach(data => {
	            let item = new CurrencyDetailItem();
	            item.setData(data);
	            this.boxItems.addChild(item);
	        });
	    }
	    openUi(type) {
	        super.openUi(type);
	        let conf = CurrencyCfg.getInfoCfg(type);
	        this.setTitle(conf.title);
	        this.setIcon(conf.icon);
	        this.setBarSkin(conf.barSkin);
	        this.setDetail(CurrencyCfg.formatInfo(conf));
	        this.setPercent(CurrencyMgr.ins().getAmount(type), CurrencyMgr.ins().getCapacity(type));
	    }
	}

	class LevelSettleItem extends ui.data.module.level.LevelSettleItemUI {
	    constructor() {
	        super(...arguments);
	        this._selected = false;
	    }
	    setName(name, color) {
	        this.lblName.text = name;
	        this.lblName.color = color;
	    }
	    setRarity(rarity) {
	        let hasRarity = rarity.Rareness != null;
	        if (hasRarity) {
	            this.lblRarity.visible = true;
	            this.lblRarity.text = rarity.Name;
	            this.lblRarity.color = rarity.TextColor;
	        }
	        else {
	            this.hideRarity();
	        }
	    }
	    hideRarity() {
	        this.lblRarity.visible = false;
	    }
	    setStars(type) {
	        this.imgStar1.visible = type >= RarityID.Uncommon;
	        this.imgStar2.visible = type >= RarityID.Rare;
	        this.imgStar3.visible = type >= RarityID.Epic;
	        this.imgStar4.visible = type >= RarityID.Legendary;
	        this.imgStar5.visible = type >= RarityID.Mythical;
	    }
	    setLevel(lv) {
	        if (lv) {
	            this.lblLv.visible = true;
	            this.lblLv.text = LanCfg.get("20013009") + lv;
	        }
	        else {
	            this.hideLevel();
	        }
	    }
	    hideLevel() {
	        this.lblLv.visible = false;
	    }
	    setCost(cost, isFree) {
	        this.imgFree.visible = isFree;
	        this.boxCost.visible = !isFree;
	        if (!isFree && cost != null) {
	            this.lblCost.text = cost.toString();
	        }
	    }
	    setCount(count) {
	        let isOne = count == 1;
	        this.lblCount.visible = !isOne;
	        !isOne && (this.lblCount.text = "x " + count);
	    }
	    setMonsterName(obj, count) {
	        if (obj != null && obj.isMonster && obj.asMonster.firstName && count == 1) {
	            this.lblMonster.visible = true;
	            this.lblMonster.text = obj.cfg.name;
	        }
	        else {
	            this.lblMonster.visible = false;
	        }
	    }
	    setRay(type) {
	        this.imgRay.visible = type >= RarityID.Rare;
	    }
	    setUiPref(prefName) {
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(prefName);
	            this.uiPref.centerX = 0;
	            this.uiPref.y = 40;
	            this.addChildAt(this.uiPref, 2);
	        }
	    }
	    setChestTime(seconds) {
	        this.lblChestTime.visible = true;
	        this.lblChestTime.text = LevelChestMgr.ins().formatHours(seconds);
	    }
	    hideChestTime() {
	        this.lblChestTime.visible = false;
	    }
	    onClick() {
	        this.selectHandler && this.selectHandler.runWith([this]);
	    }
	    set selected(val) {
	        if (val !== this._selected) {
	            this._selected = val;
	            this.imgSelected.visible = val;
	            this.alpha = val ? 0.8 : 1;
	        }
	    }
	    get selected() {
	        return this._selected;
	    }
	    onAwake() {
	        this.imgGoal.visible = false;
	        this.imgKala.visible = false;
	        this.lblSelected.visible = false;
	        this.imgSelected.visible = false;
	        this.on(Laya.Event.CLICK, this, this.onClick);
	    }
	    setData(data) {
	        this.data = data;
	        let cfg = PropsCfg.get(data.prefId);
	        let isChest = cfg.timedUnlockSeconds > -1;
	        this.setName(cfg.name, cfg.Rarity.TextColor);
	        this.setStars(cfg.Rarity.Rareness);
	        this.setCount(data.count);
	        this.selected = data.isSelected == null ? false : data.isSelected;
	        this.setMonsterName(data.thing, data.count);
	        this.setRay(cfg.Rarity.Rareness);
	        this.setUiPref(cfg.pref);
	        let autoCollectChest = isChest && data.isAutoCollect;
	        this.mouseEnabled = !autoCollectChest;
	        this.lblSelected.visible = autoCollectChest;
	        if (isChest) {
	            this.hideRarity();
	            this.hideLevel();
	            this.setChestTime(cfg.timedUnlockSeconds);
	            if (cfg.OnTapGemCost != 0) {
	                this.setCost(cfg.OnTapGemCost, data.isFree);
	            }
	            else {
	                this.imgFree.visible = false;
	                this.boxCost.visible = false;
	            }
	        }
	        else {
	            this.setRarity(cfg.Rarity);
	            this.setLevel(cfg.itemLevel);
	            this.hideChestTime();
	            this.setCost(cfg.takeHomeCost, data.isFree);
	        }
	    }
	}

	class LevelSettleView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.currency = ECurrency.Diamond;
	    }
	    renderItem(cell) {
	        cell.setData(cell.dataSource);
	        cell.selectHandler = Laya.Handler.create(this, this.onSelectedChange, null, false);
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    onSelectedChange(cell) {
	        let index = this.list.array.findIndex(data => data == cell.data);
	        let selected = cell.data.isSelected;
	        if (!selected) {
	            if (this.TrySelectThisItem(cell)) {
	                cell.data.isSelected = true;
	                this.list.setItem(index, cell.data);
	            }
	        }
	        else {
	            this.deselectThisItem(cell);
	            cell.data.isSelected = false;
	            this.list.setItem(index, cell.data);
	        }
	        this.updateAmount();
	    }
	    deselectThisItem(cell) {
	        let data = cell.data;
	        let cfg = PropsCfg.get(data.prefId);
	        if (!data.isFree) {
	            let isChest = cfg.timedUnlockSeconds > -1;
	            let takeHomeCost = isChest ? cfg.OnTapGemCost : cfg.takeHomeCost;
	            CurrencyMgr.ins().credit(this.currency, takeHomeCost);
	        }
	        SoundMgr.ins().playSound("m28");
	    }
	    TrySelectThisItem(cell) {
	        let data = cell.data;
	        let cfg = PropsCfg.get(data.prefId);
	        let isChest = cfg.timedUnlockSeconds > -1;
	        let takeHomeCost = isChest ? cfg.OnTapGemCost : cfg.takeHomeCost;
	        let isFree = data.isFree;
	        let currency = this.currency;
	        if (CurrencyMgr.ins().CanAfford(currency, takeHomeCost) || isFree) {
	            if (!isFree) {
	                CurrencyMgr.ins().charge(currency, takeHomeCost);
	            }
	            SoundMgr.ins().playSound("m27");
	            this.PlaySting();
	            return true;
	        }
	        if (currency == ECurrency.Diamond) {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	        }
	        else {
	            console.error("For some reason, this non-premium object was enabled in the Bring Home list when it was not affordable: " + data.prefId);
	        }
	        return false;
	    }
	    PlaySting() {
	    }
	    updateAmount(delta = 0) {
	        let rewards = this.list.array;
	        let total = rewards.length;
	        let count = rewards.filter(reward => reward.isSelected).length;
	        this.lblAmount.text = LanCfg.get("20013010") + count + "/" + total;
	    }
	    doneWithBringHomeMenuClicked() {
	        let saveDataObject = this.getSaveDataObject();
	        if (saveDataObject != null) {
	            Glob.currentLevel.rewardsSavedToFile = true;
	            SaveLoad.SaveBringHomeData(saveDataObject);
	        }
	        Glob.currentLevel.bringHomeMenuDone();
	        this.record();
	    }
	    record() {
	        let rewards = this.list.array;
	        let selectedItems = rewards.filter(reward => reward.isSelected);
	        let totalCost = 0;
	        let totalTimes = 0;
	        selectedItems.forEach(item => {
	            let cfg = PropsCfg.get(item.prefId);
	            let isChest = cfg.timedUnlockSeconds > -1;
	            let isFree = item.isFree;
	            let takeHomeCost = isChest ? cfg.OnTapGemCost : cfg.takeHomeCost;
	            if (this.currency === ECurrency.Diamond && !isFree) {
	                totalCost += takeHomeCost;
	            }
	            totalTimes++;
	        });
	        totalCost > 0 && ApiMgr.addYbRecord(totalCost, LogCostType.LevelAndChallenge);
	        totalCost > 0 && ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.BuyTimes, totalTimes);
	        totalCost > 0 && ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.CostDiamond, totalCost);
	    }
	    getSaveDataObject() {
	        let rewards = this.list.array;
	        let selectedItems = rewards.filter(reward => reward.isSelected);
	        if (selectedItems.length == 0) {
	            return null;
	        }
	        let saveData_BringHome = new SL_BringHome();
	        let saveData_BringHome2 = SaveLoad.LoadBringHomeData();
	        if (saveData_BringHome2 != null) {
	            saveData_BringHome.m_drawnObjectsData = saveData_BringHome2.m_drawnObjectsData;
	        }
	        else {
	            saveData_BringHome.m_drawnObjectsData = [];
	        }
	        selectedItems.forEach(data => {
	            if (data.thing) {
	                SaveLoad.ProcessRewardObjectForSave(data.thing);
	                saveData_BringHome.m_drawnObjectsData.push(data.thing.getSaveDataObject());
	            }
	            else {
	                for (let i = 0; i < data.count; i++) {
	                    let saveData_DrawnObject = Thing.create_SaveData(PropsCfg.get(data.prefId));
	                    saveData_DrawnObject.onTapCostPaid = true;
	                    saveData_BringHome.m_drawnObjectsData.push(saveData_DrawnObject);
	                }
	            }
	        });
	        return saveData_BringHome;
	    }
	    onClickArrow() {
	        this.doneWithBringHomeMenuClicked();
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.playAni = false;
	        this.list.hScrollBarSkin = "";
	        this.list.itemRender = LevelSettleItem;
	        this.list.renderHandler = Laya.Handler.create(this, this.renderItem, null, false);
	        this.btnArrow.on(Laya.Event.CLICK, this, this.onClickArrow);
	    }
	    autoCollectVictoryChest(rewards) {
	        let hasSpace = LevelChestMgr.ins().isThereFreeSpace();
	        if (hasSpace) {
	            rewards.forEach(reward => {
	                let cfg = PropsCfg.get(reward.prefId);
	                let isChest = cfg.timedUnlockSeconds > -1;
	                if (isChest) {
	                    LevelChestMgr.ins().addNewChestToInventory(cfg.cid);
	                    reward.isAutoCollect = true;
	                }
	            });
	        }
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        let rewards = WorldMgr.ins().getRewards();
	        this.autoCollectVictoryChest(rewards);
	        this.list.array = rewards;
	        this.updateAmount();
	    }
	}

	class BuyPrefItem extends Laya.UIComponent {
	    constructor(nameId, w = 100, h = 100, num = 1, id = 0, size = 0.1) {
	        super();
	        this.uiSize = size;
	        this.prefId = id;
	        this.size(w, h);
	        this.setNid(nameId);
	        this.initAmountLabel();
	        this.setAmount(num);
	        this.setFloatTip(id);
	    }
	    initAmountLabel() {
	        let lbl = new HtmlLabel();
	        lbl.name = "count";
	        lbl.bold = true;
	        lbl.fontSize = 40;
	        lbl.color = "#FFD142";
	        lbl.stroke = 2;
	        lbl.strokeColor = "#FF1921";
	        lbl.rotation = -8;
	        lbl.right = -5;
	        lbl.bottom = 0;
	        this.addChild(lbl);
	        this.lblAmount = lbl;
	    }
	    setNid(pref) {
	        if (this.uiPref) {
	            this.uiPref.setNid(pref);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(pref, this.width, this.height, this.uiSize);
	            this.addChild(this.uiPref);
	        }
	    }
	    setAmount(num = 0) {
	        if (num > 1) {
	            this.lblAmount.visible = true;
	            this.lblAmount.text = "x" + num;
	        }
	        else {
	            this.lblAmount.visible = false;
	        }
	    }
	    setFloatTip(id) {
	        if (id > 0) {
	            this.on(Laya.Event.CLICK, this, this.openWindow);
	        }
	        else {
	            this.off(Laya.Event.CLICK, this, this.openWindow);
	        }
	    }
	    openWindow() {
	        let data = PropsCfg.get(this.prefId);
	        if (!data)
	            return;
	        LayerMgr.ins().open(UiConst.DragonEggInfoView, data.cid);
	    }
	    showTips(e) {
	        let uiX = e.stageX;
	        let uiY = e.stageY;
	        BuyDiamondsMgr.isHoldDown = false;
	        UI_NormalTxtTips.ins.setPos(uiX, uiY);
	        UI_NormalTxtTips.ins.setValue(this.msg);
	        this.startCal();
	    }
	    removeTips() {
	        UI_NormalTxtTips.ins.hidePanel();
	        Laya.timer.clear(this, this.showTipsPanel);
	        this.off(Laya.Event.MOUSE_UP, this, this.removeTips);
	        this.off(Laya.Event.MOUSE_OUT, this, this.removeTips);
	    }
	    showTipsPanel() {
	        let isShow = false;
	        if (!BuyDiamondsMgr.isClickFinish) {
	            isShow = true;
	            if (BuyDiamondsMgr.isBuyDiamonds) {
	                BuyDiamondsMgr.isHoldDown = true;
	            }
	        }
	        if (isShow) {
	            UI_NormalTxtTips.ins.showPanel();
	        }
	        Laya.timer.clear(this, this.showTipsPanel);
	        BuyDiamondsMgr.isClickFinish = false;
	        BuyDiamondsMgr.isBuyDiamonds = false;
	        BuyDiamondsMgr.isTouchTool = false;
	    }
	    startCal() {
	        BuyDiamondsMgr.isTouchTool = true;
	        this.on(Laya.Event.MOUSE_UP, this, this.removeTips);
	        this.on(Laya.Event.MOUSE_OUT, this, this.removeTips);
	        Laya.timer.loop(1000, this, this.showTipsPanel);
	    }
	    onDestroy() {
	        this.uiPref.dispose();
	        this.uiPref = null;
	        this.removeChildren();
	    }
	}

	class GiftBagIcon extends ui.data.module.giftBag.GiftBagIconUI {
	    setData(vo, isGiftBag = true) {
	        let arr = vo.split(",");
	        let type = Number(arr[0]);
	        let isPref = type == 3;
	        this.imgIcon.visible = !isPref;
	        this.uiPref && (this.uiPref.visible = isPref);
	        if (isPref) {
	            let cfg = PropsCfg.get(Number(arr[1]));
	            let pref = cfg.pref;
	            let amount = Number(arr[2]);
	            let msg = cfg ? LanCfg.get(cfg.name) + ":" + LanCfg.get(cfg.desc) : "";
	            if (this.uiPref) {
	                this.uiPref.setNid(pref);
	                this.uiPref.setAmount(amount);
	                this.uiPref.setFloatTip(cfg.cid);
	            }
	            else {
	                this.uiPref = new BuyPrefItem(pref, 105, 105, amount, cfg.cid);
	                this.uiPref.centerX = 0;
	                this.uiPref.centerY = 0;
	                this.boxPref.addChild(this.uiPref);
	            }
	        }
	        else {
	            this.imgIcon = PropItemMgr.ins().getTypeItem(type, true);
	        }
	    }
	}

	class BuyDiamondsItem extends ui.data.module.buyDiamonds.BuyDiamondsItemUI {
	    constructor() {
	        super();
	        this.diamonsNum = 0;
	    }
	    onAwake() {
	        super.onAwake();
	        this.clickBox2.on(Laya.Event.CLICK, this, this.onClickEvent);
	        this.clickBox3.on(Laya.Event.CLICK, this, this.onClickEvent);
	        this.receiveBtn.on(Laya.Event.CLICK, this, this.getAward);
	    }
	    setData(vo, i) {
	        this.data = vo;
	        this.diamonsNum = 0;
	        this.tipsLb.visible = false;
	        this.awardPanel.visible = true;
	        this.updateBaseMsg();
	        this.showExtraAward();
	        this.updateChargeState();
	        this.showAward();
	    }
	    updateBaseMsg() {
	        this.itemName.text = LanCfg.get(this.data.name);
	        this.extLb.text = LanCfg.get("20090002");
	        this.costLb.text = "￥" + this.data.price;
	        this.setIcon();
	        this.firstImg.visible = false;
	        if (this.data.valueTxt) {
	            this.firstImg.visible = true;
	        }
	        if (this.data.additional) {
	            this.giveNum.text = this.data.additional.toString();
	            this.giveImg.visible = true;
	            this.jiaImg.visible = true;
	            this.diamondImg.pos(116, 10);
	        }
	        else {
	            this.giveImg.visible = false;
	            this.jiaImg.visible = false;
	            this.diamondImg.pos(150, 10);
	        }
	    }
	    setIcon() {
	        if (this.uiPref) {
	            this.uiPref.setNid(this.data.icon);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(this.data.icon, 800, 800, 1, this.data.cid, 8);
	            this.uiPref.centerX = 4;
	            this.uiPref.centerY = -45;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    showAward() {
	        let str = this.data.award;
	        let id_Arr = str.split("_");
	        let lb = LanCfg.get("20090005") + "×";
	        this.box1.removeChildren();
	        this.box2.removeChildren();
	        for (let i = 0; i < id_Arr.length; i++) {
	            let one_IdVo = id_Arr[i].split(",");
	            let type = Number(one_IdVo[0]);
	            if (id_Arr.length > 1) {
	                if (type == 3) {
	                    if (this.iconPref) {
	                        this.iconPref.clear();
	                        this.iconPref = null;
	                    }
	                    this.iconPref = UiPrefMgr.get(PropsCfg.getPref(Number(one_IdVo[1])));
	                    this.box2.addChild(this.iconPref);
	                    this.eggLb.text = lb;
	                    this.eggLb.size(134, 16);
	                    this.eggLb.pos(0, 27);
	                    this.eggLb.fontSize = 18;
	                    this.box2.scale(0.3, 0.3);
	                    this.box2.pos(140, -8);
	                }
	                else {
	                    let img = PropItemMgr.ins().getTypeItem(type);
	                    this.box1.addChild(img);
	                    this.desLb.text = lb + one_IdVo[1];
	                    ;
	                    this.desLb.visible = true;
	                    this.desLb.size(134, 16);
	                    this.desLb.fontSize = 18;
	                    this.box1.scale(0.4, 0.4);
	                }
	            }
	            else {
	                if (this.data.type == 2) {
	                    let img = PropItemMgr.ins().getTypeItem(type);
	                    this.box2.addChild(img);
	                    this.eggLb.text = lb + one_IdVo[1];
	                    this.eggLb.size(138, 42);
	                    this.eggLb.fontSize = 22;
	                    this.eggLb.pos(35, 12);
	                    this.box2.pos(142, 0);
	                    this.box2.scale(0.65, 0.65);
	                    this.desLb.visible = false;
	                }
	                else {
	                    this.commonLb.text = this.data.standard ? this.data.standard.toString() : one_IdVo[1];
	                }
	            }
	            if (type == 1) {
	                this.diamonsNum += Number(one_IdVo[1]);
	            }
	        }
	    }
	    updateChargeState() {
	        if (this.data.type == 3) {
	            this.residueDay.visible = false;
	            this.buyPoint.visible = false;
	            this.zhezhao.visible = false;
	            this.gouBg.visible = false;
	            this.desLb.visible = false;
	            this.commonLb.visible = true;
	            this.eggLb.visible = false;
	            this.awardPanel.visible = true;
	            this.extLb.visible = true;
	            let ids = BuyDiamondsMgr.getCommonIds();
	            let isRechargFirst = ids.some(id => id === this.data.cid);
	            this.tipsLb.text = LanCfg.get(this.data.des);
	            if (isRechargFirst) {
	                this.receiveBtn.visible = false;
	                this.bottomBg.visible = true;
	            }
	            else if (!isRechargFirst) {
	                this.receiveBtn.visible = false;
	                this.bottomBg.visible = true;
	            }
	        }
	    }
	    showExtraAward() {
	        if (!this.data.extraGift)
	            return;
	        let giftData = this.data.extraGift;
	        let giftArr = giftData.split("_");
	        let len = giftArr.length;
	        this.setPos(len);
	        for (let i = 0; i < this.awardPanel.numChildren; i++) {
	            let child = this.awardPanel.getChildAt(i);
	            child.visible = false;
	        }
	        for (let i = 0; i < giftArr.length; i++) {
	            let vo = giftArr[i];
	            let arr = vo.split(",");
	            let type = Number(arr[0]);
	            let child = this.awardPanel.getChildAt(i);
	            if (child) {
	                child.visible = true;
	            }
	            else {
	                child = new GiftBagIcon();
	                child.centerY = 10;
	                child.x = (i % 3) * 90;
	                this.awardPanel.addChild(child);
	            }
	            child.setData(vo, false);
	            if (type == 1) {
	                this.diamonsNum += Number(arr[1]);
	            }
	        }
	    }
	    setPos(len) {
	        if (len == 1) {
	            this.awardPanel.width = 105;
	            this.awardPanel.x = 160;
	        }
	        else if (len < 3) {
	            this.awardPanel.width = 210;
	            this.awardPanel.x = 180;
	        }
	        else {
	            this.awardPanel.width = 340;
	            this.awardPanel.x = 190;
	        }
	    }
	    onClickEvent() {
	        if (Platfrom.isWebGm) {
	            let count = 0;
	            if (this.data.additional && !this.data.standard) {
	                count = this.data.additional;
	            }
	            else if (!this.data.additional && this.data.standard) {
	                count = this.data.standard;
	            }
	            else if (!this.data.additional && !this.data.standard) {
	                count = Number(this.commonLb.text);
	            }
	            else {
	                count = this.data.additional + this.data.standard;
	            }
	            BuyDiamondsMgr.updateCommonIds(this.data.cid, count);
	        }
	        else {
	            ApiMgr.createOrder(this.data.cid, this.data.name);
	        }
	    }
	    getAward() {
	        let time = TimeMgr.ins().getTime();
	        let obj = {
	            id: this.data.cid,
	            buyTime: time
	        };
	        BuyDiamondsMgr.updateHasRecivedIds(obj, this.diamonsNum);
	    }
	    onMouseenter() {
	        this.scale(1.06, 1.06);
	        this.itemBg.on(Laya.Event.MOUSE_UP, this, this.onMouseleave);
	        this.itemBg.on(Laya.Event.MOUSE_OUT, this, this.onMouseleave);
	    }
	    onMouseleave() {
	        this.scale(1, 1);
	        this.itemBg.off(Laya.Event.MOUSE_UP, this, this.onMouseleave);
	        this.itemBg.off(Laya.Event.MOUSE_OUT, this, this.onMouseleave);
	    }
	    onDisable() {
	    }
	}

	class GiftBagItem extends ui.data.module.giftBag.GiftBagItemUI {
	    constructor() {
	        super();
	    }
	    onAwake() {
	        super.onAwake();
	        this.awardList.itemRender = GiftBagIcon;
	        this.awardList.array = [];
	        this.awardList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.buyBox1.on(Laya.Event.CLICK, this, this.buyEvent);
	        this.buyBox2.on(Laya.Event.CLICK, this, this.buyEvent);
	    }
	    setData(vo) {
	        this.data = vo;
	        this.limitLb.text = LanCfg.get(this.data.des);
	        this.costLb.text = "￥" + this.data.price.toString();
	        this.showIcon();
	        this.showAward();
	        this.valueBg.visible = false;
	        if (this.data.valueTxt) {
	            this.valueBg.visible = true;
	            this.valueLb.text = LanCfg.get(this.data.valueTxt);
	        }
	        this.soldOut();
	    }
	    showIcon() {
	        this.boxPref.removeChildren();
	        if (this.uiPref) {
	            this.uiPref.dispose();
	            this.uiPref = null;
	        }
	        let str = this.data.award;
	        let iconArr = str.split("_");
	        for (let i = 0; i < iconArr.length; i++) {
	            let vo = iconArr[i].split(",");
	            let type = Number(vo[0]);
	            if (type == 3) {
	                this.uiPref = UiPrefMgr.get(PropsCfg.getPref(Number(vo[1])), 105, 105);
	                this.uiPref.centerX = 0;
	                this.uiPref.top = 40;
	                this.boxPref.addChild(this.uiPref);
	                let cfg = PropsCfg.get(type);
	                let msg = cfg ? cfg.name : "";
	                this.desLb.text = LanCfg.get(msg);
	            }
	            else {
	                let img = PropItemMgr.ins().getTypeItem(type, false);
	                if (type == 1 && vo[1]) {
	                    this.desLb.text = LanCfg.get("20030306") + "x" + vo[1];
	                    img.pos(106, 55);
	                }
	                else if (type == 2 && vo[1]) {
	                    this.desLb.text = LanCfg.get("20020022") + "x" + vo[1];
	                    img.pos(95, 60);
	                }
	                img.scale(1.2, 1.2);
	                this.boxPref.addChild(img);
	            }
	        }
	    }
	    showAward() {
	        if (!this.data.extraGift)
	            return;
	        let strArr = this.data.extraGift.split("_");
	        this.awardList.array = strArr;
	        this.setPos(strArr.length);
	    }
	    setPos(len) {
	        if (len == 1) {
	            this.awardList.width = 105;
	            this.awardList.x = 210;
	        }
	        else if (len < 3) {
	            this.awardList.width = 210;
	            this.awardList.x = 175;
	        }
	        else {
	            this.awardList.width = 336;
	            this.awardList.x = 200;
	        }
	    }
	    renderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    buyEvent() {
	        if (Platfrom.isWebGm) {
	            let time = TimeMgr.ins().getTime();
	            BuyDiamondsMgr.renewGiftIds(this.data.cid, time);
	        }
	        else {
	            ApiMgr.createOrder(this.data.cid, this.data.name);
	        }
	    }
	    soldOut() {
	        let cfg = BuyDiamondsMgr.getGiftDataById(this.data.cid);
	        let count = cfg.limitCount;
	        let hasGiftBag = BuyDiamondsMgr.findDataById(this.data.cid);
	        let hasCount = hasGiftBag ? hasGiftBag.count : 0;
	        if (hasCount >= count) {
	            this.giftName.text = LanCfg.get("20019009");
	            this.buyBox1.mouseEnabled = false;
	            this.buyBox2.mouseEnabled = false;
	        }
	        else {
	            this.giftName.text = LanCfg.get(this.data.name);
	            this.buyBox1.mouseEnabled = true;
	            this.buyBox2.mouseEnabled = true;
	        }
	    }
	    onMouseenter() {
	        this.scale(1.06, 1.06);
	        this.itemBg.on(Laya.Event.MOUSE_UP, this, this.onMouseleave);
	        this.itemBg.on(Laya.Event.MOUSE_OUT, this, this.onMouseleave);
	    }
	    onMouseleave() {
	        this.scale(1, 1);
	        this.itemBg.off(Laya.Event.MOUSE_UP, this, this.onMouseleave);
	        this.itemBg.off(Laya.Event.MOUSE_OUT, this, this.onMouseleave);
	    }
	}

	class ShopItem extends ui.data.module.shop.ShopItemUI {
	    onClick() {
	        this.clickHandler && this.clickHandler.runWith(this.data);
	    }
	    setStatus(val, isTimed) {
	        this.shopStatus = val;
	        switch (val) {
	            case EShopStatus.Locked:
	                this.boxItem.alpha = 0.8;
	                this.imgLock.visible = !isTimed;
	                this.lblDesc.visible = !isTimed;
	                this.boxCost.visible = !isTimed;
	                this.lblTip.visible = false;
	                this.boxMystic.visible = isTimed;
	                this.lblLv.visible = false;
	                this.lblName.visible = false;
	                this.boxPref.visible = !isTimed;
	                break;
	            case EShopStatus.Wait:
	                this.boxItem.alpha = 1;
	                this.imgLock.visible = true;
	                this.lblDesc.visible = !isTimed;
	                this.boxCost.visible = !isTimed;
	                this.lblTip.visible = true;
	                this.boxMystic.visible = false;
	                this.lblLv.visible = false;
	                this.lblName.visible = false;
	                this.boxPref.visible = true;
	                break;
	            case EShopStatus.InSale:
	                this.boxItem.alpha = 1;
	                this.lblLv.visible = false;
	                this.lblName.visible = true;
	                this.lblDesc.visible = true;
	                this.boxCost.visible = true;
	                this.lblTip.visible = true;
	                this.imgLock.visible = false;
	                this.boxMystic.visible = false;
	                this.boxPref.visible = true;
	                break;
	            case EShopStatus.SellOut:
	                this.boxItem.alpha = 1;
	                this.lblLv.visible = false;
	                this.lblName.visible = false;
	                this.lblDesc.visible = true;
	                this.boxCost.visible = true;
	                this.boxPref.visible = true;
	                this.lblTip.visible = true;
	                this.imgLock.visible = false;
	                this.boxMystic.visible = false;
	                break;
	            default:
	                break;
	        }
	    }
	    setPref(pref) {
	        if (this.uiPref) {
	            this.uiPref.setNid(PropsCfg.getPref(pref));
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(PropsCfg.getPref(pref));
	            this.uiPref.centerX = 0;
	            this.uiPref.top = 40;
	            this.boxPref.addChild(this.uiPref);
	        }
	        let cfg = PropsCfg.get(pref);
	        this.lblName.text = LanCfg.get(cfg.name);
	        this.lblDesc.text = LanCfg.get(cfg.desc);
	        cfg.visibleLv && (this.lblLv.text = LanCfg.get("20019003") + cfg.visibleLv);
	    }
	    setCost(currency, amount) {
	        this.lblCost.text = amount.toString();
	        this.imgCost.skin = CurrencyCfg.icon(currency);
	        if (this.shopStatus == EShopStatus.InSale && (currency == 0 || currency == 1)) {
	            let isEnough = CurrencyMgr.ins().isEnough(currency, amount);
	            if (!isEnough) {
	                this.lblCost.color = "#FF3030";
	            }
	        }
	    }
	    setStars(max) {
	        let curr = WorldMgr.ins().TotalStarsEarned;
	        this.lblCost.text = curr + "/" + max;
	        this.imgCost.skin = GameUtil.getCompPngSkin("zjm_xingji3");
	    }
	    setData(data, isTimed, checks) {
	        this.data = data;
	        this.lblCost.color = "#703819";
	        this.setStatus(data.status, isTimed);
	        switch (data.status) {
	            case EShopStatus.Locked:
	                if (isTimed) {
	                    this.lblMsName.text = LanCfg.get("20019004");
	                    this.lblMsDesc.text = LanCfg.get("20019005");
	                    checks.forEach((check, index) => this["chk" + index].selected = check);
	                }
	                else {
	                    this.setPref(data.pref);
	                    this.setStars(data.stars);
	                    this.lblDesc.text = LanCfg.get("20019006");
	                }
	                break;
	            case EShopStatus.Wait:
	                this.setPref(data.pref);
	                this.lblTip.text = LanCfg.get("20019007");
	                if (isTimed) {
	                }
	                else {
	                    this.setStars(data.stars);
	                    this.lblDesc.text = LanCfg.get("20019006");
	                }
	                break;
	            case EShopStatus.InSale:
	                this.setPref(data.pref);
	                this.setCost(data.currency, data.price);
	                this.lblTip.text = data.remainder > 0 ? LanCfg.get("20019008") + data.remainder : "";
	                break;
	            case EShopStatus.SellOut:
	                this.setPref(data.pref);
	                this.setCost(data.currency, data.price);
	                this.lblTip.text = LanCfg.get("20019009");
	                break;
	            default:
	                break;
	        }
	    }
	    onAwake() {
	        this.boxItem.on(Laya.Event.CLICK, this, this.onClick);
	        this.boxItem.on(Laya.Event.MOUSE_DOWN, this, this.onMouseenter);
	    }
	    onMouseenter() {
	        this.scale(1.06, 1.06);
	        this.boxItem.on(Laya.Event.MOUSE_UP, this, this.onMouseleave);
	        this.boxItem.on(Laya.Event.MOUSE_OUT, this, this.onMouseleave);
	    }
	    onMouseleave() {
	        this.scale(1, 1);
	        this.boxItem.off(Laya.Event.MOUSE_UP, this, this.onMouseleave);
	        this.boxItem.off(Laya.Event.MOUSE_OUT, this, this.onMouseleave);
	    }
	    onDestroy() {
	        this.clickHandler = null;
	    }
	}

	class ShopView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this._purchaseInProgress = false;
	    }
	    setTabState(index, isOpen) {
	        if (index == 4) {
	            this.tab.items[index].locked = false;
	        }
	        else {
	            this.tab.items[index].locked = !isOpen;
	        }
	    }
	    recordCharged(data) {
	        let price = data.price;
	        let tabIndex = this.tab.selectedIndex;
	        if (data.currency === ECurrency.Gold) {
	            ApiMgr.addGoldRecord(price, LogCostType.CoinBuy);
	            if (Glob.inAChallengeArea) {
	                ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.BuyTimes);
	                ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.CostGold, price);
	            }
	        }
	        else if (data.currency === ECurrency.Stone) {
	            ApiMgr.addStoneRecord(price, LogCostType.StoneBuy);
	            if (Glob.inAChallengeArea) {
	                ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.BuyTimes);
	                ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.CostStone, price);
	            }
	        }
	        else if (data.currency === ECurrency.Diamond) {
	            let type = null;
	            let shopType = null;
	            switch (tabIndex) {
	                case EShopType.Timed:
	                    type = LogCostType.KalaShop;
	                    shopType = LogCostType.KalaShop;
	                    break;
	                case EShopType.Egg:
	                    type = LogCostType.EggShop;
	                    shopType = LogCostType.EggShop;
	                    break;
	                case EShopType.Build:
	                    type = LogCostType.BuildShop;
	                    shopType = LogCostType.BuildShop;
	                    break;
	                case EShopType.Chest:
	                    type = LogCostType.ChestShop;
	                    shopType = LogCostType.ChestShop;
	                    break;
	            }
	            type && ApiMgr.addYbRecord(price, type);
	            if (type && Glob.inAChallengeArea) {
	                ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.BuyTimes);
	                ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.CostDiamond, price);
	            }
	            let left = data.remainder ? data.remainder : 0;
	            ApiMgr.addGoodsRecord(1, data.id, 1, price, left, shopType);
	        }
	    }
	    updateTab() {
	        let selectIndex = this.tab.selectedIndex;
	        let mgr = ShopMgr.ins();
	        for (let i = EShopType.Timed; i <= EShopType.Diamond; i++) {
	            let isOpen = mgr.isOpen(i);
	            this.setTabState(i, isOpen);
	            isOpen && selectIndex === -1 && (selectIndex = i);
	        }
	        ;
	        this.tab.selectedIndex = selectIndex;
	    }
	    updateTimer() {
	        let index = this.tab.selectedIndex;
	        let isShow = ShopMgr.ins().isOpen(EShopType.Timed) && index === 0;
	        if (isShow) {
	            this.imgTimer.visible = true;
	            this.boxTimer.countM = TimedShopMgr.ins().getTime();
	        }
	        else {
	            this.imgTimer.visible = false;
	        }
	    }
	    renderItem(cell) {
	        let itemCell = cell;
	        let vo = itemCell.dataSource;
	        let isTimed = this.tab.selectedIndex === EShopType.Timed;
	        let checks = isTimed && vo.isMystic ? TimedShopMgr.ins().getChecks() : [];
	        cell.setData(vo, isTimed, checks);
	        cell.clickHandler = Laya.Handler.create(this, this.onClickItem, null, false);
	    }
	    renderBuyItem(cell, index) {
	        let itemCell = cell;
	        itemCell.setData(itemCell.dataSource, index);
	    }
	    renderGiftBagItem(cell) {
	        let itemCell = cell;
	        itemCell.setData(itemCell.dataSource);
	    }
	    onStarAdd() {
	        this.list.refresh();
	        this.buyList.refresh();
	        this.giftBagList.refresh();
	    }
	    onUnlockOk(vo) {
	        let index = this.list.array.findIndex((item) => item.id === vo.id);
	        index >= 0 && this.list.changeItem(index, vo);
	    }
	    onChargeOk(vos) {
	        let array = this.list.array;
	        vos.forEach(vo => {
	            for (let i = 0; i < array.length; i++) {
	                let item = array[i];
	                if (item.id === vo.id) {
	                    this.list.setItem(i, vo);
	                    break;
	                }
	            }
	        });
	    }
	    onTimedShopReset() {
	        let index = this.tab.selectedIndex;
	        if (index === EShopType.Timed) {
	            this.list.visible = true;
	            this.giftBagList.visible = false;
	            this.buyList.visible = false;
	            this.list.array = ShopMgr.ins().getSaleList(index);
	            this.updateTimer();
	        }
	        else if (index == 5) {
	            this.list.visible = false;
	            this.giftBagList.visible = false;
	            this.buyList.visible = true;
	            this.filfterSamePrice();
	            this.imgTimer.visible = false;
	        }
	        else if (index == 4) {
	            this.list.visible = false;
	            this.giftBagList.visible = true;
	            this.buyList.visible = false;
	            this.giftBagList.array = BuyDiamondsMgr.getGiftBagData();
	            this.imgTimer.visible = false;
	        }
	    }
	    onTabChanged() {
	        let index = this.tab.selectedIndex;
	        if (index === EShopType.Diamond) {
	            this.btnBox.y = 82;
	            this.listBg.height = 488;
	            this.imgTimer.visible = false;
	            this.list.visible = false;
	            this.giftBagList.visible = true;
	            this.buyList.visible = false;
	            this.giftBagList.array = BuyDiamondsMgr.buyGiftFinish();
	            this.showGiftList();
	        }
	        else if (index === 5) {
	            this.btnBox.y = 82;
	            this.listBg.height = 488;
	            this.imgTimer.visible = false;
	            this.list.visible = false;
	            this.giftBagList.visible = false;
	            this.buyList.visible = true;
	            this.filfterSamePrice();
	            if (BuyDiamondsMgr.isZero) {
	                BuyDiamondsMgr.isZero = false;
	                MsgCenter.notify(MsgConst.SHOP_RECEIVEWARD);
	            }
	        }
	        else {
	            this.btnBox.y = 238;
	            this.listBg.height = 330;
	            this.list.visible = true;
	            this.giftBagList.visible = false;
	            this.buyList.visible = false;
	            this.list.array = ShopMgr.ins().getSaleList(index);
	            this.list.scrollBar.value = 0;
	            this.updateTimer();
	        }
	    }
	    changeTabIndex(index) {
	        this.tab.selectedIndex = index;
	        this.onTabChanged();
	    }
	    onClickItemInSale(data) {
	        let isDiamond = data.currency == ECurrency.Diamond;
	        let canAfford = CurrencyMgr.ins().CanAfford(data.currency, data.price);
	        if (!canAfford) {
	            if (isDiamond) {
	                CurrencyMgr.ins().showNotEnoughPremiumCurrency(true);
	            }
	            else {
	                let str = this.setLabel(data.currency);
	                ModalConfirm.info(str, null, LanCfg.get("10010003"), LanCfg.get("10010004"));
	            }
	            return;
	        }
	        let isFree = data.price === 0;
	        this._purchaseInProgress = true;
	        if (isDiamond && !isFree) {
	            this.TryConfirmPurchase(data);
	        }
	        else {
	            this.CompletePurchase(data);
	        }
	    }
	    TryConfirmPurchase(data) {
	        let cfg = PropsCfg.get(data.pref);
	        let headerTxt = LanCfg.get("20014102");
	        let bodyTxt = StringUtil.format(LanCfg.get("20014101"), cfg.name);
	        let confirmHandler = Laya.Handler.create(this, this.CompletePurchase, [data]);
	        let cancelHandler = Laya.Handler.create(this, this.resetPurchaseInProgressFlag);
	        PopupManager.show2(Presets.PurchaseConfirmation(headerTxt, bodyTxt, data.currency, data.price, true, cfg, false, confirmHandler, cancelHandler));
	    }
	    CompletePurchase(data) {
	        this.resetPurchaseInProgressFlag();
	        let isDiamond = data.currency == ECurrency.Diamond;
	        if (!CurrencyMgr.ins().CanAfford(data.currency, data.price) && isDiamond) {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency(true);
	            return;
	        }
	        let index = this.tab.selectedIndex;
	        if (index === EShopType.Build) {
	            let buildData = data;
	            let searchCenterOverride = new Laya.Vector3(0, 0, 0);
	            let drawnObject = Thing.createInFreeCell(buildData.sitePref, "ParticleRoot_ShopBuyImpact", true, false, true, searchCenterOverride, 0.5);
	            if (drawnObject == null) {
	                PopupManager.show2(Presets.Simple1Button(LanCfg.get("20010030"), LanCfg.get("20010031")));
	                return;
	            }
	            let component = drawnObject.getComponent(CompConstructible);
	            if (component == null) {
	                GuiMgr.errorMessage("Constructible component was NULL on purchased object: " + drawnObject);
	                return;
	            }
	            component.init(buildData);
	            let cfg = PropsCfg.get(data.pref);
	            let text = "+ " + LanCfg.get("20010032") + " " + cfg.name;
	            FloatingText.CreateInfoText2(text, InfoTextColorID.Green, drawnObject, TextAppearLocationID.OverlapObject);
	            CameraMgr.setFollowTarget(drawnObject, true);
	        }
	        else {
	            let searchCenterOverride = new Laya.Vector3(0, 0, 0);
	            let drawnObject = Thing.createInFreeCell(data.pref, "ParticleRoot_ShopBuyImpact", true, true, true, searchCenterOverride, 0.5);
	            FloatingText.CreateInfoText2("+" + drawnObject.cfg.name + "!", InfoTextColorID.Green, drawnObject, TextAppearLocationID.Right);
	            CameraMgr.setFollowTarget(drawnObject, true);
	            if (index === EShopType.Timed) {
	                ShopSaveMgr.PurchaseSmartTimedShopItem(data);
	            }
	            else {
	                if (data.permaIncrement) {
	                    PermaCostIncManager.itemPurchasedWithIncrementTag(data.permaIncrementTag, data.permaIncrement);
	                }
	            }
	        }
	        SoundMgr.ins().playSound("m66");
	        CurrencyMgr.ins().charge(data.currency, data.price);
	        PurchaseHistoryManager.incPurchaseCount(data.pref);
	        ShopMgr.ins().onCharge(this.tab.selectedIndex, data.id);
	        this.recordCharged(data);
	    }
	    resetPurchaseInProgressFlag() {
	        this._purchaseInProgress = false;
	    }
	    onClickItem(data) {
	        let status = data.status;
	        if (status === EShopStatus.InSale) {
	            this.onClickItemInSale(data);
	        }
	        else if (status === EShopStatus.Wait) {
	            SoundMgr.ins().playSound("m13");
	            SoundMgr.ins().playSound("m54");
	            CurrencyMgr.ins().UpdateShopPips();
	            ShopSaveMgr.NewUnlockActivated(data.id);
	            ShopMgr.ins().clickUnlock(this.tab.selectedIndex, data);
	        }
	        else if (status === EShopStatus.Locked) {
	            if (data.stars) {
	                ModalConfirm.info(LanCfg.get("20019001"));
	            }
	        }
	    }
	    setLabel(currency) {
	        let str;
	        if (currency == ECurrency.Gold) {
	            str = LanCfg.get("10010012");
	        }
	        else if (currency == ECurrency.Stone) {
	            str = LanCfg.get("10010013");
	        }
	        return str;
	    }
	    showGiftList() {
	        let local = LocalData.ins().isShowGiftRed;
	        if (!local) {
	            LocalData.ins().saveGiftState(true);
	            this.giftRedPoint.visible = false;
	            MsgCenter.notify(MsgConst.SHOP_BUYMONTHCARD);
	        }
	    }
	    showGiftRed() {
	        let localData = LocalData.ins().isShowGiftRed;
	        if (!localData) {
	            this.giftRedPoint.visible = true;
	        }
	        else {
	            this.giftRedPoint.visible = false;
	        }
	    }
	    filfterSamePrice() {
	        let data = BuyDiamondsMgr.getDiamonds();
	        let arr = [];
	        for (let i = 0; i < data.length; i++) {
	            let vo = data[i];
	            if (vo.type == 2) {
	                arr.push(vo);
	                continue;
	            }
	            let flag = BuyDiamondsMgr.isHasSame(vo.cid, vo.price);
	            if ((flag && vo.limitType == 0) || !flag) {
	                arr.push(vo);
	            }
	        }
	        this.buyList.array = arr;
	    }
	    buyOneGiftBag() {
	        if (BuyDiamondsMgr.isGiftPanel) {
	            let vo = PaySHopCfg.getCfg(15);
	            if (vo) {
	                if (Platfrom.isWebGm) {
	                    let time = TimeMgr.ins().getTime();
	                    BuyDiamondsMgr.renewGiftIds(vo.cid, time);
	                }
	                else {
	                    ApiMgr.createOrder(vo.cid, vo.name);
	                }
	            }
	        }
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.playAni = false;
	        this.mouseThrough = true;
	        this.btnBox.mouseThrough = true;
	        this.tab.selectHandler = Laya.Handler.create(this, this.onTabChanged, null, false);
	        this.btnClose.on(Laya.Event.CLICK, this, this._closeUi);
	        this.list.itemRender = ShopItem;
	        this.list.renderHandler = Laya.Handler.create(this, this.renderItem, [], false);
	        this.list.hScrollBarSkin = "";
	        this.list.repeatY = 1;
	        this.list.array = [];
	        this.buyList.itemRender = BuyDiamondsItem;
	        this.buyList.renderHandler = Laya.Handler.create(this, this.renderBuyItem, [], false);
	        this.buyList.hScrollBarSkin = "";
	        this.buyList.repeatY = 1;
	        this.buyList.array = [];
	        this.giftBagList.itemRender = GiftBagItem;
	        this.giftBagList.renderHandler = Laya.Handler.create(this, this.renderGiftBagItem, [], false);
	        this.giftBagList.hScrollBarSkin = "";
	        this.giftBagList.repeatY = 1;
	        this.giftBagList.array = [];
	        this.boxTimer.prefix = LanCfg.get("20019002");
	        this.boxTimer.formatFunc = Laya.Handler.create(null, TimeMgr.ins().formatTimer1, [], false);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        ViewBg.ins().setAlpha(0.2);
	        if (arg) {
	            this.tab.selectedIndex = arg;
	        }
	        this.updateTab();
	        this.onStarAdd();
	        this.showGiftRed();
	        this.addNoti();
	        if (Glob.inHome) {
	            this.buyOneGiftBag();
	        }
	        if (MergeDragonsAppConfig.CHALLENGE_LEVELS_ENABLED
	            && GGChallengeLevelController.ins().ShopTutorialState == TutorialState.ShowShopButton) {
	            GGChallengeLevelController.ins().ShopTutorialState = TutorialState.ShopIsOpen;
	        }
	    }
	    zeroNoti() {
	        this.onTabChanged();
	        this.showGiftRed();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.SHOP_CHARGE_OK, this.onChargeOk, this);
	        MsgCenter.listen(MsgConst.SHOP_UNLOCK_OK, this.onUnlockOk, this);
	        MsgCenter.listen(MsgConst.TIMED_SHOP_RESET, this.onTimedShopReset, this);
	        MsgCenter.listen(MsgConst.SHOP_CHANGE_STAR, this.onStarAdd, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYDIAMONDS, this.onTabChanged, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYMONTHCARD, this.onTabChanged, this);
	        MsgCenter.listen(MsgConst.SHOP_RECEIVEWARD, this.onTabChanged, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYGIFT, this.onTabChanged, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.zeroNoti, this);
	        MsgCenter.listen(MsgConst.OPENSHOP_BUYDIAMONDS, this.changeTabIndex, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.SHOP_CHARGE_OK, this.onChargeOk, this);
	        MsgCenter.remove(MsgConst.SHOP_UNLOCK_OK, this.onUnlockOk, this);
	        MsgCenter.remove(MsgConst.SHOP_CHANGE_STAR, this.onTimedShopReset, this);
	        MsgCenter.remove(MsgConst.SHOP_CHANGE_STAR, this.onStarAdd, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYDIAMONDS, this.onTabChanged, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYMONTHCARD, this.onTabChanged, this);
	        MsgCenter.remove(MsgConst.SHOP_RECEIVEWARD, this.onTabChanged, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYGIFT, this.onTabChanged, this);
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.zeroNoti, this);
	        MsgCenter.remove(MsgConst.OPENSHOP_BUYDIAMONDS, this.changeTabIndex, this);
	    }
	    closeUi() {
	        super.closeUi(null);
	        ViewBg.ins().setAlpha(0.7);
	        this.removeNoti();
	    }
	}

	class DragonItem extends ui.data.module.dragon.DragonItemUI {
	    onClickBg() {
	        LayerMgr.ins().open(UiConst.DragonInfoView, this.dataSource);
	    }
	    onClickEdit() {
	    }
	    onClickMerge() {
	        LayerMgr.ins().open(UiConst.DragonMergeView, this.dataSource);
	    }
	    onAwake() {
	        this.btnEdit.visible = false;
	        this.imgBg.on(Laya.Event.CLICK, this, this.onClickBg);
	        this.btnEdit.on(Laya.Event.CLICK, this, this.onClickEdit);
	        this.btnMerge.on(Laya.Event.CLICK, this, this.onClickMerge);
	    }
	    setData(data) {
	        let isEgg = data.isEgg;
	        this.lblName.text = data.name;
	        if (this.uiPref) {
	            this.uiPref.setNid(data.prefab);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(data.prefab);
	            this.uiPref.centerX = 0;
	            this.uiPref.centerY = 0;
	            this.imgContent.addChild(this.uiPref);
	        }
	        if (isEgg) {
	            this.boxDragon.visible = false;
	        }
	        else {
	            this.boxDragon.visible = true;
	            this.lblLv.text = LanCfg.get("20022005") + data.level;
	        }
	        switch (data.merge) {
	            case EMergeInfo.None:
	                this.btnMerge.visible = false;
	                this.hboxPower.visible = true;
	                this.lblPower.text = data.dragonPower.toString();
	                break;
	            case EMergeInfo.Merge3:
	                this.btnMerge.visible = true;
	                this.hboxPower.visible = false;
	                this.btnMerge.label = LanCfg.get("20022006");
	                break;
	            case EMergeInfo.Merge5:
	                this.btnMerge.visible = true;
	                this.hboxPower.visible = false;
	                this.btnMerge.label = LanCfg.get("20022007");
	                break;
	        }
	    }
	}

	class DragonTabItem extends ui.data.module.dragon.DragonTabItemUI {
	    setContent(vo) {
	        this.lblName.text = vo.name;
	        this.lblAmount.text = "x" + vo.amount;
	        this.lblPower.text = vo.power.toString();
	        this.imgRed.visible = DragonBookMgr.ins().hasMergeItems(vo.breedId);
	        if (this.uiPref) {
	            this.uiPref.setNid(vo.prefName);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(vo.prefName);
	            this.uiPref.centerX = 0;
	            this.uiPref.centerY = 0;
	            this.boxContent.addChild(this.uiPref);
	        }
	    }
	    onClick() {
	        this.clickHandler && this.clickHandler.run();
	    }
	    setData(data) {
	        if (data.isDisc) {
	            this.mouseEnabled = true;
	            this.imgNone.visible = false;
	            this.boxContent.visible = true;
	            this.lblSeen.visible = !data.isSeen;
	            this.imgBg.skin = DragonTabItem.NORMAL;
	            this.setContent(data);
	        }
	        else {
	            this.mouseEnabled = false;
	            this.imgNone.visible = true;
	            this.boxContent.visible = false;
	            this.imgBg.skin = DragonTabItem.LOCKED;
	        }
	    }
	    onAwake() {
	        this.lblSeen.text = LanCfg.get("20022004");
	        this.on(Laya.Event.CLICK, this, this.onClick);
	    }
	}
	DragonTabItem.NORMAL = GameUtil.getModuleSkin("dragon", "jlxt_beijinkuan1");
	DragonTabItem.SELECTED = GameUtil.getModuleSkin("dragon", "jlxt_beijinkuan2");
	DragonTabItem.LOCKED = GameUtil.getModuleSkin("dragon", "jlxt_beijinkuan3");

	class DragonView extends BaseView {
	    updateDiscAmount() {
	        this.lblDisc.text = LanCfg.get("20022002") + DragonBookMgr.ins().getTotalDisc();
	    }
	    updatePower() {
	        this.lblPower.text = LanCfg.get("20022003") + DragonBookMgr.ins().getTotalPower();
	    }
	    renderItem(cell) {
	        let vo = cell.dataSource;
	        cell.setData(vo);
	    }
	    renderTabItem(cell) {
	        let vo = cell.dataSource;
	        cell.setData(vo);
	    }
	    selectTabItem() {
	        let selectItem = this.listTab.selectedItem;
	        let breedId = selectItem.breedId;
	        DragonBookMgr.ins().see(breedId);
	        this.listDragons.array = DragonBookMgr.ins().getItems(breedId);
	    }
	    onTabSeen(id) {
	        this.listTab.array = DragonBookMgr.ins().getBreedsInView();
	        this.selectTabItem();
	    }
	    onTabDisc(id) {
	        this.listTab.array = DragonBookMgr.ins().getBreedsInView();
	        this.selectTabItem();
	    }
	    onMergeOk(id) {
	        this._closeUi();
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.playAni = false;
	        this.listTab.selectEnable = true;
	        this.listTab.itemRender = DragonTabItem;
	        this.listTab.hScrollBarSkin = "";
	        this.listTab.renderHandler = Laya.Handler.create(this, this.renderTabItem, null, false);
	        this.listTab.selectHandler = Laya.Handler.create(this, this.selectTabItem, null, false);
	        this.listTab.array = [];
	        this.listDragons.array = [];
	        this.listDragons.hScrollBarSkin = "";
	        this.listDragons.itemRender = DragonItem;
	        this.listDragons.renderHandler = Laya.Handler.create(this, this.renderItem, null, false);
	        this.btnClose.on(Laya.Event.CLICK, this, this._closeUi);
	        this.imgTest.on(Laya.Event.CLICK, this, () => {
	            let item = this.listTab.selectedItem;
	            if (DragonBookMgr.ins().isDiscovered(item.breedId)) {
	                DragonBookMgr.ins().see(item.breedId);
	            }
	            else {
	                DragonBookMgr.ins().discover(item.breedId);
	            }
	        });
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.listTab.array = DragonBookMgr.ins().getBreedsInView();
	        this.listTab.selectedIndex = Math.max(this.listTab.selectedIndex, 0);
	        this.selectTabItem();
	        this.updatePower();
	        this.updateDiscAmount();
	        MsgCenter.listen(MsgConst.DRAGON_BOOK_SEEN, this.onTabSeen, this);
	        MsgCenter.listen(MsgConst.DRAGON_BOOK_MERGE, this.onMergeOk, this);
	        MsgCenter.listen(MsgConst.DRAGON_BOOK_DISCOVER, this.onTabDisc, this);
	    }
	    onClosed(arg) {
	        super.onClosed(arg);
	        MsgCenter.remove(MsgConst.DRAGON_BOOK_SEEN, this.onTabSeen, this);
	        MsgCenter.remove(MsgConst.DRAGON_BOOK_MERGE, this.onMergeOk, this);
	        MsgCenter.remove(MsgConst.DRAGON_BOOK_DISCOVER, this.onTabDisc, this);
	    }
	}

	class LevelChestItem extends ui.data.module.levelChest.LevelChestItemUI {
	    constructor() {
	        super(...arguments);
	        this._status = 0;
	    }
	    onTimerUpdate(vo) {
	        this.barTimer.value = vo.timerPercent;
	    }
	    onStatusChange() {
	        let status = this._status;
	        let timer = this.boxTimer;
	        switch (status) {
	            case 1:
	                this.lblName.color = "#595250";
	                this.barTimer.visible = false;
	                this.lblState.visible = true;
	                this.btnState.visible = false;
	                break;
	            case 2:
	                this.lblName.color = "#b22e00";
	                this.barTimer.visible = true;
	                this.lblState.visible = false;
	                this.btnState.visible = true;
	                this.hboxPrice.visible = false;
	                break;
	            case 3:
	                this.lblName.color = "#b22e00";
	                this.barTimer.visible = true;
	                this.lblState.visible = true;
	                this.btnState.visible = true;
	                this.hboxPrice.visible = true;
	                break;
	            case 4:
	                this.lblName.color = "#b22e00";
	                this.barTimer.visible = true;
	                this.lblState.visible = false;
	                this.btnState.visible = true;
	                this.hboxPrice.visible = false;
	                break;
	            default:
	                break;
	        }
	    }
	    setChestPref(nid) {
	        if (this.uiPref) {
	            this.uiPref.setNid(nid);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(nid);
	            this.uiPref.centerX = 0;
	            this.uiPref.y = 40;
	            this.addChildAt(this.uiPref, 2);
	        }
	    }
	    onClickBtn() {
	        this._clickHandler && this._clickHandler.run();
	    }
	    set status(value) {
	        if (this._status !== value) {
	            this._status = value;
	            this.onStatusChange();
	        }
	    }
	    get status() {
	        return this._status;
	    }
	    set clickHandler(handler) {
	        this._clickHandler = handler;
	    }
	    get clickHandler() {
	        return this._clickHandler;
	    }
	    onAwake() {
	        this.btnState.on(Laya.Event.CLICK, this, this.onClickBtn);
	        this.boxTimer.formatFunc = Laya.Handler.create(null, TimeMgr.ins().formatTimer1, [], false);
	    }
	    setData(vo, isExistProgress) {
	        this.status = vo.status;
	        let timer = this.boxTimer;
	        this.boxTimer.updateHandler = Laya.Handler.create(this, this.onTimerUpdate, [vo], false);
	        switch (vo.status) {
	            case 1:
	                this.imgChest.visible = true;
	                this.imgChest.skin = LevelChestItem.IconQuestion;
	                this.lblName.text = LanCfg.get("20015014");
	                this.lblState.text = LanCfg.get("20015013");
	                this.uiPref && (this.uiPref.visible = false);
	                break;
	            case 2:
	                this.imgChest.visible = false;
	                this.setChestPref(vo.skin);
	                this.lblName.text = vo.name;
	                this.barTimer.value = 0;
	                timer.fixedText = vo.costTimeStr;
	                this.btnState.label = LanCfg.get("20015004");
	                if (isExistProgress) {
	                    this.btnState.label = LanCfg.get("20015003");
	                    this.lblState.text = LanCfg.get("20015012");
	                }
	                break;
	            case 3:
	                this.lblName.text = vo.name;
	                this.imgChest.visible = false;
	                this.setChestPref(vo.skin);
	                timer.count = vo.countSeconds;
	                this.lblState.text = LanCfg.get("20015011");
	                this.btnState.label = "";
	                this.lblPrice.text = vo.price + "";
	                break;
	            case 4:
	                this.imgChest.visible = false;
	                this.setChestPref(vo.skin);
	                this.lblName.text = vo.name;
	                this.barTimer.value = 1;
	                timer.fixedText = LanCfg.get("20015015");
	                this.btnState.label = LanCfg.get("20015016");
	                break;
	            default:
	                break;
	        }
	    }
	}
	LevelChestItem.IconQuestion = "res/skin/level_box/gkbx_wenhao.png";

	class PurchaseConfirmationDefinition extends ModalDialogDefinition {
	    constructor(vo) {
	        super(UiConst.LevelChestBuyView);
	        this.chestVo = vo;
	    }
	}

	class LevelChestView extends BaseModal {
	    renderItem(cell, index) {
	        let processIndex = LevelChestMgr.ins().getProcessIndex();
	        let isExistProgress = processIndex > -1 && index !== processIndex;
	        cell.setData(cell.dataSource, isExistProgress);
	        cell.clickHandler = Laya.Handler.create(this, this.onClickItem, [cell.dataSource, isExistProgress, index], false);
	    }
	    onRefresh(data) {
	        this.list.refresh();
	    }
	    showPurchaseConfirmation(vo) {
	        PopupManager.show2(new PurchaseConfirmationDefinition(vo));
	    }
	    onClickItem(vo, isExistProgress, index) {
	        if (vo.isLocked()) {
	            if (isExistProgress) {
	                this.showPurchaseConfirmation(vo);
	            }
	            else {
	                LevelChestMgr.ins().unlock(index);
	            }
	        }
	        else if (vo.isProgress()) {
	            this.showPurchaseConfirmation(vo);
	        }
	        else if (vo.isOpen()) {
	            let cfg = PropsCfg.get(vo.chestId);
	            let saveData = Thing.create_SaveData(cfg);
	            saveData.onTapCostPaid = true;
	            if (!Glob.inHome) {
	                SaveLoad.AddItemToSavedBringHomeRewards2(saveData);
	            }
	            else {
	                let drawnObject = Thing.loadFromSave_Entity(saveData);
	                drawnObject.setDrawnPosition(GuiMgr.getScreenCenterInWorldSpace());
	                Globals.jumpDropToFreeMetaCell_OrShoveIntoOrb(drawnObject, true, "ParticleRoot_ShopBuyImpact", true, true);
	            }
	            SoundMgr.ins().playSound("m124");
	            LevelChestMgr.ins().collectChest(index);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.list.hScrollBarSkin = "";
	        this.list.itemRender = LevelChestItem;
	        this.list.renderHandler = Laya.Handler.create(this, this.renderItem, [], false);
	        this.list.array = [];
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.list.array = LevelChestMgr.ins().getChestList();
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_ADD, this.onRefresh, this);
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_UNLOCK, this.onRefresh, this);
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_COLLECT, this.onRefresh, this);
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_FINISHED, this.onRefresh, this);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_ADD, this.onRefresh, this);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_UNLOCK, this.onRefresh, this);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_COLLECT, this.onRefresh, this);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_FINISHED, this.onRefresh, this);
	    }
	}

	class LevelChestBuyView extends BaseModal {
	    collectChest() {
	        let victoryChestVO = this.chestVo;
	        let cfg = PropsCfg.get(victoryChestVO.chestId);
	        let saveData = Thing.create_SaveData(cfg);
	        saveData.onTapCostPaid = true;
	        if (!Glob.inHome) {
	            SaveLoad.AddItemToSavedBringHomeRewards2(saveData);
	        }
	        else {
	            let drawnObject = Thing.loadFromSave_Entity(saveData);
	            drawnObject.setDrawnPosition(GuiMgr.getScreenCenterInWorldSpace());
	            Globals.jumpDropToFreeMetaCell_OrShoveIntoOrb(drawnObject, true, "ParticleRoot_ShopBuyImpact", true, true);
	        }
	        let chestIndex = LevelChestMgr.ins().getIndex(this.chestVo);
	        LevelChestMgr.ins().collectChest(chestIndex);
	        this._closeUi();
	    }
	    confirmPurchase() {
	        let victoryChestVO = this.chestVo;
	        let onTapGemCost = victoryChestVO.price;
	        if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, onTapGemCost)) {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            return;
	        }
	        CurrencyMgr.ins().charge(ECurrency.Diamond, onTapGemCost);
	        ApiMgr.addYbRecord(onTapGemCost, LogCostType.LevelChest);
	        SoundMgr.ins().playSound("m125");
	        this.collectChest();
	    }
	    onTimerUpdate() {
	        let vo = this.chestVo;
	        this.barTimer.value = vo.timerPercent;
	    }
	    updatePref(skin) {
	        if (this.uiPref) {
	            this.uiPref.setNid(skin);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(skin);
	            this.uiPref.centerX = 0;
	            this.uiPref.y = 35;
	            this.boxContent.addChild(this.uiPref);
	        }
	    }
	    updatePrice(price) {
	        this.lblPrice.text = price.toString();
	    }
	    updateTimer(vo) {
	        let isProgress = vo.isProgress();
	        this.lblTimerTip.text = LanCfg.get(isProgress ? "20015017" : "20015012");
	        if (isProgress) {
	            this.boxTimer.count = vo.countSeconds;
	        }
	        else {
	            this.barTimer.value = 0;
	            this.boxTimer.fixedText = vo.costTimeStr;
	        }
	    }
	    updateButton() {
	        let isOpen = this.chestVo.isOpen();
	        this.btnBuy.visible = !isOpen;
	        this.btnPick.visible = isOpen;
	    }
	    onClickBuy() {
	        this.confirmPurchase();
	    }
	    onClickPick() {
	        this.collectChest();
	    }
	    onAwake() {
	        super.onAwake();
	        this.lblPick.text = LanCfg.get("20015011");
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onClickBuy);
	        this.btnPick.on(Laya.Event.CLICK, this, this.onClickPick);
	        this.boxTimer.formatFunc = Laya.Handler.create(null, TimeMgr.ins().formatTimer1, [], false);
	        this.boxTimer.updateHandler = Laya.Handler.create(this, this.onTimerUpdate, [], false);
	    }
	    openUi(def) {
	        let vo = def.chestVo;
	        super.openUi(vo);
	        this.chestVo = vo;
	        this.setTitle(vo.name);
	        this.updateTimer(vo);
	        this.updatePref(vo.skin);
	        this.updatePrice(vo.price);
	        this.updateButton();
	        MsgCenter.listen(MsgConst.LEVEL_CHEST_FINISHED, this.updateButton, this);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.LEVEL_CHEST_FINISHED, this.updateButton, this);
	    }
	}

	class LevelQuitView extends BaseModal {
	    clickHome() {
	        LayerMgr.ins().closeUi(this.name);
	        WorldMgr.ins().enter(WorldMgr.ins().getHomeLevelVo());
	        ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.BackToHome, 1);
	    }
	    clickWorld() {
	        LayerMgr.ins().closeUi(this.name);
	        WorldMgr.ins().enterWorld();
	        ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.BackToWorld, 1);
	    }
	    clickReset() {
	        LayerMgr.ins().closeUi(this.name);
	        LayerMgr.ins().open(UiConst.LevelResetView);
	    }
	    onAwake() {
	        super.onAwake();
	        this.imgHome.on(Laya.Event.CLICK, this, this.clickHome);
	        this.imgWorld.on(Laya.Event.CLICK, this, this.clickWorld);
	        this.imgReset.on(Laya.Event.CLICK, this, this.clickReset);
	    }
	    openUi() {
	        super.openUi(null);
	        this.imgHome.disabled = !WorldMgr.ins().isShowHome();
	    }
	}

	class LevelResetView extends BaseModal {
	    clickReset() {
	        this._closeUi();
	        WorldMgr.ins().reset();
	        ApiMgr.addGuanQiaSta(Glob.currentLevel.ID, LogLevelType.ResetLevel);
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnReset.on(Laya.Event.CLICK, this, this.clickReset);
	        this.btnCancel.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	}

	const EnergyType = ECurrency.Energy;
	class EnergyInfoView extends BaseModal {
	    updateView() {
	        let isFull = CurrencyMgr.ins().isFull(EnergyType);
	        this.btnAdd.disabled = isFull;
	        let amount = CurrencyMgr.ins().getAmount(EnergyType);
	        this.lblCount.text = amount + "";
	        if (isFull) {
	            this.boxTimer.fixedText = LanCfg.get("20020035");
	        }
	        else {
	            this.boxTimer.count = CurrencyMgr.ins().getReplySeconds();
	        }
	    }
	    clickAdd() {
	        this._closeUi();
	        LayerMgr.ins().open(UiConst.EnergyBuyView);
	    }
	    clickSure() {
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.setTitle(LanCfg.get("20020022"));
	        this.boxTimer.prefix = LanCfg.get("20020024");
	        this.boxTimer.formatFunc = Laya.Handler.create(null, TimeMgr.ins().formatTimer1, null, false);
	        this.btnAdd.on(Laya.Event.CLICK, this, this.clickAdd);
	        this.btnSure.on(Laya.Event.CLICK, this, this.clickSure);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.updateView();
	        MsgCenter.listen(MsgConst.CURRENCY_CHANGE, this.updateView, this);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.CURRENCY_CHANGE, this.updateView, this);
	    }
	}

	class EnergyBuyView extends BaseModal {
	    clickBuy() {
	        if (CurrencyMgr.ins().isEnough(ECurrency.Diamond, CurrencyMgr.ins().refillEnergyCost())) {
	            CurrencyMgr.ins().refillEnergy();
	        }
	        else {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	        }
	        this._closeUi();
	    }
	    updateView() {
	        this.lblCost.text = CurrencyMgr.ins().refillEnergyCost() + "";
	        if (CurrencyMgr.ins().isFull(ECurrency.Energy)) {
	            this._closeUi();
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnBuy.on(Laya.Event.CLICK, this, this.clickBuy);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.updateView();
	        MsgCenter.listen(MsgConst.CURRENCY_CHANGE, this.updateView, this);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.CURRENCY_CHANGE, this.updateView, this);
	    }
	}

	class MainGoalView extends BaseModal {
	    onAwake() {
	        super.onAwake();
	        this.btnOk.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(closeHandler) {
	        super.openUi(null);
	        this.closeHandler = closeHandler;
	        let condition = WorldMgr.ins().getFinishCondition();
	        let pref = condition.prefCid;
	        let amount = condition.amount;
	        let prefCfg = PropsCfg.get(pref);
	        let thingList = ThingList.lists[prefCfg.cid];
	        let num = 0;
	        thingList && thingList.forEach(item => {
	            if (item.getComponent(CompFilledWithDeath) == null) {
	                num++;
	            }
	        });
	        this.lblDesc.text = prefCfg.name + "（" + LanCfg.get("20017001") + num + "/" + amount + "）";
	        this.lblAmount.value = "x" + amount;
	        this.pref = UiPrefMgr.get(prefCfg.pref);
	        this.pref.centerX = 0;
	        this.pref.centerY = 0;
	        this.imgContent.addChild(this.pref);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.closeHandler && this.closeHandler.run();
	        this.closeHandler = null;
	        if (this.pref) {
	            this.pref.dispose();
	            this.pref = null;
	        }
	    }
	}

	class SubGoalView extends BaseModal {
	    updateView(vo) {
	        let isFinished = vo.Complete;
	        let icon = vo.getIconPrefName();
	        if (vo.HasIcon) {
	            this.pref = UiPrefMgr.get(icon, 150, 150);
	            this.pref.centerX = 0;
	            this.pref.centerY = 0;
	            this.imgContent.addChild(this.pref);
	        }
	        else {
	            this.disposePref();
	        }
	        this.lblHelp.text = vo.HelpText;
	        this.lblHelp.visible = !isFinished;
	        this.lblDesc.text = vo.Text;
	        this.lblAmount.text = vo.TimesDoneSoFar + "/" + vo.TimesToComplete;
	        this.lblAmount.visible = vo.TimesToComplete > 1 && !isFinished;
	        this.lblSkipCost.text = vo.skipCost.toString();
	        this.btnSkip.visible = vo.CanPayToSkip && !isFinished;
	        this.btnFinished.visible = isFinished;
	    }
	    disposePref() {
	        if (this.pref) {
	            this.pref.dispose();
	            this.pref = null;
	        }
	    }
	    onClickSkip() {
	        let goal = this.goalVo;
	        if (goal.CanPayToSkip) {
	            if (CurrencyMgr.ins().CanAfford(ECurrency.Diamond, goal.skipCost)) {
	                CurrencyMgr.ins().charge(ECurrency.Diamond, goal.skipCost);
	                ApiMgr.addYbRecord(goal.skipCost, LogCostType.SkipLevelTask);
	                goal.Skip();
	            }
	            else {
	                CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            }
	        }
	        this._closeUi();
	    }
	    onClickFinished() {
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnSkip.on(Laya.Event.CLICK, this, this.onClickSkip);
	        this.btnFinished.on(Laya.Event.CLICK, this, this.onClickFinished);
	    }
	    openUi(index) {
	        super.openUi(index);
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        let goal = goals[index];
	        this.goalVo = goal;
	        this.setTitle("任务" + (index + 1));
	        this.updateView(goal);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.disposePref();
	    }
	}

	class DailyQuestView extends BaseModal {
	    updateView() {
	        this.updateNeed();
	        this.updateTimer();
	    }
	    updateNeed() {
	        let questInfo = DailyQuestMgr.ins().getInfo();
	        this.lblName0.text = questInfo.needPref.name;
	        this.lblAmount0.text = "x" + questInfo.requestNum;
	        this.barProgress.value = questInfo.collectedNum / questInfo.requestNum;
	        if (questInfo.isFinished) {
	            this.btnCollect.visible = false;
	            this.lblPercent.text = LanCfg.get("20016005");
	        }
	        else {
	            this.btnCollect.visible = DailyQuestMgr.ins().getCountOfRequestedItemAvailableInCamp() > 0;
	            this.lblPercent.text = questInfo.collectedNum + "/" + questInfo.requestNum;
	        }
	        let prefName = questInfo.needPref.pref;
	        if (this.needPref) {
	            this.needPref.setNid(prefName);
	        }
	        else {
	            this.needPref = UiPrefMgr.get(prefName);
	            this.needPref.centerX = 0;
	            this.needPref.centerY = 10;
	            this.boxNeed.addChildAt(this.needPref, 5);
	        }
	    }
	    updateReward() {
	        let questInfo = DailyQuestMgr.ins().getInfo();
	        this.lblName1.text = questInfo.rewardPref.name;
	        this.lblAmount1.text = "x" + questInfo.rewardAmount;
	        this.lblChance.text = LanCfg.get("20016006") + Math.round(questInfo.bonusChance * 100) + "%";
	        this.lblHelpTimes.text = StringUtil.format(LanCfg.get("20016007"), questInfo.finishedTimes);
	        let prefName = questInfo.rewardPref.pref;
	        if (this.rewardPref) {
	            this.rewardPref.setNid(prefName);
	        }
	        else {
	            this.rewardPref = UiPrefMgr.get(prefName);
	            this.rewardPref.centerX = 0;
	            this.rewardPref.centerY = 10;
	            this.boxReward.addChildAt(this.rewardPref, 5);
	        }
	    }
	    updateTimer() {
	        let questInfo = DailyQuestMgr.ins().getInfo();
	        this.btnPick.visible = questInfo.isFinished;
	        this.imgTimer.visible = !questInfo.isFinished;
	        if (!questInfo.isFinished) {
	            this.boxTimer.countM = questInfo.remainderTime;
	        }
	    }
	    onClickPick() {
	        DailyQuestMgr.ins().completeQuest();
	        this._closeUi();
	    }
	    onClickCollect() {
	        this.timer.once(500, this, () => {
	            DailyQuestMgr.ins().collectAvailableItemsFromCamp();
	        });
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.setTitle(LanCfg.get("20016001"));
	        this.lblTip0.text = LanCfg.get("20016002");
	        this.lblTip1.text = LanCfg.get("20016003");
	        this.lblDialog.text = LanCfg.get("20016012");
	        this.boxTimer.formatFunc = Laya.Handler.create(null, TimeMgr.ins().formatTimer1, [], false);
	        this.btnPick.on(Laya.Event.CLICK, this, this.onClickPick);
	        this.btnCollect.on(Laya.Event.CLICK, this, this.onClickCollect);
	    }
	    openUi(args) {
	        super.openUi(args);
	        this.updateView();
	        this.updateReward();
	        DailyQuestMgr.ins().onQuestPopupOpen();
	        MsgCenter.listen(MsgConst.DAILY_QUEST_PROGRESS, this.updateView, this);
	    }
	    closeUi(args) {
	        super.closeUi(args);
	        MsgCenter.remove(MsgConst.DAILY_QUEST_PROGRESS, this.updateView, this);
	    }
	}

	class DragonInfoView extends BaseModal {
	    updateDesc(vo) {
	        let cfg = PropsCfg.get(vo.cid);
	        if (vo.isEgg) {
	            this.lblDesc.text = cfg.descriptionShort_Base;
	        }
	        else {
	            let text = StringUtil.format(LanCfg.get("20022008"), cfg.itemLevel, vo.name);
	            let text2 = StringUtil.format(LanCfg.get("20022009"), cfg.dragonPower);
	            let text3 = StringUtil.format(LanCfg.get("20022010"), cfg.asMonsterDef.workCapacity);
	            this.lblDesc.text = text + text2 + text3;
	        }
	    }
	    updatePref(prefab) {
	        if (this.uiPref) {
	            this.uiPref.setNid(prefab);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(prefab);
	            this.uiPref.y = 40;
	            this.uiPref.centerX = 0;
	            this.imgContent.addChildAt(this.uiPref, 0);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnOk.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(vo) {
	        super.openUi(vo);
	        this.setTitle(vo.name);
	        this.updateDesc(vo);
	        this.updatePref(vo.prefab);
	    }
	}

	class DragonMergeView extends BaseModal {
	    setDesc(text) {
	        this.lblDesc.text = text;
	    }
	    setPref(pref) {
	        if (this.uiPref) {
	            this.uiPref.setNid(pref);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(pref);
	            this.uiPref.y = 40;
	            this.uiPref.centerX = 0;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    onClickMerge() {
	        DragonBookMgr.ins().mergeInHomeBook(this.vo);
	        this._closeUi();
	    }
	    onClickCancel() {
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnMerge.on(Laya.Event.CLICK, this, this.onClickMerge);
	        this.btnCancel.on(Laya.Event.CLICK, this, this.onClickCancel);
	    }
	    openUi(vo) {
	        super.openUi(vo);
	        this.vo = vo;
	        let mergeAmount = vo.mergeAmount;
	        this.setTitle(StringUtil.format(LanCfg.get("20022011"), mergeAmount));
	        this.setPref(vo.prefab);
	        let desc = LanCfg.get("20022012");
	        desc = StringUtil.format(desc, mergeAmount, vo.name);
	        this.setDesc(desc);
	    }
	}

	class TutorialView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.vo = null;
	        this.speaker = null;
	        this.focalObj = null;
	    }
	    setData(vo) {
	        this.vo = vo;
	        let currentStep = vo.currStep;
	        if (currentStep.hasSpeaker) {
	            if (!this.speaker || this.speaker.nid != currentStep.speakerPrefName) {
	                if (this.speaker) {
	                    this.speaker.dispose();
	                    this.speaker = null;
	                }
	                this.speaker = UiPrefMgr.get(currentStep.speakerPrefName, 180, 180);
	                this.speaker.x = 190;
	                this.speaker.y = -88;
	                this.speaker.scaleX = -1;
	                this.boxPref.addChild(this.speaker);
	            }
	        }
	        if (currentStep.hasFocal) {
	            if (this.focalObj) {
	                this.focalObj.visible = true;
	                this.focalObj.setNid(currentStep.focalPrefName);
	            }
	            else {
	                this.focalObj = UiPrefMgr.get(currentStep.focalPrefName, 120, 120, 0.35);
	                this.focalObj.left = 100;
	                this.focalObj.centerY = 45;
	                this.boxPref.addChild(this.focalObj);
	            }
	        }
	        else {
	            this.focalObj && (this.focalObj.visible = false);
	        }
	        this.lblTitle.text = LanCfg.get(this.vo.keyHeader);
	        if (this.vo.hasMultiplePages) {
	            this.lblProgress.visible = true;
	            this.lblProgress.text = currentStep.pageNumber + "/" + this.vo.numPages;
	        }
	        else {
	            this.lblProgress.visible = false;
	        }
	        this.btnPre.visible = (currentStep.pageNumber > 1);
	        if (currentStep.hasFocal) {
	            this.lblWide.visible = false;
	            this.lblFocal.visible = true;
	            this.lblNarrow.visible = true;
	            this.lblNarrow.text = currentStep.body;
	        }
	        else {
	            this.lblWide.visible = true;
	            this.lblFocal.visible = false;
	            this.lblNarrow.visible = false;
	            this.lblWide.text = currentStep.body;
	        }
	        this.btnEnd.visible = vo.onLastPage;
	        this.btnNext.visible = !vo.onLastPage;
	        MsgCenter.notify(MsgConst.BOUNCING_ARROW_SHOW, currentStep.arrowId);
	    }
	    onGoPre(e) {
	        this.vo.GoBackOnePage();
	        this.setData(this.vo);
	    }
	    onGoNext() {
	        this.vo.advance();
	        if (this.vo.DialogComplete) {
	            this.onCompleted();
	        }
	        else {
	            this.setData(this.vo);
	        }
	    }
	    onCompleted() {
	        this.vo.TomeTipFinishedShowing();
	        LayerMgr.ins().closeUi(this.name);
	        if (this.vo.isDeleteOnDone) {
	        }
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        this.height = 750;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.playAni = false;
	        this.showBlackBG = false;
	        this.bgClickClose = false;
	        this.btnPre.on(Laya.Event.CLICK, this, this.onGoPre);
	        this.btnEnd.on(Laya.Event.CLICK, this, this.onGoNext);
	        this.btnNext.on(Laya.Event.CLICK, this, this.onGoNext);
	        this.boxMask.on(Laya.Event.CLICK, this, this.onGoNext);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.setData(arg);
	    }
	}

	class LevelWinView extends BaseView {
	    setHightScore(score) {
	        let desc = LanCfg.get("20013002");
	        this.setItem(this.box1, desc, score);
	    }
	    setNewScore(score) {
	        let desc = LanCfg.get("20013003");
	        this.setItem(this.box2, desc, score);
	    }
	    setItem(box, desc, score) {
	        let lblDesc = box.getChildAt(1);
	        let lblScore = box.getChildAt(2);
	        lblDesc.text = desc;
	        lblScore.text = StringUtil.formatNum(score);
	    }
	    setStars() {
	        let levelData = Glob.currLevelData;
	        let total = levelData.MaxStars;
	        if (total) {
	            let finishedNum = levelData.GetNumStarGoalsComplete();
	            this.boxStar1.visible = true;
	            this.boxStar2.visible = true;
	            this.boxStar3.visible = true;
	            this.setStarStatus(this.boxStar1, finishedNum > 0);
	            this.setStarStatus(this.boxStar2, finishedNum > 1);
	            this.setStarStatus(this.boxStar3, finishedNum > 2);
	        }
	        else {
	            this.boxStar1.visible = false;
	            this.boxStar2.visible = false;
	            this.boxStar3.visible = false;
	        }
	    }
	    setStarStatus(box, finish) {
	        let star = box.getChildAt(1);
	        star.visible = finish;
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.bgClickClose = false;
	        Laya.timer.once(2000, this, () => {
	            this.bgClickClose = true;
	        });
	        let newScore = arg.newScore;
	        let highScore = arg.highScore;
	        this.setNewScore(newScore);
	        this.setHightScore(highScore);
	        this.setStars();
	        this.boxNew.visible = newScore > highScore;
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        Glob.currentLevel.onWinViewTap();
	    }
	}

	class AtlasContentItem extends ui.data.module.atlas.AtlasContentItemUI {
	    constructor() {
	        super();
	    }
	    onAwake() {
	        super.onAwake();
	        this.bgImg.on(Laya.Event.CLICK, this, this.onClick);
	    }
	    setData(vo, isMax) {
	        this.data = vo;
	        this.goodIcon.skin = "res/skin/atlas/tujian_shuo.png";
	        this.goodIcon.visible = true;
	        this.removeAni();
	        if (isMax) {
	            this.arrow.visible = false;
	        }
	        else {
	            this.arrow.visible = true;
	        }
	        this.updateBseData();
	        this.updateState();
	        this.updatePref();
	    }
	    updatePref() {
	        if (this.uiPref) {
	            this.uiPref.clear();
	            this.uiPref = null;
	        }
	        if (this.data && this.data.state == 2) {
	            this.uiPref = UiPrefMgr.get(PropsCfg.getPref(this.data.chain.cid));
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 115;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    updateBseData() {
	        if (!this.data)
	            return;
	        this.lblName.text = LanCfg.get(this.data.chain.name);
	        this.lblLv.text = LanCfg.get(this.data.chain.Rarity.Name);
	        this.levelLb.text = LanCfg.get("20013009") + this.data.chain.visibleLv;
	        this.desLb.text = LanCfg.get(this.data.chain.desc);
	    }
	    updateState() {
	        let state = this.data.state;
	        this.desLb.visible = false;
	        if (state == 2) {
	            this.findLb.visible = false;
	            this.lblLv.visible = true;
	            this.clickLb.visible = false;
	            this.goodIcon.visible = false;
	            this.bannerBg.visible = true;
	            this.lblName.visible = true;
	            this.desLb.visible = true;
	        }
	        else if (state == 1) {
	            this.findLb.visible = true;
	            this.lblLv.visible = false;
	            this.clickLb.visible = true;
	            this.findLb.text = LanCfg.get("20110009");
	            this.goodIcon.mouseEnabled = true;
	            this.bannerBg.visible = false;
	            this.lblName.visible = false;
	            this.goodIcon.skin = "res/skin/atlas/tujian_shuo.png";
	            this.showAnimation();
	        }
	        else {
	            this.findLb.visible = true;
	            this.lblLv.visible = false;
	            this.clickLb.visible = false;
	            this.findLb.text = "？？？";
	            this.goodIcon.mouseEnabled = false;
	            this.bannerBg.visible = false;
	            this.lblName.visible = false;
	            this.goodIcon.skin = "res/skin/atlas/tujian_shuo.png";
	        }
	    }
	    onClick() {
	        if (AtlasesMgr.isDiscover(this.data.chain.cid)) {
	            AtlasesMgr.unLockNewGoods(this.data.chain.breedId, this.data.chain.cid);
	            this.removeAni();
	        }
	    }
	    showAnimation() {
	        this.removeAni();
	        this.tweenFlag = new Laya.TimeLine();
	        this.tweenFlag.to(this.goodIcon, { scaleX: 1.2, scaleY: 1.2 }, 500, null);
	        this.tweenFlag.to(this.goodIcon, { scaleX: 1.0, scaleY: 1.0 }, 500, null);
	        this.tweenFlag.play(0, true);
	    }
	    removeAni() {
	        if (this.tweenFlag) {
	            this.tweenFlag.destroy();
	            this.tweenFlag = null;
	        }
	        this.goodIcon.scale(1, 1);
	    }
	    onDisable() {
	        this.clickHandler = null;
	        this.removeAni();
	    }
	}

	class AtlasSorItem extends ui.data.module.atlas.AtlasSorItemUI {
	    constructor() {
	        super();
	    }
	    onAwake() {
	        super.onAwake();
	    }
	    setData(vo, select) {
	        this.atlasData = vo;
	        this.imgNone.skin = "res/skin/dragon/jlxt_dan.png";
	        this.imgNone.visible = true;
	        this.breedesCfg = this.atlasData.breedCfg;
	        this.selected = select;
	        this.updateBaseData();
	        this.updateState();
	        this.showDragonPower();
	        this.showRedPoint();
	    }
	    updateBaseData() {
	        this.lblName.text = LanCfg.get(this.breedesCfg.shortName);
	        this.sortIcon.skin = "res/icon/dj001.png";
	        this.toolCount.text = this.atlasData.dragonPower.toString();
	        this.hasCount.text = "x" + this.atlasData.hasCount;
	    }
	    updateState() {
	        this.boxPref.removeChildren();
	        if (this.atlasData.isLock) {
	            if (this.uiPref) {
	                this.uiPref.dispose();
	                this.uiPref = null;
	            }
	            this.uiPref = UiPrefMgr.get(BreedsCfg.getPref(this.breedesCfg.cid));
	            this.uiPref.size(140, 140);
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 60;
	            this.boxPref.addChild(this.uiPref);
	            this.unlockBox.visible = true;
	            this.imgNone.visible = false;
	            this.lblName.visible = true;
	            if (this.selected) {
	                this.bgOne.visible = false;
	                this.bgTwo.visible = true;
	                this.bgThree.visible = false;
	            }
	            else {
	                this.bgOne.visible = true;
	                this.bgTwo.visible = false;
	                this.bgThree.visible = false;
	            }
	        }
	        else {
	            this.bgOne.visible = false;
	            this.bgTwo.visible = false;
	            this.bgThree.visible = true;
	            this.imgNone.skin = "res/skin/dragon/jlxt_dan.png";
	            this.unlockBox.visible = false;
	            this.lblName.visible = false;
	        }
	    }
	    showBg() {
	        let quality = this.breedesCfg.rarity;
	        if (quality >= 0 && quality <= 1) {
	            this.bgOne.visible = true;
	            this.bgTwo.visible = false;
	            this.bgThree.visible = false;
	        }
	        else if (quality >= 2 && quality <= 3) {
	            this.bgOne.visible = false;
	            this.bgTwo.visible = true;
	            this.bgThree.visible = false;
	        }
	        else {
	            this.bgOne.visible = false;
	            this.bgTwo.visible = false;
	            this.bgThree.visible = true;
	        }
	    }
	    showDragonPower() {
	        if (this.atlasData.atlasType == 1) {
	            this.sortIcon.visible = true;
	        }
	        else {
	            this.sortIcon.visible = false;
	        }
	    }
	    showRedPoint() {
	        let flag = AtlasesMgr.isDisNotUnlockData(this.atlasData.sortId);
	        if (flag) {
	            this.atlasRedPoint.visible = true;
	        }
	        else {
	            this.atlasRedPoint.visible = false;
	        }
	    }
	}

	class AtlasView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.selectIndex = -1;
	        this.tabFlag = false;
	    }
	    onAwake() {
	        super.onAwake();
	        this.atlasList.itemRender = AtlasContentItem;
	        this.atlasList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.atlasList.array = [];
	        this.atlasList.hScrollBarSkin = "";
	        this.atlasList.elasticEnabled = true;
	        this.tab.selectedIndex = -1;
	        this.tab.selectHandler = Laya.Handler.create(this, this.selectTab, null, false);
	        this.tab.mouseEnabled = true;
	        this.sortList.itemRender = AtlasSorItem;
	        this.sortList.renderHandler = Laya.Handler.create(this, this.sortRenderHandler, null, false);
	        this.sortList.array = [];
	        this.sortList.hScrollBarSkin = "";
	        this.sortList.elasticEnabled = true;
	        this.sortList.selectHandler = Laya.Handler.create(this, this.selectSort, null, false);
	        this.sortList.selectEnable = true;
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.addNoti();
	        this.getAtlasSortData();
	        this.atlasList.scrollBar.value = 0;
	        this.sortList.scrollBar.value = 1;
	        this.tabFlag = false;
	        this.selectTab(0);
	        this.selectSort(0);
	        if (arg && arg.genreId) {
	            this.unlockNewGoods(arg);
	        }
	        else {
	            let data = AtlasesMgr.disNotUnlockData;
	            if (data.length > 0) {
	                this.unlockNewGoods(data[0]);
	            }
	        }
	        this.showTabRedPoint();
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        this.pos(0, 0);
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.ATLAS_UNLOCHED, this.getAtlasSortData, this);
	        MsgCenter.listen(MsgConst.ATLAS_DISCOVER, this.unlockNewGoods, this);
	        MsgCenter.listen(MsgConst.ATLAS_UNLOCKEDGOODS, this.updateAtlasList, this);
	        MsgCenter.listen(MsgConst.ATLAS_UNLOCKEDGOODS, this.showTabRedPoint, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.ATLAS_UNLOCHED, this.getAtlasSortData, this);
	        MsgCenter.remove(MsgConst.ATLAS_DISCOVER, this.unlockNewGoods, this);
	        MsgCenter.listen(MsgConst.ATLAS_UNLOCKEDGOODS, this.updateAtlasList, this);
	        MsgCenter.remove(MsgConst.ATLAS_UNLOCKEDGOODS, this.showTabRedPoint, this);
	    }
	    renderHandler(cell, index) {
	        let lastIndex = this.atlasList.array.length - 1;
	        let isLastItem = false;
	        if (lastIndex == index) {
	            isLastItem = true;
	        }
	        else {
	            isLastItem = false;
	        }
	        cell.setData(cell.dataSource, isLastItem);
	    }
	    sortRenderHandler(cell, index) {
	        let selected = false;
	        if (this.selectIndex == index) {
	            selected = true;
	        }
	        cell.setData(cell.dataSource, selected);
	    }
	    hideItem() {
	        let data = this.sortList.array;
	        let lockAtlasNum = 0;
	        let arr = [];
	        data.some(item => {
	            let isLock = AtlasesMgr.isUnLockedBreed(item.sortId);
	            if (!isLock) {
	                lockAtlasNum++;
	            }
	            if (isLock || lockAtlasNum < 6) {
	                arr.push(item);
	            }
	            if (lockAtlasNum >= 6) {
	                return true;
	            }
	        });
	        this.sortList.array = arr;
	    }
	    getAtlasSortData() {
	        let data = AtlasesMgr.getAtlasData() ? AtlasesMgr.getAtlasData() : [];
	        let unLock = [];
	        let lock = [];
	        data.forEach(item => {
	            let flag = AtlasesMgr.isUnLockedBreed(item.sortId);
	            if (flag) {
	                unLock.push(item);
	            }
	            else {
	                lock.push(item);
	            }
	        });
	        this.sortList.array = unLock.concat(lock);
	    }
	    selectTab(index) {
	        if (index == -1) {
	            return;
	        }
	        this.tab.selectedIndex = index;
	        let arr = AtlasesMgr.sortByTabIndex(index);
	        this.sortList.array = arr;
	        this.hideItem();
	        if (!this.tabFlag) {
	            this.selectSort(0);
	            this.sortList.scrollBar.value = 0;
	            this.atlasList.scrollBar.value = 0;
	        }
	        this.setRedPointPos();
	    }
	    unlockNewGoods(obj) {
	        let data = AtlasesMgr.getAtlasData();
	        let flag = false;
	        let goodsIndex;
	        for (let i = 0; i < data.length; i++) {
	            let vo = data[i];
	            if (vo.sortId == obj.genreId) {
	                this.tabFlag = true;
	                this.sortList.array = AtlasesMgr.sortByTabIndex(vo.atlasType);
	                this.hideItem();
	                this.sortList.array.some((item, index) => {
	                    if (item.breedCfg.cid == obj.genreId) {
	                        this.selectSort(index);
	                        if (index > 8 && goodsIndex != index) {
	                            goodsIndex = index;
	                            let listVal = (index + 1) * 172 - this.sortList.height;
	                            this.sortList.scrollBar.value = listVal;
	                        }
	                        this.updateUnlock(obj.newGoodsId);
	                        flag = true;
	                        return true;
	                    }
	                });
	                if (flag) {
	                    break;
	                }
	            }
	            else {
	                this.tabFlag = false;
	            }
	        }
	    }
	    updateAtlasList(obj) {
	        let data = AtlasesMgr.getAtlasData();
	        for (let i = 0; i < data.length; i++) {
	            let vo = data[i];
	            if (vo.sortId == obj.genreId) {
	                this.sortList.array = AtlasesMgr.sortByTabIndex(vo.atlasType);
	                this.hideItem();
	                this.updateTabData(vo.atlasContent);
	                break;
	            }
	        }
	    }
	    selectSort(index) {
	        this.sortList.selectedIndex = index;
	        this.selectIndex = index;
	        if (index == -1)
	            return;
	        this.atlasList.scrollBar.value = 0;
	        this.updateSort(index);
	    }
	    updateSort(index) {
	        let data = this.sortList.array[index];
	        if (data) {
	            let vo;
	            let type = data.atlasType;
	            vo = data.atlasContent;
	            if (this.tabFlag) {
	                this.selectTab(type);
	            }
	            this.updateTabData(vo);
	        }
	    }
	    updateTabData(data) {
	        this.atlasList.array = data;
	    }
	    updateUnlock(goodsId) {
	        let data = this.atlasList.array;
	        let index = 0;
	        for (let i = 0; i < data.length; i++) {
	            let items = data[i];
	            if (items.chain.cid === goodsId) {
	                if (index != i) {
	                    index = i;
	                    let listVal = (i + 1) * 290 - this.atlasList.height;
	                    this.atlasList.scrollBar.value = listVal;
	                }
	                this.tabFlag = false;
	                break;
	            }
	        }
	    }
	    showTabRedPoint() {
	        let data = AtlasesMgr.disNotUnlockData;
	        let isGoods = false;
	        let isDragon = false;
	        if (data.length > 0) {
	            for (let i = 0; i < data.length; i++) {
	                let type = AtlasesMgr.getAtalsTypeById(data[i].genreId, data[i].newGoodsId);
	                if (type == 0) {
	                    isGoods = true;
	                }
	                if (type == 1) {
	                    isDragon = true;
	                }
	            }
	        }
	        if (isDragon) {
	            this.dragonRed.visible = true;
	        }
	        else {
	            this.dragonRed.visible = false;
	        }
	        if (isGoods) {
	            this.goodsRed.visible = true;
	        }
	        else {
	            this.goodsRed.visible = false;
	        }
	        this.setRedPointPos();
	    }
	    setRedPointPos() {
	        this.goodsRed.y = 6;
	        this.dragonRed.y = 6;
	        if (this.tab.selectedIndex == 0 && this.goodsRed.visible) {
	            this.goodsRed.y = -2;
	        }
	        else if (this.tab.selectedIndex == 1 && this.dragonRed.visible) {
	            this.dragonRed.y = -2;
	        }
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.removeNoti();
	        this.tabFlag = false;
	    }
	}

	class FirstChargItem extends ui.data.module.firstCharge.FirstChargItemUI {
	    constructor() {
	        super();
	    }
	    onAwake() {
	        super.onAwake();
	    }
	    setData(award, index) {
	        let str = award.split(",");
	        let pref = Number(str[1]);
	        let cfg = PropsCfg.get(pref);
	        let prefName = PropsCfg.getPref(pref);
	        let amount = Number(str[2]);
	        let type = Number(str[0]);
	        let isPref = type == 3;
	        this.desLb.y = 125;
	        this.imgIcon.visible = !isPref;
	        let msg = cfg ? LanCfg.get(cfg.desc) : "123";
	        if (isPref) {
	            if (this.uiPref) {
	                this.uiPref.setAmount(amount);
	                this.uiPref.setFloatTip(cfg.cid);
	                this.uiPref.setNid(prefName);
	            }
	            else {
	                this.uiPref = new BuyPrefItem(prefName, 100, 100, amount, cfg.cid);
	                this.uiPref.centerX = -10;
	                this.uiPref.top = 28;
	                this.boxPref.addChild(this.uiPref);
	            }
	            if (index != 0) {
	                this.desLb.y = 128;
	            }
	            this.desLb.text = LanCfg.get(cfg.name);
	        }
	        else {
	            this.imgIcon = PropItemMgr.ins().getTypeItem(type, true);
	            if (type === 1) {
	                this.desLb.text = LanCfg.get("20030306") + "×" + str[1];
	            }
	            else if (type === 2) {
	                this.desLb.text = LanCfg.get("20020022") + "×" + str[1];
	            }
	            this.imgIcon.size(90, 90);
	        }
	    }
	}

	class FirstChargeView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.getDiamonds = 0;
	    }
	    onAwake() {
	        super.onAwake();
	        this.boxArr = [this.box1, this.box2, this.box3];
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.buyBtn.on(Laya.Event.CLICK, this, this.onRecharge);
	        this.receiveBtn.on(Laya.Event.CLICK, this, this.getAward);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.addNoti();
	        this.data = FirstChargeMgr.getFirstGift();
	        this.showGoods();
	        this.showMoney();
	        this.setBtnState();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.FIRSTCHARGE_HASBUY, this.setBtnState, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.FIRSTCHARGE_HASBUY, this.setBtnState, this);
	    }
	    showMoney() {
	        let arr = this.data.award.split(",");
	        if (this.uiPref) {
	            this.uiPref.setNid(this.data.icon);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(this.data.icon, 230, 230, 1, 0, 1);
	            this.uiPref.centerX = 0;
	            this.uiPref.centerY = 5;
	            this.boxPref.addChild(this.uiPref);
	        }
	        this.boxPref.addChild(this.uiPref);
	        this.moneyNum.text = "×" + arr[1];
	        this.getDiamonds = Number(arr[1]);
	    }
	    showGoods() {
	        let data = FirstChargeMgr.getAwardData();
	        if (!data)
	            return;
	        for (let j = 0; j < this.boxArr.length; j++) {
	            let box = this.boxArr[j];
	            box.removeChildren();
	        }
	        for (let i = 0; i < data.length; i++) {
	            let item = new FirstChargItem();
	            this.boxArr[i].addChild(item);
	            item.setData(data[i], i);
	        }
	    }
	    setBtnState() {
	        let state = FirstChargeMgr.getBuyState();
	        if (state) {
	            this.receiveBtn.visible = true;
	            this.buyBtn.visible = false;
	        }
	        else {
	            this.receiveBtn.visible = false;
	            this.buyBtn.visible = true;
	        }
	    }
	    onRecharge() {
	        if (Platfrom.isWebGm) {
	            FirstChargeMgr.isBuyGift(true);
	        }
	        else {
	            ApiMgr.createOrder(this.data.cid, this.data.name);
	        }
	    }
	    getAward() {
	        FirstChargeMgr.isGetAward(true, this.getDiamonds);
	        this._closeUi();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.removeNoti();
	    }
	}

	class PromptView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.cancelBtn.on(Laya.Event.CLICK, this, this.cancelEvent);
	        this.okBtn.on(Laya.Event.CLICK, this, this.onClickEvent);
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnBuy.on(Laya.Event.CLICK, this, this.clickBuy);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.openData = arg;
	        this.titleLb.text = this.openData.title;
	        this.msgLb.text = this.openData.msg;
	        this.cancelBtn.visible = arg.isCancel;
	        this.cancelBtn.label = arg.cancelTxt;
	        this.okBtn.label = arg.okTxt;
	        this.msgLb.fontSize = arg.msgLbSize;
	        this.msgLb.align = arg.txtAlign;
	        this.awardBox.visible = false;
	        if (this.openData.awardList) {
	            this.showAward();
	        }
	    }
	    onClickEvent() {
	        if (this.openData.okAndClose) {
	            this._closeUi();
	        }
	        if (this.openData.handler) {
	            this.openData.handler.run();
	            this._closeUi();
	        }
	    }
	    cancelEvent() {
	        if (this.openData.cancelHandler) {
	            this.openData.cancelHandler.run();
	        }
	        this._closeUi();
	    }
	    showAward() {
	        if (this.openData.awardList) {
	            if (this.openData.isBuy) {
	                this.diamondBg.visible = false;
	                this.commonBox.visible = false;
	                this.awardBox.visible = true;
	                this.btnBuy.visible = true;
	                let id = Number(this.openData.awardList);
	                let prefName = PropsCfg.getPref(id);
	                if (this.uiPref) {
	                    this.uiPref.setNid(prefName);
	                }
	                else {
	                    this.uiPref = UiPrefMgr.get(prefName);
	                    this.uiPref.top = 10;
	                    this.uiPref.centerX = 5;
	                    this.awardBox.addChild(this.uiPref);
	                }
	                this.lblCost.text = this.openData.cost.toString();
	            }
	            else {
	                this.awardBox.visible = false;
	                this.diamondBg.visible = true;
	                this.commonBox.visible = true;
	                this.btnBuy.visible = false;
	            }
	        }
	    }
	    clickBuy() {
	        if (CurrencyMgr.ins().isEnough(ECurrency.Diamond, this.openData.cost)) {
	            this.onClickEvent();
	            CurrencyMgr.ins().credit(ECurrency.Diamond, -this.openData.cost);
	            this._closeUi();
	        }
	        else {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	        }
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	}

	class WorldChallengeEnter extends WorldEnterBase {
	    constructor() {
	        super(...arguments);
	        this.uiPrefs = [];
	    }
	    isFinished() {
	        return this.vo.ChallengeStars >= 3;
	    }
	    setEnterTxt() {
	        super.setEnterTxt();
	        if (this.isFinished()) {
	            this.btnEnter.label = "已完成挑战";
	        }
	    }
	    checkAnim() {
	        if (CurrencyMgr.ins().CanAfford(ECurrency.Energy, this.vo.energy) && !this.isFinished()) {
	            this.timeLine.play(0, true);
	        }
	    }
	    updateInfo() {
	        super.updateInfo();
	        this.btnEnter.disabled = this.isFinished();
	        this.setLevelTitle();
	        this.setTime();
	        this.setPower();
	        this.setEnterTxt();
	        for (let i = 0; i < 3; i++) {
	            this.setStarBox(i);
	        }
	    }
	    setTime() {
	        let timesWon = this.vo.TimesWon;
	        let value = this.vo.GetChallengeTimeLimit(timesWon);
	        let time = TimeMgr.ins().formatTimer2(value);
	        this.lblTime.text = StringUtil.format(LanCfg.get("20020015"), time);
	    }
	    setStarBox(index) {
	        let vo = this.vo;
	        let box = this["boxStar" + index];
	        let isCompleted = vo.HasCompleteChallenge(index);
	        let lblName = box.getChildByName("lblName");
	        let imgDesc = box.getChildByName("imgDesc");
	        let imgIcon1 = imgDesc.getChildByName("imgIcon1");
	        let imgIcon2 = imgDesc.getChildByName("imgIcon2");
	        let lblDragon = imgDesc.getChildByName("lblDragon");
	        let imgMedal = box.getChildByName("imgMedal");
	        let imgDragon = box.getChildByName("imgDragon");
	        imgMedal.visible = isCompleted;
	        imgIcon1.visible = isCompleted;
	        imgIcon2.visible = isCompleted;
	        imgDragon.visible = !isCompleted;
	        lblName.text = StringUtil.format(LanCfg.get("20020016"), index);
	        if (isCompleted) {
	            let value = vo.GetChallengeTimeLimit(index);
	            lblDragon.text = TimeMgr.ins().formatTimer2(value);
	        }
	        else {
	            let reward = vo.GetChallengeReward(index);
	            if (this.uiPrefs[index]) {
	                this.uiPrefs[index].setNid(reward.pref);
	            }
	            else {
	                this.uiPrefs[index] = UiPrefMgr.get(reward.pref);
	                this.uiPrefs[index].centerX = 0;
	                this.uiPrefs[index].centerY = 0;
	                imgDragon.addChild(this.uiPrefs[index]);
	            }
	            lblDragon.text = reward.name + (reward.isAMonsterDef ? "\n" + LanCfg.get("20020003") + ": " + reward.dragonPower : "");
	        }
	    }
	}

	class WorldPropView extends BaseModal {
	    onAwake() {
	        super.onAwake();
	        this.btnOk.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.setTitle(arg.title);
	        this.lblDesc.text = arg.desc;
	        this.imgIcon.skin = arg.prefName;
	        let scale = 100 / this.imgIcon.height;
	        this.imgIcon.scale(scale, scale);
	    }
	}

	class ThingActionView extends BaseModal {
	    onSure() {
	        let handler = this.arg.handler;
	        handler && handler.run();
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnSure.on(Laya.Event.CLICK, this, this.onSure);
	        this.btnCancel.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    updateTitle(name, isDel) {
	        let titleFormat = isDel ? LanCfg.get("20010019") : LanCfg.get("20010017");
	        this.setTitle(StringUtil.format(titleFormat, name));
	    }
	    updateTip(name, isDel, price) {
	        let str = "";
	        if (isDel) {
	            str = StringUtil.format(LanCfg.get("20010020"), name);
	        }
	        else {
	            str = StringUtil.format(LanCfg.get("20010018"), price, name);
	        }
	        this.lblTip.text = str;
	    }
	    updatePref(name) {
	        if (this.uiPref) {
	            this.uiPref.setNid(name);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(name);
	            this.uiPref.centerX = 0;
	            this.uiPref.top = 15;
	            this.imgContent.addChild(this.uiPref);
	        }
	    }
	    openUi(args) {
	        super.openUi(args);
	        let thing = args.thing;
	        let name = thing.cfg.name;
	        let price = thing.sellValue;
	        let isDel = thing.sellValue === 0;
	        this.updateTitle(name, isDel);
	        this.updateTip(name, isDel, price);
	        this.updatePref(thing.cfg.pref);
	    }
	}

	class LevelLootInfo extends BaseModal {
	    openUi(rewardCount) {
	        super.openUi(rewardCount);
	        this.lblRedPoint.text = rewardCount.toString();
	        this.lblDesc.text = StringUtil.format(LanCfg.get("20013012"), rewardCount);
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnOk.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	}

	class ProPopupBase {
	    constructor() {
	        this.width = 575;
	        this.height = 440;
	        this.title = LanCfg.get("每日龙晶");
	        this.msgLbSize = 18;
	        this.txtAlign = "center";
	    }
	}

	class ProPopupData extends ProPopupBase {
	    constructor() {
	        super();
	        this.isCancel = true;
	        this.okAndClose = false;
	        this.okTxt = LanCfg.get("10010003");
	        this.cancelTxt = LanCfg.get("10010002");
	        this.isBuy = false;
	        this.cost = 0;
	    }
	}

	class EggItem extends ui.data.module.eggTreasury.EggItemUI {
	    onAwake() {
	        super.onAwake();
	        this.boxPref.on(Laya.Event.CLICK, this, this.onClickEvent);
	    }
	    setData(vo, index) {
	        this.data = vo;
	        this.itemIndex = index;
	        if (vo) {
	            this.addPref(vo.eggId);
	            this.updateEggState();
	        }
	        else {
	            if (this.uiPref) {
	                this.uiPref.visible = false;
	            }
	        }
	    }
	    updateEggState() {
	        let isLock = this.data.eggId;
	        if (isLock == BankItemVO.Normal || isLock == BankItemVO.Decision) {
	            this.clickLb.visible = true;
	            this.showAnimation();
	        }
	        else {
	            this.clickLb.visible = false;
	        }
	    }
	    onClickEvent() {
	        if (this.data == null) {
	            return;
	        }
	        else {
	            let isExit = BankItemVO.isUnopened(this.data.eggId);
	            if (isExit) {
	                let eggContent = BankMgr.ins().getEggContent(0);
	                let id;
	                let flag = false;
	                if (eggContent.Selector == 1 && BankMgr.ins().getCollectedEggsCount() > 0) {
	                    id = BankMgr.ins().getRandomEggName();
	                }
	                else if (PropsCfg.isHasCfg(eggContent.dropList)) {
	                    id = PropsCfg.isHasCfg(eggContent.dropList);
	                    flag = true;
	                }
	                else {
	                    let categories = PropCfgVo.getCategories(eggContent.dropList);
	                    let list = PropsCfg.getCategories(categories);
	                    id = GameUtil.random(list).cid;
	                    flag = true;
	                }
	                BankItemVO.updateName(this.data, id);
	                this.addPref(id);
	                if (flag = true && id != BankItemVO.Normal) {
	                    this.moveAnimation(id);
	                    if (id == BankItemVO.Decision) {
	                        SoundMgr.ins().playSound("m223");
	                    }
	                    else {
	                        SoundMgr.ins().playSound("m231");
	                    }
	                }
	            }
	            else if (BankItemVO.isDecision(this.data.eggId)) {
	                this.openSelectEggView();
	                SoundMgr.ins().playSound("m231");
	                SoundMgr.ins().playSound("m224");
	            }
	            else {
	                this.openEggInfoView();
	            }
	        }
	    }
	    addPref(id) {
	        this.prefId = id;
	        let prefName = PropsCfg.getPref(id);
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	            this.uiPref.visible = true;
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(prefName);
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 50;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    openEggInfoView() {
	        LayerMgr.ins().open(UiConst.DragonEggInfoView, this.prefId);
	    }
	    openSelectEggView() {
	        BankMgr.ins().selectIndex = this.itemIndex;
	        LayerMgr.ins().open(UiConst.SelectDragonEggView);
	    }
	    showAnimation() {
	        this.removeAni();
	        this.tweenFlag = new Laya.TimeLine();
	        this.tweenFlag.to(this.clickLb, { scaleX: 1.2, scaleY: 1.2 }, 500, null);
	        this.tweenFlag.to(this.clickLb, { scaleX: 1.0, scaleY: 1.0 }, 500, null);
	        this.tweenFlag.play(0, true);
	    }
	    removeAni() {
	        if (this.tweenFlag) {
	            this.tweenFlag.destroy();
	            this.tweenFlag = null;
	        }
	        this.clickLb.scale(1, 1);
	    }
	    moveAnimation(id) {
	        this.addFloatLabel();
	        let endY = 40;
	        let cfg = PropsCfg.get(id);
	        let cfgName = LanCfg.get(cfg.name);
	        let msg = StringUtil.format(LanCfg.get("20110008"), cfgName);
	        if (this.lab) {
	            this.lab.text = msg;
	            Laya.timer.once(200, this, () => {
	                Laya.Tween.to(this.lab, { y: endY }, 1000, Laya.Ease.elasticOut, Laya.Handler.create(this, () => {
	                    this.lab.destroy();
	                }));
	            });
	        }
	    }
	    addFloatLabel() {
	        if (this.lab) {
	            this.lab.destroy();
	        }
	        this.lab = new HtmlLabel();
	        this.addChild(this.lab);
	        this.lab.bold = true;
	        this.lab.fontSize = 30;
	        this.lab.color = "#33A424";
	        this.lab.stroke = 1;
	        this.lab.strokeColor = "#000000";
	        this.lab.size(120, 29);
	        this.lab.pos(0, 80);
	    }
	    onDisable() {
	        this.removeAni();
	    }
	}

	class EggTreasuryView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("20110000");
	        this.descLb.text = LanCfg.get("20110001");
	        this.buyLb.text = LanCfg.get("20110003");
	        this.eggList.itemRender = EggItem;
	        this.eggList.array = [];
	        this.eggList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.slotArr = [this.luCao1, this.luCao2, this.luCao3, this.luCao4, this.luCao5, this.luCao6];
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onClickBuyEgg);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        SoundMgr.ins().playSound("m229");
	        this.addNoti();
	        this.getEgg();
	        this.showEgg();
	        this.lblCost.text = BankMgr.ins().getCost().toString();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.EGGBANK_HASEGG, this.getEgg, this);
	        MsgCenter.listen(MsgConst.BANCKEGG_UPDATE, this.getEgg, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.EGGBANK_HASEGG, this.getEgg, this);
	        MsgCenter.remove(MsgConst.BANCKEGG_UPDATE, this.getEgg, this);
	    }
	    renderHandler(cell, index) {
	        cell.setData(cell.dataSource, index);
	    }
	    getEgg() {
	        let arr = [];
	        for (let i = 0; i < 6; i++) {
	            let vo = BankMgr.ins().getEggAt(i);
	            arr.push(vo);
	        }
	        this.eggList.array = arr;
	        this.setEggSlot();
	        this.btnBuy.gray = !(!BankMgr.ins().hasDecisionEggs() && !BankMgr.ins().hasUnopenedEggs());
	    }
	    init() {
	        this.slotArr.forEach(item => {
	            item.visible = false;
	        });
	    }
	    setEggSlot() {
	        this.init();
	        let arr = this.eggList.array;
	        for (let i = 0; i < this.slotArr.length; i++) {
	            let vo = arr[i];
	            if (vo != null) {
	                this.slotArr[i].visible = true;
	            }
	            else {
	                this.slotArr[i].visible = false;
	            }
	        }
	        let notEnough = BankCfg.MaxSize - BankMgr.ins().getCollectedEggsCount();
	        let isFull = BankMgr.ins().isFull();
	        if (isFull) {
	            this.tipsLb.text = LanCfg.get("20110005");
	        }
	        else {
	            this.tipsLb.text = StringUtil.format(LanCfg.get("20110002"), notEnough);
	        }
	    }
	    showEgg() {
	        let perfName = PropsCfg.getPref(10504);
	        if (this.uiPref) {
	            this.uiPref.setNid(perfName);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(perfName);
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 35;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    onClickBuyEgg() {
	        let arg = new ProPopupData();
	        arg.title = LanCfg.get("20110006");
	        arg.msg = StringUtil.format(LanCfg.get("20110007"), 150);
	        arg.awardList = "10504";
	        arg.isBuy = true;
	        arg.cost = 150;
	        arg.handler = Laya.Handler.create(this, () => {
	            BankMgr.ins().getMysteryEgg();
	            ApiMgr.addYbRecord(arg.cost, LogCostType.EggBank);
	            this._closeUi();
	        });
	        LayerMgr.ins().open(UiConst.PromptView, arg);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.removeNoti();
	    }
	}

	class SelectEggItem extends ui.data.module.eggTreasury.SelectEggItemUI {
	    constructor() {
	        super(...arguments);
	        this.isSel = false;
	    }
	    onAwake() {
	        super.onAwake();
	    }
	    setData(id, isSelect) {
	        let cfg = PropsCfg.get(id);
	        this.data = cfg;
	        this.isSel = isSelect;
	        this.updateBaseInfo();
	        this.addPref();
	        this.updateState();
	    }
	    updateBaseInfo() {
	        this.eggName.text = LanCfg.get(this.data.name);
	        let rarity = this.data.Rarity;
	        this.lblLv.text = LanCfg.get(rarity.Name);
	    }
	    addPref() {
	        if (!this.data)
	            return;
	        let id = this.data.cid;
	        let prefName = PropsCfg.getPref(id);
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(prefName);
	            this.uiPref.top = 118;
	            this.uiPref.centerX = 5;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    updateState() {
	        if (this.isSel) {
	            this.effBg.visible = true;
	            this.selectedBg.visible = true;
	        }
	        else {
	            this.effBg.visible = false;
	            this.selectedBg.visible = false;
	        }
	    }
	}

	class SelectDragonEggView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.selectedIndex = -1;
	    }
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("20110004");
	        this.eggList.itemRender = SelectEggItem;
	        this.eggList.array = [];
	        this.eggList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.selectedIndex = -1;
	        this.eggList.selectHandler = Laya.Handler.create(this, this.slecetEgg, null, false);
	        this.eggList.selectEnable = true;
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.okBtn.on(Laya.Event.CLICK, this, this.onClickSelect);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.getSelectEgg();
	    }
	    renderHandler(cell, index) {
	        let isSelect = false;
	        if (this.selectedIndex == index) {
	            isSelect = true;
	        }
	        cell.setData(cell.dataSource, isSelect);
	    }
	    getSelectEgg() {
	        let arr = [];
	        for (let i = 0; i < 3; i++) {
	            let id = BankMgr.ins().getEgg(i + 1);
	            arr.push(id);
	        }
	        this.eggList.array = arr;
	    }
	    slecetEgg(index) {
	        this.eggList.selectedIndex = index;
	        this.selectedIndex = index;
	        SoundMgr.ins().playSound("m230");
	    }
	    onClickSelect() {
	        let index = this.selectedIndex;
	        let id;
	        let data = this.eggList.array;
	        for (let i = 0; i < data.length; i++) {
	            if (index == i) {
	                id = data[i];
	                break;
	            }
	        }
	        if (!id) {
	            this._closeUi();
	            return;
	        }
	        BankMgr.ins().updateEgg(id, BankMgr.ins().selectIndex);
	        BankMgr.ins().selectIndex = null;
	        this._closeUi();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	}

	class DragonEggInfoView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.okBtn.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.data = arg;
	        this.setBaseInfo();
	        this.addPref();
	    }
	    setBaseInfo() {
	        let id = this.data;
	        let cfg = PropsCfg.get(id);
	        let prefName = LanCfg.get(cfg.name);
	        let des = LanCfg.get(cfg.desc);
	        this.eggName.text = prefName;
	        this.descLb.text = des;
	        let rarity = cfg.Rarity;
	        this.lblLv.text = LanCfg.get(rarity.Name);
	        this.okBtn.label = LanCfg.get("10010003");
	    }
	    addPref() {
	        if (!this.data)
	            return;
	        let id = this.data;
	        let prefName = PropsCfg.getPref(id);
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(prefName);
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 35;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	}

	class ChallengeSettleView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.uiLocked = false;
	        this.doubleCost = 0;
	        this.rewardProp = null;
	    }
	    updateTime() {
	        let timeTaken = Math.round(Math.max(GGChallengeLevelController.ins().TotalTimeTaken, 0));
	        this.lblTime.text = TimeMgr.ins().formatTimer2(timeTaken);
	    }
	    updateDesc(name, power) {
	        this.lblName.text = name;
	        this.lblDragonPower.visible = power > 0;
	        this.lblDragonPower.visible && (this.lblDragonPower.text = power + LanCfg.get("20020003"));
	    }
	    updateCost(val) {
	        this.lblDouble.text = val.toString();
	    }
	    updatePrefs(name) {
	        this.uiPref = this.setPerf(this.uiPref, name);
	        this.uiPref2 = this.setPerf(this.uiPref2, name);
	    }
	    initReward() {
	        this.uiPref.centerX = 0;
	        this.uiPref2.visible = false;
	    }
	    setPerf(pref, name) {
	        if (pref) {
	            pref.setNid(name);
	        }
	        else {
	            pref = UiPrefMgr.get(name);
	            pref.centerX = 0;
	            pref.centerY = -30;
	            this.imgContent.addChild(pref);
	        }
	        return pref;
	    }
	    onClickPick() {
	        if (!this.uiLocked) {
	            let rewardProp = this.rewardProp;
	            SaveLoad.AddItemToSavedBringHomeRewards(rewardProp.cid);
	            this.uiLocked = true;
	            this.returnToMapAfterDelay(500);
	        }
	    }
	    onClickDouble() {
	        if (!this.uiLocked) {
	            let doubleCost = this.doubleCost;
	            let rewardProp = this.rewardProp;
	            if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, doubleCost)) {
	                CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	                return;
	            }
	            CurrencyMgr.ins().charge(ECurrency.Diamond, doubleCost);
	            ApiMgr.addYbRecord(doubleCost, LogCostType.ChallengeDouble);
	            SaveLoad.AddItemToSavedBringHomeRewards(rewardProp.cid);
	            SaveLoad.AddItemToSavedBringHomeRewards(rewardProp.cid);
	            this.uiLocked = true;
	            this.showDoubleDragonEffect();
	            Tween.ShakeCamera_Scale(2);
	        }
	    }
	    showDoubleDragonEffect() {
	        this.uiPref2.visible = true;
	        Laya.Tween.to(this.uiPref, { centerX: -110 }, 1000);
	        Laya.Tween.to(this.uiPref2, { centerX: 110 }, 1000);
	        this.returnToMapAfterDelay(2500);
	    }
	    returnToMapAfterDelay(delayInSeconds) {
	        Laya.timer.once(delayInSeconds, this, () => {
	            Glob.currentLevel && Glob.currentLevel.bringHomeMenuDone();
	            LayerMgr.ins().close(UiConst.ChallengeSettleView);
	        });
	    }
	    onAwake() {
	        super.onAwake();
	        this.bgClickClose = false;
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        if (Glob.currLevelData == null) {
	            this.returnToMapAfterDelay(500);
	            return;
	        }
	        let challengeData = Glob.currLevelData.GetChallengeV2Data();
	        if (challengeData == null) {
	            this.returnToMapAfterDelay(500);
	            return;
	        }
	        let reward = challengeData.Reward;
	        this.rewardProp = reward;
	        this.doubleCost = challengeData.RewardDupeCostGems;
	        this.updateCost(challengeData.RewardDupeCostGems);
	        this.updatePrefs(reward.pref);
	        this.updateDesc(reward.name, reward.isAMonsterDef ? reward.dragonPower : 0);
	        this.updateTime();
	        this.initReward();
	        this.btnPick.once(Laya.Event.CLICK, this, this.onClickPick);
	        this.btnDouble.once(Laya.Event.CLICK, this, this.onClickDouble);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.uiLocked = false;
	        this.rewardProp = null;
	    }
	}

	class ChallengeAddTimeView extends BaseModal {
	    updateDesc() {
	        let desc = "";
	        let time = GGChallengeLevelController.ins().GetTimeAwarded();
	        let second = time % 60;
	        let minute = Math.round(time / 60);
	        if (time < 60) {
	            desc = StringUtil.format(LanCfg.get("20013018"), second);
	        }
	        else if (time % 60 === 0) {
	            desc = StringUtil.format(LanCfg.get("20013019"), minute);
	        }
	        else {
	            desc = StringUtil.format(LanCfg.get("20013020"), minute, second);
	        }
	        this.lblDesc.text = desc;
	    }
	    updateCost() {
	        let cost = GGChallengeLevelController.ins().GetTimeBoostCost();
	        let isFree = cost == 0;
	        this.imgFree.visible = isFree;
	        this.spFreeLine.visible = isFree;
	        this.lblCost.text = isFree ? "50" : cost.toString();
	    }
	    onTouchOk() {
	        this._closeUi();
	        GGChallengeLevelController.ins().OnExtraTimePurchased();
	    }
	    onCloseCall() {
	        if (this.isShow) {
	            this.cancelHandler && this.cancelHandler.run();
	            this.cancelHandler = null;
	        }
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.updateCost();
	        this.updateDesc();
	        this.btnOk.once(Laya.Event.CLICK, this, this.onTouchOk);
	        this.cancelHandler = Laya.Handler.create(this, () => {
	            GGChallengeLevelController.ins().OnExtraTimeCancelled();
	        });
	    }
	}

	class ChallengeClockView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.count = 3;
	    }
	    startClock() {
	        this.updateClock();
	        this.timer.loop(1000, this, this.updateClock);
	    }
	    updateClock() {
	        if (this.count === 0) {
	            this.timer.clearAll(this);
	            this._closeUi();
	        }
	        this.lblTimer.text = this.count.toString();
	        this.count--;
	    }
	    onAwake() {
	        super.onAwake();
	        this.showBlackBG = false;
	        this.bgClickClose = false;
	    }
	    _closeUi() {
	        SoundMgr.ins().playSound("ui_tongyong");
	        LayerMgr.ins().closeUi(this.name);
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.count = 3;
	        this.startClock();
	    }
	}

	class DepContainer extends Laya.Sprite {
	    constructor() {
	        super();
	        this.dep = 0;
	        this.list = [];
	        this.childIndex = -1;
	        this.dc = 0;
	    }
	    depAddChild(sp) {
	        this._depAddChild(sp);
	    }
	    _depAddChild(sp) {
	        var list = this.list;
	        if (this.dc) {
	            ArrayUtil.cleannull(list);
	            this.dc = 0;
	        }
	        var rightindex = list.length;
	        let i = 0;
	        for (; i < rightindex; i++) {
	            var min = list[i];
	            if (sp.dep <= min.dep) {
	                break;
	            }
	        }
	        var max = this.numChildren;
	        if (i > max)
	            i = max;
	        super.addChildAt(sp, i);
	        ArrayUtil.insert(list, sp, i);
	        sp.childIndex = i;
	    }
	    depRemoveChild(sp) {
	        super.removeChild(sp);
	        var index = this.list.indexOf(sp);
	        this.list[index] = null;
	        this.dc++;
	        if (this.dc >= 5) {
	            ArrayUtil.cleannull(this.list);
	            this.dc = 0;
	        }
	    }
	    sortChild() {
	        var list = this.list;
	        list.sort(this.sortFunc);
	        var len = list.length;
	        for (var i = 0; i < len;) {
	            var sp = list[i];
	            if (sp) {
	                if (this["_children"].indexOf(sp) != i) {
	                    sp.childIndex = i;
	                    this.setChildIndex(sp, i);
	                }
	                i++;
	            }
	            else {
	                len--;
	            }
	        }
	    }
	    sortFunc(a, b) {
	        if (!a) {
	            return 1;
	        }
	        if (!b) {
	            return -1;
	        }
	        return a.dep - b.dep;
	    }
	}

	class EffectMgr extends Singleton {
	    constructor() {
	        super();
	        this.list = [];
	        this.invalid = 0;
	        this.useDep = false;
	        this.topDep = 1000000;
	        this.last = 0;
	        this.setTimer(Laya.timer);
	    }
	    setTimer(timer) {
	        this._timer = timer;
	    }
	    addEff(key, parent, x, y, interval, time = -1, loop = false, act = null, dir = 0, atlas = null, depType = 0) {
	        if (atlas)
	            atlas = "effect/" + atlas;
	        var ret = PartMgr.refer("effect/" + key, atlas);
	        if (act == null) {
	            act = "eff";
	        }
	        if (dir == null) {
	            dir = 0;
	        }
	        ret.currDir = dir;
	        ret.currAction = act;
	        ret.aniInterv = interval;
	        ret.startTime = this._timer.currTimer;
	        ret.loop = loop;
	        if (time != -1) {
	            ret.endTime = ret.startTime + time;
	        }
	        else {
	            ret.endTime = Number.MAX_VALUE;
	        }
	        if (this.list.length == 0) {
	            this._timer.loop(50, this, this.update);
	        }
	        ret.pos(x, y);
	        if (this.useDep && parent instanceof DepContainer) {
	            if (depType == 1) {
	                ret.dep = this.topDep++;
	            }
	            else if (depType == 2) {
	                ret.dep = 0;
	            }
	            else {
	                ret.dep = y + 1;
	            }
	            parent.depAddChild(ret);
	        }
	        else {
	            if (depType == 1) {
	                parent.addChild(ret);
	            }
	            else if (depType == 2) {
	                parent.addChildAt(ret, 0);
	            }
	            else {
	                parent.addChild(ret);
	            }
	        }
	        this.list.push(ret);
	        ret.start();
	        return ret;
	    }
	    removeEff(eff) {
	        var index = this.list.indexOf(eff);
	        if (index != -1) {
	            this.list[index] = null;
	            if (!(this.invalid & 1)) {
	                this.invalid |= 1;
	                this._timer.once(1000, this, this.clearList);
	            }
	        }
	        eff.stop();
	        if (this.useDep && eff.parent instanceof DepContainer) {
	            eff.parent.depRemoveChild(eff);
	        }
	        eff.dispose();
	    }
	    clearList() {
	        ArrayUtil.cleannull(this.list);
	        this.invalid = 0;
	        if (this.list.length == 0) {
	            this._timer.clear(this, this.update);
	        }
	    }
	    update(e) {
	        var now = this._timer.currTimer;
	        if (now - this.last >= 70) {
	            this.last = now;
	        }
	        var list = this.list;
	        for (var i = 0, len = list.length; i < len; i++) {
	            var part = list[i];
	            if (!part) {
	                continue;
	            }
	            if (now > part.endTime) {
	                this.removeEff(part);
	                continue;
	            }
	        }
	    }
	}

	class TutorialFocusView extends BaseView {
	    onClick() {
	        LayerMgr.ins().close(this.name);
	        let handler = this.data.handler;
	        handler && handler.run();
	    }
	    onAwake() {
	        super.onAwake();
	        this.showBlackBG = false;
	        this.bgClickClose = false;
	        this.container.cacheAs = "bitmap";
	        this.interactionArea.blendMode = "destination-out";
	        this.guideContainerHitArea = new Laya.HitArea();
	        this.container.hitArea = this.guideContainerHitArea;
	        this.container.mouseEnabled = true;
	        this.container.on(Laya.Event.CLICK, this, this.onClick);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.data = arg;
	        let monster = PropsCfg.get(50000);
	        if (arg.showGuider) {
	            this.marker = UiPrefMgr.get(monster.pref, 200, 200);
	            this.marker.scaleX = -1;
	            this.marker.right = 280;
	            this.marker.centerY = 0.5;
	            this.boxTip.addChild(this.marker);
	        }
	        this.focus();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        Laya.Tween.clearAll(this.imgArrow);
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    playArrow() {
	        Laya.Tween.to(this.imgArrow, { y: 0 }, 700, null, Laya.Handler.create(this, () => {
	            Laya.Tween.to(this.imgArrow, { y: 35 }, 700, null, Laya.Handler.create(this, () => {
	                this.playArrow();
	            }));
	        }));
	    }
	    focus() {
	        if (!this.data || !this.data.target)
	            return;
	        let target = this.data.target;
	        let point = Laya.Point.create();
	        target.localToGlobal(point);
	        this.globalToLocal(point);
	        let rect = target.getBounds();
	        let x = point.x;
	        let y = point.y;
	        let w = rect.width * target.globalScaleX;
	        let h = rect.height * target.globalScaleY;
	        if (this.data.showGuider) {
	            this.boxTip.x = point.x + w / 2;
	            this.boxTip.y = point.y - 20;
	            this.boxTip.visible = true;
	            this.playArrow();
	        }
	        else {
	            Laya.Tween.clearAll(this.imgArrow);
	            this.boxTip.visible = false;
	        }
	        let effX = point.x + w / 2;
	        let effY = point.y + h / 2;
	        if (this.effect) {
	            this.effect.pos(effX, effY);
	        }
	        else {
	            this.effect = EffectMgr.ins().addEff("zhiyin", this, effX, effY, 920, -1, true, "eff");
	        }
	        this.interactionArea.pos(x, y);
	        this.interactionArea.size(w, h);
	        this.guideContainerHitArea.hit.clear();
	        this.guideContainerHitArea.hit.drawRect(x, y, w, h, "#000000");
	    }
	}

	class ChallengeExitView extends BaseModal {
	    onClickShop() {
	        LayerMgr.ins().open(UiConst.ShopView);
	        LayerMgr.ins().close(this.name);
	    }
	    onClickTime() {
	        LayerMgr.ins().open(UiConst.ChallengeAddTimeView);
	        LayerMgr.ins().close(this.name);
	    }
	    onClickExit() {
	        LayerMgr.ins().open(UiConst.LevelQuitView);
	        LayerMgr.ins().close(this.name);
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnExit.on(Laya.Event.CLICK, this, this.onClickExit);
	        this.btnGoShop.on(Laya.Event.CLICK, this, this.onClickShop);
	        this.btnAddTime.on(Laya.Event.CLICK, this, this.onClickTime);
	    }
	}

	class SettingItem extends ui.data.module.setting.SettingItemUI {
	    constructor() {
	        super();
	    }
	    onAwake() {
	        super.onAwake();
	        this.soundBox.on(Laya.Event.CLICK, this, this.event_SoundToggled);
	        this.effSoundBox.on(Laya.Event.CLICK, this, this.event_MusicToggled);
	        this.courseBox.on(Laya.Event.CLICK, this, this.event_TutorialToggled);
	        this.btnReSet.on(Laya.Event.CLICK, this, this.event_ResetTutorialTapped);
	        this.buyBox.on(Laya.Event.CLICK, this, this.event_NoPurchaseModeToggled);
	        this.notiBox.on(Laya.Event.CLICK, this, this.event_NotificationsToggled);
	        this.okBox.on(Laya.Event.CLICK, this, this.event_TapConfirmToggled);
	        this.btnPowerSave.on(Laya.Event.CLICK, this, this.event_BatterySettingsTapped);
	        this.btnLang.on(Laya.Event.CLICK, this, this.event_LanguageTapped);
	        this.btnBox.on(Laya.Event.CLICK, this, this.event_CampMergeOverlapToggled);
	        this.btnCode.on(Laya.Event.CLICK, this, this.onClick_CRMRedeemCode);
	        this.chainMergeBox.on(Laya.Event.CLICK, this, this.event_CampAllowChainReactionsToggled);
	        this.merge5Box.on(Laya.Event.CLICK, this, this.event_PreferMerge5Toggled);
	        this.notiLb.visible = false;
	    }
	    initUI() {
	        let sound = SettingMgr.soundIsOn;
	        this.playToggleBtn(sound, this.onBg, this.offBg);
	        let effectOn = SettingMgr.soundEffIsOn;
	        this.playToggleBtn(effectOn, this.effectOn, this.effectOff);
	        let tutorial = SettingMgr.tutorialIsOn;
	        this.playToggleBtn(tutorial, this.courseOn, this.courseOff);
	        let noPurchase = SettingMgr.noPurchaseIsOn;
	        this.playToggleBtn(noPurchase, this.buyOn, this.buyOff);
	        let noti = SettingMgr.notiIsOn;
	        this.playToggleBtn(noti, this.notiOn, this.notiOff);
	        let okIsOn = SettingMgr.okIsOn;
	        this.playToggleBtn(okIsOn, this.okOn, this.okOff);
	        let campMerge = Glob.campMergeRequiresOverlapToInitiate;
	        this.playToggleBtn(campMerge, this.mergeOverOn, this.mergeOverOff);
	        let chainMerge = Glob.campAllowChainReactions;
	        this.playToggleBtn(chainMerge, this.chainMergeOn, this.chainMergeOff);
	        let merge5 = Glob.preferDragonMerge5;
	        this.playToggleBtn(merge5, this.merge5On, this.merge5Off);
	        this.updateLang();
	    }
	    onEnable() {
	        this.initUI();
	        MsgCenter.listen(MsgConst.UPDATE_LANGCODE, this.updateLang, this);
	    }
	    onDisable() {
	        MsgCenter.remove(MsgConst.UPDATE_LANGCODE, this.updateLang, this);
	    }
	    playToggleBtn(isOn, onBg, offBg) {
	        if (isOn) {
	            onBg.visible = true;
	            offBg.visible = false;
	            onBg.mouseEnabled = true;
	            offBg.mouseEnabled = false;
	        }
	        else {
	            onBg.visible = false;
	            offBg.visible = true;
	            onBg.mouseEnabled = false;
	            offBg.mouseEnabled = true;
	        }
	    }
	    setBtnMusic(isOn) {
	        if (isOn) {
	            SoundMgr.ins().playSound("m102");
	        }
	        else {
	            SoundMgr.ins().playSound("m103");
	        }
	    }
	    event_SoundToggled() {
	        let isOn = !SettingMgr.soundIsOn;
	        this.playToggleBtn(isOn, this.onBg, this.offBg);
	        SettingMgr.soundIsOn = isOn;
	        this.setBtnMusic(isOn);
	        SoundMgr.ins().setMusicEnable(isOn);
	        SL_Setting.save();
	    }
	    event_MusicToggled() {
	        let isOn = !SettingMgr.soundEffIsOn;
	        this.playToggleBtn(isOn, this.effectOn, this.effectOff);
	        SettingMgr.soundEffIsOn = isOn;
	        this.setBtnMusic(isOn);
	        SoundMgr.ins().setSoundEnable(isOn);
	        SL_Setting.save();
	    }
	    event_TutorialToggled() {
	        let isOn = !SettingMgr.tutorialIsOn;
	        this.playToggleBtn(isOn, this.courseOn, this.courseOff);
	        SettingMgr.tutorialIsOn = isOn;
	        Glob.tutorialOn = isOn;
	        this.setBtnMusic(isOn);
	        SL_Setting.save();
	    }
	    event_ResetTutorialTapped() {
	        LayerMgr.ins().open(UiConst.ResetCourseView);
	    }
	    event_NoPurchaseModeToggled() {
	        let isOn = !SettingMgr.noPurchaseIsOn;
	        this.playToggleBtn(isOn, this.buyOn, this.buyOff);
	        SettingMgr.noPurchaseIsOn = isOn;
	        this.setBtnMusic(isOn);
	        SL_Setting.save();
	    }
	    event_NotificationsToggled() {
	        let isOn = !SettingMgr.notiIsOn;
	        this.playToggleBtn(isOn, this.notiOn, this.notiOff);
	        SettingMgr.notiIsOn = isOn;
	        this.setBtnMusic(isOn);
	        SL_Setting.save();
	    }
	    event_TapConfirmToggled() {
	        let isOn = !SettingMgr.okIsOn;
	        this.playToggleBtn(isOn, this.okOn, this.okOff);
	        SettingMgr.okIsOn = isOn;
	        Glob.tapConfirmSettingOn = isOn;
	        this.setBtnMusic(isOn);
	        SL_Setting.save();
	    }
	    event_BatterySettingsTapped() {
	        LayerMgr.ins().open(UiConst.FunctionView);
	    }
	    event_LanguageTapped() {
	        LayerMgr.ins().open(UiConst.LangView);
	    }
	    event_CampMergeOverlapToggled() {
	        let isOn = !Glob.campMergeRequiresOverlapToInitiate;
	        this.playToggleBtn(isOn, this.mergeOverOn, this.mergeOverOff);
	        Glob.campMergeRequiresOverlapToInitiate = isOn;
	        this.setBtnMusic(isOn);
	        SL_Setting.save();
	    }
	    event_CampAllowChainReactionsToggled() {
	        let isOn = !Glob.campAllowChainReactions;
	        this.playToggleBtn(isOn, this.chainMergeOn, this.chainMergeOff);
	        Glob.campAllowChainReactions = isOn;
	        this.setBtnMusic(isOn);
	    }
	    event_PreferMerge5Toggled() {
	        let isOn = !Glob.preferDragonMerge5;
	        this.playToggleBtn(isOn, this.merge5On, this.merge5Off);
	        Glob.preferDragonMerge5 = isOn;
	        this.setBtnMusic(isOn);
	    }
	    onClick_CRMRedeemCode() {
	        LayerMgr.ins().open(UiConst.ExchangeCodeView);
	    }
	    updateLang() {
	        let curCode = SettingMgr.curLanguageCode;
	        let data = SettingMgr.languageData;
	        for (let i = 0; i < data.length; i++) {
	            let vo = data[i];
	            if (curCode == i) {
	                this.langLb.text = LanCfg.get(vo.langTxt);
	                break;
	            }
	        }
	    }
	}

	class SettingView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.isConfirm = false;
	    }
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("设置");
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.settingPanel.removeChildren();
	        this.settingPanel.elasticEnabled = true;
	        this.settingPanel.vScrollBarSkin = "";
	        let item = new SettingItem();
	        this.settingPanel.addChild(item);
	        this.btnOk.on(Laya.Event.CLICK, this, this.event_Done);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	    }
	    event_Done() {
	        this._closeUi();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	}

	class ExchangeCodeView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("20120015");
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnOk.on(Laya.Event.CLICK, this, this.OnClick_OKButton);
	        this.btnEsc.on(Laya.Event.CLICK, this, this._closeUi);
	        this.codeInput.on(Laya.Event.FOCUS, this, this.inputCode, [true]);
	        this.codeInput.on(Laya.Event.BLUR, this, this.inputCode, [false]);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.codeInput.text = "";
	        this.labelStatus.visible = false;
	        this.codeInput.mouseEnabled = true;
	        this.btnOk.visible = true;
	        this.btnEsc.visible = false;
	        this.addNoti();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.CHANGE_SUCCESS, this.updateBtnState, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.CHANGE_SUCCESS, this.updateBtnState, this);
	    }
	    OnClick_OKButton() {
	        let value = this.codeInput.text;
	        if (64 < value.length) {
	            value = value.substring(0, 64);
	        }
	        let r = /^[a-zA-Z0-9]+$/;
	        if (value == "" || !r.test(value)) {
	            this.labelStatus.visible = false;
	            FloatMsgUtil.start(LanCfg.get("20120029"));
	        }
	        else {
	            this.labelStatus.visible = false;
	            ProxyMgr.player.sGetCode(value);
	        }
	    }
	    updateBtnState() {
	        FloatMsgUtil.start(LanCfg.get("20120030"));
	        this.btnOk.visible = false;
	        this.btnEsc.visible = true;
	    }
	    inputCode(arg) {
	        if (arg) {
	            if (this.codeInput.text == LanCfg.get("20120016")) {
	                this.codeInput.text = "";
	            }
	        }
	        else {
	            let txt = this.codeInput.text;
	            if (txt == "") {
	                this.codeInput.text = LanCfg.get("20120016");
	            }
	        }
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.removeNoti();
	    }
	}

	class FunctionView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnSaveMode.on(Laya.Event.CLICK, this, this.eventPerformanceToggled, [true]);
	        this.btnFunMode.on(Laya.Event.CLICK, this, this.eventPerformanceToggled, [false]);
	        this.btnOk.on(Laya.Event.CLICK, this, this.onClickSaveMode);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        SettingMgr.isSaveState = false;
	        this.setLabelFills();
	    }
	    eventPerformanceToggled(isFun) {
	        if (isFun) {
	            SettingMgr.updteFunPerformance(true);
	        }
	        else {
	            SettingMgr.updteFunPerformance(false);
	        }
	        this.setLabelFills();
	    }
	    setLabelFills() {
	        let isHighPerformance = SettingMgr.getFunPerformance();
	        if (isHighPerformance) {
	            this.box1.visible = true;
	            this.box2.visible = false;
	            this.box3.visible = false;
	            this.box4.visible = true;
	            this.btnFunMode.visible = true;
	            this.btnSaveMode.visible = false;
	            this.btnSaveMode.mouseEnabled = false;
	            this.btnFunMode.mouseEnabled = true;
	        }
	        else {
	            this.box1.visible = false;
	            this.box2.visible = true;
	            this.box3.visible = true;
	            this.box4.visible = false;
	            this.btnFunMode.visible = false;
	            this.btnSaveMode.visible = true;
	            this.btnSaveMode.mouseEnabled = true;
	            this.btnFunMode.mouseEnabled = false;
	        }
	    }
	    onClickSaveMode() {
	        this.setApplicationFrameRate();
	        SettingMgr.isSaveState = true;
	        SL_Setting.save();
	        this._closeUi();
	    }
	    setApplicationFrameRate() {
	        let isHigh = SettingMgr.getFunPerformance();
	        SettingMgr.setFPS(isHigh);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        if (!SettingMgr.isSaveState) {
	            let slObj = new SL_Setting();
	            if (SaveLoad.has(SaveLoadConst.SETTING)) {
	                SaveLoad.load(slObj);
	            }
	            else {
	                SettingMgr.saveSetting(slObj);
	            }
	            SettingMgr.updteFunPerformance(slObj.isHighPerformance);
	        }
	    }
	}

	class LangItem extends ui.data.module.setting.LangItemUI {
	    setData(vo, selected) {
	        this.btnChinese.label = LanCfg.get(vo.langTxt);
	        if (selected) {
	            this.btnChinese.skin = "res/skin/setting/sz_anniulv.png";
	        }
	        else {
	            this.btnChinese.skin = "res/skin/setting/sz_anniuhuang.png";
	        }
	    }
	}

	class LangView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.selectIndex = -1;
	    }
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("20120010");
	        this.langList.itemRender = LangItem;
	        this.langList.array = [];
	        this.langList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.langList.selectHandler = Laya.Handler.create(this, this.selectLang, null, false);
	        this.langList.selectEnable = true;
	        this.langList.elasticEnabled = true;
	        this.langList.vScrollBarSkin = "";
	        this.btnOk.on(Laya.Event.CLICK, this, this.eventSaveAndExit);
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.getLangData();
	        this.initCode();
	    }
	    renderHandler(cell, index) {
	        let selected = false;
	        if (this.selectIndex == index) {
	            selected = true;
	        }
	        cell.setData(cell.dataSource, selected);
	    }
	    getLangData() {
	        let langData = SettingMgr.languageData;
	        this.langList.array = langData;
	    }
	    initCode() {
	        let data = this.langList.array;
	        let code = SettingMgr.getCurLanguageCode();
	        for (let i = 0; i < data.length; i++) {
	            if (code == i) {
	                this.selectLang(i);
	                break;
	            }
	        }
	    }
	    selectLang(index) {
	        this.langList.selectedIndex = index;
	        this.selectIndex = index;
	        if (index == -1)
	            return;
	    }
	    eventSaveAndExit() {
	        let data = this.langList.array;
	        for (let i = 0; i < data.length; i++) {
	            if (i == this.selectIndex) {
	                SettingMgr.saveCurLanguageCode(i);
	                break;
	            }
	        }
	        this._closeUi();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	}

	class ResetCourseView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("20120001");
	        this.tipsLb.text = LanCfg.get("20120002");
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnCancle.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnReset.on(Laya.Event.CLICK, this, this.resetTutorial_Confirmed);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	    }
	    resetTutorial_Confirmed() {
	        Glob.tutorialOn = true;
	        TomeTip.resetAllProgress();
	        SaveLoad.clearTutorialData();
	        this._closeUi();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	}

	class GmView extends BaseView {
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = "GM";
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.sendBtn.on(Laya.Event.CLICK, this, this.onSend);
	        this.remarkLbl.text = `左边指令:右边说明
1_道具id:添加道具
2:解锁世界关卡
3:重置限时商城
4_开关:是否每次合成都会生产奖励,开关:1为是,0为正常
5:出售所有可以出售的道具,肾用!
6_x:解锁付费地块分别为 1 2 3： 如 6_1
7_开关:选中道具后飘出相关信息
8_关卡id或者关卡名:跳转至对应的关卡
9:立即保存数据到服务端，前提是当前为在线
`;
	    }
	    openUi(arg) {
	        super.openUi(arg);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	    onSend() {
	        if (LoginData.gm <= 0)
	            return;
	        let msg = this.ti.text;
	        if (StringUtil.isEmpty(msg))
	            return;
	        let list = msg.split("_");
	        switch (list[0]) {
	            case "1":
	                Thing.createInFreeCell(parseInt(list[1]), null, true);
	                break;
	            case "2":
	                WorldMgr.ins().openDebugUnlocked();
	                break;
	            case "3":
	                ShopSaveMgr.Debug_ResetTimedShopEntries();
	                break;
	            case "4":
	                GmCmd.TEST_ALWAYS_PROGRESSION_DUPE = list[1] == "1";
	                break;
	            case "5":
	                GmCmd.sellAll();
	                break;
	            case "6":
	                switch (list[1]) {
	                    case "1":
	                        BuyLandMgr.ins().completePremiumLandPurchase();
	                        break;
	                    case "2":
	                        BuyLandMgr.ins().completePremiumLandPurchase2();
	                        break;
	                    case "3":
	                        BuyLandMgr.ins().completePremiumLandPurchase3();
	                        break;
	                }
	                break;
	            case "7":
	                GmCmd.outPropMsg = list[1] == "1";
	                break;
	            case "8":
	                if (!WorldMgr.ins().DebugOpenLocked) {
	                    WorldMgr.ins().openDebugUnlocked();
	                }
	                let levelId = null;
	                let nameOrId = list[1];
	                let int = parseInt(nameOrId);
	                if (isNaN(int) || int < 10000) {
	                    for (let key in WorldMgr.ins().LevelData) {
	                        let vo = WorldMgr.ins().LevelData[key];
	                        if (vo.bannerText === nameOrId) {
	                            levelId = vo.cid;
	                        }
	                    }
	                }
	                else {
	                    levelId = int;
	                }
	                if (WorldMgr.ins().getLevelVo(levelId)) {
	                    MsgCenter.notify(MsgConst.LEVEL_JUMP_HIGH, levelId);
	                }
	                break;
	            case "9":
	                MsgCenter.notify(MsgConst.CLOUDE_UPLOAD_NOW);
	                break;
	            case "error":
	                this["a"]["b"] = 1;
	                break;
	            case "fps":
	                if (list[1] == "0") {
	                    Laya.Stat.hide();
	                }
	                else {
	                    Laya.Stat.show();
	                }
	                break;
	            case "100":
	                PlatBridge.jsOnPause();
	                break;
	            case "101":
	                PlatBridge.jsOnResume();
	                break;
	            default:
	                break;
	        }
	    }
	}

	class ModalDialogGeneric1Button extends BaseModal {
	    updateIcon(icon) {
	        if (icon) {
	            if (this.imgIcon) {
	                this.imgIcon.visible = true;
	                this.imgIcon.skin = icon;
	            }
	            else {
	                this.imgIcon = new Laya.Image(icon);
	                this.imgIcon.centerX = 0;
	                this.imgIcon.centerY = 30;
	                this.imgContent.addChildAt(this.imgIcon, 0);
	            }
	        }
	        else {
	            if (this.imgIcon) {
	                this.imgIcon.visible = false;
	            }
	        }
	    }
	    updatePref(focalObjectDefinition) {
	        if (focalObjectDefinition != null) {
	            let pref = focalObjectDefinition.pref;
	            if (this.uiPref) {
	                this.uiPref.visible = true;
	                this.uiPref.setNid(focalObjectDefinition.pref);
	            }
	            else {
	                this.uiPref = UiPrefMgr.get(pref);
	                this.uiPref.centerX = 0;
	                this.uiPref.centerY = 30;
	                this.imgContent.addChildAt(this.uiPref, 0);
	            }
	        }
	        else {
	            if (this.uiPref) {
	                this.uiPref.visible = false;
	            }
	        }
	    }
	    onClickOk() {
	        if (this.okHandler != null) {
	            this.okHandler.run();
	            this.okHandler = null;
	        }
	        this._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnOk.on(Laya.Event.CLICK, this, this.onClickOk);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        let def = arg;
	        this.def = def;
	        this.setTitle(def.headerText);
	        this.lblContent.text = def.bodyText;
	        this.btnOk.label = def.confirmButtonLabel;
	        this.okHandler = def.confirmCallback;
	        this.closeHandler = def.closeCallback;
	        this.boxCom.btnCloseVisible = !arg.hideCloseBtn;
	        this.updateIcon(def.focalIcon);
	        this.updatePref(def.focalObjectDefinition);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        if (this.closeHandler != null) {
	            this.closeHandler.run();
	            this.closeHandler = null;
	        }
	    }
	    onBgClick() {
	        if (this.def.closeWithExternalTap) {
	            super.onBgClick();
	        }
	    }
	}

	class ModalDialogConfirmPurchase extends BaseModal {
	    onClickBuy() {
	        this._closeUi();
	        if (!CurrencyMgr.ins().CanAfford(this.currencyType, this.currencyAmount)) {
	            if (this.currencyType == ECurrency.Diamond) {
	                CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            }
	        }
	        else if (this.confirmedCallback != null) {
	            this.confirmedCallback.run();
	            this.confirmedCallback = null;
	        }
	    }
	    updateCost(currencyType, cost) {
	        this.lblBuy.text = cost.toString();
	        this.imgBuy.skin = CurrencyCfg.icon(currencyType);
	        let isShowBtnBuy = CurrencyMgr.ins().CanAfford(currencyType, cost) || currencyType === ECurrency.Diamond;
	        this.btnBuy.visible = isShowBtnBuy;
	    }
	    updatePref(focalObjectDefinition) {
	        if (focalObjectDefinition != null) {
	            let pref = focalObjectDefinition.pref;
	            if (this.uiPref) {
	                this.uiPref.visible = true;
	                this.uiPref.setNid(focalObjectDefinition.pref);
	            }
	            else {
	                this.uiPref = UiPrefMgr.get(pref);
	                this.uiPref.centerX = 0;
	                this.uiPref.centerY = -20;
	                this.imgContent.addChildAt(this.uiPref, 0);
	            }
	        }
	        else {
	            if (this.uiPref) {
	                this.uiPref.visible = false;
	            }
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onClickBuy);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        let def = arg;
	        this.currencyAmount = def.cost;
	        this.currencyType = def.currencyType;
	        this.cancelledCallback = def.closeCallback;
	        this.confirmedCallback = def.confirmCallback;
	        this.setTitle(def.headerText);
	        this.updateCost(def.currencyType, def.cost);
	        this.updatePref(def.focalObjectDefinition);
	        if (def.focalObjectDefinition == null) {
	            this.lblDescMiddle.text = def.bodyText;
	            this.lblDescMiddle.visible = true;
	            this.lblDescBottom.visible = false;
	            this.btnInfo.visible = false;
	        }
	        else {
	            this.lblDescBottom.text = def.bodyText;
	            this.lblDescBottom.visible = true;
	            this.lblDescMiddle.visible = false;
	            if (def.focalObjectDefinition.hasCategory(CategoryID.HideLootInfoButtonInBuyConf)
	                || def.focalObjectDefinition.tapBehavior == null
	                || !MergeDragonsAppConfig.LOOT_BOX_INFO_ENABLED) {
	                this.btnInfo.visible = false;
	            }
	            else {
	                this.btnInfo.visible = true;
	            }
	        }
	        if (def.confirmCallback == null) {
	            GuiMgr.errorMessage("A purchase confirmation callback must be passed in to the Purchase Confirmation Modal dialog. Currently, null is being passed.");
	        }
	    }
	    onCloseCall() {
	        if (this.isShow) {
	            this.cancelledCallback && this.cancelledCallback.run();
	            this.cancelledCallback = null;
	        }
	    }
	}

	class ModalDialogGeneric2Button extends ModalDialogGeneric1Button {
	    onAwake() {
	        super.onAwake();
	        this.btnCancel.on(Laya.Event.CLICK, this, this.onClickCancel);
	    }
	    openUi(def) {
	        super.openUi(def);
	        let modalGeneric2ButtonDefinition = def;
	        this.cancelHandler = modalGeneric2ButtonDefinition.declineCallback;
	        this.btnCancel.label = modalGeneric2ButtonDefinition.declineButtonLabel;
	    }
	    onClickCancel() {
	        if (this.cancelHandler != null) {
	            this.cancelHandler.run();
	            this.cancelHandler = null;
	        }
	        this._closeUi();
	    }
	}

	class ModalProgressionDupe extends BaseModal {
	    onPurchase() {
	        this._closeUi();
	        let dupeCostGems = this.matchObjectDefinition.getDupeCostGems(Glob.inAnEventArea);
	        if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, dupeCostGems)) {
	            CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            return;
	        }
	        CurrencyMgr.ins().charge(ECurrency.Diamond, dupeCostGems);
	        ApiMgr.addYbRecord(dupeCostGems, LogCostType.MergeDouble);
	        ShopSaveMgr.PurchasedProgressionDupe(this.timerId);
	        this.glassCase.deselect();
	        let pregName = GGProgressionDupeController.ins().GetPrefabForWidthAndHeight(this.matchObjectDefinition, true);
	        let drawnObject = this.glassCase.destroyAndReplaceWith(PropsCfg.get(pregName), false);
	        drawnObject.updateZ(true);
	        drawnObject.customLootBundle.addLoot(this.matchObjectDefinition.cid);
	        GGServices.GetTimerService().StopTimer(this.timerId);
	        GGServices.GetTimerService().RemoveTimer(this.timerId);
	    }
	    updateCost() {
	        this.lblBuy.text = this.matchObjectDefinition.getDupeCostGems(Glob.inAnEventArea).toString();
	    }
	    updateContent() {
	        let text = this.matchObjectDefinition.name;
	        if (this.matchObjectDefinition.visibleLv > 0) {
	            text = text + " " + this.matchObjectDefinition.getVisibleLevelTextShortParenthetical();
	        }
	        this.lblContent.text = StringUtil.format(LanCfg.get("20013039"), text, "\n\n");
	    }
	    updatePref() {
	        let pref = this.matchObjectDefinition.pref;
	        if (this.uiPref) {
	            this.uiPref.setNid(pref);
	        }
	        else {
	            this.uiPref = UiPrefMgr.get(pref);
	            this.uiPref.centerX = 0;
	            this.uiPref.centerY = 0;
	            this.imgPref.addChild(this.uiPref);
	        }
	    }
	    updateTimer() {
	        let timerData = GGServices.GetTimerService().GetTimer(this.timerId);
	        if (timerData != null) {
	            if (timerData.Status == EnumTimerStatus.EXPIRED) {
	                this._closeUi();
	                return;
	            }
	            this.barProgress.value = 1 - timerData.GetRemainingTimePercentage();
	            this.boxTimer.fixedText = TimeMgr.ins().formatTimer2(timerData.RemainingTime);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onPurchase);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.glassCase = arg.glassCase;
	        this.matchObjectDefinition = PropsCfg.get(arg.itemInsideCase);
	        this.timerId = GGProgressionDupeController.ins().GetDupeId(this.glassCase);
	        this.updateCost();
	        this.updateContent();
	        this.updatePref();
	        this.updateTimer();
	        this.timerLoop(100, this, this.updateTimer);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.clearTimer(this, this.updateTimer);
	    }
	}

	class HomeTaskView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.isCenter = false;
	    }
	    onAwake() {
	        super.onAwake();
	        this.closeBtn.on(Laya.Event.CLICK, this, this._closeUi);
	        this.btnOk.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(isCenter = false) {
	        this.isCenter = isCenter;
	        super.openUi(null);
	        this.updateStarCount();
	        MsgCenter.listen(MsgConst.SHOP_CHANGE_STAR, this.updateStarCount, this);
	    }
	    updateStarCount() {
	        let star = WorldMgr.ins().TotalStarsEarned;
	        this.lblDes.text = StringUtil.format(LanCfg.get("20010038"), star);
	    }
	    fitterPos() {
	        if (this.isCenter) {
	            super.fitterPos();
	        }
	        else {
	            this.pos(90, 133);
	        }
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.SHOP_CHANGE_STAR, this.updateStarCount, this);
	    }
	}

	class ModalUpgradeConfirm extends BaseModal {
	    onClickBuy() {
	        this._closeUi();
	        this._onPurchaseConfirmed && this._onPurchaseConfirmed.run();
	        this._onPurchaseConfirmed = null;
	    }
	    updateBonus(cfg, amount) {
	        if (this.prefBonus) {
	            this.prefBonus.setNid(cfg.pref);
	        }
	        else {
	            this.prefBonus = UiPrefMgr.get(cfg.pref);
	            this.prefBonus.centerX = 0;
	            this.prefBonus.centerY = 0;
	            this.imgBonusBg.addChild(this.prefBonus);
	        }
	        this.lblDescBonus.text = cfg.name + " x" + amount;
	    }
	    updatePref(cfg, pref, prefRoot, lblDesc) {
	        if (pref) {
	            pref.setNid(cfg.pref);
	        }
	        else {
	            pref = UiPrefMgr.get(cfg.pref);
	            prefRoot.addChild(pref);
	        }
	        lblDesc.text = cfg.name + "\n" + StringUtil.format(LanCfg.get("10010015"), cfg.itemLevel);
	    }
	    updateCost(cost) {
	        this.lblBuy.text = cost.toString();
	    }
	    onCloseCall() {
	        if (this.isShow) {
	            this._onPurchaseDeclined && this._onPurchaseDeclined.run();
	            this._onPurchaseDeclined = null;
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onClickBuy);
	    }
	    openUi(def) {
	        super.openUi(def);
	        this._onPurchaseDeclined = def.closeCallback;
	        this._onPurchaseConfirmed = def.confirmCallback;
	        this.updateCost(def.UpgradeCost);
	        this.updateBonus(def.BonusItem, def.BonusQuantity);
	        this.updatePref(def.ToDefinition, this.prefTo, this.boxTo, this.lblDescTo);
	        this.updatePref(def.FromDefinition, this.prefFrom, this.boxFrom, this.lblDescFrom);
	    }
	}

	class ModalPremiumLand extends BaseModal {
	    updateCost(price, discount, disabled) {
	        this.btnBuy.disabled = disabled;
	        this.lblBuy.text = price.toString();
	        this.lblDiscount.text = "-" + discount + "%";
	    }
	    updateLandIcon(skin) {
	        this.imgIcon.skin = GameUtil.getModuleSkin("home", skin);
	        this.imgIconMask.skin = GameUtil.getModuleSkin("home", skin + "-zd");
	    }
	    updateDesc(isGoalComplete, cellAmount) {
	        this.lblDesc.text = (isGoalComplete ? StringUtil.format(LanCfg.get("20021010"), cellAmount)
	            : StringUtil.format(LanCfg.get("20021011"), cellAmount));
	    }
	    onClickBuy() {
	        if (!Glob.CanMakePurchase()) {
	            PopupManager.show2(Presets.Simple1Button(LanCfg.get("20021001"), LanCfg.get("20021001")));
	        }
	        if (Platfrom.isMobile) {
	            let name = PaySHopCfg.getRechargeName(this.landId);
	            ApiMgr.createOrder(this.landId, name);
	        }
	        else {
	            if (Platfrom.isWebGm) {
	                BuyLandMgr.ins().onPurchseOk(this.landId);
	            }
	        }
	        this._closeUi();
	    }
	    onSliderChange(value) {
	        this.boxMask.width = this.hSlider.bar.x;
	        if (this.finger.visible && value < 100) {
	            this.finger.stop();
	            this.finger.visible = false;
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.finger = new Finger();
	        this.finger.right = 0;
	        this.finger.centerY = 0;
	        this.imgContent.addChild(this.finger);
	        this.boxMask = new Laya.Box();
	        this.boxMask.bgColor = "#000000";
	        this.imgIconMask.mask = this.boxMask;
	        this.hSlider.bar.stateNum = 1;
	        this.hSlider.showLabel = false;
	        this.hSlider.setSlider(0, 100, 100);
	        this.hSlider.bar.skin = "res/skin/home/slider_line.png";
	        this.hSlider.changeHandler = Laya.Handler.create(this, this.onSliderChange, null, false);
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onClickBuy);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        let landId = arg.id;
	        this.landId = landId;
	        let isGoalComplete = arg.complete;
	        let discount = 0;
	        let cellAmount = 0;
	        if (landId == BuyLandId.LAND) {
	            discount = ModalPremiumLand.DISCOUNT_LAND;
	            cellAmount = ModalPremiumLand.AMOUNT_LAND;
	        }
	        else if (landId == BuyLandId.LAND_2) {
	            discount = ModalPremiumLand.DISCOUNT_LAND_2;
	            cellAmount = ModalPremiumLand.AMOUNT_LAND_2;
	        }
	        else {
	            if (!(landId == BuyLandId.LAND_3)) {
	                Debug.log("Premium land Id unknown: " + landId);
	                return;
	            }
	            discount = ModalPremiumLand.DISCOUNT_LAND_3;
	            cellAmount = ModalPremiumLand.AMOUNT_LAND_3;
	        }
	        let skin = PaySHopCfg.getRechargeIcon(landId);
	        let price = PaySHopCfg.getRechargePrice(landId);
	        if (price == null)
	            return;
	        this.updateLandIcon(skin);
	        this.updateDesc(isGoalComplete, cellAmount);
	        this.updateCost(price, discount, !isGoalComplete);
	        this.boxMask.size(this.imgIconMask.width, this.imgIconMask.height);
	        this.hSlider.width = this.imgIconMask.width;
	        this.hSlider.value = 100;
	        this.finger.visible = true;
	        let v = new Laya.Vector2();
	        v.setValue(-200, 0);
	        this.finger.setData(v);
	        this.finger.play();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.finger.stop();
	    }
	}
	ModalPremiumLand.DISCOUNT_LAND = 58;
	ModalPremiumLand.DISCOUNT_LAND_2 = 58;
	ModalPremiumLand.DISCOUNT_LAND_3 = 58;
	ModalPremiumLand.AMOUNT_LAND = 33;
	ModalPremiumLand.AMOUNT_LAND_2 = 17;
	ModalPremiumLand.AMOUNT_LAND_3 = 33;
	class Finger extends Laya.UIComponent {
	    constructor() {
	        super();
	        this.imgLine = new Laya.Image();
	        this.imgFinger = new Laya.Image();
	        this._percent = 0;
	        this.angle = 0;
	        this.distance = 0;
	        this.distanceX = 0;
	        this.distanceY = 0;
	        this.addChild(this.imgFinger);
	        this.imgFinger.skin = "res/comp/zy_shou.png";
	        this.addChild(this.imgLine);
	        this.imgLine.skin = "res/comp/zy_jianbian.png";
	    }
	    get percent() {
	        return this._percent;
	    }
	    set percent(val) {
	        this._percent = val;
	        this.imgLine.rotation = this.angle;
	        this.imgLine.width = this.distance * val;
	        this.imgFinger.pos(this.distanceX * val, this.distanceY * val);
	    }
	    stop() {
	        Laya.Tween.clearAll(this);
	    }
	    play() {
	        this.percent = 0;
	        Laya.Tween.to(this, { percent: 1 }, 1200, null, Laya.Handler.create(this, this.play));
	    }
	    setData(to) {
	        this.distanceX = to.x;
	        this.distanceY = to.y;
	        this.angle = MathUtil.getAngleByXY(0, 0, to.x, to.y);
	        this.distance = MathUtil.getDistance(0, 0, to.x, to.y);
	    }
	    onDisable() {
	        this.stop();
	    }
	}

	class ModalFogAreaInfo extends BaseModal {
	    onAwake() {
	        super.onAwake();
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.lblDesc.text = arg.textDesc;
	        this.lblCount.text = arg.textCount;
	    }
	}

	class TimedBundleItem extends ui.data.module.limitAward.TimedBundleItemUI {
	    constructor() {
	        super();
	    }
	    setData(vo) {
	    }
	}

	class ModalTimedBundle extends BaseModal {
	    onAwake() {
	        super.onAwake();
	        this.titleLb.text = LanCfg.get("20090003");
	        this.awardList.itemRender = TimedBundleItem;
	        this.awardList.array = [];
	        this.awardList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	    }
	    renderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    updateTime() {
	    }
	    updateAward() {
	        this.awardList.array = [];
	    }
	    static IsBabyDragonPack(bundleData) {
	        let currencyDefinition = this.GetCurrencyDefinition(bundleData);
	        if (currencyDefinition == null) {
	            return false;
	        }
	        return currencyDefinition.IsBabyDragonPack || currencyDefinition.IsBabyDragonPack2 || currencyDefinition.IsBabyDragonPack3;
	    }
	    static GetCurrencyDefinition(bundleData) {
	        if (bundleData.id === "starter_pack_bundle") {
	        }
	        return;
	    }
	    static GetPremiumCostForTimedBundle(bundleData) {
	        let pREMIUM_TIMED_BUNDLE_CHESTS_STATE = MergeDragonsAppConfig.PREMIUM_TIMED_BUNDLE_CHESTS_STATE;
	        return bundleData.config.gemCost + 100 * (pREMIUM_TIMED_BUNDLE_CHESTS_STATE - 1);
	    }
	    static GetItemsAndQuantityFromBundleData(bundleData) {
	        let dictionary = {};
	        if (bundleData.bundleItems == null) {
	            Debug.log("InvalidTimedBundleData", "Timed bundle data has no items: " + bundleData.id);
	            return dictionary;
	        }
	        bundleData.bundleItems.forEach(item => {
	            let bundleItemID = item.bundleItemID;
	            dictionary[bundleItemID] = dictionary[bundleItemID] ? dictionary[bundleItemID] + 1 : 1;
	        });
	        return dictionary;
	    }
	    static AwardGenericBundleContents(bundleData, def, cost) {
	        if (def.IsTimedBundle) {
	            ShopSaveMgr.PurchasedTimedBundleChest(def.SaveID);
	            let list = ThingList.categories[CategoryID.TreasureChests];
	            if (list) {
	                list.forEach(item => {
	                    if (item != null && item.cfg.pref.toLowerCase() === def.SaveID) {
	                        item.tryRemoveLock(true);
	                        item.detachProgressBar();
	                    }
	                });
	            }
	        }
	        else {
	            Debug.log("[Modal_TimedBundle] Purchased a timed bundle with gems, but it is not defined as a timed bundle. Awarding premium contents instead.");
	            ModalTimedBundle.AwardPremiumBundleContents(bundleData);
	        }
	    }
	    static AwardPremiumBundleContents(bundleData) {
	        let itemsAndQuantityFromBundleData = ModalTimedBundle.GetItemsAndQuantityFromBundleData(bundleData);
	    }
	    OnPurchase() {
	        if (!Glob.CanMakePurchase()) {
	            PopupManager.show2(Presets.CanNotPurchase());
	        }
	        else if (this._bundleData == null) {
	            Debug.log("NullTimedBundleException", "Tried to purchase a null timed bundle!");
	        }
	        else if (this._bundleData.config.purchaseType == BundlePurchaseType.GEM) {
	            let value = 0;
	            let premiumCostForTimedBundle = ModalTimedBundle.GetPremiumCostForTimedBundle(this._bundleData);
	            if (!CurrencyMgr.ins().CanAfford(ECurrency.Diamond, premiumCostForTimedBundle)) {
	                CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            }
	            else {
	                CurrencyMgr.ins().charge(ECurrency.Diamond, premiumCostForTimedBundle);
	                ModalTimedBundle.AwardGenericBundleContents(this._bundleData, value, premiumCostForTimedBundle);
	                this._closeUi();
	            }
	        }
	        else {
	            this._closeUi();
	        }
	    }
	    openUi(def) {
	        super.openUi(def);
	        this._bundleData = def.bundleData;
	        if (this._bundleData || this._bundleData.bundleItems == null || this._bundleData.bundleItems.length <= 0) {
	            Debug.log("[Modal_TimedBundle] Tried to show popup without bundle data!");
	            this._bundleData = null;
	            this._closeUi();
	            return;
	        }
	        this._isGenericOffer = !ModalTimedBundle.IsBabyDragonPack(this._bundleData);
	        let itemsAndQuantityFromBundleData = ModalTimedBundle.GetItemsAndQuantityFromBundleData(this._bundleData);
	        if (this._bundleData.config.purchaseType == BundlePurchaseType.GEM) {
	            let premiumCostForTimedBundle = ModalTimedBundle.GetPremiumCostForTimedBundle(this._bundleData);
	        }
	        else {
	        }
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	    }
	}

	class ReloadView extends BaseModal {
	    onClickOk() {
	        if (this.okHandler != null) {
	            this.okHandler.run();
	        }
	        this._closeUi();
	    }
	    _closeUi() {
	        if (this.def.noCloseWindow)
	            return;
	        super._closeUi();
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnOk.on(Laya.Event.CLICK, this, this.onClickOk);
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        let def = arg;
	        this.def = def;
	        this.setTitle(def.headerText);
	        this.lblContent.text = def.bodyText;
	        this.btnOk.label = def.confirmButtonLabel;
	        this.okHandler = def.confirmCallback;
	        this.closeHandler = def.closeCallback;
	        this.boxCom.btnCloseVisible = !arg.hideCloseBtn;
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        if (this.closeHandler != null) {
	            this.closeHandler.run();
	            this.closeHandler = null;
	        }
	        this.okHandler = null;
	    }
	    onBgClick() {
	    }
	}

	class HeadlineView extends BaseView {
	    enterAnim() {
	        this.imgBg.alpha = 0;
	        Laya.Tween.to(this.imgBg, { alpha: 1 }, 1000, null, Laya.Handler.create(this, () => {
	            Laya.Tween.to(this.imgBg, { alpha: 0 }, 800, null, Laya.Handler.create(this, this.closeSelf), 1000);
	        }));
	    }
	    removeAnim() {
	        this.imgBg.alpha = 0;
	        Laya.Tween.clearAll(this.imgBg);
	    }
	    closeSelf() {
	        SoundMgr.ins().playSound("ui_tongyong");
	        LayerMgr.ins().closeUi(this.name);
	        this.closeHandler && this.closeHandler.run();
	        this.closeHandler = null;
	    }
	    fitterPos() {
	        let w = Laya.stage.width;
	        let h = Laya.stage.height;
	        let dW = Laya.stage.designWidth;
	        let dH = Laya.stage.designHeight;
	        let r = w / h;
	        let dr = dW / dH;
	        if (r >= dr) {
	            this.width = w;
	            this.scale(1, 1);
	        }
	        else {
	            let scaleH = this.height / h;
	            this.width = w * scaleH;
	            this.scale(1 / scaleH, 1 / scaleH);
	        }
	    }
	    onAwake() {
	        super.onAwake();
	        this.showBlackBG = false;
	        this.bgClickClose = false;
	    }
	    openUi(arg) {
	        super.openUi(arg);
	        this.lblDesc.text = arg.desc;
	        this.closeHandler = arg.closeHandler;
	        this.enterAnim();
	    }
	}

	class ActivityButton extends ui.data.module.activity.ActivityButtonUI {
	    onAwake() {
	        super.onAwake();
	    }
	    setData(vo, isSelect) {
	        this.lblBtn.text = LanCfg.get(vo.actName);
	        this.btnAct.selected = isSelect;
	        this.redPoint.visible = vo.redPont;
	    }
	}

	class EveryDaySignInItem extends ui.data.module.activity.EveryDaySignInItemUI {
	    constructor() { super(); }
	    onAwake() {
	        super.onAwake();
	        this.on(Laya.Event.CLICK, this, this.onClickSignIn);
	    }
	    setData(vo) {
	        this.data = vo;
	        this.setBaseInfo();
	        this.addAward();
	        this.updateState();
	    }
	    setBaseInfo() {
	        this.dayLb.text = LanCfg.get(this.data.dayLbl);
	        this.signInLb.text = LanCfg.get(this.data.desc);
	    }
	    addAward() {
	        if (!this.data.award)
	            return;
	        let strArr = this.data.award.split(",");
	        let id = Number(strArr[1]);
	        let count = Number(strArr[2]);
	        this.awardId = strArr[1];
	        let prefName = PropsCfg.getPref(id);
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	            this.uiPref.setAmount(count);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 100, 100, count);
	            this.uiPref.centerX = 4;
	            this.uiPref.top = 35;
	            this.uiPref.scale(0.9, 0.9);
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    updateState() {
	        this.mouseEnabled = false;
	        this.signInFlag.visible = false;
	        if (this.data.state == SignState$1.eNoSign) {
	            this.gouBg.visible = false;
	            this.zhezhao.visible = false;
	            this.effBg.visible = false;
	            this.reSignBg.visible = false;
	        }
	        else if (this.data.state == SignState$1.eSinging) {
	            this.gouBg.visible = false;
	            this.zhezhao.visible = false;
	            this.effBg.visible = true;
	            this.mouseEnabled = true;
	            this.signInFlag.visible = true;
	            this.reSignBg.visible = false;
	        }
	        else if (this.data.state == SignState$1.eFinish) {
	            this.gouBg.visible = true;
	            this.zhezhao.visible = true;
	            this.effBg.visible = false;
	            this.reSignBg.visible = false;
	        }
	        else {
	            this.gouBg.visible = false;
	            this.zhezhao.visible = false;
	            this.effBg.visible = false;
	            this.reSignBg.visible = true;
	            this.mouseEnabled = true;
	        }
	    }
	    onClickSignIn() {
	        let index = EveryDaySignMgr.getSignDayIndex().day;
	        if (index < 0 || index > 30)
	            return;
	        if (this.data.state == SignState$1.eSinging) {
	            this.createData();
	        }
	        else {
	            this.reSignIn();
	        }
	    }
	    reSignIn() {
	        let arg = new ProPopupData();
	        arg.title = LanCfg.get("20100034");
	        arg.msg = StringUtil.format(LanCfg.get("20100035"), 10);
	        arg.awardList = this.awardId;
	        arg.isBuy = true;
	        arg.cost = 10;
	        arg.handler = Laya.Handler.create(this, () => {
	            this.createData();
	            ApiMgr.addYbRecord(arg.cost, LogCostType.Resign);
	        });
	        LayerMgr.ins().open(UiConst.PromptView, arg);
	    }
	    createData() {
	        let time = TimeMgr.ins().getTime();
	        let obj = new SaveSignInVo();
	        obj.id = this.data.cid;
	        obj.time = time;
	        EveryDaySignMgr.updateEveryDayState(obj);
	    }
	}

	class EveryDaySignInRewardIcon extends ui.data.module.activity.EveryDaySignInRewardIconUI {
	    constructor() {
	        super();
	        this.totalNum = 0;
	        this.curNum = 0;
	    }
	    onAwake() {
	        super.onAwake();
	        this.on(Laya.Event.CLICK, this, this.getAward);
	    }
	    setData(vo, index) {
	        this.data = vo.cfg;
	        let str = this.data.award.split(",");
	        this.id = Number(str[1]);
	        let count = Number(str[2]);
	        let prefName = PropsCfg.getPref(this.id);
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	            this.uiPref.setAmount(count);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 100, 100, count);
	            this.uiPref.centerX = 0;
	            this.uiPref.top = 30;
	            this.uiPref.scale(0.5, 0.5);
	            this.boxPref.addChild(this.uiPref);
	        }
	        this.awardName.text = this.data.desc;
	        this.totalNum = vo.value;
	        this.dayLb.text = LanCfg.get(this.data.dayLbl);
	        this.updateAwardState();
	    }
	    updateAwardState() {
	        let isCanReceive = EveryDaySignMgr.isCanReceived(this.data.cid);
	        let hasGet = EveryDaySignMgr.isHasGet(this.data.cid);
	        this.curNum = EveryDaySignMgr.totalSignInDay;
	        this.mouseEnabled = false;
	        this.redPoint.visible = false;
	        if (this.curNum >= this.totalNum) {
	            if (isCanReceive && !hasGet) {
	                this.effBg.visible = true;
	                this.gouBg.visible = false;
	                this.mouseEnabled = true;
	                this.redPoint.visible = true;
	            }
	            else if (isCanReceive && hasGet) {
	                this.effBg.visible = false;
	                this.gouBg.visible = true;
	            }
	        }
	        else {
	            this.effBg.visible = false;
	            this.gouBg.visible = false;
	        }
	    }
	    getAward() {
	        EveryDaySignMgr.saveHasGiftIds(this.data.cid, this.data.award);
	    }
	}

	class EveryDaySignInPanel extends ui.data.module.activity.EveryDaySignInPanelUI {
	    constructor() {
	        super(...arguments);
	        this.curTotalDay = 0;
	    }
	    onAwake() {
	        super.onAwake();
	        this.dayList.itemRender = EveryDaySignInItem;
	        this.dayList.array = [];
	        this.dayList.vScrollBarSkin = "";
	        this.dayList.elasticEnabled = true;
	        this.dayList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	    }
	    enterPanel() {
	        this.addNoti();
	        this.proBar.value = 0;
	        this.getData();
	        this.setDayListValue();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.getData, this);
	        MsgCenter.listen(MsgConst.UPDATE_SIGNINSTATE, this.getData, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_GETGIFT, this.showCumulativeAward, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_HASGETGIFT, this.showCumulativeAward, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_CLEARDATA, this.getData, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.getData, this);
	        MsgCenter.remove(MsgConst.UPDATE_SIGNINSTATE, this.getData, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_GETGIFT, this.showCumulativeAward, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_HASGETGIFT, this.showCumulativeAward, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_CLEARDATA, this.getData, this);
	    }
	    renderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    getData() {
	        let data = SignInCfg.getSignData();
	        this.dayList.array = data;
	        this.updateProBar();
	        this.showCumulativeAward();
	    }
	    showCumulativeAward() {
	        let arr = SignInCfg.getTotalAward();
	        let x = -22;
	        for (let i = 0; i < arr.length; i++) {
	            let child = this.giftBox.getChildAt(i);
	            if (!child) {
	                child = new EveryDaySignInRewardIcon();
	                if (i == 1) {
	                    x = 190;
	                }
	                else if (i == 2) {
	                    x = 380;
	                }
	                child.pos(x, -8);
	                this.giftBox.addChild(child);
	            }
	            child.setData(arr[i], i);
	        }
	    }
	    updateProBar() {
	        this.curTotalDay = EveryDaySignMgr.totalSignInDay;
	        this.totalDayLb.text = this.curTotalDay.toString();
	        let valueArr = SignInCfg.getTotalAward();
	        let len = valueArr.length;
	        for (let i = 0; i < valueArr.length; i++) {
	            let needValue = valueArr[i].value;
	            if (this.curTotalDay <= needValue) {
	                let lastIndex = 0;
	                if (i > 0) {
	                    lastIndex = valueArr[i - 1].value;
	                }
	                if (this.curTotalDay > 5) {
	                    this.proBar.value = ((this.curTotalDay - 3) - lastIndex) / (needValue - lastIndex) * 1 / len + i / len;
	                }
	                else {
	                    this.proBar.value = 0;
	                }
	                break;
	            }
	            else if (this.curTotalDay >= valueArr[len - 1].value) {
	                this.proBar.value = 1;
	            }
	        }
	    }
	    setDayListValue() {
	        let obj = EveryDaySignMgr.getSignDayIndex();
	        let index = Math.floor(obj.day / 5);
	        this.dayList.scrollBar.value = 0;
	        if (index >= 2) {
	            let listVal = (index + 1) * 188 - this.dayList.height;
	            this.dayList.scrollBar.value = listVal;
	        }
	    }
	    exitPanel() {
	        this.removeNoti();
	    }
	}

	class MonthlyRewardIcon extends ui.data.module.activity.MonthlyRewardIconUI {
	    setData(award) {
	        let str = award.split(",");
	        let pref = Number(str[1]);
	        let prefName = PropsCfg.getPref(pref);
	        let amount = Number(str[2]);
	        if (this.uiPref) {
	            this.uiPref.setAmount(amount);
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 115, 115, amount, pref);
	            this.uiPref.centerX = 9;
	            this.uiPref.top = 16;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	}

	class MonthlyCardPanel extends ui.data.module.activity.MonthlyCardPanelUI {
	    constructor() {
	        super();
	    }
	    onAwake() {
	        super.onAwake();
	        this.rewardList.itemRender = MonthlyRewardIcon;
	        this.rewardList.array = [];
	        this.rewardList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.btnBuy.on(Laya.Event.CLICK, this, this.onClickBuy);
	        this.btnReceived.on(Laya.Event.CLICK, this, this.getAward);
	    }
	    enterPanel() {
	        this.getData();
	        this.addNoti();
	        this.setReward();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.SHOP_BUYMONTHCARD, this.updateBtnState, this);
	        MsgCenter.listen(MsgConst.SHOP_RECEIVEWARD, this.updateBtnState, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.updateBtnState, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.SHOP_BUYMONTHCARD, this.updateBtnState, this);
	        MsgCenter.remove(MsgConst.SHOP_RECEIVEWARD, this.updateBtnState, this);
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.updateBtnState, this);
	    }
	    getData() {
	        let data = PaySHopCfg.getDataByType(2);
	        this.monthData = data ? data[0] : null;
	        this.updateBtnState();
	    }
	    setReward() {
	        if (!this.monthData)
	            return;
	        let award = this.monthData.extraGift;
	        if (!award)
	            return;
	        let rewardArr = award.split("_");
	        this.rewardList.array = rewardArr;
	    }
	    renderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    updateBtnState() {
	        if (!this.monthData)
	            return;
	        let data = BuyDiamondsMgr.getMonthCardIds();
	        let ids = BuyDiamondsMgr.getHasRecivedIIds();
	        let isBuy = data.some(item => item.id == this.monthData.cid);
	        let isGet = ids.some(item => item.id == this.monthData.cid);
	        this.lblCost.text = "￥" + this.monthData.price;
	        let days = BuyDiamondsMgr.getResidueDay();
	        this.residueDay.text = StringUtil.format(LanCfg.get("20090004"), days);
	        this.lblTips.visible = false;
	        if (isBuy) {
	            if (isGet) {
	                this.btnBuy.visible = false;
	                this.btnReceived.visible = false;
	                this.lblTips.visible = true;
	            }
	            else {
	                this.btnBuy.visible = false;
	                this.btnReceived.visible = true;
	            }
	            this.residueDay.visible = true;
	            this.buyFlag.visible = true;
	        }
	        else {
	            this.btnBuy.visible = true;
	            this.btnReceived.visible = false;
	            this.residueDay.visible = false;
	            this.buyFlag.visible = false;
	        }
	    }
	    onClickBuy() {
	        if (!this.monthData)
	            return;
	        if (Platfrom.isWebGm) {
	            let time = TimeMgr.ins().getTime();
	            BuyDiamondsMgr.updateMonthCardIIds(this.monthData.cid, time);
	        }
	        else {
	            ApiMgr.createOrder(this.monthData.cid, this.monthData.name);
	        }
	    }
	    getAward() {
	        if (!this.monthData)
	            return;
	        let time = TimeMgr.ins().getTime();
	        let obj = {
	            id: this.monthData.cid,
	            buyTime: time
	        };
	        BuyDiamondsMgr.updateHasRecivedIds(obj, 10);
	    }
	    exitPanel() {
	        this.removeNoti();
	    }
	}

	class OnlineRewardBotItem extends ui.data.module.activity.OnlineRewardBotItemUI {
	    onAwake() {
	        super.onAwake();
	        this.receiveImg.on(Laya.Event.CLICK, this, this.getAward);
	    }
	    setData(vo) {
	        this.data = vo;
	        this.updateRewardState();
	    }
	    updateRewardState() {
	        let lock = ActivityMgr.isUnlock(this.data.cid);
	        this.lblName.text = LanCfg.get("20130001");
	        this.lockImg.visible = true;
	        if (!lock) {
	            this.timeImg.visible = true;
	            this.receiveImg.visible = false;
	            this.boxPref.visible = false;
	            this.lblTime.text = this.data.targetTime + LanCfg.get("20013029");
	        }
	        else {
	            let isGet = ActivityMgr.isHasId(this.data.cid);
	            this.timeImg.visible = false;
	            this.receiveImg.visible = true;
	            this.boxPref.visible = true;
	            if (isGet) {
	                this.lblBtn.text = LanCfg.get("20130003");
	                this.receiveImg.gray = true;
	                this.receiveImg.mouseEnabled = false;
	                this.showReward();
	                this.lockImg.visible = false;
	            }
	            else {
	                this.lblBtn.text = LanCfg.get("20130002");
	                this.receiveImg.gray = false;
	                this.receiveImg.mouseEnabled = true;
	            }
	        }
	    }
	    showReward() {
	        if (!this.data)
	            return;
	        let award = this.data.award;
	        let strArr = award.split(",");
	        let id = Number(strArr[1]);
	        let count = Number(strArr[2]);
	        let prefName = PropsCfg.getPref(id);
	        let cfg = PropsCfg.get(id);
	        if (this.uiPref) {
	            this.uiPref.setAmount(count);
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 100, 100, count);
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 50;
	            this.boxPref.addChild(this.uiPref);
	        }
	        this.lblName.text = cfg ? LanCfg.get(cfg.name) : "";
	    }
	    getAward() {
	        ActivityMgr.updateHasRewardId(this.data.cid);
	    }
	}

	class OnlineRewardTopItem extends ui.data.module.activity.OnlineRewardTopItemUI {
	    onAwake() {
	        super.onAwake();
	        this.receiveImg.on(Laya.Event.CLICK, this, this.getAward);
	    }
	    setData(vo) {
	        this.data = vo;
	        this.updateRewardState();
	    }
	    updateRewardState() {
	        let lock = ActivityMgr.isUnlock(this.data.cid);
	        this.lblName.text = LanCfg.get("20130001");
	        this.lockImg.visible = true;
	        if (!lock) {
	            this.timeImg.visible = true;
	            this.receiveImg.visible = false;
	            this.boxPref.visible = false;
	            this.lblTime.text = this.data.targetTime + LanCfg.get("20013029");
	        }
	        else {
	            let isGet = ActivityMgr.isHasId(this.data.cid);
	            this.timeImg.visible = false;
	            this.receiveImg.visible = true;
	            this.boxPref.visible = true;
	            if (isGet) {
	                this.lblBtn.text = LanCfg.get("20130003");
	                this.receiveImg.gray = true;
	                this.receiveImg.mouseEnabled = false;
	                this.showReward();
	                this.lockImg.visible = false;
	            }
	            else {
	                this.lblBtn.text = LanCfg.get("20130002");
	                this.receiveImg.gray = false;
	                this.receiveImg.mouseEnabled = true;
	            }
	        }
	    }
	    showReward() {
	        if (!this.data)
	            return;
	        let award = this.data.award;
	        let strArr = award.split(",");
	        let id = Number(strArr[1]);
	        let count = Number(strArr[2]);
	        let prefName = PropsCfg.getPref(id);
	        let cfg = PropsCfg.get(id);
	        if (this.uiPref) {
	            this.uiPref.setAmount(count);
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 100, 100, count);
	            this.uiPref.centerX = 5;
	            this.uiPref.top = 50;
	            this.boxPref.addChild(this.uiPref);
	        }
	        this.lblName.text = cfg ? LanCfg.get(cfg.name) : "";
	    }
	    getAward() {
	        ActivityMgr.updateHasRewardId(this.data.cid);
	    }
	}

	class OnlineRewardsPanel extends ui.data.module.activity.OnlineRewardsPanelUI {
	    onAwake() {
	        super.onAwake();
	        this.topList.itemRender = OnlineRewardTopItem;
	        this.topList.array = [];
	        this.topList.renderHandler = Laya.Handler.create(this, this.topRenderHandler, null, false);
	        this.bottomList.itemRender = OnlineRewardBotItem;
	        this.bottomList.array = [];
	        this.bottomList.renderHandler = Laya.Handler.create(this, this.bottomRenderHandler, null, false);
	    }
	    enterPanel() {
	        this.getOnlineReawrdData();
	        this.addNoti();
	        this.updateTime();
	        this.timer.loop(1000, this, this.updateTime);
	    }
	    topRenderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    bottomRenderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.ONLINE_REAWARD_COLLECT, this.getOnlineReawrdData, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.getOnlineReawrdData, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.ONLINE_REAWARD_COLLECT, this.getOnlineReawrdData, this);
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.getOnlineReawrdData, this);
	    }
	    getOnlineReawrdData() {
	        let currGroup = ActivityMgr.getCurrGroup();
	        let data = OnlineRewardsCfg.splitData(currGroup);
	        if (!data)
	            return;
	        let topData = data.topItem;
	        let bottomData = data.bottomItem;
	        this.topList.array = topData;
	        this.bottomList.array = bottomData;
	    }
	    updateTime() {
	        let onlineTime = ActivityMgr.everyDayOnlineTime;
	        this.totalTime.text = StringUtil.format(LanCfg.get("20130009"), TimeMgr.ins().getTimeStrMs(onlineTime));
	        let mTime = Math.floor(onlineTime / 60);
	        if (mTime < 60) {
	            this.topList.refresh();
	            this.bottomList.refresh();
	        }
	    }
	    exitPanel() {
	        this.removeNoti();
	        this.clearTimer(this, this.updateTime);
	    }
	}

	class SevenDaySignInLItem extends ui.data.module.activity.SevenDaySignInLItemUI {
	    constructor() { super(); }
	    onAwake() {
	        super.onAwake();
	        this.on(Laya.Event.CLICK, this, this.onClickSignIn);
	    }
	    setData(vo) {
	        this.data = vo;
	        this.setBaseInfo();
	        this.addAward();
	        this.updateState();
	    }
	    setBaseInfo() {
	        this.dayLb.text = LanCfg.get(this.data.dayLbl);
	        this.giftName.text = LanCfg.get(this.data.sevenDesc);
	    }
	    addAward() {
	        if (!this.data.sevenAward)
	            return;
	        let strArr = this.data.sevenAward.split(",");
	        let id = Number(strArr[1]);
	        let count = Number(strArr[2]);
	        let prefName = PropsCfg.getPref(id);
	        if (this.uiPref) {
	            this.uiPref.setAmount(count);
	            this.uiPref.setNid(prefName);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 100, 100, count);
	            this.uiPref.centerX = 3;
	            this.uiPref.top = 65;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    updateState() {
	        this.mouseEnabled = false;
	        this.redPoint.visible = false;
	        if (this.data.state == SignState$1.eNoSign) {
	            this.receivedBg.visible = false;
	            this.boxPref.visible = true;
	            this.signInLb.visible = true;
	            this.effBg.visible = false;
	            this.unSignLbBg.visible = true;
	            this.signingLbBg.visible = false;
	        }
	        else if (this.data.state == SignState$1.eSinging) {
	            this.receivedBg.visible = false;
	            this.boxPref.visible = true;
	            this.signInLb.visible = true;
	            this.effBg.visible = true;
	            this.unSignLbBg.visible = false;
	            this.signingLbBg.visible = true;
	            this.mouseEnabled = true;
	            this.redPoint.visible = true;
	        }
	        else if (this.data.state == SignState$1.eFinish) {
	            this.receivedBg.visible = true;
	            this.boxPref.visible = false;
	            this.signInLb.visible = false;
	            this.effBg.visible = false;
	            this.unSignLbBg.visible = false;
	            this.signingLbBg.visible = false;
	        }
	        else {
	            this.receivedBg.visible = false;
	            this.boxPref.visible = true;
	            this.signInLb.visible = true;
	            this.unSignLbBg.visible = true;
	            this.effBg.visible = false;
	            this.signingLbBg.visible = false;
	        }
	    }
	    onClickSignIn() {
	        let time = TimeMgr.ins().getTime();
	        let obj = new SaveSignInVo();
	        obj.id = this.data.cid;
	        obj.time = time;
	        SignInMgr.updateSignState(obj);
	    }
	}

	class SevenDaySignInRItem extends ui.data.module.activity.SevenDaySignInRItemUI {
	    constructor() { super(); }
	    onAwake() {
	        super.onAwake();
	        this.on(Laya.Event.CLICK, this, this.onClickSignIn);
	    }
	    setData(vo) {
	        this.data = vo;
	        this.setBaseInfo();
	        this.addAward();
	        this.updateState();
	    }
	    setBaseInfo() {
	        this.dayLb.text = LanCfg.get(this.data.dayLbl);
	        this.giftName.text = LanCfg.get(this.data.sevenDesc);
	    }
	    addAward() {
	        if (!this.data.sevenAward)
	            return;
	        let strArr = this.data.sevenAward.split(",");
	        let id = Number(strArr[1]);
	        let count = Number(strArr[2]);
	        let prefName = PropsCfg.getPref(id);
	        if (this.uiPref) {
	            this.uiPref.setNid(prefName);
	            this.uiPref.setAmount(count);
	        }
	        else {
	            this.uiPref = new BuyPrefItem(prefName, 100, 100, count);
	            this.uiPref.centerX = 2;
	            this.uiPref.top = 150;
	            this.boxPref.addChild(this.uiPref);
	        }
	    }
	    updateState() {
	        this.mouseEnabled = false;
	        this.redPoint.visible = false;
	        if (this.data.state == SignState$1.eNoSign) {
	            this.receivedBg.visible = false;
	            this.boxPref.visible = true;
	            this.signInLb.visible = true;
	            this.effBg.visible = false;
	            this.unSignLbBg.visible = true;
	            this.signingLbBg.visible = false;
	        }
	        else if (this.data.state == SignState$1.eSinging) {
	            this.receivedBg.visible = false;
	            this.boxPref.visible = true;
	            this.signInLb.visible = true;
	            this.effBg.visible = true;
	            this.unSignLbBg.visible = false;
	            this.signingLbBg.visible = true;
	            this.mouseEnabled = true;
	            this.redPoint.visible = true;
	        }
	        else if (this.data.state == SignState$1.eFinish) {
	            this.receivedBg.visible = true;
	            this.boxPref.visible = false;
	            this.signInLb.visible = false;
	            this.effBg.visible = false;
	            this.unSignLbBg.visible = false;
	            this.signingLbBg.visible = false;
	        }
	        else {
	            this.receivedBg.visible = false;
	            this.boxPref.visible = true;
	            this.signInLb.visible = true;
	            this.effBg.visible = false;
	            this.unSignLbBg.visible = true;
	            this.signingLbBg.visible = false;
	        }
	    }
	    onClickSignIn() {
	        let time = TimeMgr.ins().getTime();
	        let obj = new SaveSignInVo();
	        obj.id = this.data.cid;
	        obj.time = time;
	        SignInMgr.updateSignState(obj);
	    }
	}

	class SevenDaySignInPanel extends ui.data.module.activity.SevenDaySignInPanelUI {
	    onAwake() {
	        super.onAwake();
	        this.leftList.itemRender = SevenDaySignInLItem;
	        this.leftList.array = [];
	        this.leftList.renderHandler = Laya.Handler.create(this, this.leftRenderHandler, null, false);
	        this.rightList.itemRender = SevenDaySignInRItem;
	        this.rightList.array = [];
	        this.rightList.renderHandler = Laya.Handler.create(this, this.rightRenderHandler, null, false);
	    }
	    enterPanel() {
	        this.addNoti();
	        this.getSignInData();
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.UPDATE_SIGNINSTATE, this.getSignInData, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.getSignInData, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.UPDATE_SIGNINSTATE, this.getSignInData, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.getSignInData, this);
	    }
	    leftRenderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    rightRenderHandler(cell) {
	        cell.setData(cell.dataSource);
	    }
	    getSignInData() {
	        let data = SignInCfg.splitData();
	        if (!data)
	            return;
	        let leftData = data.leftItem;
	        let rightData = data.rightItem;
	        this.leftList.array = leftData;
	        this.rightList.array = rightData;
	    }
	    exitPanel() {
	        this.removeNoti();
	    }
	}

	const PanelMap = {
	    [0]: SevenDaySignInPanel,
	    [1]: EveryDaySignInPanel,
	    [2]: OnlineRewardsPanel,
	    [3]: MonthlyCardPanel,
	};
	class ActivityView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.selectIndex = 0;
	    }
	    onAwake() {
	        super.onAwake();
	        this.btnList.itemRender = ActivityButton;
	        this.btnList.array = [];
	        this.btnList.vScrollBarSkin = "";
	        this.btnList.elasticEnabled = true;
	        this.btnList.renderHandler = Laya.Handler.create(this, this.renderHandler, null, false);
	        this.btnList.selectHandler = Laya.Handler.create(this, this.selectedItem, null, false);
	        this.btnList.selectEnable = true;
	        this.btnClose.on(Laya.Event.CLICK, this, this._closeUi);
	    }
	    openUi(index) {
	        super.openUi(index);
	        this.addNoti();
	        this.addPanel();
	        this.showBtn();
	        this.selectedItem(index);
	    }
	    addNoti() {
	        MsgCenter.listen(MsgConst.ONLINE_REAWARD_COLLECT, this.showBtn, this);
	        MsgCenter.listen(MsgConst.SHOP_BUYMONTHCARD, this.showBtn, this);
	        MsgCenter.listen(MsgConst.SHOP_RECEIVEWARD, this.showBtn, this);
	        MsgCenter.listen(MsgConst.UPDATE_SIGNINSTATE, this.showBtn, this);
	        MsgCenter.listen(MsgConst.RESET_DAYTIME, this.updateZero, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_GETGIFT, this.showBtn, this);
	        MsgCenter.listen(MsgConst.EVERYDAYSIGN_HASGETGIFT, this.showBtn, this);
	    }
	    removeNoti() {
	        MsgCenter.remove(MsgConst.ONLINE_REAWARD_COLLECT, this.showBtn, this);
	        MsgCenter.remove(MsgConst.SHOP_BUYMONTHCARD, this.showBtn, this);
	        MsgCenter.remove(MsgConst.SHOP_RECEIVEWARD, this.showBtn, this);
	        MsgCenter.remove(MsgConst.UPDATE_SIGNINSTATE, this.showBtn, this);
	        MsgCenter.remove(MsgConst.RESET_DAYTIME, this.updateZero, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_GETGIFT, this.showBtn, this);
	        MsgCenter.remove(MsgConst.EVERYDAYSIGN_HASGETGIFT, this.showBtn, this);
	    }
	    updateZero() {
	        ActivityMgr.createData();
	        this.addPanel();
	        this.showBtn();
	    }
	    showBtn() {
	        ActivityMgr.updateRed();
	        this.btnList.array = ActivityMgr.actData ? ActivityMgr.actData : [];
	        this.selectedItem(this.selectIndex);
	    }
	    addPanel() {
	        let data = ActivityMgr.actData;
	        if (data.length === 0)
	            return;
	        this.clearData();
	        for (let i = 0; i < data.length; i++) {
	            let panel = PanelMap[data[i].type];
	            this.actPanel.addItem(new panel());
	        }
	    }
	    renderHandler(cell, index) {
	        let selected = false;
	        if (this.selectIndex === index) {
	            selected = true;
	        }
	        cell.setData(cell.dataSource, selected);
	    }
	    selectedItem(index) {
	        this.btnList.selectedIndex = index;
	        this.selectIndex = index;
	        if (index === -1)
	            return;
	        this.setPanelSize();
	        this.openPanel(index);
	    }
	    setPanelSize() {
	        if (this.btnList.selectedIndex === 2) {
	            this.actPanel.x = 266;
	            this.actPanel.y = 72;
	            this.actPanel.width = 756;
	            this.actPanel.height = 520;
	        }
	        else {
	            this.actPanel.x = 266;
	            this.actPanel.y = 95;
	            this.actPanel.width = 739;
	            this.actPanel.height = 491;
	        }
	    }
	    clearData() {
	        for (let i = 0; i < this.actPanel.items.length; i++) {
	            let element = this.actPanel.items[i];
	            element.exitPanel();
	        }
	        this.actPanel.setItems([]);
	    }
	    openPanel(index) {
	        if (index === -1)
	            return;
	        let vo = this.btnList.array[index];
	        if (!vo)
	            return;
	        this.actPanel.items.forEach(item => {
	            item.visible = false;
	        });
	        let panel = this.actPanel.items[index];
	        panel.visible = true;
	        panel.enterPanel();
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        this.removeNoti();
	    }
	}

	class HomeTaskInfoView extends BaseView {
	    constructor() {
	        super(...arguments);
	        this.index = 0;
	    }
	    onAwake() {
	        super.onAwake();
	        this.nextBtn.on(Laya.Event.CLICK, this, this.onNextQuestClickEX);
	        this.jumpBtn.on(Laya.Event.CLICK, this, this.skipQuesteEX);
	    }
	    openUi(index) {
	        super.openUi(index);
	        this.index = index;
	        this.setData();
	        MsgCenter.listen(MsgConst.UPDATE_HOMETASK, this.setData, this);
	    }
	    setData() {
	        let goalIndex = this.index;
	        let goals = Glob.currLevelData.ActiveStarGoals;
	        let goal = goals[goalIndex];
	        if (!goal)
	            return;
	        goal.EverViewed = true;
	        this.goalVo = goal;
	        this.setTitle();
	        let isFinished = goal.Complete;
	        let icon = goal.getIconPrefName();
	        this.boxPref.removeChildren();
	        if (goal.HasIcon) {
	            this.pref = UiPrefMgr.get(icon, 180, 180);
	            this.pref.centerX = -10;
	            this.pref.centerY = 5;
	            this.boxPref.addChild(this.pref);
	        }
	        else {
	            this.disposePref();
	        }
	        this.taskDesLb.text = goal.HelpText;
	        this.taskDesLb.visible = !isFinished;
	        this.taskOperLb.text = goal.Text;
	        this.taskCountLb.text = StringUtil.format(LanCfg.get("10020029"), goal.TimesDoneSoFar, goal.TimesToComplete);
	        this.taskCountLb.visible = goal.TimesToComplete > 1 && !isFinished;
	        this.nextBtn.visible = isFinished;
	        this.jumpBtn.visible = goal.CanPayToSkip && !isFinished;
	        this.finishStamp.visible = isFinished;
	        this.moneyLb.text = goal.skipCost.toString();
	        let prefId = goal.GetNormalRewardPrefab();
	        this.getAward(prefId);
	    }
	    disposePref() {
	        if (this.pref) {
	            this.pref.clear();
	            this.pref = null;
	        }
	    }
	    setTitle() {
	        let str = "";
	        str = (this.goalVo.chain == GoalChainID.A) ? (LanCfg.get("20017006") + " " + this.goalVo.chainQuestNumber) : ((this.goalVo.chain != GoalChainID.B) ? (LanCfg.get("20017007") + " " + this.goalVo.chainQuestNumber) : (LanCfg.get("20017008") + " " + this.goalVo.chainQuestNumber));
	        this.titleLb.text = str;
	    }
	    getAward(id) {
	        this.awardBox.removeChildren();
	        let prefCfg = PropsCfg.get(id);
	        this.desLb.text = prefCfg.name + StringUtil.format(LanCfg.get("10010015"), prefCfg.itemLevel);
	        if (this.awardPref) {
	            this.awardPref.clear();
	            this.awardPref = null;
	        }
	        this.awardPref = UiPrefMgr.get(prefCfg.pref);
	        this.awardPref.centerX = 0;
	        this.awardPref.centerY = 0;
	        this.awardBox.addChild(this.awardPref);
	    }
	    onNextQuestClickEX() {
	        SoundMgr.ins().playSound("165");
	        let levelData = Glob.currLevelData;
	        levelData.TryUpdateActiveGoalSetIfChainsExist();
	        GoalMgr.ins().RefreshActiveGoals();
	        this.goalVo.DropReward();
	    }
	    skipQuesteEX() {
	        if (this.goalVo.CanPayToSkip) {
	            if (CurrencyMgr.ins().CanAfford(ECurrency.Diamond, this.goalVo.skipCost)) {
	                CurrencyMgr.ins().charge(ECurrency.Diamond, this.goalVo.skipCost);
	                ApiMgr.addYbRecord(this.goalVo.skipCost, LogCostType.SkipHomeTask);
	                this.goalVo.Skip();
	            }
	            else {
	                CurrencyMgr.ins().showNotEnoughPremiumCurrency();
	            }
	        }
	    }
	    fitterPos() {
	        this.pos(90, 133);
	    }
	    closeUi(arg) {
	        super.closeUi(arg);
	        MsgCenter.remove(MsgConst.UPDATE_HOMETASK, this.setData, this);
	    }
	}

	class LayerReg {
	    constructor(mgr) {
	        this.mgr = mgr;
	    }
	    reg(id, uiclas, layer, arg) {
	        this.mgr.register(id, uiclas, layer, arg);
	    }
	    regUi() {
	        var uc = UiConst;
	        var mgr = this.mgr;
	        this.reg(uc.CurrencyDetailView, CurrencyDetailView, mgr.uiMain);
	        this.reg(uc.EnergyInfoView, EnergyInfoView, mgr.uiMain);
	        this.reg(uc.EnergyBuyView, EnergyBuyView, mgr.uiMain);
	        this.reg(uc.ReloadView, ReloadView, mgr.uiTop);
	        this.reg(uc.ModalDialogGeneric1Button, ModalDialogGeneric1Button, mgr.uiPopup);
	        this.reg(uc.ModalDialogGeneric2Button, ModalDialogGeneric2Button, mgr.uiPopup);
	        this.reg(uc.ModalDialogConfirmPurchase, ModalDialogConfirmPurchase, mgr.uiPopup);
	        this.reg(uc.ModalProgressionDupe, ModalProgressionDupe, mgr.uiPopup);
	        this.reg(uc.ModalUpgradeConfirm, ModalUpgradeConfirm, mgr.uiPopup);
	        this.reg(uc.ModalPremiumLand, ModalPremiumLand, mgr.uiPopup);
	        this.reg(uc.ModalFogAreaInfo, ModalFogAreaInfo, mgr.uiPopup);
	        this.reg(uc.ModalTimedBundle, ModalTimedBundle, mgr.uiPopup);
	        this.reg(uc.ThingActionView, ThingActionView, mgr.uiPopup);
	        this.reg(uc.WorldView, WorldView, mgr.uiWorld);
	        this.reg(uc.WorldInfoView, WorldInfoView, mgr.rightCenter);
	        this.reg(uc.WorldChallengeEnter, WorldChallengeEnter, mgr.rightCenter);
	        this.reg(uc.WorldPropView, WorldPropView, mgr.uiMain);
	        this.reg(uc.LevelLootInfo, LevelLootInfo, mgr.uiMain);
	        this.reg(uc.LevelQuitView, LevelQuitView, mgr.uiMain);
	        this.reg(uc.LevelWinView, LevelWinView, mgr.uiMain);
	        this.reg(uc.LevelResetView, LevelResetView, mgr.uiMain);
	        this.reg(uc.LevelSettleView, LevelSettleView, mgr.uiMain);
	        this.reg(uc.LevelChestView, LevelChestView, mgr.uiMain);
	        this.reg(uc.LevelChestBuyView, LevelChestBuyView, mgr.uiPopup);
	        this.reg(uc.MainGoalView, MainGoalView, mgr.uiMain);
	        this.reg(uc.SubGoalView, SubGoalView, mgr.uiMain);
	        this.reg(uc.ChallengeClockView, ChallengeClockView, mgr.uiMain);
	        this.reg(uc.ChallengeSettleView, ChallengeSettleView, mgr.uiMain);
	        this.reg(uc.ChallengeAddTimeView, ChallengeAddTimeView, mgr.uiMain);
	        this.reg(uc.ChallengeExitView, ChallengeExitView, mgr.uiMain);
	        this.reg(uc.HeadlineView, HeadlineView, mgr.uiPopup);
	        this.reg(uc.ShopView, ShopView, mgr.uiMain);
	        this.reg(uc.TutorialView, TutorialView, mgr.uiMain);
	        this.reg(uc.TutorialFocusView, TutorialFocusView, mgr.uiGuide);
	        this.reg(uc.DragonView, DragonView, mgr.uiMain);
	        this.reg(uc.DragonInfoView, DragonInfoView, mgr.uiMain);
	        this.reg(uc.DragonMergeView, DragonMergeView, mgr.uiMain);
	        this.reg(uc.DailyQuestView, DailyQuestView, mgr.uiMain);
	        this.reg(uc.AtlasView, AtlasView, mgr.uiMain);
	        this.reg(uc.FirstChargeView, FirstChargeView, mgr.uiMain);
	        this.reg(uc.PromptView, PromptView, mgr.uiPopup);
	        this.reg(uc.EggTreasuryView, EggTreasuryView, mgr.uiMain);
	        this.reg(uc.SelectDragonEggView, SelectDragonEggView, mgr.uiMain);
	        this.reg(uc.DragonEggInfoView, DragonEggInfoView, mgr.uiPopup);
	        this.reg(uc.SettingView, SettingView, mgr.uiMain);
	        this.reg(uc.ExchangeCodeView, ExchangeCodeView, mgr.uiMain);
	        this.reg(uc.FunctionView, FunctionView, mgr.uiPopup);
	        this.reg(uc.LangView, LangView, mgr.uiMain);
	        this.reg(uc.ResetCourseView, ResetCourseView, mgr.uiMain);
	        this.reg(uc.GmView, GmView, mgr.uiMain);
	        this.reg(uc.HomeTaskView, HomeTaskView, mgr.uiMain);
	        this.reg(uc.HomeTaskInfoView, HomeTaskInfoView, mgr.uiMain);
	        this.reg(uc.ActivityView, ActivityView, mgr.uiMain);
	    }
	}

	class LayerMgr extends Singleton {
	    constructor() {
	        super();
	        this.poolList = {};
	        this.showList = {};
	        this.fitW = [];
	        this.fitH = [];
	        this.fitAll = [];
	        this.fitCenterY = [];
	        this._regMap = {};
	        this.preCenterY = 0;
	        this.layerReg = new LayerReg(this);
	    }
	    init() {
	        this.leftBottom = new Laya.Sprite();
	        this.leftBottom.name = "leftBottom";
	        this.leftTop = new Laya.Sprite();
	        this.leftTop.name = "leftTop";
	        this.rightTop = new Laya.Sprite();
	        this.rightTop.name = "rightTop";
	        this.rightBottom = new Laya.Sprite();
	        this.rightBottom.name = "rightBottom";
	        this.rightCenter = new Laya.Sprite();
	        this.rightCenter.name = "rightCenter";
	        this.leftCenter = new Laya.Sprite();
	        this.leftCenter.name = "leftCenter";
	        this.uiScene = new Laya.Sprite();
	        this.uiScene.name = "uiScene";
	        this.uiWorld = new Laya.Sprite();
	        this.uiWorld.name = "uiWorld";
	        this.uiFloor = new Laya.Sprite();
	        this.uiFloor.name = "uiFloor";
	        this.uiFull = new Laya.Sprite();
	        this.uiFull.name = "uiFull";
	        this.uiMain = new Laya.Sprite();
	        this.uiMain.name = "uiMain";
	        this.uiPopup = new Laya.Sprite();
	        this.uiPopup.name = "uiPopup";
	        this.uiAlert = new Laya.Sprite();
	        this.uiAlert.name = "uiAlert";
	        this.uiTips = new Laya.Sprite();
	        this.uiTips.name = "uiTips";
	        this.uiMsg = new Laya.Sprite();
	        this.uiMsg.name = "uiMsg";
	        this.uiGuide = new Laya.Sprite();
	        this.uiGuide.name = "uiGuide";
	        this.uiLoading = new Laya.Sprite();
	        this.uiLoading.name = "uiLoading";
	        this.uiTop = new Laya.Sprite();
	        this.uiTop.name = "uiTop";
	        Loading.ins().setContainer(this.uiLoading);
	        Laya.stage.addChild(this.uiScene);
	        Laya.stage.addChild(this.uiWorld);
	        Laya.stage.addChild(this.uiFloor);
	        Laya.stage.addChild(this.uiFull);
	        Laya.stage.addChild(this.uiMain);
	        Laya.stage.addChild(this.uiPopup);
	        Laya.stage.addChild(this.uiAlert);
	        Laya.stage.addChild(this.uiTips);
	        Laya.stage.addChild(this.uiMsg);
	        Laya.stage.addChild(this.uiGuide);
	        Laya.stage.addChild(this.uiLoading);
	        Laya.stage.addChild(this.uiTop);
	        this.uiFloor.addChild(this.leftBottom);
	        this.uiFloor.addChild(this.rightTop);
	        this.uiFloor.addChild(this.leftTop);
	        this.uiFloor.addChild(this.rightBottom);
	        this.uiFloor.addChild(this.rightCenter);
	        this.uiFloor.addChild(this.leftCenter);
	        this.fitW.push(this.rightTop, this.rightCenter);
	        this.fitH.push(this.leftBottom);
	        this.fitAll.push(this.rightBottom);
	        this.fitCenterY.push(this.rightCenter, this.leftCenter);
	        this.layerReg.regUi();
	        Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
	        MsgCenter.listenonce(MsgConst.ENTER_GAME, this.onResize, this);
	    }
	    onResize() {
	        var h = Laya.stage.height;
	        var w = Laya.stage.width;
	        this.fitUi(w, h);
	        console.log("屏幕宽高:" + w + "_" + h);
	        MsgCenter.notify(MsgConst.RESIZE_WINDOW);
	    }
	    fitUi(w, h) {
	        for (var uiP of this.fitW) {
	            uiP.x = w;
	        }
	        for (var uiP of this.fitH) {
	            uiP.y = h;
	        }
	        for (var uiP of this.fitAll) {
	            uiP.pos(w, h, true);
	        }
	        var fitY;
	        for (var uip of this.fitCenterY) {
	            uip.y = h / 2;
	            if (!fitY) {
	                fitY = uip.y - this.preCenterY;
	            }
	        }
	        this.preCenterY = h / 2;
	    }
	    register(id, uiclas, layer = null, arg = null) {
	        if (!layer) {
	            layer = this.uiMain;
	        }
	        this._regMap[id] = [uiclas, arg, layer];
	    }
	    open(id, arg = null, floatMsg = true) {
	        if (FunOpenMgr.ins().windowIsOpen(id, floatMsg)) {
	            this.openUi(id, arg);
	            return 0;
	        }
	        else {
	            return 1;
	        }
	    }
	    close(id, arg) {
	        var win = this.closeUi(id, arg);
	        return win;
	    }
	    closeAll() {
	        this.closeAllUi();
	    }
	    closeCurWinBg() {
	        if (this.curView) {
	            this.curView.onBgClick();
	        }
	    }
	    openUi(id, arg = null) {
	        var winId = id;
	        var showItem = this.showList[winId];
	        if (showItem) {
	            if (!showItem.openAniOver)
	                return;
	            this.closeUi(winId);
	            return;
	        }
	        var ui = this.poolList[winId];
	        if (!ui) {
	            var uiData = this._regMap[id];
	            if (!uiData) {
	                console.error("该窗口没有注册哦：" + id);
	                return;
	            }
	            ui = new uiData[0](id);
	            ui.uiParent = uiData[2];
	            ui.name = winId;
	        }
	        else if (this.curView && this.curView.name == winId) {
	            this.closeUi(id);
	            this.curView = null;
	            return;
	        }
	        if (ui.isShow) {
	            return;
	        }
	        if (this.curView) {
	            if (ui.nextUi != this.curView.id) {
	                ui.previousUi = this.curView.name;
	                this.curView.nextUi = ui.name;
	            }
	        }
	        let isModal = ui instanceof BaseModal;
	        if (isModal) {
	            if (this.curView instanceof BaseModal) {
	                this.curView.visible = false;
	                this.curView.hideWindow();
	            }
	        }
	        ui.arg = arg;
	        ui.isOpenUi = true;
	        ShortLoading.ins().show();
	        ui.uiParent.addChild(ui);
	        this.curView = ui;
	        this.curView.visible = true;
	        this.curView.showWindow();
	        this.showList[winId] = ui;
	    }
	    closeUi(id, arg) {
	        var ui = this.showList[id];
	        if (ui) {
	            var previousUI;
	            if (!StringUtil.isEmpty(ui.previousUi)) {
	                previousUI = this.showList[ui.previousUi];
	            }
	            var setNull = false;
	            if (previousUI) {
	                previousUI.visible = true;
	                if (previousUI.parent) {
	                    if (previousUI.showBlackBG)
	                        ViewBg.ins().show(previousUI);
	                    this.curView = previousUI;
	                }
	                else {
	                    setNull = true;
	                }
	            }
	            else {
	                setNull = true;
	            }
	            if (setNull) {
	                if (this.curView == ui) {
	                    this.curView = null;
	                }
	            }
	            delete this.showList[id];
	            this.poolList[id] = ui;
	            ui.previousUi = "";
	            ui.nextUi = "";
	            ui.windowCloseUi(arg);
	        }
	        return ui;
	    }
	    closeAllUi() {
	        for (let uiName in this.showList) {
	            this.closeUi(uiName);
	        }
	        this.curView = null;
	    }
	    closeCurUi() {
	        if (this.curView) {
	            this.closeUi(this.curView.id);
	        }
	    }
	    closeAllPop() {
	        for (let uiName in this.showList) {
	            var uiData = this._regMap[uiName];
	            let uiParent = uiData[2];
	            if (uiParent === this.uiPopup) {
	                this.closeUi(uiName);
	                if (this.curView && uiName === this.curView.name) {
	                    this.curView = null;
	                }
	            }
	        }
	    }
	    winIsShow(id, cid) {
	        var win = this.showList[id];
	        if (win) {
	            return win.isOpenUi;
	        }
	        return false;
	    }
	    windowIsShow() {
	        for (var key in this.showList) {
	            var view = this.showList[key];
	            if (view.visible) {
	                return true;
	            }
	        }
	        return false;
	    }
	    isLoginShowWin() {
	        if (this.windowIsShow()) {
	            return false;
	        }
	        return true;
	    }
	    delPool(id) {
	        delete this.poolList[id];
	    }
	    getCurViewId() {
	        if (this.curView)
	            return this.curView.id;
	        return "";
	    }
	}

	class InputMgr {
	    static updatePlayingState() {
	        this.updateTouches();
	        if (this.allowDrag) {
	            MoverMgr.update();
	        }
	        this.updateTaps();
	    }
	    static updateWorldMap() {
	        this.updateTouches();
	        this.updateTaps();
	    }
	    static updateTouches() {
	        if (!this.touches) {
	            this.zoomThis = false;
	            return;
	        }
	        ;
	        if (this.touches.length > 0) {
	            this.touch0 = this.touches[0];
	            if (this.touches.length > 1) {
	                this.touch1 = this.touches[1];
	                if (this.touch1.stageX == undefined || this.touch0.stageX == undefined) {
	                    this.zoomThis = false;
	                    return;
	                }
	                ;
	                this.currZoomSep = MathUtil.getDistance(this.touch0.stageX, this.touch0.stageY, this.touch1.stageX, this.touch1.stageY);
	            }
	        }
	        this.zoomThis = this.touches.length == 2;
	        if (this.zoomThis) {
	            this.zoomCenter.x = this.touch0.stageX + (this.touch1.stageX - this.touch0.stageX) / 2;
	            this.zoomCenter.y = this.touch0.stageY + (this.touch1.stageY - this.touch0.stageY) / 2;
	        }
	        if (this.isZooming) {
	            this.zoomChange = this.currZoomSep - this.prevZoomSep;
	        }
	    }
	    static updateTaps() {
	        this.tapTimer.update(Glob.deltaTime);
	        if (this.mainActionDown && !this.isDownPrev) {
	            this.originalClickPoint.setValue(this.mouseX, this.mouseY);
	        }
	        this.updateTapsMain();
	        this.isDownPrev = this.mainActionDown;
	    }
	    static updateTapsMain() {
	        let cursor = this.underCursor;
	        if (this.isDown() && cursor) {
	            this.activeObj = cursor;
	            return;
	        }
	        else {
	        }
	        this.clear();
	    }
	    static initMouseEvent(box) {
	        this.mouseBox = box;
	        box.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
	    }
	    static onMouseDown(e) {
	        this._isDown = true;
	        this._justPressed = true;
	        Laya.timer.frameOnce(1, this, () => { this._justPressed = false; });
	        if (Laya.Browser.onAndroid || Laya.Browser.onIOS) {
	            this.touches = e.touches;
	        }
	        else {
	            this.touches = [{ stageX: e.stageX, stageY: e.stageY }];
	        }
	        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
	        Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
	        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
	    }
	    static onMouseUp(e) {
	        if (e.touches && e.touches.length != 0) {
	            this.touches = e.touches;
	            this._justReleased = true;
	            Laya.timer.frameOnce(1, this, () => { this._justReleased = false; });
	            return;
	        }
	        this._isDown = false;
	        this._justReleased = true;
	        Laya.timer.frameOnce(1, this, () => { this._justReleased = false; });
	        this.touches = null;
	        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
	        Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
	        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
	    }
	    static onMouseMove(e) {
	        if (Laya.Browser.onAndroid || Laya.Browser.onIOS) {
	            this.touches = e.touches;
	        }
	        else {
	            this.touches = [{ stageX: e.stageX, stageY: e.stageY }];
	        }
	    }
	    static get mouseX() {
	        if (this.touches && this.touches.length > 0) {
	            return this.touches[0].stageX >> 0;
	        }
	        return Laya.MouseManager.instance.mouseX >> 0;
	    }
	    static get mouseY() {
	        if (this.touches && this.touches.length > 0) {
	            return this.touches[0].stageY >> 0;
	        }
	        return Laya.MouseManager.instance.mouseY >> 0;
	    }
	    static get mouseXPer() {
	        return this.mouseX / Laya.stage.width;
	    }
	    static get mouseYPer() {
	        return this.mouseY / Laya.stage.height;
	    }
	    static get underCursor() {
	        if (!this.underCursorSet) {
	            this._underCursor = Glob.scene.getObjByPoint(this.mouseX, this.mouseY);
	            this.underCursorSet = true;
	        }
	        return this._underCursor;
	    }
	    static get cellUnderCursor() {
	        let pos = this.mousePosCamera;
	        let r = Glob.cellLayer.getCellCameraPos(pos.x, pos.y);
	        return r;
	    }
	    static finalUpdate() {
	        if (!this.uiHas) {
	            this.lastMousePosCamera = this.mousePosCamera;
	            this.underCursorSet = false;
	            this._underCursor = null;
	            this.zoomLast = this.zoomThis;
	            if (this.touches && this.touches.length > 1) {
	                this.prevZoomSep = this.currZoomSep;
	            }
	        }
	    }
	    static get uiHas() {
	        if (LayerMgr.ins().windowIsShow()) {
	            return true;
	        }
	        return false;
	    }
	    static clear() {
	        this.activeObj = null;
	    }
	    static preZoom() {
	        if (this.zoomThis) {
	            this.zoomWorldPre = CameraMgr.toCameraPos(this.zoomCenter.x, this.zoomCenter.y);
	        }
	    }
	    static postZoom() {
	        if (this.zoomThis) {
	            this.zoomWorldPost = CameraMgr.toCameraPos(this.zoomCenter.x, this.zoomCenter.y);
	            Laya.Vector3.subtract(this.zoomWorldPost, this.zoomWorldPre, this.panDisp);
	        }
	    }
	    static zoomSkipped() {
	        this.panDisp.toDefault();
	    }
	    static get isZooming() {
	        return this.zoomLast && this.zoomThis;
	    }
	    static get zoomUnits() {
	        if (this.isZoomDisabled) {
	            return 0;
	        }
	        if (this.isZooming) {
	            let num = this.zoomChange / ((Laya.stage.width + Laya.stage.height) / 2);
	            return num * 2.5;
	        }
	        return 0;
	    }
	    static get mousePosCamera() {
	        let r = CameraMgr.toCameraPos(this.mouseX, this.mouseY, 0 - CameraMgr.z);
	        return r;
	    }
	    static get mouseFrameDispCamera() {
	        let r = new Laya.Vector3();
	        if (this.isZooming) {
	            let mouse = this.mousePosCamera;
	            r.x = this.panDisp.x + mouse.x - this.lastMousePosCamera.x;
	            r.y = this.panDisp.y + mouse.y - this.lastMousePosCamera.y;
	            r.z = this.panDisp.z + mouse.z - this.lastMousePosCamera.z;
	        }
	        else {
	            Laya.Vector3.subtract(this.mousePosCamera, this.lastMousePosCamera, r);
	        }
	        return r;
	    }
	    static screenToInches(screenPixelAmount) {
	        return screenPixelAmount / 333;
	    }
	    static isDown() {
	        return this._isDown;
	    }
	    static inputJustPressed() {
	        return this._justPressed;
	    }
	    static inputJustReleased() {
	        return this._justReleased;
	    }
	    static get mainActionDown() {
	        return this.fingerCount == 1 && this.isDown();
	    }
	    static get fingerCount() {
	        if (this.touches) {
	            return this.touches.length;
	        }
	        return 0;
	    }
	}
	InputMgr.allowDrag = true;
	InputMgr._isDown = false;
	InputMgr._justPressed = false;
	InputMgr._justReleased = false;
	InputMgr.isDownPrev = false;
	InputMgr.underCursorSet = false;
	InputMgr.zoomThis = false;
	InputMgr.zoomLast = false;
	InputMgr.zoomChange = 0;
	InputMgr.isZoomDisabled = false;
	InputMgr.currZoomSep = 0;
	InputMgr.prevZoomSep = 0;
	InputMgr.zoomCenter = new Laya.Vector2();
	InputMgr.zoomWorldPre = new Laya.Vector3();
	InputMgr.zoomWorldPost = new Laya.Vector3();
	InputMgr.panDisp = new Laya.Vector3();
	InputMgr.tapTimer = new Clock(0.6);
	InputMgr.originalClickPoint = new Laya.Vector2();

	class CameraMgr {
	    static get x() {
	        return this.camera.transform.position.x;
	    }
	    static get y() {
	        return this.camera.transform.position.y;
	    }
	    static get z() {
	        return this.camera.transform.position.z;
	    }
	    static get screenSizeInWorldCoords() {
	        let vector = this.toCameraPos(0, 0, 0);
	        let vector2 = this.toCameraPos(Laya.stage.width, Laya.stage.height, 0);
	        return new Laya.Vector2(vector.x - vector2.x, vector.y - vector2.y);
	    }
	    static get screenCenterWorldCoords() {
	        let vector = this.toCameraPos(0, 0, 0);
	        let vector2 = this.toCameraPos(Laya.stage.width, Laya.stage.height, 0);
	        return new Laya.Vector2(vector2.x - vector.x / 2, vector2.y - vector.y / 2);
	    }
	    static get screenWidthHeightFactorInWorldCoords() {
	        let screenSizeInWorldCoords = this.screenSizeInWorldCoords;
	        return (screenSizeInWorldCoords.x + screenSizeInWorldCoords.y) / 2;
	    }
	    static init(camera) {
	        this.camera = camera;
	        this.startingZoom = camera.orthographicVerticalSize;
	    }
	    static initShakeWatcher(sp) {
	        this.shakeHandler = sp.addComponent(CompShakeWatcher);
	    }
	    static update() {
	        let state = this.state;
	        if (state == CameraState.Idle) {
	            this.updateIdle();
	        }
	        else if (state == CameraState.GlideToFollowTarget) {
	            if (this.target == null || !this.target.active) {
	                this.clearFollowTarget();
	            }
	            else {
	                this.checkForDrag();
	                if (state == CameraState.GlideToFollowTarget) {
	                    this.updateGlideToFollowTarget();
	                }
	            }
	        }
	        else if (state == CameraState.Follow) {
	            if (this.target == null || !this.target.active) {
	                this.clearFollowTarget();
	            }
	            else {
	                let drawnCenter = this.target.transform.position;
	                let x = drawnCenter.x + this.centerOffset.x;
	                let y = drawnCenter.y + this.centerOffset.y;
	                this.camera.transform.position = new Laya.Vector3(x, y, this.z);
	                this.checkForDrag();
	            }
	        }
	        else if (state == CameraState.GlideToPosition) {
	            this.updateGlideToPosition();
	        }
	        else if (state == CameraState.JumpToObject) {
	            let drawnCenter = this.target.transform.position;
	            let x = drawnCenter.x + this.centerOffset.x;
	            let y = drawnCenter.y + this.centerOffset.y;
	            this.camera.transform.position = new Laya.Vector3(x, y, this.z);
	            this.state = CameraState.Idle;
	        }
	        else if (state == CameraState.JumpToPosition) {
	            this.camera.transform.position = new Laya.Vector3(this.focusPoint.x + this.centerOffset.x, this.focusPoint.y + this.centerOffset.y, this.z);
	            this.state = CameraState.Idle;
	        }
	        else if (state == CameraState.PreDragBuffer) {
	            this.updatePreDragBuffer();
	        }
	        else if (state == CameraState.Drag) {
	            this.updateDrag();
	        }
	        else if (state == CameraState.DragResidual) {
	            this.updateDragResidual();
	        }
	        else {
	            console.warn("Unhandled State in CameraMgr update(): " + state);
	        }
	        this.checkForZoom();
	        this.stayInBounds();
	        this.applyCameraShake();
	    }
	    static applyCameraShake() {
	        if (this.shakeHandler) {
	            this.camera.transform.position = new Laya.Vector3(this.x + this.shakeHandler.shakeAmountThisFrame.x, this.y + this.shakeHandler.shakeAmountThisFrame.y, this.z);
	        }
	    }
	    static updateGlideToFollowTarget() {
	        if (this.target == null)
	            return;
	        let center = this.target.drawnCenter;
	        let d = 0.075 * Glob.deltaTime * 60;
	        let x = this.x + (center.x - this.x + this.centerOffset.x) * d;
	        let y = this.y + (center.y - this.y + this.centerOffset.y) * d;
	        let num = MathUtil.getDistance(x, y, center.x + this.centerOffset.x, center.y + this.centerOffset.y);
	        if (num <= 0.01) {
	            x = center.x + this.centerOffset.x;
	            y = center.y + this.centerOffset.y;
	            this.state = CameraState.Follow;
	        }
	        this.camera.transform.position = new Laya.Vector3(x, y, this.z);
	    }
	    static updateGlideToPosition() {
	        let d = this.swoopSpeed * Glob.deltaTime * 60;
	        let x = this.x + (this.focusPoint.x - this.x + this.centerOffset.x) * d;
	        let y = this.y + (this.focusPoint.y - this.y + this.centerOffset.y) * d;
	        let num = MathUtil.getDistance(x, y, this.focusPoint.x + this.centerOffset.x, this.focusPoint.y + this.centerOffset.y);
	        if (num <= 0.01) {
	            if (this.onCameraTransitionComplete) {
	                this.onCameraTransitionComplete();
	                this.onCameraTransitionComplete = null;
	                this.swoopSpeed = 0.075;
	            }
	            x = this.focusPoint.x + this.centerOffset.x;
	            y = this.focusPoint.y + this.centerOffset.y;
	            this.state = CameraState.Idle;
	            this.centerOffset.toDefault();
	        }
	        this.camera.transform.position = new Laya.Vector3(x, y, this.z);
	    }
	    static updateIdle() {
	        if (!this.checkForDrag()) {
	            this.checkForEdgeScrolling();
	        }
	    }
	    static checkForDrag() {
	        if (InputMgr.uiHas) {
	            return false;
	        }
	        if (InputMgr.inputJustPressed() && (!InputMgr.allowDrag || InputMgr.underCursor == null || !InputMgr.underCursor.isInADraggableState() || MoverMgr.hasSelectedObjectAndClickOnDifferentObject() || !MoverMgr.residesInSelectionArea())) {
	            this.state = CameraState.PreDragBuffer;
	            this.target = null;
	            this.centerOffset.toDefault();
	            this.initDragPos.setValue(InputMgr.mouseX, InputMgr.mouseY);
	            this.dragDispHis.length = 0;
	            return true;
	        }
	        return false;
	    }
	    static displaceCamera(moveBy) {
	        let x = this.x + moveBy.x;
	        let y = this.y + moveBy.y;
	        let z = this.z + moveBy.z;
	        if (this.state == CameraState.Drag) {
	            this.recordDragHistory(moveBy);
	        }
	        this.camera.transform.position = new Laya.Vector3(x, y, z);
	    }
	    static recordDragHistory(displacement) {
	        this.dragDispHis.push(displacement);
	        if (this.dragDispHis.length > 4) {
	            this.dragDispHis.shift();
	        }
	    }
	    static setFollowTarget(target, useGlide) {
	        if (!this.isLocked) {
	            if (target == null) {
	                console.warn("Requesting the camera to follow a null object in CameraMgr.setFollowTarget().");
	                return;
	            }
	            this.target = target;
	            this.centerOffset.toDefault();
	            this.state = useGlide ? CameraState.GlideToFollowTarget : CameraState.Follow;
	        }
	    }
	    static clearFollowTarget() {
	        this.target = null;
	        if (this.state == CameraState.Follow || this.state == CameraState.GlideToFollowTarget) {
	            this.state = CameraState.Idle;
	        }
	        this.centerOffset.toDefault();
	    }
	    static updatePreDragBuffer() {
	        if (InputMgr.inputJustReleased()) {
	            this.state = CameraState.Idle;
	        }
	        else if (!this.isLocked) {
	            let num = MathUtil.getDistance(this.initDragPos.x, this.initDragPos.y, InputMgr.mouseX, InputMgr.mouseY);
	            if (num >= 50) {
	                this.state = CameraState.Drag;
	            }
	        }
	    }
	    static updateDrag() {
	        if (InputMgr.inputJustReleased()) {
	            this.state = CameraState.DragResidual;
	            this.residualDragClock.set(this.residualDragTime);
	            this.residualVelocity.toDefault;
	            let num = this.dragDispHis.length - 1;
	            let num2 = 0;
	            for (let item of this.dragDispHis) {
	                if (num2 >= num) {
	                    break;
	                }
	                this.residualVelocity.x += item.x;
	                this.residualVelocity.y += item.y;
	                this.residualVelocity.z += item.z;
	                num2++;
	            }
	            if (num2 > 0) {
	                this.residualVelocity.x /= num2;
	                this.residualVelocity.y /= num2;
	                this.residualVelocity.z /= num2;
	            }
	            this.residualVelocityAtMouseUp = this.residualVelocity;
	        }
	        else {
	            let v = InputMgr.mouseFrameDispCamera;
	            v.x = -v.x;
	            v.y = -v.y;
	            v.z = -v.z;
	            this.displaceCamera(v);
	        }
	    }
	    static updateDragResidual() {
	        if (this.checkForDrag()) {
	            return;
	        }
	        if (this.residualDragClock.done) {
	            this.state = CameraState.Idle;
	            return;
	        }
	        let d = this.residualDragClock.percentLeft * this.residualDragClock.percentLeft * this.residualDragClock.percentLeft;
	        this.residualVelocity.x = d * this.residualVelocityAtMouseUp.x;
	        this.residualVelocity.y = d * this.residualVelocityAtMouseUp.y;
	        this.residualVelocity.z = d * this.residualVelocityAtMouseUp.z;
	        this.displaceCamera(this.residualVelocity);
	        this.residualDragClock.update(Glob.deltaTime);
	        if (Laya.Vector3.scalarLength(this.residualVelocity) <= 0.0025) {
	            this.state = CameraState.Idle;
	        }
	    }
	    static toCameraPos(stageX, stageY, stageZ = 0, out = null) {
	        if (!out) {
	            out = new Laya.Vector3();
	        }
	        this.tmpVector3.setValue(stageX, stageY, stageZ);
	        this.camera.convertScreenCoordToOrthographicCoord(this.tmpVector3, out);
	        return out;
	    }
	    static toScreenPos(vector, out = null) {
	        this.camera.viewport.project(vector, this.camera.projectionViewMatrix, this.tmpVector4);
	        let x = this.tmpVector4.x / Laya.stage.clientScaleX;
	        let y = this.tmpVector4.y / Laya.stage.clientScaleY;
	        if (out) {
	            out.x = x;
	            out.y = y;
	            return out;
	        }
	        return new Laya.Vector2(x, y);
	    }
	    static checkForZoom() {
	        if (InputMgr.zoomUnits != 0) {
	            InputMgr.preZoom();
	            this.camera.orthographicVerticalSize = this.calculateOrthoSize();
	            InputMgr.postZoom();
	        }
	        else {
	            InputMgr.zoomSkipped();
	        }
	    }
	    static calculateOrthoSize() {
	        let num = Math.abs(InputMgr.zoomUnits * 10);
	        let size = this.camera.orthographicVerticalSize;
	        let value = InputMgr.zoomUnits >= 0 ? (size - size * 0.12 * num) : (size + size * 0.12 * num);
	        return MathUtil.clamp(value, this.zoomMin, this.zoomMax);
	    }
	    static stayInBounds() {
	        let bounds = this.bounds;
	        if (Debug.cameraBoundsUnlocked || GameUtil.boundsContains(bounds, this.x, this.y)) {
	            return;
	        }
	        let x = 0, y = 0;
	        let min = bounds.getMin();
	        let max = bounds.getMax();
	        if (this.x < min.x) {
	            x = min.x - this.x;
	        }
	        else if (this.x > max.x) {
	            x = max.x - this.x;
	        }
	        if (this.y < min.y) {
	            y = min.y - this.y;
	        }
	        else if (this.y > max.y) {
	            y = max.y - this.y;
	        }
	        x *= 0.33;
	        y *= 0.33;
	        let pos = new Laya.Vector3(this.x + x, this.y + y, -10);
	        this.camera.transform.position = pos;
	        if (this.state != 0 && !this.isUserInputState()) {
	            this.state = CameraState.Idle;
	            this.centerOffset.toDefault();
	        }
	    }
	    static isUserInputState() {
	        return this.state == CameraState.Drag || this.state == CameraState.DragResidual || this.state == CameraState.PreDragBuffer;
	    }
	    static checkForEdgeScrolling() {
	        if (MoverMgr.isDraggingObj() && !this.isLocked) {
	            let num = 0;
	            let num2 = 0;
	            let mouseXPer = InputMgr.mouseXPer;
	            let mouseYPer = InputMgr.mouseYPer;
	            if (mouseXPer < 0.075) {
	                num = 0 - (0.075 - mouseXPer);
	            }
	            else if (mouseXPer > 0.925) {
	                num = mouseXPer - 0.925;
	            }
	            if (mouseYPer < 0.075) {
	                num2 = 0 - (0.075 - mouseYPer);
	            }
	            else if (mouseYPer > 0.925) {
	                num2 = mouseYPer - 0.925;
	            }
	            if (num != 0 || num2 != 0) {
	                num /= 0.075;
	                num2 /= 0.075;
	                let x = num * 0.55 * Laya.stage.width * Glob.deltaTime;
	                let y = num2 * 0.55 * Laya.stage.width * Glob.deltaTime;
	                let vector = new Laya.Vector3(this.stageLenToCameraLen(x), this.stageLenToCameraLen(y), 0);
	                this.displaceCamera(vector);
	            }
	        }
	    }
	    static stageLenToCameraLen(pixels) {
	        let vector = this.toCameraPos(pixels, 0, 0);
	        let vector2 = this.toCameraPos(0, 0, 0);
	        return vector.x - vector2.x;
	    }
	    static centerAt(worldX, worldY) {
	        if (this.lockedToHorizontal) {
	            worldY = this.horizontalLockYPos;
	        }
	        this.state = CameraState.JumpToPosition;
	        this.focusPoint = new Laya.Vector3(worldX, worldY, this.z);
	        this.centerOffset.toDefault();
	    }
	    static get horizontalLockYPos() {
	        if (!this.lockedToHorizontal) {
	            return this.y;
	        }
	        return 0;
	    }
	    static getSaveDataObject() {
	        let saveData_Camera = new SL_Camera();
	        saveData_Camera.position = this.camera.transform.position;
	        saveData_Camera.orthographicSize = this.camera.orthographicVerticalSize;
	        return saveData_Camera;
	    }
	    static initFromSaveData(data) {
	        this.camera.transform.position = data.position;
	        this.camera.orthographicVerticalSize = Math.max(data.orthographicSize, 1);
	    }
	    static sceneChangeCleanup() {
	        this.target = null;
	        this.state = CameraState.Idle;
	    }
	    static SetCameraCenterOffset(screenLeftXDeltaPx, screenRightXDeltaPx, screenBottomYDeltaPx, screenTopYDeltaPx) {
	        let num = Laya.stage.width - screenLeftXDeltaPx + screenRightXDeltaPx;
	        let num2 = Laya.stage.height - screenBottomYDeltaPx + screenTopYDeltaPx;
	        let num3 = num / 2;
	        let num4 = num2 / 2;
	        let v = new Laya.Vector2(screenLeftXDeltaPx + num3, screenBottomYDeltaPx + num4);
	        let v2 = new Laya.Vector2(Laya.stage.width / 2, Laya.stage.height / 2);
	        let b = this.toCameraPos(v.x, v.y);
	        let a = this.toCameraPos(v2.x, v2.y);
	        let vector = new Laya.Vector3(a.x - b.x, a.y = b.y);
	        this.centerOffset = this.lockedToHorizontal ? new Laya.Vector3(vector.x, 0, 0) : new Laya.Vector3(vector.x, vector.y, 0);
	    }
	}
	CameraMgr.centerOffset = new Laya.Vector3();
	CameraMgr.initDragPos = new Laya.Vector2();
	CameraMgr.dragDispHis = [];
	CameraMgr.zoomMin = 0;
	CameraMgr.zoomMax = 0;
	CameraMgr.residualDragTime = 2;
	CameraMgr.residualDragClock = new Clock();
	CameraMgr.swoopSpeed = 0.075;
	CameraMgr.residualVelocity = new Laya.Vector3();
	CameraMgr.tmpVector3 = new Laya.Vector3();
	CameraMgr.tmpVector4 = new Laya.Vector4();

	var TweenTypeID;
	(function (TweenTypeID) {
	    TweenTypeID[TweenTypeID["Punch"] = 0] = "Punch";
	    TweenTypeID[TweenTypeID["PunchScale"] = 1] = "PunchScale";
	    TweenTypeID[TweenTypeID["Move"] = 2] = "Move";
	    TweenTypeID[TweenTypeID["MoveBy"] = 3] = "MoveBy";
	    TweenTypeID[TweenTypeID["Scale"] = 4] = "Scale";
	    TweenTypeID[TweenTypeID["ScaleBy"] = 5] = "ScaleBy";
	    TweenTypeID[TweenTypeID["Rotate"] = 6] = "Rotate";
	    TweenTypeID[TweenTypeID["RotateBy"] = 7] = "RotateBy";
	})(TweenTypeID || (TweenTypeID = {}));
	class Tween {
	    static PunchScale(drawnObject, animationName) {
	        Tween.PunchScale5(drawnObject, animationName, 1.5, 0.5, 0.5, true);
	    }
	    static PunchScale2(drawnObject, animationName, resetToRestingScaleFirst) {
	        Tween.PunchScale5(drawnObject, animationName, 1.5, 0.5, 0.5, resetToRestingScaleFirst);
	    }
	    static PunchScale3(drawnObject, animationName, xyGrowth, resetToRestingScaleFirst) {
	        Tween.PunchScale5(drawnObject, animationName, 1.5, xyGrowth, xyGrowth, resetToRestingScaleFirst);
	    }
	    static PunchScale4(drawnObject, animationName, time, xyGrowth) {
	        Tween.PunchScale5(drawnObject, animationName, time, xyGrowth, xyGrowth, true);
	    }
	    static PunchScale5(drawnObject, animationName, time, xGrowth, yGrowth, resetToRestingScaleFirst) {
	        if (!(drawnObject == null)) {
	            xGrowth *= drawnObject.restingScale.x;
	            yGrowth *= drawnObject.restingScale.y;
	            if (resetToRestingScaleFirst) {
	                drawnObject.restoreLocalScale();
	            }
	            iTween.PunchScale(drawnObject.body, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", xGrowth, "y", yGrowth));
	        }
	    }
	    static PunchScale6(gameObject, animationName) {
	        Tween.PunchScale8(gameObject, animationName, 1.5, 0.5);
	    }
	    static PunchScale7(gameObject, animationName, magnitude) {
	        Tween.PunchScale8(gameObject, animationName, 1.5 * magnitude, 0.5 * magnitude);
	    }
	    static PunchScale8(gameObject, animationName, time, xyGrowth) {
	        iTween.PunchScale(gameObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", xyGrowth, "y", xyGrowth));
	    }
	    static PunchPosition(gameObject, animationName, time, x, y, loopType) {
	        iTween.PunchPosition(gameObject, iTween.Hash("name", animationName, "time", time, "x", x, "y", y, "looptype", loopType));
	    }
	    static GetRelativeScaleFactor(drawnObject, xyGrowth) {
	        let num = (drawnObject.restingScale.x + drawnObject.restingScale.y) / 2;
	        return num * xyGrowth;
	    }
	    static ObjectHasScaleAnimPlaying(drawnObject) {
	        return iTween.CountAnyWithStringInFunctionCallName(drawnObject.body, "Scale") > 0;
	    }
	    static ObjectHasScaleAnimPlaying2(obj) {
	        return iTween.CountAnyWithStringInFunctionCallName(obj, "Scale") > 0;
	    }
	    static ShakePosition(obj, animationName, xAmount, yAmount) {
	        iTween.ShakePosition(obj, iTween.Hash("name", animationName, "islocal", true, "time", 0.5, "x", xAmount, "y", yAmount));
	    }
	    static ShakeCamera(amount, seconds) {
	        iTween.ShakePosition2(CameraMgr.camera, new Laya.Vector3(amount, amount, 0), seconds);
	    }
	    static ShakeCamera_Default() {
	        Tween.ShakeCamera(0.05, 0.5);
	    }
	    static ShakeCamera_Scale(scale) {
	        Tween.ShakeCamera(0.05 * scale, 0.5 * scale);
	    }
	    static ShakeCamera_LandKilled() {
	        Tween.ShakeCamera(0.05, 1);
	    }
	    static ShakeCamera_Defeated() {
	        Tween.ShakeCamera(0.12, 5);
	    }
	    static ShakeCamera_VerticalImpact() {
	        Tween.ShakeCamera_VerticalImpact2(0.075);
	    }
	    static ShakeCamera_VerticalImpact2(amount) {
	        let gameObject = CameraMgr.camera;
	        if (CameraMgr.shakeHandler != null) {
	            gameObject = CameraMgr.shakeHandler.owner;
	        }
	        else {
	            console.error("Trying to shake a camera that doesn't have a shake handler. It's best to only shake a camera's shake target, otherwise the shake will stop all normal camera movement.");
	        }
	        iTween.ShakePosition2(gameObject, new Laya.Vector3(0, amount, 0), 0.5);
	    }
	    static FadeCameraOut(seconds) {
	        Tween.TryAddCameraFadeObject();
	        iTween.CameraFadeTo(1, seconds);
	    }
	    static FadeCameraIn(seconds) {
	        Tween.TryAddCameraFadeObject();
	        iTween.CameraFadeFrom(1, seconds);
	    }
	    static TryAddCameraFadeObject() {
	        if (Tween.s_cameraFadeObject == null) {
	            Tween.s_cameraFadeObject = iTween.CameraFadeAdd();
	            iTween.CameraFadeDepth(-9);
	        }
	    }
	    static MoveTo(drawnObject, animationName, time, x, y) {
	        Tween.MoveTo2(drawnObject.localPositionAnimTarget, animationName, true, time, x, y);
	    }
	    static MoveTo2(gameObject, animationName, isLocal, time, x, y) {
	        iTween.MoveTo2(gameObject, iTween.Hash("name", animationName, "islocal", isLocal, "time", time, "x", x, "y", y, "EaseType", EaseType.easeOutQuad));
	    }
	    static MoveTo_Root(drawnObject, animationName, time, x, y) {
	        iTween.MoveTo2(drawnObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", x, "y", y, "EaseType", EaseType.easeOutQuad, "oncompletetarget", drawnObject, "oncomplete", drawnObject.tween_MoveTo_Root_OnCompleteCallback));
	    }
	    static MoveBy(drawnObject, animationName, time, xDisplacement, yDisplacement, loopType) {
	        Tween.MoveBy2(drawnObject, animationName, time, xDisplacement, yDisplacement, loopType, EaseType.easeOutQuad);
	    }
	    static MoveBy2(drawnObject, animationName, time, xDisplacement, yDisplacement, loopType, easeType) {
	        iTween.MoveBy2(drawnObject.localPositionAnimTarget, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", xDisplacement, "y", yDisplacement, "looptype", loopType, "EaseType", easeType));
	    }
	    static MoveBy3(gameObject, animationName, time, xDisplacement, yDisplacement, loopType, easeType) {
	        iTween.MoveBy2(gameObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", xDisplacement, "y", yDisplacement, "looptype", loopType, "EaseType", easeType));
	    }
	    static ScaleBy(drawnObject, animationName, time, scaleMultiplier, loopType) {
	        Tween.ScaleBy3(drawnObject, animationName, time, scaleMultiplier, loopType, EaseType.easeOutQuad);
	    }
	    static ScaleBy2(drawnObject, animationName, time, scaleMultiplier, loopType, easeType) {
	        Tween.ScaleBy3(drawnObject, animationName, time, scaleMultiplier, loopType, easeType);
	    }
	    static ScaleBy3(gameObject, animationName, time, scaleMultiplier, loopType, easeType) {
	        iTween.ScaleBy2(gameObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", scaleMultiplier, "y", scaleMultiplier, "looptype", loopType, "EaseType", easeType));
	    }
	    static ScaleToZero(drawnObject, animationName, time) {
	        iTween.ScaleTo2(drawnObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", 0, "y", 0, "looptype", LoopType.none, "EaseType", EaseType.easeOutQuad));
	    }
	    static ScaleTo(drawnObject, animationName, time, targetScaleX, targetScaleY, loopType) {
	        iTween.ScaleTo2(drawnObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", targetScaleX, "y", targetScaleY, "looptype", loopType, "EaseType", EaseType.easeOutQuad));
	    }
	    static ScaleTo2(gameObject, animationName, time, targetScaleX, targetScaleY, loopType) {
	        iTween.ScaleTo2(gameObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", targetScaleX, "y", targetScaleY, "looptype", loopType, "EaseType", EaseType.easeOutQuad));
	    }
	    static ScaleTo_Root(drawnObject, animationName, time, targetScaleX, targetScaleY, loopType) {
	        iTween.ScaleTo2(drawnObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "x", targetScaleX, "y", targetScaleY, "looptype", loopType, "EaseType", EaseType.easeOutQuad));
	    }
	    static RotateBy(drawnObject, animationName, time, rotationDegrees, loopType) {
	        Tween.RotateBy2(drawnObject, animationName, time, rotationDegrees, loopType, EaseType.easeOutQuad);
	    }
	    static RotateByWithCallback(drawnObject, animationName, time, rotationDegrees, loopType, easeType) {
	        rotationDegrees /= 360;
	        iTween.RotateBy2(drawnObject.body, iTween.Hash("name", animationName, "islocal", true, "time", time, "z", rotationDegrees, "looptype", loopType, "EaseType", easeType, "oncompletetarget", drawnObject, "oncomplete", drawnObject.tweenRotateByOnCompleteCallback, "oncompleteparams", animationName));
	    }
	    static RotateBy2(drawnObject, animationName, time, rotationDegrees, loopType, easeType) {
	        rotationDegrees /= 360;
	        iTween.RotateBy2(drawnObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "z", rotationDegrees, "looptype", loopType, "EaseType", easeType));
	    }
	    static RotateBy3(gameObject, animationName, time, rotationDegrees, loopType, easeType) {
	        rotationDegrees /= 360;
	        iTween.RotateBy2(gameObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "z", rotationDegrees, "looptype", loopType, "EaseType", easeType));
	    }
	    static RotateTo(drawnObject, animationName, time, rotationDegreesTarget) {
	        rotationDegreesTarget /= 360;
	        iTween.RotateTo2(drawnObject, iTween.Hash("name", animationName, "islocal", true, "time", time, "z", rotationDegreesTarget, "EaseType", EaseType.easeOutQuad));
	    }
	    static StopTweensOn(drawnObject) {
	        if (drawnObject.body != null) {
	            iTween.Stop3(drawnObject.body);
	        }
	        if (drawnObject.localPositionAnimTarget != null) {
	            iTween.Stop3(drawnObject.localPositionAnimTarget);
	        }
	        drawnObject.restoreLocalPositionScaleRotation();
	    }
	    static StopTweensOfTypeOn(drawnObject, type) {
	        if (drawnObject != null) {
	            iTween.Stop5(drawnObject, type.toString());
	        }
	        if (drawnObject.localPositionAnimTarget != null) {
	            iTween.Stop5(drawnObject.localPositionAnimTarget, type.toString());
	        }
	        drawnObject.restoreLocalPositionScaleRotation();
	    }
	    static StopBaseAnims(drawnObject) {
	        if (drawnObject.baseAnimComponent != null) {
	            drawnObject.baseAnimComponent.stopAnim();
	        }
	    }
	    static DisableBaseAnims(drawnObject) {
	        if (drawnObject.baseAnimComponent != null) {
	            drawnObject.baseAnimComponent.disableAnim();
	        }
	    }
	    static EnableBaseAnims(drawnObject) {
	        if (drawnObject.baseAnimComponent != null) {
	            drawnObject.baseAnimComponent.enableAnim();
	        }
	    }
	    static EaseBackToOriginalEverything(drawnObject) {
	        Tween.EaseBackToOriginalPosition(drawnObject);
	        Tween.EaseBackToOriginalScale(drawnObject);
	        Tween.EaseBackToOriginalRotation(drawnObject);
	    }
	    static EaseBackToOriginalPosition(drawnObject) {
	        Tween.MoveTo(drawnObject, "EasePositionHome", 0.2, drawnObject.originalPosition.x, drawnObject.originalPosition.y);
	    }
	    static EaseBackToOriginalScale(drawnObject) {
	        Tween.ScaleTo(drawnObject.body, "EaseScaleHome", 0.2, drawnObject.restingScale.x, drawnObject.restingScale.y, LoopType.none);
	    }
	    static EaseBackToOriginalRotation(drawnObject) {
	        Tween.RotateTo(drawnObject.body, "EaseRotationHome", 0.2, drawnObject.originalRotation.z);
	    }
	}

	class Globals {
	    static get k_minDragonPowerMultiplierToDropT2ProxyChest() {
	        return MergeDragonsAppConfig.LOCKED_CHEST_TIER_CONST * MergeDragonsAppConfig.LOCKED_CHEST_APPEARANCE_MULTIPLIER;
	    }
	    static init() {
	        this.loadGlobalVariables();
	    }
	    static loadGlobalVariables() {
	        this.CurrencyBaseStorageAmounts[ECurrency.Gold] = parseInt(ConstCfg.getValue("11"));
	        this.CurrencyBaseStorageAmounts[ECurrency.Stone] = parseInt(ConstCfg.getValue("12"));
	        this.CurrencyBaseStorageAmounts[ECurrency.Diamond] = parseInt(ConstCfg.getValue("13"));
	        this.CurrencyBaseStorageAmounts[ECurrency.Energy] = CurrencyCfg.defaultEnergy;
	        this.CurrencyBaseStorageAmounts[ECurrency.Life] = 5;
	        this.CurrencyBaseStorageAmounts[ECurrency.BoosterShovel] = 99;
	        this.CurrencyBaseStorageAmounts[ECurrency.BoosterBomb] = 99;
	        this.CurrencyBaseStorageAmounts[ECurrency.BoosterSwapper] = 99;
	    }
	    static createFromPrefab(prefabName) {
	        let prefab = PrefMgr.get(prefabName);
	        return prefab;
	    }
	    static createFromPrefabAt(prefabName, position, customParent = null) {
	        let gameObject = this.createFromPrefab(prefabName);
	        if (!customParent) {
	            Glob.map.addParticle(gameObject);
	        }
	        else {
	            customParent.addChild(gameObject);
	        }
	        gameObject.transform.position = position;
	        return gameObject;
	    }
	    static swoopDropToFreeMetaCell(obj) {
	        this.moveDropToFreeMetaCell(obj, ObjectPlacementMoveTypeID.Swoop);
	    }
	    static jumpDropToFreeMetaCell(obj) {
	        this.moveDropToFreeMetaCell(obj, ObjectPlacementMoveTypeID.Jump);
	    }
	    static jumpDropToFreeMetaCell_OrShoveIntoOrb(obj, wasObjectCreatedThisFrame, particlesPrefab, parentParticles, shakeCameraVerticalImpact) {
	        let drawnObject = this.moveDropToFreeMetaCell_OrShoveIntoOrb(obj, wasObjectCreatedThisFrame, ObjectPlacementMoveTypeID.Jump);
	        if (particlesPrefab != null) {
	            let position = drawnObject.transform.position;
	            let x = position.x;
	            let position2 = drawnObject.transform.position;
	            let y = position2.y;
	            let position3 = drawnObject.transform.position;
	            if (parentParticles) {
	                let gameObject = this.createFromPrefabAt(particlesPrefab, new Laya.Vector3(x, y, position3.z - 0.5), drawnObject);
	            }
	        }
	        if (shakeCameraVerticalImpact) {
	            Tween.ShakeCamera_VerticalImpact();
	        }
	        return drawnObject;
	    }
	    static moveDropToFreeMetaCell(obj, moveType, allowStickyCells = true) {
	        if (obj.cfg.keepAtBirthPoint) {
	            return;
	        }
	        let metaCell = null;
	        if (obj.requiresCellPlacement) {
	            metaCell = Glob.map.getMetaCellNear(obj.x, obj.y, 1, 1, true, -1, obj.cfg.widthCell, obj.cfg.heightCell, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.AllowAll, false, false, allowStickyCells);
	            if (metaCell == null) {
	                console.log("Globals::SwoopDropToFreeCell failed to find a free cell, but Board.BoardTooFull returned false and thus said there were some : (.");
	                return;
	            }
	            obj.occupyMetaCell(metaCell);
	            if (moveType == ObjectPlacementMoveTypeID.Swoop) {
	                obj.trySwitchToSwooping();
	            }
	            else {
	                obj.setRootPosition(metaCell.x, metaCell.y);
	            }
	        }
	        else {
	            let position2D = Glob.map.getEmptyWorldPointNear(obj.x, obj.y, -1, CellProximitySearchTypeID.PreferCloser, false);
	            if (moveType == ObjectPlacementMoveTypeID.Swoop) {
	                obj.swoopOffGridTo(position2D.x, position2D.y, false, false);
	            }
	            else {
	                obj.setRootPosition(position2D.x, position2D.y);
	            }
	        }
	    }
	    static moveDropToFreeMetaCell_OrShoveIntoOrb(obj, wasObjectCreatedThisFrame, moveType) {
	        if (Glob.cellLayer.boardTooFullForCfg(obj.cfg)) {
	            if (wasObjectCreatedThisFrame) {
	                obj.initMain();
	            }
	            let drawnObject = LootOrb.createFromInstance(obj);
	            this.moveDropToFreeMetaCell(drawnObject, moveType);
	            if (wasObjectCreatedThisFrame) {
	                obj.destroyDrawnObject_Immediate();
	            }
	            else {
	                obj.destroyDrawnObject();
	            }
	            return drawnObject;
	        }
	        this.moveDropToFreeMetaCell(obj, moveType);
	        return obj;
	    }
	    static swoopOffGridObjectToLocationInCellRadius(obj, cellRadius, wx, wy) {
	        if (!obj.cfg.keepAtBirthPoint) {
	            if (obj.cfg.requiresCellPlacement) {
	                console.log("Trying to call SwoopOffGridObjectToMetaCellInRadius() on a non-off-grid object: " + obj.name);
	                return;
	            }
	            let gx = MapUtil.getGx(wx, wy, false);
	            let gy = MapUtil.getGy(wx, wy, false);
	            let x = gx + MathUtil.randNum(-cellRadius, cellRadius);
	            let y = gy + MathUtil.randNum(-cellRadius, cellRadius);
	            let x1 = MapUtil.getWx(x, y);
	            let y1 = MapUtil.getWy(x, y);
	            obj.swoopOffGridTo(x1, y1, false, false);
	        }
	    }
	    static setLocalScaleToXOnLargestSide(obj, largestSideTargetSize) {
	    }
	    static wideLevelBoundsCheck(definition, vec) {
	        if (!Glob.inLevelOrHome) {
	            return vec;
	        }
	        return vec;
	    }
	    static swoopDropToMetaCell(obj, target, x, y) {
	        if (!obj.cfg.keepAtBirthPoint) {
	            obj.setRootPosition(x, y);
	            if (obj.cfg.requiresCellPlacement) {
	                obj.occupyMetaCell(target);
	                obj.trySwitchToSwooping();
	            }
	            else {
	                obj.swoopOffGridTo(target.x, target.y, false, false);
	            }
	        }
	    }
	    static getRepeatedCharacterString(c, timesToRepeat) {
	        let text = "";
	        for (let i = 0; i < timesToRepeat; i++) {
	            text += c;
	        }
	        return text;
	    }
	    static randomElement(list) {
	        if (list == null || list.length == 0) {
	            return null;
	        }
	        return list[MathUtil.randInt(0, list.length - 1)];
	    }
	    static removeRandomElement(list) {
	        if (list == null || list.length == 0) {
	            return null;
	        }
	        let index = MathUtil.randInt(0, list.length - 1);
	        let result = list[index];
	        list.splice(index, 1);
	        return result;
	    }
	    static getTotalBounds(obj) {
	        if (!obj.active) {
	            let max = obj.transform.position.clone();
	            max.y += 0.4;
	            return new Laya.Bounds(obj.transform.position, max);
	        }
	        let componentsInChildren = [];
	        GameUtil.getMeshRenders(obj, componentsInChildren);
	        if (componentsInChildren.length == 0) {
	            let max = obj.transform.position.clone();
	            max.y += 0.4;
	            return new Laya.Bounds(obj.transform.position, max);
	        }
	        let result = componentsInChildren[0].bounds;
	        if (componentsInChildren.length > 0) {
	            for (let i = 1; i < componentsInChildren.length; i++) {
	                Laya.BoundBox.merge(result._boundBox, componentsInChildren[i].bounds._boundBox, result._boundBox);
	            }
	        }
	        return result;
	    }
	    static RandomElementWeighted() {
	    }
	    static handleCurrencyRemainderCreation(startLocation, remainderPrefab, remainder) {
	        if (Glob.cellLayer.boardTooFullFor(remainderPrefab)) {
	            console.log("Lost currency because board was too full to drop remainder! [ " + remainderPrefab + ", " + remainder + "]");
	            return;
	        }
	        let drawnObject = Thing.createAtPointAndSwoopToFreeCell(remainderPrefab, startLocation.x, startLocation.y);
	        if (drawnObject == null) {
	            GuiMgr.errorMessage("Tried to create: " + remainderPrefab + " but got null back.");
	        }
	        else if (drawnObject.cfg.cid == remainderPrefab) {
	            drawnObject.strength = remainder;
	            drawnObject.setLabel("x" + remainder);
	        }
	        else if (drawnObject.hasCategory(CategoryID.LootOrbs)) {
	            GuiMgr.errorMessage(remainderPrefab + " Currency collection had a remainder, but when creating a remainder object, got a loot orb when we already checked for not having enough room, and tried to skip this case from happening.");
	            drawnObject.destroyDrawnObject_Immediate(DeathReasonID.Error);
	        }
	        else {
	            GuiMgr.errorMessage(remainderPrefab + " collection had a remainder, but when creating a remainder object, got an unexpected type: " + drawnObject.cfg.name);
	            drawnObject.destroyDrawnObject_Immediate(DeathReasonID.Error);
	        }
	    }
	}
	Globals.CurrencyBaseStorageAmounts = {};

	class SL_HomeStats {
	    constructor() {
	        this.id = SaveLoadConst.HOME_STATS;
	        this.m_dragonPower = 0;
	        this.m_unhealedLand = 0;
	        this.m_healedLand = 0;
	        this.m_fogTilesLeft = 0;
	        this.m_runningScore = 0;
	        this.m_bestDragon1 = 0;
	        this.m_bestDragon2 = 0;
	        this.m_bestDragon3 = 0;
	        this.m_starsEarned = 0;
	        this.m_homeSleepDiscount = 1;
	        this.m_bestHomeId = "MonsterHouse_1";
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.m_dragonPower);
	        obj.setValue("1", this.m_unhealedLand);
	        obj.setValue("2", this.m_healedLand);
	        obj.setValue("3", this.m_fogTilesLeft);
	        obj.setValue("4", this.m_runningScore);
	        obj.setValue("5", this.m_bestDragon1);
	        obj.setValue("6", this.m_bestDragon2);
	        obj.setValue("7", this.m_bestDragon3);
	        obj.setValue("8", this.m_starsEarned);
	        obj.setValue("9", this.m_homeSleepDiscount);
	        obj.setValue("10", this.m_bestHomeId);
	        return obj;
	    }
	    import(data) {
	        this.m_dragonPower = data.getValue("0");
	        this.m_unhealedLand = data.getValue("1");
	        this.m_healedLand = data.getValue("2");
	        this.m_fogTilesLeft = data.getValue("3");
	        this.m_runningScore = data.getValue("4");
	        this.m_bestDragon1 = data.getValue("5");
	        this.m_bestDragon2 = data.getValue("6");
	        this.m_bestDragon3 = data.getValue("7");
	        this.m_starsEarned = data.getValue("8");
	        this.m_homeSleepDiscount = data.getValue("9");
	        this.m_bestHomeId = data.getValue("10");
	    }
	    static GetCampStatsFileName() {
	        return "_homeStats";
	    }
	    static SaveHomeStats(data) {
	    }
	    static LoadHomeStats() {
	        let data = new SL_HomeStats();
	        return SaveLoad.loadByName(this.GetCampStatsFileName(), data);
	    }
	}

	class SL_LevelStats {
	    constructor() {
	        this.id = SaveLoadConst.LEVE_STATS;
	        this.m_timesWon = 0;
	        this.m_timesLost = 0;
	        this.m_maxStarsAchieved = 0;
	        this.m_highScore = 0;
	        this.m_bestTime = 0;
	        this.m_timesWonSinceLastReward = 0;
	        this.m_numProgressRewardsCollected = 0;
	        this.m_timesExitedWithoutEnd = 0;
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", this.m_timesWon);
	        obj.setValue("1", this.m_timesLost);
	        obj.setValue("2", this.m_maxStarsAchieved);
	        obj.setValue("3", this.m_highScore);
	        obj.setValue("4", this.m_bestTime);
	        obj.setValue("5", this.m_timesWonSinceLastReward);
	        obj.setValue("6", this.m_numProgressRewardsCollected);
	        obj.setValue("7", this.m_timesExitedWithoutEnd);
	        return obj;
	    }
	    import(data) {
	        this.m_timesWon = data.getValue("0");
	        this.m_timesLost = data.getValue("1");
	        this.m_maxStarsAchieved = data.getValue("2");
	        this.m_highScore = data.getValue("3");
	        this.m_bestTime = data.getValue("4");
	        this.m_timesWonSinceLastReward = data.getValue("5");
	        this.m_numProgressRewardsCollected = data.getValue("6");
	        this.m_timesExitedWithoutEnd = data.getValue("7");
	    }
	    static GetLevelStatsFileName(levelId) {
	        return levelId + "_stats";
	    }
	    static LoadLevelStats(levelId) {
	        let data = new SL_LevelStats();
	        let lvName = this.GetLevelStatsFileName(levelId);
	        return SaveLoad.loadByName(lvName, data);
	    }
	}

	class WorldLevelVo {
	    constructor(cfg) {
	        this.TimesWon = 0;
	        this.TimesLost = 0;
	        this.MaxStarsAchieved = 0;
	        this.HighScore = 0;
	        this.BestTime = 0;
	        this.TimesWonSinceLastReward = 0;
	        this.NumProgressRewardsCollected = 0;
	        this._TimesExitedWithoutEnd = 0;
	        this.k_goodTimeMultForDefaultBestTime = 1;
	        this.HomeStats = null;
	        this.Parents = [];
	        this.Children = [];
	        this.AllGoalsIDMap = {};
	        this.ActiveStarGoals = [];
	        this.ChainGoals = {};
	        this.FogGoals = {};
	        this.RewardPrefabNameEarned = 0;
	        this.cid = cfg.cid;
	        this.cfg = cfg;
	        this.LoadSaveFileData();
	        this.TryLoadHomeStats();
	    }
	    get TimesExitedWithoutEnd() {
	        return this._TimesExitedWithoutEnd;
	    }
	    ;
	    set TimesExitedWithoutEnd(val) {
	        this._TimesExitedWithoutEnd = val;
	    }
	    get energy() {
	        let a = this.cfg.energy;
	        if (Level.levelSaveFileExists(this.cid)) {
	            a = ((a > 0) ? (a + this.TimesExitedWithoutEnd) : 0);
	        }
	        let b = CurrencyMgr.ins().getCapacity(ECurrency.Energy);
	        return Math.min(a, b);
	    }
	    get enterText() {
	        if (this.energy == 0) {
	            return this.isHome ? LanCfg.get("20020038") : LanCfg.get("20020020");
	        }
	        else {
	            if (Level.levelSaveFileExists(this.cid)) {
	                return this.isHome ? LanCfg.get("20020038") : LanCfg.get("20020037");
	            }
	            else if (this.EverCompleted()) {
	                return this.isHome ? LanCfg.get("20020038") : LanCfg.get("20020021");
	            }
	            else {
	                return this.isHome ? LanCfg.get("20020038") : LanCfg.get("20020020");
	            }
	        }
	    }
	    get isHome() {
	        return this.cfg.isHome;
	    }
	    get Saves() {
	        return this.cfg.Saves;
	    }
	    get isLevel() {
	        return this.cfg.isLevel;
	    }
	    get hasTomeTip() {
	        return !!this.cfg.TomeTipID;
	    }
	    get isChallenge() {
	        return this.cfg.isChallenge;
	    }
	    get MaxStars() {
	        return (!this.isHome && !this.IsEventLevel) ? this.ActiveStarGoals.length : this.GoalChainTotalCount;
	    }
	    get IsEventLevel() {
	        return this.cfg.IsEventLevel;
	    }
	    get IsEventLevel_Type1_ResourceCollection() {
	        return this.cfg.EventType == EventTypeID.Type1_ResourceCollection;
	    }
	    get IsEventLevel_Type2_ScorePuzzle() {
	        return this.cfg.EventType == EventTypeID.Type2_ScorePuzzle;
	    }
	    get ChallengeStars() {
	        return Math.min(this.TimesWon, 3);
	    }
	    get CombinedStarTotal() {
	        return (!this.cfg.isChallenge) ? this.MaxStarsAchieved : (this.MaxStarsAchieved + this.ChallengeStars);
	    }
	    get DisplayStars() {
	        if (this.cfg.isChallenge) {
	            return this.ChallengeStars;
	        }
	        return this.MaxStarsAchieved;
	    }
	    get bannerText() {
	        let cfg = this.cfg;
	        let text = cfg.override ? cfg.override : cfg.banner;
	        text = LanCfg.get(text);
	        if (cfg.chain) {
	            text = StringUtil.format(text, cfg.chain);
	        }
	        return text;
	    }
	    get GoalsCompleteInCurrentStarSet() {
	        return this.CountCompleteGoalsInList(this.ActiveStarGoals);
	    }
	    CountCompleteGoalsInList(goalList = []) {
	        let num = 0;
	        goalList.forEach(goal => {
	            if (goal.Complete) {
	                num++;
	            }
	        });
	        return num;
	    }
	    get AllStarGoals() {
	        if (this.isHome || this.cfg.IsEventLevel) {
	            let list = [];
	            if (this.HasGoalChainA) {
	                list = list.concat(this.GoalChainA);
	            }
	            if (this.HasGoalChainB) {
	                list = list.concat(this.GoalChainB);
	            }
	            if (this.HasGoalChainC) {
	                list = list.concat(this.GoalChainC);
	            }
	            return list;
	        }
	        return this.ActiveStarGoals;
	    }
	    get GoalsCompleteTotal() {
	        return (!this.cfg.isHome && !this.cfg.IsEventLevel) ? this.GoalsCompleteInCurrentStarSet : this.GoalsCompleteInAllChains;
	    }
	    get GoalChainA() {
	        if (this.ChainGoals == null || !this.ChainGoals[GoalChainID.A]) {
	            return null;
	        }
	        return this.ChainGoals[GoalChainID.A];
	    }
	    get GoalChainB() {
	        if (this.ChainGoals == null || !this.ChainGoals[GoalChainID.B]) {
	            return null;
	        }
	        return this.ChainGoals[GoalChainID.B];
	    }
	    get GoalChainC() {
	        if (this.ChainGoals == null || !this.ChainGoals[GoalChainID.C]) {
	            return null;
	        }
	        return this.ChainGoals[GoalChainID.C];
	    }
	    get HasGoalChainA() {
	        return this.GoalChainA != null && this.GoalChainA.length > 0;
	    }
	    get HasGoalChainB() {
	        return this.GoalChainB != null && this.GoalChainB.length > 0;
	    }
	    get HasGoalChainC() {
	        return this.GoalChainC != null && this.GoalChainC.length > 0;
	    }
	    get HasAnyGoalChains() {
	        return this.HasGoalChainA || this.HasGoalChainB || this.HasGoalChainC;
	    }
	    get GoalChainCountA() {
	        return (this.GoalChainA != null) ? this.GoalChainA.length : 0;
	    }
	    get GoalChainCountB() {
	        return (this.GoalChainB != null) ? this.GoalChainB.length : 0;
	    }
	    get GoalChainCountC() {
	        return (this.GoalChainC != null) ? this.GoalChainC.length : 0;
	    }
	    get GoalChainTotalCount() {
	        return this.GoalChainCountA + this.GoalChainCountB + this.GoalChainCountC;
	    }
	    get GoalsCompleteInChainA() {
	        return this.CountCompleteGoalsInList(this.GoalChainA);
	    }
	    get GoalsCompleteInChainB() {
	        return this.CountCompleteGoalsInList(this.GoalChainB);
	    }
	    get GoalsCompleteInChainC() {
	        return this.CountCompleteGoalsInList(this.GoalChainC);
	    }
	    get GoalsCompleteInAllChains() {
	        return this.GoalsCompleteInChainA + this.GoalsCompleteInChainB + this.GoalsCompleteInChainC;
	    }
	    get HasFreeRewards() {
	        return !!this.cfg.basicEgg;
	    }
	    get HasPickAndChooseRewards() {
	        return this.cfg.freeRewardChance1 && this.HasFreeRewards;
	    }
	    isEnough(val) {
	        return this.energy <= val;
	    }
	    EverCompleted() {
	        return this.TimesWon > 0;
	    }
	    getChest() {
	        let cfg = this.cfg;
	        let index = WorldMgr.ins().getChestIndex();
	        return cfg.chestAt(index);
	    }
	    getRandomChest() {
	        let cfg = this.cfg;
	        let index = WorldMgr.ins().getChestIndex();
	        let isRare = MathUtil.chance(WorldCfg.bigChestChance);
	        return isRare ? cfg.bigChestAt(index) : cfg.chestAt(index);
	    }
	    isExistMainGoal() {
	        return !!this.cfg.finishPref;
	    }
	    getMainGoal() {
	        let cfg = this.cfg;
	        return { prefCid: cfg.finishPref, amount: cfg.finishPrefNum };
	    }
	    LoadSaveFileData() {
	        let saveData_LevelStats = SL_LevelStats.LoadLevelStats(this.cid.toString());
	        if (saveData_LevelStats == null) {
	            this.NoSaveFile_SetDefaults();
	        }
	        else {
	            this.InitWithSaveFileData(saveData_LevelStats);
	        }
	    }
	    NoSaveFile_SetDefaults() {
	        this.BestTime = this.k_goodTimeMultForDefaultBestTime * this.cfg.goodTime;
	        this.InitWithSaveFileData(new SL_LevelStats());
	    }
	    InitWithSaveFileData(data) {
	        this.TimesWon = data.m_timesWon;
	        this.TimesLost = data.m_timesLost;
	        this.MaxStarsAchieved = data.m_maxStarsAchieved;
	        this.HighScore = data.m_highScore;
	        this.BestTime = data.m_bestTime;
	        this.TimesWonSinceLastReward = data.m_timesWonSinceLastReward;
	        this.NumProgressRewardsCollected = data.m_numProgressRewardsCollected;
	        this.TimesExitedWithoutEnd = data.m_timesExitedWithoutEnd;
	    }
	    GetSaveDataObject() {
	        let stats = new SL_LevelStats();
	        stats.m_timesWon = this.TimesWon;
	        stats.m_timesLost = this.TimesLost;
	        stats.m_maxStarsAchieved = this.MaxStarsAchieved;
	        stats.m_highScore = this.HighScore;
	        stats.m_bestTime = this.BestTime;
	        stats.m_timesWonSinceLastReward = this.TimesWonSinceLastReward;
	        stats.m_numProgressRewardsCollected = this.NumProgressRewardsCollected;
	        stats.m_timesExitedWithoutEnd = this.TimesExitedWithoutEnd;
	        return stats;
	    }
	    TryLoadHomeStats() {
	        if (this.cfg.isHome) {
	            let saveData_HomeStats = SL_HomeStats.LoadHomeStats();
	            if (saveData_HomeStats != null) {
	                this.HomeStats = saveData_HomeStats;
	            }
	        }
	    }
	    GetChallengeV2Data() {
	        if (this.TimesWon < 3) {
	            return this.cfg.ChallengeData[this.TimesWon];
	        }
	        return null;
	    }
	    HasCompleteChallenge(pos) {
	        return this.TimesWon > pos;
	    }
	    GetChallengeTimeLimit(challengeIndex) {
	        if (this.IsValidChallengeIndex(challengeIndex)) {
	            return this.cfg.ChallengeData[challengeIndex].TimeLimit;
	        }
	        return 600;
	    }
	    GetChallengeReward(challengeIndex) {
	        if (this.IsValidChallengeIndex(challengeIndex)) {
	            return this.cfg.ChallengeData[challengeIndex].Reward;
	        }
	        return null;
	    }
	    IsValidChallengeIndex(challengeIndex) {
	        return this.cfg.IsValidChallengeIndex(challengeIndex);
	    }
	    PostLoadProcess() {
	        let unlocks = this.cfg.unlocks;
	        let id = 0;
	        for (let i = 0; i < unlocks.length; i++) {
	            id = unlocks[i];
	            let vo = WorldMgr.ins().getLevelVo(id);
	            if (vo) {
	                this.Children.push(vo);
	                vo.Parents.push(this);
	            }
	            else {
	                console.error("Level Data for level " + this.cid + " specifies a Level Unlock that is not a valid ID: " + id);
	            }
	        }
	    }
	    GetMapLocationDeadLevel() {
	        return 0;
	    }
	    PlayLevelCompleteSound() {
	        let percentOfBaselineVolume = 1;
	    }
	    GetRandomEggRewardDef() {
	        let rareEgg = this.cfg.rareEgg;
	        let basicEgg = this.cfg.basicEgg;
	        if (rareEgg && basicEgg) {
	            return PropsCfg.get(basicEgg);
	        }
	        if (basicEgg) {
	            return PropsCfg.get(basicEgg);
	        }
	        if (rareEgg) {
	            return PropsCfg.get(rareEgg);
	        }
	        return null;
	    }
	    TryVerifyUniqueLocalID_AndAddToGoalIDMap(goal) {
	        if (this.AllGoalsIDMap[goal.cid]) {
	            console.error("HUMAN ERROR: 2+ goals in level " + this.cfg.cid + " have the same local ID of " + goal.cid);
	        }
	        else {
	            this.AllGoalsIDMap[goal.cid] = goal;
	        }
	    }
	    AddChainGoal(goal) {
	        if (goal.chain == GoalChainID.NONE) {
	            console.error("Trying to add a Chain Goal, but the goal does not have a chain set: " + goal.cid);
	            return;
	        }
	        if (!this.cfg.isHome && !this.cfg.IsEventLevel) {
	            console.error("Trying to add a Chain Goal to a non-home level: " + goal.cid);
	            return;
	        }
	        if (!this.ChainGoals[goal.chain]) {
	            this.ChainGoals[goal.chain] = [];
	        }
	        this.ChainGoals[goal.chain].push(goal);
	        goal.chainQuestNumber = this.ChainGoals[goal.chain].length;
	    }
	    GetNumStarGoalsComplete() {
	        if (this.cfg.isHome || this.cfg.IsEventLevel) {
	            return this.GoalsCompleteInChainA + this.GoalsCompleteInChainB + this.GoalsCompleteInChainC;
	        }
	        return this.GoalsCompleteInCurrentStarSet;
	    }
	    HasUncompletedGoals(chainId) {
	        if (this.ChainGoals == null || !this.ChainGoals[chainId]) {
	            return false;
	        }
	        let list = this.ChainGoals[chainId];
	        return list.length > this.CountCompleteGoalsInList(list);
	    }
	    TryUpdateActiveGoalSetIfChainsExist() {
	        if (this.cfg.isHome || this.cfg.IsEventLevel) {
	            this.ActiveStarGoals = [];
	            if (this.HasGoalChainA) {
	                this.PutNextChainGoalIntoStarSlot(this.GoalChainA);
	            }
	            if (this.HasGoalChainB) {
	                this.PutNextChainGoalIntoStarSlot(this.GoalChainB);
	            }
	            if (this.HasGoalChainC) {
	                this.PutNextChainGoalIntoStarSlot(this.GoalChainC);
	            }
	        }
	    }
	    PutNextChainGoalIntoStarSlot(orderedChainGoals) {
	        for (let item of orderedChainGoals) {
	            if (!item.Complete) {
	                this.ActiveStarGoals.push(item);
	                break;
	            }
	        }
	        MsgCenter.notify(MsgConst.UPDATE_HOMETASK);
	    }
	    DoLevelNameAndBannerSubstitutions(targetString) {
	        let LevelChainNumber = this.cfg.chain;
	        if (!LevelChainNumber) {
	            return targetString;
	        }
	        targetString = targetString.replace("{#}", LevelChainNumber.toString());
	        return targetString;
	    }
	    get HasProgressRewards() {
	        return this.cfg.isLevel && !!this.cfg.progressReward;
	    }
	    GetProgressRewardPrefabName() {
	        if (!this.HasProgressRewards) {
	            return 0;
	        }
	        return this.cfg.progressReward;
	    }
	    GetProgressRewardPrefab() {
	        return this.GetProgressRewardPrefabName();
	    }
	    GetCurrentProgressRewardNumber() {
	        return this.NumProgressRewardsCollected % 3 + 1;
	    }
	    GetProgressToProgressReward() {
	        return this.TimesWonSinceLastReward;
	    }
	    GetProgressPercentToProgressReward() {
	        return this.TimesWonSinceLastReward / this.GetTotalWinsNeededForThisProgressReward();
	    }
	    GetWinsNeededForNextReward() {
	        return this.GetTotalWinsNeededForThisProgressReward() - this.TimesWonSinceLastReward;
	    }
	    GetTotalWinsNeededForThisProgressReward() {
	        if (!this.HasProgressRewards) {
	            return Number.MAX_SAFE_INTEGER;
	        }
	        let currentProgressRewardNumber = this.GetCurrentProgressRewardNumber();
	        let num = this.NumProgressRewardsCollected / 3;
	        let num2 = num * WorldLevelVo.Level_WinsToReward1;
	        switch (currentProgressRewardNumber) {
	            case 1:
	                return WorldLevelVo.Level_WinsToReward1 + num2;
	            case 2:
	                return WorldLevelVo.Level_WinsToReward2 + num2;
	            default:
	                return WorldLevelVo.Level_WinsToReward3 + num2;
	        }
	    }
	    IsUnlocked() {
	        if (this.cfg.startVisible) {
	            return true;
	        }
	        if (this.EverCompleted()) {
	            return true;
	        }
	        if (this.Parents.some(parent => parent.EverCompleted())) {
	            return true;
	        }
	        return WorldMgr.ins().DebugOpenLocked;
	    }
	}
	WorldLevelVo.Level_WinsToReward1 = 3;
	WorldLevelVo.Level_WinsToReward2 = 5;
	WorldLevelVo.Level_WinsToReward3 = 9;
	WorldLevelVo.Level_WinsToReward_Inc = 3;

	class WorldMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.k_minPickAndChooseRewardsAllowed = 2;
	        this.k_maxPickAndChooseRewardsAllowed = 10;
	        this.homeLevelId = 10058;
	        this.firstLevelId = 10059;
	        this.unloclHomeId = 10064;
	        this.unloclLevelId = 10065;
	        this.Level_Grasslands_1 = 10063;
	        this.mostRecentLevelId = 0;
	        this.DebugOpenLocked = false;
	        this.shouldShowHomeEnterGuide = false;
	        this.TotalLevelStarsEarned = 0;
	        this.TotalLevelStarsPossible = 0;
	        this.TotalHomeStarsEarned = 0;
	        this.TotalHomeStarsPossible = 0;
	        this.LevelsThatDestroyZomblinTowers = [];
	    }
	    get TotalStarsEarned() {
	        return this.TotalLevelStarsEarned + this.TotalHomeStarsEarned;
	    }
	    get TotalStarsPossible() {
	        return this.TotalLevelStarsPossible + this.TotalHomeStarsPossible;
	    }
	    init() {
	        this.LevelData = {};
	        let cfg = WorldCfg.cfg;
	        for (let key in cfg) {
	            let cfgItem = cfg[key];
	            let vo = new WorldLevelVo(cfgItem);
	            this.LevelData[key] = vo;
	            if (vo.cfg.HasZomblinTower) {
	                this.LevelsThatDestroyZomblinTowers.push(vo);
	            }
	        }
	        for (let key in this.LevelData) {
	            let vo = this.LevelData[key];
	            vo.PostLoadProcess();
	        }
	        this.ReTallyNumStarsEarned();
	    }
	    get currLevelVo() {
	        return Glob.currLevelData;
	    }
	    isPassFirst() {
	        let vo = this.getLevelVo(this.firstLevelId);
	        return vo.EverCompleted();
	    }
	    getLevelVo(cid) {
	        return this.LevelData[cid];
	    }
	    getHomeLevelVo() {
	        return this.LevelData[this.homeLevelId];
	    }
	    isChallenge(cid) {
	        let vo = this.getLevelVo(cid);
	        return vo ? vo.isChallenge : false;
	    }
	    hasLevel(cid) {
	        return !!this.LevelData[cid];
	    }
	    enterLastLevel() {
	        let cid = this.lastLevelCid ? this.lastLevelCid : WorldCfg.HomeId;
	        let vo = WorldMgr.ins().getLevelVo(cid);
	        this.enter(vo);
	    }
	    openDebugUnlocked() {
	        this.DebugOpenLocked = true;
	        MsgCenter.notify(MsgConst.SCENE_STATE_CHANGED, { state: GameState.WorldMap });
	    }
	    getChestIndex() {
	        let homeLevelVo = this.getHomeLevelVo();
	        if (homeLevelVo && homeLevelVo.HomeStats != null) {
	            let healedLand = homeLevelVo.HomeStats.m_healedLand;
	            return WorldCfg.getChestIndex(healedLand);
	        }
	        else {
	            return 0;
	        }
	    }
	    isShowEntrance(cid) {
	        let vo = this.getLevelVo(cid);
	        return vo && vo.IsUnlocked();
	    }
	    isShowHome() {
	        return this.isShowEntrance(WorldCfg.HomeId);
	    }
	    showUnlockHomeTip() {
	        let numLevelsWon = this.GetNumLevelsWon();
	        let isCompleted = this.getLevelVo(this.unloclHomeId).EverCompleted();
	        if (numLevelsWon <= 2 || isCompleted) {
	            return 0;
	        }
	        return 6 - numLevelsWon;
	    }
	    enter(vo) {
	        Glob.loadLevel(vo.cfg.cid);
	        DailyQuestMgr.ins();
	        CurrencyMgr.ins().credit(ECurrency.Energy, -vo.energy);
	    }
	    enterWorld() {
	        Glob.request_LoadWorldMap();
	    }
	    reset() {
	        Glob.currentLevel.setState(LevelStateID.Resetting);
	    }
	    getFinishCondition() {
	        if (this.currLevelVo) {
	            return this.currLevelVo.getMainGoal();
	        }
	        return null;
	    }
	    getRawardLimit() {
	        let total = this.TotalStarsEarned;
	        if (total < 1) {
	            return 2;
	        }
	        if (total < 25) {
	            return 3;
	        }
	        if (total < 50) {
	            return 4;
	        }
	        if (total < 75) {
	            return 5;
	        }
	        if (total < 100) {
	            return 6;
	        }
	        if (total < 150) {
	            return 7;
	        }
	        if (total < 200) {
	            return 8;
	        }
	        if (total < 300) {
	            return 9;
	        }
	        return 10;
	    }
	    getRewards() {
	        let menuItems = [];
	        let levelData = this.currLevelVo;
	        let cfg = this.currLevelVo.cfg;
	        let freeCount = 0;
	        let rewardCount = 0;
	        let freeLimit = cfg.maxFree;
	        let rawardLimit = this.getRawardLimit();
	        if (LevelChestMgr.ins().featureIsActive() && cfg.isExistChests()) {
	            let chestName = levelData.getRandomChest();
	            let cfg = PropsCfg.getByPrefName(chestName);
	            menuItems.push({
	                thing: null,
	                prefId: cfg.cid,
	                isFree: false,
	                count: 1,
	            });
	        }
	        let freePickEgg = MathUtil.chance(0.04);
	        let unfreePickEgg = MathUtil.chance(0.33);
	        if (freePickEgg || unfreePickEgg) {
	            menuItems.push({
	                thing: null,
	                prefId: MathUtil.chance(0.15) ? cfg.rareEgg : cfg.basicEgg,
	                isFree: freePickEgg,
	                count: 1,
	            });
	            rewardCount++;
	            freePickEgg && freeCount++;
	        }
	        if (cfg.isExistPremium() && MathUtil.chance(cfg.premiumLootChance)) {
	            menuItems.push({
	                thing: null,
	                prefId: cfg.premiumLoot,
	                isFree: false,
	                count: 1,
	            });
	        }
	        let canBringHomeList = Thing.getCanBringHomeList();
	        for (let i = canBringHomeList.length - 1; i >= 0; i--) {
	            let thing = canBringHomeList[i];
	            if (thing.cfg.isForceHome) {
	                menuItems.push({
	                    thing: thing,
	                    prefId: thing.cid,
	                    isFree: thing.cfg.takeHomeCost == 0,
	                    count: 1,
	                });
	                canBringHomeList.splice(i, 1);
	            }
	        }
	        if (freeCount < freeLimit && rewardCount < rawardLimit && cfg.freeCoin1) {
	            menuItems.push({
	                thing: null,
	                prefId: cfg.freeCoin1,
	                isFree: true,
	                count: cfg.freeCoinRange.random(),
	            });
	            rewardCount++;
	            freeCount++;
	        }
	        if (rewardCount < rawardLimit && cfg.exaltedReward && MathUtil.chance(0.05)) {
	            menuItems.push({
	                thing: null,
	                prefId: cfg.exaltedReward,
	                isFree: false,
	                count: 1,
	            });
	            rewardCount++;
	        }
	        if (rewardCount < rawardLimit && cfg.eliteReward && MathUtil.chance(0.1)) {
	            menuItems.push({
	                thing: null,
	                prefId: cfg.eliteReward,
	                isFree: false,
	                count: 1,
	            });
	            rewardCount++;
	        }
	        let num5 = MathUtil.randInt(1, 2);
	        if (freeCount < freeLimit && rewardCount < rawardLimit - 1 && num5 > 0 && cfg.freeRewardChance1) {
	            let num6 = MathUtil.randInt(1, 2);
	            menuItems.push({
	                thing: null,
	                prefId: cfg.freeRewardChance1,
	                isFree: true,
	                count: num6,
	            });
	            rewardCount++;
	            freeCount++;
	        }
	        if (freeCount < freeLimit && rewardCount < rawardLimit - 1 && num5 > 1 && cfg.freeRewardChance2) {
	            let num7 = MathUtil.randInt(1, 2);
	            menuItems.push({
	                thing: null,
	                prefId: cfg.freeRewardChance2,
	                isFree: true,
	                count: num7,
	            });
	            rewardCount++;
	            freeCount++;
	        }
	        GoalMgr.ins().InitActiveGoalsWithSaveFileData(this.homeLevelId);
	        if (!(rewardCount >= rawardLimit || levelData.cfg.disableCreationLoot)) {
	            let list3 = [];
	            let num8 = rawardLimit - rewardCount;
	            while (canBringHomeList.length > num8) {
	                let drawnObject = Globals.removeRandomElement(canBringHomeList);
	                if (drawnObject.isMonster) {
	                    list3.push(drawnObject);
	                }
	            }
	            if (list3.length > 0) {
	                let thing = Globals.randomElement(list3);
	                menuItems.push({
	                    thing: thing,
	                    prefId: thing.cfg.cid,
	                    isFree: false,
	                    count: 1,
	                });
	            }
	            for (let item3 of canBringHomeList) {
	                menuItems.push({
	                    thing: item3,
	                    prefId: item3.cfg.cid,
	                    isFree: false,
	                    count: 1,
	                });
	            }
	        }
	        return menuItems;
	    }
	    ReTallyNumStarsEarned() {
	        let num = 0;
	        let num2 = 0;
	        let currLevel = Glob.currLevelData;
	        for (let key in this.LevelData) {
	            let value = this.LevelData[key];
	            if (value.isHome && Glob.inHome && currLevel.cid === value.cid) {
	                num2 += currLevel.GoalsCompleteInAllChains;
	            }
	            else if (value.isHome && value.HomeStats != null) {
	                num2 += value.HomeStats.m_starsEarned;
	            }
	            else {
	                num += value.CombinedStarTotal;
	            }
	        }
	        this.TotalLevelStarsEarned = num;
	        this.TotalHomeStarsEarned = num2;
	        ShopMgr.ins().onStarAdd();
	    }
	    GetNumLevelsWon() {
	        let num = 0;
	        for (let key in this.LevelData) {
	            let data = this.LevelData[key];
	            if (data.EverCompleted()) {
	                num++;
	            }
	        }
	        return num;
	    }
	    GetLevelThatDestroysZomblinTowerOfTypeAtIndex(towerType, indexOfTowerType) {
	        let num = 0;
	        for (let levelsThatDestroyZomblinTower of this.LevelsThatDestroyZomblinTowers) {
	            if (levelsThatDestroyZomblinTower.cfg.ZomblinTowerID == towerType) {
	                if (num == indexOfTowerType) {
	                    return levelsThatDestroyZomblinTower;
	                }
	                num++;
	            }
	        }
	        return null;
	    }
	    GetTotalDragonPowerInAllCamps() {
	        let num = 0;
	        for (let key in this.LevelData) {
	            let value = this.LevelData[key];
	            if (value.isHome && value.HomeStats != null) {
	                num += value.HomeStats.m_dragonPower;
	            }
	        }
	        return num;
	    }
	    GetIdOfBestHome() {
	        let result = "MonsterHouse_1";
	        if (Glob.inHome || Glob.gameState == GameState.InLevel) {
	            return this.GetIdOfBestHome();
	        }
	        for (let key in this.LevelData) {
	            let value = this.LevelData[key];
	            if (value.isHome && value.HomeStats != null) {
	                return value.HomeStats.m_bestHomeId;
	            }
	        }
	        return result;
	    }
	    GetBestHomeDiscount() {
	        let result = 0;
	        if (Glob.inHome || Glob.gameState == GameState.InLevel) {
	            let idOfBestHome = this.GetIdOfBestHome();
	            return PropsCfg.get(idOfBestHome).cid;
	        }
	        for (let key in this.LevelData) {
	            let value = this.LevelData[key];
	            if (value.isHome && value.HomeStats != null) {
	                return value.HomeStats.m_homeSleepDiscount;
	            }
	        }
	        return result;
	    }
	    UnlockedRewardsYet() {
	        if (!this.LevelData[this.unloclLevelId]) {
	            console.error("Could not find Level ID Level_Grasslands_3 in the LevelData dictionary.");
	            return true;
	        }
	        if (Glob.inLevelOrHome && Glob.currLevelData.cid == this.unloclLevelId) {
	            return true;
	        }
	        return this.LevelData[this.unloclLevelId].EverCompleted();
	    }
	    showBringHomeView() {
	        if (Glob.currLevelData.isChallenge) {
	            LayerMgr.ins().open(UiConst.ChallengeSettleView);
	        }
	        else if (this.shouldShowBringHomeMenu()) {
	            LayerMgr.ins().open(UiConst.LevelSettleView);
	        }
	        else {
	            Glob.currentLevel.bringHomeMenuDone();
	        }
	    }
	    shouldShowBringHomeMenu() {
	        if (!Glob.currLevelData.HasPickAndChooseRewards) {
	            return false;
	        }
	        return this.UnlockedRewardsYet();
	    }
	    InitFromSaveData(data) {
	        this.lastLevelCid = data.recentLevelId;
	        this.PositionMarkerPawnAtMostRecentLevel();
	    }
	    OnWorldFinishedLoading() {
	        this.ForcePawnToMostRecentLevel();
	    }
	    GetSaveDataObject() {
	        let saveData_Map_World = new SL_WorldMap();
	        saveData_Map_World.recentLevelId = this.lastLevelCid;
	        return saveData_Map_World;
	    }
	    PositionMarkerPawnAtMostRecentLevel() {
	        if (this.lastLevelCid) {
	            this.TeleportPawnTo(this.lastLevelCid);
	        }
	    }
	    TeleportPawnTo(levelID) {
	    }
	    ForcePawnToMostRecentLevel() {
	    }
	    openInfoPanel(levelId) {
	        this.clostInfoPanel();
	        let isChallenge = WorldMgr.ins().isChallenge(levelId);
	        LayerMgr.ins().open(isChallenge ? UiConst.WorldChallengeEnter : UiConst.WorldInfoView, levelId);
	    }
	    clostInfoPanel() {
	        LayerMgr.ins().close(UiConst.WorldInfoView);
	        LayerMgr.ins().close(UiConst.WorldChallengeEnter);
	    }
	    JumpToHighestUnlockedLevel() {
	        let levelId = this.GetHighestUnlockedLevelId();
	        if (levelId) {
	            MsgCenter.notify(MsgConst.LEVEL_JUMP_HIGH, levelId);
	        }
	    }
	    GetHighestUnlockedLevelId() {
	        let cid = 0;
	        let levels = this.LevelData;
	        for (let key in levels) {
	            let level = levels[key];
	            if (level.IsUnlocked() && !level.cfg.isTest && !level.cfg.isSecret) {
	                cid = level.cid;
	            }
	        }
	        return cid;
	    }
	    isShowFirstArrow() {
	        let cid = this.GetHighestUnlockedLevelId();
	        return cid <= WorldMgr.ins().firstLevelId;
	    }
	    isShowHomeArrow() {
	        let homeLevelVo = this.getHomeLevelVo();
	        return homeLevelVo.IsUnlocked && !homeLevelVo.HomeStats;
	    }
	    loadLevelOrWorld() {
	        let preLevelId = Glob.gamePreviouslyExitedOnLevelID;
	        if (preLevelId && this.hasLevel(preLevelId)) {
	            let levelData = this.getLevelVo(preLevelId);
	            if (levelData.IsEventLevel) {
	                Glob.request_LoadWorldMap();
	                console.warn("WorldMgr loadLevelOrWorld========== event level ", preLevelId);
	                return;
	            }
	            if (Level.isSaveFileMapVersionCurrent(preLevelId)) {
	                this.enter(levelData);
	                return;
	            }
	            if (!levelData.isHome) {
	                Level.deleteSaveFileAndBackup(preLevelId);
	            }
	            else {
	                console.error("Either the home area was not present, or it was an outdated version. Either way, we will not delete the save file or backup if either exist.");
	            }
	            Glob.gamePreviouslyExitedOnLevelID = null;
	        }
	        Glob.request_LoadWorldMap();
	    }
	    onLevelComplete() {
	        this.tryShowRewardsDialog();
	        this.tryShowRatingsDialog_AndClearLevelJustWonID();
	    }
	    tryShowRewardsDialog() {
	        let levelJustWon = Glob.levelJustWon;
	        if (levelJustWon) {
	            let levelData = this.getLevelVo(levelJustWon);
	            let reward = levelData.RewardPrefabNameEarned;
	            if (reward) {
	                MsgCenter.notify(MsgConst.LEVEL_REPEAT_REWARD, reward);
	                levelData.RewardPrefabNameEarned = 0;
	            }
	        }
	    }
	    tryShowRatingsDialog_AndClearLevelJustWonID() {
	        let levelId = Glob.levelIDJustCompletedForFirstTime;
	        if (!levelId) {
	            MsgCenter.notify(MsgConst.NOT_LEVEL_FIRST_PASS, levelId);
	            return;
	        }
	        let levelJustWon = Glob.levelJustWon;
	        if (levelJustWon) {
	            Glob.levelJustWon = 0;
	        }
	        MsgCenter.notify(MsgConst.LEVEL_FIRST_PASS, levelId);
	    }
	    TryEnterLevelAndChargeProperEnergyCost(levelID) {
	        let levelData = this.getLevelVo(levelID);
	        if (Level.levelSaveFileExists(levelID)) {
	            let saveFileMapVersion_IfSaveExists = Level.getSaveFileMapVersion_IfSaveExists(levelID);
	            let mostCurrentMapVersionNumber = Level.getMostCurrentMapVersionNumber(levelID);
	            if (saveFileMapVersion_IfSaveExists != mostCurrentMapVersionNumber) {
	                if (!levelData.isHome) {
	                    Level.deleteSaveFileAndBackup(levelID);
	                    PopupManager.show2(Presets.Simple1Button(LanCfg.get("20010025"), LanCfg.get("20010026")));
	                    return false;
	                }
	            }
	        }
	        if (levelData.energy > 0) {
	            let num = levelData.energy;
	            if (!CurrencyMgr.ins().CanAfford(ECurrency.Energy, num)) {
	                CurrencyMgr.ins().ShowNotEnoughEnergyDialog();
	                return false;
	            }
	            CurrencyMgr.ins().charge(ECurrency.Energy, num);
	        }
	        this.mostRecentLevelId = levelID;
	        Glob.loadLevel(levelID);
	        return true;
	    }
	}

	class LootTablesMgr extends Singleton {
	    constructor() {
	        super(...arguments);
	        this.autoMap = {};
	    }
	    get(id) {
	        let cfg = LootTablesCfg.get(id);
	        if (!cfg) {
	            let result = this.autoMap[id];
	            if (result) {
	                return result;
	            }
	            else {
	                this.autoMap[id] = LootTablesVo.createFromPref(id);
	                return this.autoMap[id];
	            }
	        }
	        return cfg;
	    }
	    formatIfLevel(id) {
	        if (id >= 69000 && id < 70000) {
	            let lootPrefix = WorldMgr.ins().currLevelVo.cfg.lootPrefix;
	            let suffix = id - 69000;
	            let levelName = lootPrefix + suffix.toString();
	            id = LootTablesCfg.getByLevel(levelName).id;
	        }
	        return id;
	    }
	}

	class MatchOutput {
	    constructor(outputPrefabName, dropAmountRange) {
	        this.outputPrefabName = outputPrefabName;
	        this.dropAmountRange = dropAmountRange;
	    }
	    getOutputName() {
	        return this.outputPrefabName;
	    }
	    getOutput() {
	        if (PrefabDB.prefabExists(this.outputPrefabName)) {
	            return this.outputPrefabName;
	        }
	        if (this.lootTableOutput == null) {
	            this.lootTableOutput = LootTablesMgr.ins().get(this.outputPrefabName);
	        }
	        if (this.lootTableOutput != null) {
	            return this.lootTableOutput.getDefaultDropPrefId();
	        }
	        console.log("Croikey! There's a MatchOutput with no actual output defined!");
	        return null;
	    }
	}

	class MatchRecipeVo {
	    constructor(key, cfg) {
	        this.inputPrefabName = key;
	        let outputPrefabName = cfg["out"];
	        this.defaultOutput = new MatchOutput(outputPrefabName, new RangeI(1, 1));
	        this.defaultDropsEvenIfChanceDrops = cfg["ev"] == 1;
	        this.chanceOfAChanceDrop = cfg["ch"];
	        if (cfg["cat"]) {
	            this.inputCategory = CategoryID[cfg["cat"]];
	        }
	        for (let i = 1; i <= 4; i++) {
	            if (!this.tryAddChanceItem(cfg, i.toString())) {
	                break;
	            }
	        }
	    }
	    get hasInputCategory() {
	        return this.inputCategory != CategoryID.NONE;
	    }
	    tryAddChanceItem(cfg, chanceIndexAppend) {
	        let text = cfg["c" + chanceIndexAppend];
	        if (text == null) {
	            return false;
	        }
	        let text2 = cfg["w" + chanceIndexAppend];
	        let weight = text2 != null ? Number(text2) : 1;
	        let a = cfg["d" + chanceIndexAppend];
	        let dropCountRange = a != null ? RangeI.create(a) : new RangeI(1, 1);
	        this.addChanceOutput(text, weight, dropCountRange);
	        return true;
	    }
	    addChanceOutput(chanceItemName, weight, dropCountRange) {
	        if (this.additionalChanceOutputs == null) {
	            this.additionalChanceOutputs = new WeightedList();
	        }
	        let element = new MatchOutput(chanceItemName, dropCountRange);
	        this.additionalChanceOutputs.add(element, weight);
	        if (LoginData.gm > 0) {
	        }
	    }
	    getPrefabsOfOutputs() {
	        let list = [];
	        let matchOutput = null;
	        if (this.additionalChanceOutputs != null && MathUtil.chance(this.chanceOfAChanceDrop)) {
	            matchOutput = this.additionalChanceOutputs.getRandomElementWeighted();
	        }
	        if (matchOutput == null || this.defaultDropsEvenIfChanceDrops) {
	            if (!LoginData.isTestChannel)
	                list.push(this.defaultOutput.getOutput());
	            else
	                list.push(this.getOutputEx(this.defaultOutput));
	        }
	        if (matchOutput != null) {
	            let num = matchOutput.dropAmountRange.random();
	            for (let i = 0; i < num; i++) {
	                if (!LoginData.isTestChannel)
	                    list.push(matchOutput.getOutput());
	                else
	                    list.push(this.getOutputEx(matchOutput));
	            }
	        }
	        if (list.length == 0) {
	            console.log("Outputs list for matching [" + this.inputPrefabName + "] is empty! Returning default item.");
	            if (!LoginData.isTestChannel)
	                list.push(this.defaultOutput.getOutput());
	            else
	                list.push(this.getOutputEx(this.defaultOutput));
	        }
	        return list;
	    }
	    getOutputEx(defaultOutputVar) {
	        if (LoginData.isTestChannel && MatchRecipeCfg.matchRecipes != null) {
	            let strName = defaultOutputVar.getOutputName();
	        }
	        return defaultOutputVar.getOutput();
	    }
	}

	class MatchRecipeCfg {
	    static init() {
	        let json = PConfig.getCfg("Combos.json");
	        for (let key in json) {
	            this.matchRecipes[key] = new MatchRecipeVo(key, json[key]);
	        }
	    }
	    static get(key) {
	        return this.matchRecipes[key];
	    }
	}
	MatchRecipeCfg.matchRecipes = {};

	class ProjectileDef {
	    constructor(key, cfg) {
	        this.bulletsPerShot = 1;
	        this.id = key;
	        this.prefabName = cfg["Prefab"];
	        this.moveSpeed = cfg["Move Speed"];
	        this.secondsToReload = cfg["Reload Seconds"];
	        this.damagePerHit = cfg["Damage per Hit"];
	        this.hitParticleEffectPrefabName = cfg["Hit Effect Prefab"];
	        let num = cfg["Seconds to Fire"];
	        let num2 = cfg["Seconds to Fire Deviation"];
	        this.secondsToFireRange = new Range(num - num2, num + num2);
	        this.bulletsPerShot = cfg["Bullets per Shot"];
	        if (this.bulletsPerShot > 1) {
	            if (cfg["Multishot Delay"] != null) {
	                this.multishotDelay = cfg["Multishot Delay"];
	            }
	        }
	        this.SFX_Chamber = cfg["SFX - Chamber"];
	        this.SFX_InChamberLoop = cfg["SFX - Loop"];
	        this.SFX_Shoot = cfg["SFX - Shoot"];
	        this.SFX_HitTarget = cfg["SFX - Hit"];
	    }
	    get hasMultishot() {
	        return this.bulletsPerShot > 1;
	    }
	}

	class ProjectileCfg {
	    static init() {
	        let cfg = PConfig.getCfg("Projectiles.json");
	        for (let key in cfg) {
	            let item = cfg[key];
	            let vo = new ProjectileDef(key, item);
	            this.cfg[key] = vo;
	        }
	    }
	    static get(id) {
	        return this.cfg[id];
	    }
	}
	ProjectileCfg.cfg = {};

	class CustomCalls {
	    static NeighborHealerActivate_Tapped(neighborHealer) {
	        if (!neighborHealer.isDying()) {
	            let component = neighborHealer.getComponent(CompNeighborHealer);
	            if (component == null) {
	                GuiMgr.errorMessage("Neighbor Healer had a meta didn't have a Component_NeighborHealer. " + neighborHealer);
	            }
	            else {
	                component.tapped();
	            }
	        }
	    }
	    static NeighborHealerActivate(neighborHealer) {
	        if (!neighborHealer.isDying()) {
	            let component = neighborHealer.getComponent(CompNeighborHealer);
	            if (component == null) {
	                GuiMgr.errorMessage("Neighbor Healer had a meta didn't have a Component_NeighborHealer. " + neighborHealer);
	            }
	            else {
	                component.neighborWasHealed();
	            }
	        }
	    }
	    static Created_CurrencyStorage(storageCreated) {
	        if (storageCreated.strength != 0 && !storageCreated.isIcon && (!storageCreated.loadedFromSave || storageCreated.droppedFromInstanceLoot)) {
	            if (storageCreated.createdByMatch || storageCreated.justBuilt) {
	                FloatingText.CreateCurrencyFloatingText(storageCreated.cfg.m_locKey_Text2, storageCreated.cfg.currencyTypeStored, storageCreated.drawnObjectPosition, storageCreated.cfg.itemLevel);
	            }
	            CurrencyMgr.ins().updateCurrencyCap(storageCreated.cfg.currencyTypeStored, storageCreated.strength >> 0, false);
	        }
	    }
	    static Destroyed_CurrencyStorage(storageDestroyed, deathReason) {
	        if (!storageDestroyed.isIcon) {
	            let decreaseCurrencyIfCapSinksBelowIt = true;
	            if (deathReason == DeathReasonID.MasterMatched || deathReason == DeathReasonID.SlaveMatched) {
	                decreaseCurrencyIfCapSinksBelowIt = false;
	            }
	            CurrencyMgr.ins().updateCurrencyCap(storageDestroyed.cfg.currencyTypeStored, -storageDestroyed.strength >> 0, decreaseCurrencyIfCapSinksBelowIt);
	            if (deathReason == DeathReasonID.Sold || deathReason == DeathReasonID.SoldOrTrashed || deathReason == DeathReasonID.NoHPLeft) {
	                let text = (storageDestroyed.cfg.currencyTypeStored != ECurrency.Gold) ? LanCfg.get("10020011") : LanCfg.get("10020012");
	                FloatingText.CreateCurrencyFloatingText("- " + (storageDestroyed.strength >> 0) + " " + text, storageDestroyed.cfg.currencyTypeStored, storageDestroyed.drawnObjectPosition, storageDestroyed.cfg.itemLevel);
	            }
	        }
	    }
	    static Destroyed_MonsterHome(homeDestroyed, deathReason) {
	        let component = homeDestroyed.homeComponent;
	        if (component == null) {
	            GuiMgr.errorMessage("Could not find Component_MonsterHome on what is supposed to be a Monster Home in the custom Destroyed_MonsterHome method. " + homeDestroyed);
	        }
	        else {
	            component.ejectAllMonstersWithoutRest();
	        }
	    }
	    static Created_EnemyNexus_Zomblin1(drawnObject) {
	        this.InitEnemyNexus(drawnObject, 70000);
	    }
	    static Created_EnemyNexus_Zomblin2(drawnObject) {
	        this.InitEnemyNexus(drawnObject, 70001);
	    }
	    static Created_EnemyNexus_Zomblin3(drawnObject) {
	        this.InitEnemyNexus(drawnObject, 70002);
	    }
	    static Created_EnemyNexus_Zomblin4(drawnObject) {
	        this.InitEnemyNexus(drawnObject, 70003);
	    }
	    static InitEnemyNexus(drawnObject, zomblinPrefab) {
	        let component = drawnObject.enemySpawnNexus;
	        if (component == null) {
	            GuiMgr.errorMessage("Enemy Spawn Nexus is null on an object that should have one: " + drawnObject + " -- a nexus for " + zomblinPrefab);
	            return;
	        }
	        component.initZomblinType_NoPositionChange(zomblinPrefab);
	    }
	    static Created_DragonPortal_Random(portalCreated) {
	        this.SummonDragonFromPortal(portalCreated, MonsterTypeID.RANDOM);
	    }
	    static Created_DragonPortal_Harvester(portalCreated) {
	        this.SummonDragonFromPortal(portalCreated, MonsterTypeID.Harvester);
	    }
	    static Created_DragonPortal_Trophy(portalCreated) {
	        this.SummonDragonFromPortal(portalCreated, MonsterTypeID.Trophy);
	    }
	    static Created_DragonPortal_Defender(portalCreated) {
	        this.SummonDragonFromPortal(portalCreated, MonsterTypeID.Defender);
	    }
	    static Created_DragonPortal_Zoomer(portalCreated) {
	        this.SummonDragonFromPortal(portalCreated, MonsterTypeID.Zoomer);
	    }
	    static SummonDragonFromPortal(portalCreated, monsterType, isBackupSummon = false, backupForType = MonsterTypeID.NONE) {
	        if (!portalCreated.createdByMatch) {
	            return;
	        }
	        let monsterOfTypeFromHomeArea = OwnedMonsterMgr.getMonsterOfTypeFromHomeArea(monsterType, false);
	        if (monsterOfTypeFromHomeArea == null) {
	            if (monsterType == MonsterTypeID.RANDOM) {
	                FloatingText.CreateInfoText(LanCfg.get("10020013"), InfoTextColorID.Red, portalCreated);
	            }
	            else {
	                this.SummonDragonFromPortal(portalCreated, MonsterTypeID.RANDOM, true, monsterType);
	            }
	            return;
	        }
	        let drawnObject = Thing.loadFromSave_Entity(monsterOfTypeFromHomeArea);
	        if (!(drawnObject == null)) {
	            drawnObject.setRootPosition(portalCreated.x, portalCreated.y);
	            drawnObject.asMonster.initLevelIDs();
	            ThingAnim.playNewObjectAppear(drawnObject);
	            Thing.createMatchParticlesFor(drawnObject);
	            if (!isBackupSummon) {
	                FloatingText.CreateInfoText(LanCfg.get("10020014"), InfoTextColorID.Green, drawnObject);
	            }
	        }
	    }
	    static Created_PlayFireworks_1(createdObject) {
	        if (createdObject.createdByMatch) {
	        }
	    }
	    static Created_GoldChest_SetCustomLootContents(i_drawnObjectCreated) {
	        if (i_drawnObjectCreated.customLootBundle.hasLoot) {
	            i_drawnObjectCreated.customLootBundle.clear();
	        }
	        let bundle = GGServices.GetBundleService().GetBundle("starter_pack_goldchest_bundle");
	        if (bundle == null || bundle.bundleItems == null || bundle.bundleItems.length <= 0) {
	            return;
	        }
	        for (let i = 0; i < bundle.bundleItems.length; i++) {
	            if (bundle.bundleItems[i].type == BundleItemType.IN_GAME_ITEM) {
	                i_drawnObjectCreated.customLootBundle.addLoot(bundle.bundleItems[i].bundleItemID);
	            }
	        }
	    }
	    static Created_TimeBundleChest(obj) {
	        this.CreatedTimedBundle(obj.cfg.cid.toString(), obj.cfg.cid.toString(), obj);
	    }
	    static Created_GoldVault_SetCustomLootContents(i_drawnObjectCreated) {
	        this.CreatedTimedBundle("starter_pack_bundle", "starter_pack", i_drawnObjectCreated);
	    }
	    static CreatedTimedBundle(timerId, chestId, drawnObject) {
	        let timerData = GGServices.GetTimerService().GetTimer(timerId);
	        let flag = timerId.startsWith("starter_pack");
	        let offerType = flag ? "starter_pack" : "timed_bundle";
	        if (timerData != null) {
	            if (timerData.Status == EnumTimerStatus.STARTED) {
	                if (!GGServices.GetTimerService().HasListener(timerId)) {
	                    GGServices.GetTimerService().AddListener(timerId, Laya.Handler.create(this, this.bundleHandler, null, false));
	                }
	                this.AttachProgressMeterTimer(drawnObject, timerData);
	            }
	            else if ((flag && !ShopSaveMgr.DidPurchaseStarterPack) || (!flag && !ShopSaveMgr.HasPurchasedTimedBundleChest(timerId))) {
	                this.AttachProgressMeterTimer(drawnObject, null);
	            }
	        }
	        else {
	            this.AttachProgressMeterTimer(drawnObject, null);
	        }
	    }
	    static bundleHandler(i_timerID, i_duration, i_remaining, i_timerStatus) {
	        if (i_timerStatus == EnumTimerStatus.EXPIRED) {
	            GGServices.GetTimerService().StopTimer(i_timerID);
	        }
	    }
	    static AttachProgressMeterTimer(obj, timerData) {
	    }
	    static Created_DragonGrass_1_Root(dragon) {
	        if (Glob.gameState == GameState.InLevel && Glob.currentLevel.data.cid == 10063 && ThingList.lists[10003] || ThingList.lists[10004]) {
	            TomeTip.showGameTip(GameTipTypeID.Tip_DoubleTap);
	        }
	    }
	    static Created_ProgressionDupe_Case(drawnObject) {
	        GGProgressionDupeController.ins().OnProgressionDupeCaseCreation(drawnObject);
	    }
	    static Created_ProgressionDupe_Case_Purchased(drawnObject) {
	        GGProgressionDupeController.ins().OnProgressionDupeCasePurchasedCreation(drawnObject);
	    }
	    static Created_Home(home) {
	    }
	}

	class SpawnDef {
	    constructor(cfg) {
	        this.spawnCycleCharges = -1;
	        this.spawnNearby_LootTable = LootTablesMgr.ins().get(cfg["Loot Spawn Nearby"]);
	        this.spawnPulseSecondsRange = Range.create(cfg["Loot Spawn Pulse Time Range"]);
	        this.spawnRadius = cfg["Loot Spawn Radius"];
	        this.suppressSpawnSwoop = cfg["Loot Spawn Suppress Swoop"] == 1;
	        if (cfg["Loot Spawn SFX"]) {
	            this.SFX_SpawnItem = cfg["Loot Spawn SFX"];
	        }
	        if (cfg["Loot Spawn Count Range"]) {
	            this.spawnCountPerPulse = RangeI.create(cfg["Loot Spawn Count Range"]);
	        }
	        else {
	            this.spawnCountPerPulse = new RangeI(1, 1);
	        }
	        if (cfg["Loot Spawn Cycle Charges"] != null) {
	            this.spawnCycleCharges = cfg["Loot Spawn Cycle Charges"];
	        }
	        this.showProgressBar = cfg["Loot Spawn Show Progress Bar"] == 1;
	    }
	    get hasInfiniteSpawns() {
	        return this.spawnCycleCharges < 0;
	    }
	}

	class LootListVo {
	    constructor(cid, cfg) {
	        this.items = new Array();
	        this.cid = cid;
	        let i = 1;
	        let indexer = "Item " + i;
	        let indexer2 = "Count " + i;
	        while (cfg[indexer]) {
	            let itemID = cfg[indexer];
	            let count = cfg[indexer2] ? cfg[indexer] : 1;
	            this.items.push({ itemID, count });
	            i++;
	            if (i > 5) {
	                break;
	            }
	            indexer = "Item " + i;
	            indexer2 = "Count " + i;
	        }
	    }
	}

	class LootListCfg {
	    static init() {
	        let json = PConfig.getCfg("LootList.json");
	        for (let key in json) {
	            this.data[key] = new LootListVo(key, json[key]);
	        }
	    }
	    static get(key) {
	        return this.data[key];
	    }
	}
	LootListCfg.data = {};

	class OnTapEvent {
	    static emblemHitUI(thing) {
	        let num = CurrencyMgr.ins().credit2(ECurrency.Gold, thing.strength >> 0, EnumEconEarnType.COLLECT, thing);
	        ApiMgr.addGoldRecord(thing.strength >> 0, Glob.inHome ? LogEarnType.PickGoldHome : LogEarnType.PickGoldLevel);
	        if (num > 0) {
	            try {
	                let worldPositionOfGUI = GuiMgr.getWorldPositionOfGUI(UiDef.gold);
	                Globals.handleCurrencyRemainderCreation(worldPositionOfGUI, 10267, num);
	            }
	            catch (e) {
	                console.log(e);
	            }
	        }
	    }
	    static stoneHitUI(thing) {
	        let num = CurrencyMgr.ins().credit2(ECurrency.Stone, thing.strength >> 0, EnumEconEarnType.COLLECT, thing);
	        ApiMgr.addStoneRecord(thing.strength >> 0, Glob.inHome ? LogEarnType.PickStoneHome : LogEarnType.PickStoneLevel);
	        if (num > 0) {
	            let worldPositionOfGUI = GuiMgr.getWorldPositionOfGUI(UiDef.stone);
	            Globals.handleCurrencyRemainderCreation(worldPositionOfGUI, 10319, num);
	        }
	    }
	    static premiumCurrencyHitUI(thing) {
	        CurrencyMgr.ins().credit2(ECurrency.Diamond, thing.strength >> 0, EnumEconEarnType.COLLECT, thing);
	        ApiMgr.addYbRecord(thing.strength >> 0, Glob.inHome ? LogEarnType.PickGemHome : LogEarnType.PickGemLevel);
	    }
	    static energyHitUI(thing) {
	        CurrencyMgr.ins().credit2(ECurrency.Energy, thing.strength >> 0, EnumEconEarnType.COLLECT, thing);
	    }
	    static pointsHitUI(thing) {
	        Glob.currentLevel.updatePointsCount(thing.strength >> 0, true);
	    }
	}

	class ModalTimedBundleDefinition extends ModalDialogDefinition {
	    constructor(bundleData) {
	        super(UiConst.ModalTimedBundle);
	        this.bundleData = bundleData;
	    }
	}

	class CompOnTapBehavior extends Laya.Script3D {
	    constructor() {
	        super(...arguments);
	        this.lootOrbCapacity = new RangeI(1, 5);
	        this.tapBehaviorSuccess = true;
	    }
	    onAwake() {
	        this.thing = this.owner;
	        this.behavior = this.thing.cfg.tapBehavior;
	    }
	    tap() {
	        if (Glob.inAnEventArea_Type2_ScorePuzzle && this.thing.cfg.cid != 11031) {
	            return;
	        }
	        if (this.behavior.createOnTap != null && this.tapBehaviorSuccess) {
	            this.lootLeftToDrop = this.behavior.creationCount_Range.random();
	        }
	        this.tapBehaviorSuccess = true;
	        if (this.behavior.createOnTap != null) {
	            if (this.behavior.useLootOrb) {
	                this.dropLoot_UseLootOrbs();
	            }
	            else {
	                this.dropLoot_NotInOrbs();
	            }
	        }
	        if (this.thing.onTapAudioOverride != null) {
	            SoundMgr.ins().playSound(this.thing.onTapAudioOverride);
	        }
	        else if (this.behavior.audioClip != null) {
	            SoundMgr.ins().playSound(this.behavior.audioClip);
	        }
	        if (this.behavior.onTapGemCost != null) {
	            Globals.createFromPrefabAt(this.behavior.onTapParticles, this.thing.transform.position);
	        }
	        if (this.behavior.event_CustomTapFunction != null) {
	            let fun = this[this.behavior.event_CustomTapFunction];
	            if (fun) {
	                fun.apply(this);
	            }
	        }
	        if (this.tapBehaviorSuccess) {
	            MsgCenter.notify(MsgConst.GAME_ACTION, { actionId: GameActionTypeID.Activate, thing: this.thing });
	            if (this.thing.tapsLeft > 0) {
	                ThingAnim.playTapBehaviorJitter(this.thing);
	            }
	            if (this.thing.tapVisualizer) {
	                this.thing.tapVisualizer.TapAmountChanged();
	            }
	        }
	        this.checkForDoneWithAllTaps();
	    }
	    dropLoot_UseLootOrbs() {
	        this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	        let drawnObject = null;
	        while (this.lootLeftToDrop > 0) {
	            let num = this.lootOrbCapacity.random();
	            if (num > this.lootLeftToDrop) {
	                num = this.lootLeftToDrop;
	            }
	            if (this.thing.customLootBundle != null && this.thing.customLootBundle.hasLoot) {
	                drawnObject = LootOrb.createLB(this.thing.customLootBundle);
	                this.lootLeftToDrop = 0;
	            }
	            else {
	                drawnObject = LootOrb.createLT(this.behavior.createOnTap, num);
	            }
	            if (drawnObject) {
	                drawnObject.setRootPosition(this.thing.x, this.thing.y, this.thing.z);
	                Globals.swoopDropToFreeMetaCell(drawnObject);
	            }
	            this.lootLeftToDrop -= num;
	        }
	        if (this.behavior.bonusLoot != null && drawnObject != null) {
	            if (!drawnObject.hasCustomLoot) {
	                console.error("Expected loot orb to have custom loot bundle, but it didn't.");
	            }
	            else {
	                drawnObject.customLootBundle.addLootT(this.behavior.bonusLoot, this.behavior.bonusLootCount_Range.random());
	            }
	        }
	        if (this.behavior.bonusLoot_2 != null && drawnObject != null && MathUtil.chance(this.behavior.bonusLoot_2_Chance)) {
	            if (!drawnObject.hasCustomLoot) {
	                console.error("Expected loot orb to have custom loot bundle, but it didn't.");
	            }
	            else {
	                drawnObject.customLootBundle.addLootT(this.behavior.bonusLoot_2, this.behavior.bonusLoot_2_CountRange.random());
	            }
	        }
	        if (this.behavior.bonusLootList != null && drawnObject != null) {
	            if (!drawnObject.hasCustomLoot) {
	                console.error("Expected loot orb to have custom loot bundle, but it didn't.");
	            }
	            else {
	                drawnObject.customLootBundle.addLootL(this.behavior.bonusLootList);
	            }
	        }
	    }
	    setDropCountToItemsLeftInCustomLootBundleIfAvailable() {
	        if (this.thing.customLootBundle != null && this.thing.customLootBundle.hasLoot) {
	            this.lootLeftToDrop = this.thing.customLootBundle.count;
	        }
	    }
	    tryAttachDropParticlesTo(droppedItem) {
	        if (this.thing && this.thing.cfg && droppedItem && droppedItem.cfg && this.thing.cfg.categories && droppedItem.cfg.categories && (this.thing.cfg.hasCategory(CategoryID.TreasureChests) || this.thing.cfg.hasCategory(CategoryID.LootOrbs)) && (droppedItem.cfg.hasCategory(CategoryID.Eggs) || droppedItem.cfg.hasCategory(CategoryID.Nests) || droppedItem.cfg.hasCategory(CategoryID.Dragons))) {
	            droppedItem.attachParticles("ParticleRoot_ShopBuyImpact", 1.5);
	        }
	    }
	    dropLoot_NotInOrbs() {
	        this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	        let list = [];
	        while (this.lootLeftToDrop > 0) {
	            let drawnObject = (this.thing.customLootBundle == null || !this.thing.customLootBundle.hasLoot) ? this.behavior.createOnTap.tryDrop_CheckFreeCells() : this.thing.customLootBundle.tryDrop_CheckFreeCells();
	            if (drawnObject == null) {
	                this.tapBehaviorSuccess = false;
	                this.thing.deselect();
	                this.refundATap();
	                break;
	            }
	            this.tryAttachDropParticlesTo(drawnObject);
	            this.positionTapSpawn(drawnObject);
	            list.push(drawnObject.cfg.cid);
	            this.lootLeftToDrop--;
	        }
	        if (this.tapBehaviorSuccess && this.behavior.bonusLoot != null) {
	            let num = this.behavior.bonusLootCount_Range.random();
	            for (let i = 0; i < num; i++) {
	                let drawnObject2 = Thing.createAtPointAndSwoopToFreeCell(this.behavior.bonusLoot.dropPrefabId(), this.thing.x, this.thing.y);
	                list.push(drawnObject2.cfg.cid);
	                this.tryAttachDropParticlesTo(drawnObject2);
	            }
	        }
	        if (this.tapBehaviorSuccess && this.behavior.bonusLoot_2 != null && MathUtil.chance(this.behavior.bonusLoot_2_Chance)) {
	            let num2 = this.behavior.bonusLoot_2_CountRange.random();
	            for (let j = 0; j < num2; j++) {
	                let drawnObject3 = Thing.createAtPointAndSwoopToFreeCell(this.behavior.bonusLoot_2.dropPrefabId(), this.thing.x, this.thing.y);
	                list.push(drawnObject3.cfg.cid);
	                this.tryAttachDropParticlesTo(drawnObject3);
	            }
	        }
	        if (this.tapBehaviorSuccess && this.behavior.bonusLootList != null) {
	            for (let item of this.behavior.bonusLootList.items) {
	                for (let k = 0; k < item.count; k++) {
	                    let drawnObject4 = Thing.createAtPointAndSwoopToFreeCell(item.itemID, this.thing.x, this.thing.y);
	                    list.push(drawnObject4.cfg.cid);
	                    this.tryAttachDropParticlesTo(drawnObject4);
	                }
	            }
	        }
	        if (this.thing.customLootBundle != null && this.thing.customLootBundle.isLevelReward && list.length > 0) {
	        }
	    }
	    positionTapSpawn(objSpawnedFromTap) {
	        if (objSpawnedFromTap.cfg.spawnAtSpawnersRoot) {
	            objSpawnedFromTap.setRootPosition(this.thing.x, this.thing.y, this.thing.z);
	        }
	        else {
	            objSpawnedFromTap.setRootPosition(this.thing.drawnX, this.thing.drawnY, this.thing.z);
	        }
	        Globals.swoopDropToFreeMetaCell(objSpawnedFromTap);
	    }
	    refundATap() {
	        if (!this.thing.cfg.infiniteTaps) {
	            FloatingText.CreateInfoText(LanCfg.get("10020009"), InfoTextColorID.Red, this.thing);
	            TomeTip.showGameTip(GameTipTypeID.Tip_LandFull);
	            this.thing.tapsLeft++;
	            if (this.thing.tapVisualizer != null) {
	                this.thing.tapVisualizer.tapAmountChanged();
	            }
	            this.thing.refreshShrinkScaleFromTapOrHarvest();
	        }
	    }
	    checkForDoneWithAllTaps() {
	        if (this.thing.tapsLeft <= 0 && !this.thing.cfg.infiniteTaps) {
	            if (this.behavior.dieOnTap) {
	                this.thing.trySetToSetToDying(DeathReasonID.Tapped);
	            }
	            this.destroy();
	        }
	    }
	    CustomCall_NeighborHealerActivate() {
	        CustomCalls.NeighborHealerActivate_Tapped(this.thing);
	    }
	    CustomCall_MonsterHomeTapped() {
	        if (!(this.thing.home == null)) {
	            this.thing.home.tapped();
	        }
	    }
	    CustomCall_OnTapKalaShip() {
	        LayerMgr.ins().open(UiConst.DailyQuestView);
	    }
	    CustomCall_EmblemTapped() {
	        if (CurrencyMgr.ins().isFull(ECurrency.Gold)) {
	            FloatingText.CreateInfoText(LanCfg.get("10020007"), InfoTextColorID.Red, this.thing);
	            if (Glob.inHome) {
	                MsgCenter.notify(MsgConst.SHOWBANNER, ECurrency.Gold);
	            }
	            TomeTip.showGameTip(GameTipTypeID.Tip_CoinsFull);
	        }
	        else {
	            OnTapEvent.emblemHitUI(this.thing);
	            this.thing.deselect();
	            this.thing.tryFlyToUIAtScreenLocation(UiDef.gold, null);
	            Flasher.flashWhite(this.thing);
	            FloatingText.CreateCurrencyFloatingText("+$" + (this.thing.strength >> 0), ECurrency.Gold, this.thing.body.transform.position, this.thing.cfg.itemLevel);
	        }
	    }
	    awardSingleCoin() {
	        if (CurrencyMgr.ins().isFull(ECurrency.Gold)) {
	            FloatingText.CreateInfoText(LanCfg.get("10020007"), InfoTextColorID.Red, this.thing);
	            if (Glob.inHome) {
	                MsgCenter.notify(MsgConst.SHOWBANNER, ECurrency.Gold);
	            }
	            TomeTip.showGameTip(GameTipTypeID.Tip_CoinsFull);
	        }
	        else {
	            CurrencyMgr.ins().credit2(ECurrency.Gold, 1, EnumEconEarnType.COLLECT, null);
	            this.thing.deselect();
	            this.thing.tryFlyToUIAtScreenLocation(UiDef.gold, null);
	            Flasher.flashWhite(this.thing);
	            FloatingText.CreateCurrencyFloatingText("+$" + 1, ECurrency.Gold, this.thing.body.transform.position, this.thing.cfg.itemLevel);
	        }
	    }
	    CustomCall_EventCurrencyTapped() {
	    }
	    CustomCall_OnDailyChestPlinthTapped() {
	        DailyChestMgr.ins().pickChest(this.thing.drawnCenter);
	    }
	    CustomCall_StoneTapped() {
	        if (CurrencyMgr.ins().isFull(ECurrency.Stone)) {
	            FloatingText.CreateInfoText(LanCfg.get("10020008"), InfoTextColorID.Red, this.thing);
	            MsgCenter.notify(MsgConst.SHOWBANNER, ECurrency.Stone);
	            TomeTip.showGameTip(GameTipTypeID.Tip_StoneFull);
	            return;
	        }
	        OnTapEvent.stoneHitUI(this.thing);
	        this.thing.deselect();
	        this.thing.tryFlyToUIAtScreenLocation(UiDef.stone, null);
	        Flasher.flashWhite(this.thing);
	        FloatingText.CreateCurrencyFloatingText("+" + (this.thing.strength >> 0), ECurrency.Stone, this.thing.body.transform.position, this.thing.cfg.itemLevel);
	        TomeTip.showGameTip(GameTipTypeID.Tip_StoneCollected);
	    }
	    CustomCall_PremiumTapped() {
	        OnTapEvent.premiumCurrencyHitUI(this.thing);
	        this.thing.deselect();
	        this.thing.tryFlyToUIAtScreenLocation(UiDef.diamond, null);
	        Flasher.flashWhite(this.thing);
	        FloatingText.CreateCurrencyFloatingText("+" + (this.thing.strength >> 0) + "!", ECurrency.Diamond, this.thing.body.transform.position, this.thing.cfg.itemLevel);
	    }
	    CustomCall_PointsTapped() {
	        OnTapEvent.pointsHitUI(this.thing);
	        this.thing.deselect();
	        this.thing.tryFlyToUIAtScreenLocation(UiDef.scorePoint, null);
	        Flasher.flashWhite(this.thing);
	        let text = "+" + this.thing.strength;
	        FloatingText.CreateBonusPointsText(text, this.thing.strength >> 0, FloatingTextManager.ins().pointsAmountPrefabs[0], this.thing.transform.position, this.thing.cfg.itemLevel);
	    }
	    CustomCall_EnergyTapped() {
	        OnTapEvent.energyHitUI(this.thing);
	        this.thing.deselect();
	        this.thing.tryFlyToUIAtScreenLocation(UiDef.energy, null);
	        Flasher.flashWhite(this.thing);
	        FloatingText.CreateCurrencyFloatingText("+" + this.thing.strength, ECurrency.Energy, this.thing.transform.position, this.thing.cfg.itemLevel);
	    }
	    CustomCall_TomeTipTapped() {
	        let component = this.thing.getComponent(Component_TomeTipObj);
	        component.DrawnObjectTapped();
	    }
	    CustomCall_FogAreaTapped_CloudDungeon() {
	    }
	    CustomCall_KeyTapped_CloudDungeon() {
	        let comp = this.thing.getComponent(CompKeyIndicator);
	        if (comp)
	            comp.showInfoPopup();
	    }
	    CustomCall_FogAreaTapped() {
	        let comp = this.thing.getComponent(CompFogArea);
	        if (comp)
	            comp.tapped();
	    }
	    CustomCall_EggNestTapped() {
	        if (!this.thing.sp)
	            return;
	        let nest = this.thing.sp.getComponent(CompNest);
	        if (!nest)
	            return;
	        nest.tapped(this.thing.tapsLeft);
	    }
	    CustomCall_StarterPackGoldChestOpen() {
	        console.log("CustomCall_StarterPackGoldChestOpen---------------------------------------- 0001 ");
	        if (this.thing.customLootBundle.hasLoot) {
	            this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	            this.dropLoot_NotInOrbs();
	            this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	            this.dropLoot_UseLootOrbs();
	        }
	        this.thing.destroyDrawnObject();
	    }
	    CustomCall_OnTapAlarmBonus() {
	    }
	    CustomCall_StarterPackDialogOpen() {
	        this.openDialogForTimedBundleOrStarterPack("starter_pack_bundle", ShopSaveMgr.DidPurchaseStarterPack);
	    }
	    CustomCall_TimedBundleDialogOpen() {
	    }
	    openDialogForTimedBundleOrStarterPack(bundleId, wasBundlePurchased) {
	        let bundle = GGServices.GetBundleService().GetBundle(bundleId);
	        if (!wasBundlePurchased) {
	            let timer = GGServices.GetTimerService().GetTimer(bundleId);
	            if (timer != null && timer.Status != EnumTimerStatus.EXPIRED) {
	                PopupManager.show2(new ModalTimedBundleDefinition(bundle));
	                return;
	            }
	            this.thing.customLootBundle.clear();
	            let bundle2 = GGServices.GetBundleService().GetBundle("starter_pack_expired_bundle");
	            if (bundle2 != null && bundle2.bundleItems != null && bundle2.bundleItems.length > 0) {
	                for (let i = 0; i < bundle2.bundleItems.length; i++) {
	                    if (bundle2.bundleItems[i].type == BundleItemType.IN_GAME_ITEM) {
	                        this.thing.customLootBundle.addLoot(Number(bundle2.bundleItems[i].bundleItemID));
	                    }
	                }
	            }
	            this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	            this.dropLoot_UseLootOrbs();
	            this.thing.destroyDrawnObject();
	            return;
	        }
	        GGServices.GetBundleService().createLootContentsFromBundle(bundle, this.thing);
	        this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	        this.dropLoot_UseLootOrbs();
	        if (bundle != null && bundle.bundleItems != null && bundle.bundleItems.length > 0) {
	            for (let j = 0; j < bundle.bundleItems.length; j++) {
	                switch (bundle.bundleItems[j].type) {
	                    case BundleItemType.GOLD:
	                        CurrencyMgr.ins().credit(ECurrency.Gold, bundle.bundleItems[j].amount);
	                        break;
	                    case BundleItemType.STONE:
	                        CurrencyMgr.ins().credit(ECurrency.Stone, bundle.bundleItems[j].amount);
	                        break;
	                    case BundleItemType.DAIMOND:
	                        CurrencyMgr.ins().credit(ECurrency.Diamond, bundle.bundleItems[j].amount);
	                        break;
	                }
	            }
	        }
	        this.thing.destroyDrawnObject();
	    }
	    CustomCall_ProgressionDupeDialogOpen() {
	        GGProgressionDupeController.ins().CustomCall_ProgressionDupeDialogOpen(this.thing);
	    }
	    CustomCall_ProgressionDupePurchasedTap() {
	        GGProgressionDupeController.ins().CustomCall_ProgressionDupePurchasedTap(this.thing);
	    }
	    CustomCall_ScorePuzzle_Generator() {
	    }
	    Drop_Loot_CustomLootOnly() {
	        for (this.lootLeftToDrop = this.thing.customLootBundle.count; this.lootLeftToDrop > 0; this.lootLeftToDrop--) {
	            let objSpawnedFromTap = this.thing.customLootBundle.dropPrefabLoot();
	            Flasher.flashWhite(this.thing);
	            this.positionTapSpawn(objSpawnedFromTap);
	        }
	        this.thing.destroyDrawnObject();
	    }
	    DropLoot_ScorePuzzleGenerator() {
	        this.setDropCountToItemsLeftInCustomLootBundleIfAvailable();
	        while (this.lootLeftToDrop > 0) {
	            let objSpawnedFromTap = this.thing.customLootBundle.dropPrefabLoot();
	            Flasher.flashWhite(this.thing);
	            this.positionTapSpawn(objSpawnedFromTap);
	            this.lootLeftToDrop--;
	        }
	    }
	    CustomCall_TapMonument() {
	        let comp = this.thing.getComponent(CompDragoniaMonument);
	        if (comp)
	            comp.tapped();
	    }
	    CustomCall_TapTemporaryObject() {
	    }
	    static isConnectionActive() {
	        return true;
	    }
	    CustomCall_DirectUpgrade() {
	        let component = this.thing.getComponent(CompDirectUpgrade);
	        let directUpgradeUI = component.getDirectUpgradeUI();
	        if (!directUpgradeUI.visible) {
	            let upgradeCost = this.thing.strength >> 0;
	            directUpgradeUI.init(upgradeCost);
	            directUpgradeUI.visible = true;
	        }
	        else {
	            directUpgradeUI.visible = false;
	        }
	    }
	    CustomCall_JeweledEggTapped() {
	        this._actionSuccess = BankMgr.ins().addEgg();
	        this.thing.deselect();
	        this.thing.tryFlyToUIAtScreenLocation(UiDef.jeweledEgg, Laya.Handler.create(this, this.onJeweledEggReachedUI, null, false));
	        Flasher.flashWhite(this.thing);
	        if (this._actionSuccess) {
	            let prefabName = (!MathUtil.coinFlip()) ? 10256 : 10257;
	            Thing.createAtPointAndSwoopToFreeCell(prefabName, this.thing.drawnCenter.x, this.thing.drawnCenter.y, null, "ParticleRoot_ShopBuyImpact");
	        }
	        else {
	            CurrencyMgr.ins().credit(ECurrency.Gold, this.thing.cfg.getSellValue(Glob.inAnEventArea));
	        }
	    }
	    CustomCall_MysteryEggTapped() {
	        Tween.ShakeCamera_VerticalImpact();
	        SoundMgr.ins().playSound("m16");
	        CameraMgr.centerAt(this.thing.drawnX, this.thing.drawnY);
	        Tween.ShakeCamera_VerticalImpact();
	    }
	    CustomCall_ShakeCamera() {
	        Tween.ShakeCamera_Default();
	    }
	    onJeweledEggReachedUI() {
	        if (this._actionSuccess) {
	            this.thing.trySetToSetToDying(DeathReasonID.ReachedTarget, true);
	            if (BankMgr.ins().isFull()) {
	                LayerMgr.ins().open(UiConst.EggTreasuryView);
	                SoundMgr.ins().playSound("m227");
	            }
	            else {
	                SoundMgr.ins().playSound("m228");
	            }
	            Tween.ShakeCamera_VerticalImpact();
	        }
	        else {
	            this.thing.tryFlyToUIAtScreenLocation(UiDef.jeweledEgg, null);
	            SoundMgr.ins().playSound("m226");
	        }
	    }
	}

	class OnTapBehaviorVo {
	    constructor(row, owner) {
	        this.autoTap_Seconds = -1;
	        this.bonusLoot_2_Chance = 1;
	        if (row["On Tap: Create"]) {
	            this.createOnTap = LootTablesMgr.ins().get(row["On Tap: Create"]);
	            this.creationCount_Range = RangeI.create(row["On Tap: Creation Count"]);
	            this.useLootOrb = row["On Tap: Use Loot Orb"] == 1;
	        }
	        if (row["OT: Bonus List"]) {
	            let text = row["OT: Bonus List"];
	            if (LootListCfg.get(text)) {
	                this.bonusLootList = LootListCfg.get(text);
	            }
	            else {
	            }
	        }
	        if (row["OT: Bonus Loot"]) {
	            this.bonusLoot = LootTablesMgr.ins().get(row["OT: Bonus Loot"]);
	            this.bonusLootCount_Range = RangeI.create(row["OT: Bonus Loot Count"]);
	        }
	        if (row["OT: BL2"]) {
	            this.bonusLoot_2 = LootTablesMgr.ins().get(row["OT: BL2"]);
	            this.bonusLoot_2_CountRange = RangeI.create(row["OT: BL2 Count"]);
	            this.bonusLoot_2_Chance = row["OT: BL2 Chance"] ? row["OT: BL2 Chance"] : 1;
	        }
	        this.dieOnTap = row["On Tap: Die"];
	        let name = row["On Tap: Custom Script"];
	        if (name) {
	            this.event_CustomTapFunction = name;
	        }
	        this.shrinkOnTap = row["On Tap: Shrink"] == 1;
	        if (row["On Tap: Particles"]) {
	            this.onTapParticles = row["On Tap: Particles"];
	        }
	        if (row["On Tap: Audio"]) {
	            this.audioClip = row["On Tap: Audio"];
	        }
	        if (row["Auto Tap After Num Seconds"]) {
	            this.has_AutoTap = true;
	            this.autoTap_Seconds = row["Auto Tap After Num Seconds"];
	        }
	        if (row["On Tap: Recharge Every N Seconds"]) {
	            this.rechargeTapEveryNSeconds = row["On Tap: Recharge Every N Seconds"];
	            this.rechargesTaps = true;
	            if (this.rechargeTapEveryNSeconds <= 0) {
	                console.log("Found an invalid On Tap Recharge Time: " + this.rechargeTapEveryNSeconds);
	                this.rechargesTaps = false;
	            }
	        }
	        if (row["On Tap: Gem Cost"]) {
	            this.onTapGemCost = row["On Tap: Gem Cost"];
	            if (this.onTapGemCost > 0 && MergeDragonsAppConfig.CHEST_PRICE_MULTIPLIER > 0 && (owner.hasCategory(CategoryID.EggChests) || owner.hasCategory(CategoryID.NestVaults))) {
	                this.onTapGemCost = Math.floor(MergeDragonsAppConfig.CHEST_PRICE_MULTIPLIER * this.onTapGemCost);
	            }
	        }
	    }
	    get hasOnTapGemCost() {
	        return this.onTapGemCost > 0;
	    }
	    scrapePrefabNames() {
	        let result = [];
	        if (this.bonusLootList != null) {
	            OnTapBehaviorVo.addLootPrefabNameList(this.bonusLootList, result);
	        }
	        if (this.createOnTap != null) {
	            OnTapBehaviorVo.addLootPrefabNameTable(this.createOnTap, result, 1);
	        }
	        if (this.bonusLoot != null) {
	            OnTapBehaviorVo.addLootPrefabNameTable(this.bonusLoot, result, 1);
	        }
	        if (this.bonusLoot_2 != null) {
	            OnTapBehaviorVo.addLootPrefabNameTable(this.bonusLoot_2, result, 1);
	        }
	        return result;
	    }
	    static createIfHasBehaviors(row, owner) {
	        if (row["On Tap: Create"] || row["On Tap: Die"] || row["On Tap: Particles"] || row["On Tap: Custom Script"] || row["On Tap: Audio"]) {
	            return new OnTapBehaviorVo(row, owner);
	        }
	        return null;
	    }
	    activateTapBehavior(objectTapped) {
	        if (objectTapped.onTapRequiresPayment) {
	            this.tryCollectTapPayment(objectTapped);
	        }
	        else {
	            if (objectTapped.tapsLeft <= 0 && !objectTapped.cfg.infiniteTaps) {
	                return;
	            }
	            let component_OnTapBehavior = objectTapped.getComponent(CompOnTapBehavior);
	            if (component_OnTapBehavior == null) {
	                component_OnTapBehavior = objectTapped.addComponent(CompOnTapBehavior);
	            }
	            if (component_OnTapBehavior == null) {
	                return;
	            }
	            if (!objectTapped.cfg.infiniteTaps) {
	                objectTapped.tapsLeft--;
	                objectTapped.refreshShrinkScaleFromTapOrHarvest();
	            }
	            component_OnTapBehavior.tap();
	            MsgCenter.notify(MsgConst.ACTIVATE_TAP_BEHAVIOR);
	        }
	    }
	    tryCollectTapPayment(objectTapped) {
	        let dialog_ConfirmUnlock_Body = StringUtil.format(LanCfg.get("10020026"), objectTapped.cfg.name);
	        let hander = new Laya.Handler(objectTapped, objectTapped.tapPaymentConfirmed);
	        PopupManager.show2(Presets.PurchaseConfirmation(LanCfg.get("10020027"), dialog_ConfirmUnlock_Body, ECurrency.Diamond, objectTapped.cfg.tapBehavior.onTapGemCost, true, objectTapped.cfg, true, hander, null));
	    }
	    static addLootPrefabNameList(loot, result) {
	        for (let item of loot.items) {
	            result.push(item.itemID);
	        }
	    }
	    static addLootPrefabNameTable(loot, result, baseProbability) {
	        let num = 1;
	        for (let allLootPair of loot.getAllDrops()) {
	            let num2 = allLootPair.chance * num * baseProbability;
	            num *= 1 - num2;
	            {
	                result.push(allLootPair.id);
	            }
	        }
	    }
	}

	class Rarity {
	    constructor(id, name_locID, textColor, textShadowColor) {
	        this.Rareness = id;
	        this.m_locKey_Name = name_locID;
	        this.TextColor = textColor;
	        this.TextShadowColor = textShadowColor;
	    }
	    get Name() {
	        return LanCfg.get(this.m_locKey_Name);
	    }
	    FormatRarityLabel(label) {
	        label.textField.color = this.TextColor;
	    }
	    Equals(r2) {
	        return r2.Rareness == this.Rareness;
	    }
	}
	Rarity.Color_RareGray = "#fbffe4";
	Rarity.Color_RareGreen = "#53ff77";
	Rarity.Color_RareBlue = "#43d1ff";
	Rarity.Color_RareOrange = "#ff43e7";
	Rarity.Color_RareYellow = "#f6ff00";
	Rarity.Color_RarePink = "#DC143C";
	Rarity.Color_RareWhiteBG = "#fffff";
	Rarity.Color_RareBlackBG = "#fffff";
	Rarity.Rarities = {
	    [RarityID.Common]: new Rarity(RarityID.Common, "20012001", Rarity.Color_RareGray, Rarity.Color_RareBlackBG),
	    [RarityID.Uncommon]: new Rarity(RarityID.Uncommon, "20012002", Rarity.Color_RareGreen, Rarity.Color_RareBlackBG),
	    [RarityID.Rare]: new Rarity(RarityID.Rare, "20012003", Rarity.Color_RareBlue, Rarity.Color_RareWhiteBG),
	    [RarityID.Epic]: new Rarity(RarityID.Epic, "20012004", Rarity.Color_RareOrange, Rarity.Color_RareBlackBG),
	    [RarityID.Legendary]: new Rarity(RarityID.Legendary, "20012005", Rarity.Color_RareYellow, Rarity.Color_RareBlackBG),
	    [RarityID.Mythical]: new Rarity(RarityID.Mythical, "20012006", Rarity.Color_RarePink, Rarity.Color_RareBlackBG)
	};

	class PropCfgVo {
	    constructor(key, cfg) {
	        this.widthCell = 1;
	        this.heightCell = 1;
	        this.itemLevel = 1;
	        this.maxConcurrentHarvesters = 1;
	        this.chainPosition = -1;
	        this.discoveryState = DiscoveryItemStateID.Undiscovered;
	        this.m_locKey_Name = "";
	        this.m_locKey_NamePlural = "";
	        this.m_locKey_Description = "";
	        this.m_locKey_Chain = "";
	        this.m_locKey_Action = "";
	        this.m_locKey_Text2 = "";
	        this.numTaps = new Range(0, 0);
	        this.baseSellValue = -1;
	        this.eventBaseSellValue = -1;
	        this.startingHP = -1;
	        this.timedUnlockSeconds = -1;
	        this.onCreatedDialogID = "";
	        this.LEVEL_EGG_HomeProxy = null;
	        this.LEVEL_EGG_HomeProxy_Tier2 = null;
	        this.LEVEL_EGG_Proxy_MinDragonPower = null;
	        this.type = MatchTypeID.Base;
	        this.cid = parseInt(key);
	        this.isEgg = cfg["isEgg"] === 1;
	        this.name = cfg["name"] ? LanCfg.get(cfg["name"]) : "";
	        this.pref = cfg["pref"];
	        if (cfg["UnlockHours"]) {
	            this.timedUnlockSeconds = cfg["UnlockHours"] * 60 * 60;
	        }
	        this.isForceHome = cfg["Force Home?"] === 1;
	        this.m_locKey_NamePlural = cfg["namePlural"] ? cfg["namePlural"] : "";
	        this.visibleLv = cfg["visibleLv"] ? cfg["visibleLv"] : 0;
	        this.desc = cfg["desc"];
	        this.m_locKey_Description = cfg["desc"] ? cfg["desc"] : "";
	        this.m_locKey_Action = cfg["actionDesc"] ? cfg["actionDesc"] : "";
	        if (cfg.Categories) {
	            this.categories = PropCfgVo.getCategories(cfg.Categories);
	        }
	        if (cfg.wh) {
	            this.widthCell = cfg.wh[0];
	            this.heightCell = cfg.wh[1];
	        }
	        if (cfg.scrId)
	            this.scriptIds = cfg.scrId;
	        this.selectable = cfg.isSelect == 1;
	        this.strength = cfg.Strength ? cfg.Strength : 0;
	        this.hideInfoAndHighlight = (cfg["Hide Selection Info and Highlight"] || cfg["isHideSelect"]) ? true : false;
	        this.draggable = (cfg["isDrag"] || cfg["Can Drag"]) ? true : false;
	        this.selectedGameTip = cfg["On Selected: Game Tip"];
	        if (this.draggable && !this.selectable) {
	            this.selectable = true;
	        }
	        this.canDropFarOutOfBounds = cfg["Allow Drop Far Out Of Bounds"] === 1;
	        this.requiresCellPlacement = !(cfg["Off-Grid"] == 1);
	        this.tapBehavior = OnTapBehaviorVo.createIfHasBehaviors(cfg, this);
	        this.matchRecipe = MatchRecipeCfg.get(key);
	        this.keepAtBirthPoint = cfg["On Creation: Keep At Birth Point"] == 1;
	        this.zPush = cfg["ZPush"] ? cfg["ZPush"] : 0;
	        this.dragonPower = cfg["Dragon Power"] ? parseInt(cfg["Dragon Power"]) : 0;
	        this.itemLevel = cfg["lv"] ? cfg["lv"] : 1;
	        this.instaDeathOnDie = cfg["Insta-Death on Die"] == 1;
	        if (cfg["Lifetime / Tap / Harvest: On Die"]) {
	            this.deathLootTable = LootTablesMgr.ins().get(cfg["Lifetime / Tap / Harvest: On Die"]);
	        }
	        if (cfg["Lifetime Range"]) {
	            this.lifetimeRange = Range.create(cfg["Lifetime Range"]);
	        }
	        let rarity = cfg["rarity"];
	        if (rarity) {
	            this.Rarity = Rarity.Rarities[RarityID[rarity]];
	        }
	        this.isUIKindOfObject = cfg["UI?"] == 1;
	        if (cfg["Break: Breaks Into"]) {
	            this.breaksInto = LootTablesMgr.ins().get(cfg["Break: Breaks Into"]);
	            this.enemyBreakable = cfg["Enemy Breakable"] == 1;
	            this.dragonBreakable = cfg["Dragon Breakable"] == 1;
	            if (cfg["Break: Count Range"]) {
	                this.breakIntoCountRange = RangeI.create(cfg["Break: Count Range"]);
	            }
	            else {
	                this.breakIntoCountRange = new Range(2, 2);
	            }
	        }
	        if (cfg["Harvest Loot"]) {
	            let text3 = cfg["Harvest Loot"];
	            if (text3) {
	                this.harvestLoot = LootTablesMgr.ins().get(text3);
	                this.harvestSeconds = cfg["Harvest Seconds"];
	                this.harvestCharges = cfg["Harvest Charges"];
	                this.harvestTimeoutSeconds = cfg["Harvest Timeout Seconds"];
	                this.harvestRequiresDeadLand = cfg["Harvest Requires Dead Land"];
	                this.preventHomeAutonomyHarvest = cfg["Stop Home Harvest?"];
	                if (cfg["On Harvest: Shrink"]) {
	                    this.shrinkWithHarvest = cfg["On Harvest: Shrink"];
	                }
	            }
	        }
	        if (cfg["Chain Bonus Loot Drop"] && cfg["Chain Bonus Loot Drop"]) {
	            this.chainBonusLootTable = LootTablesMgr.ins().get(cfg["Chain Bonus Loot Drop"]);
	        }
	        if (cfg["Level End Loot Swap"]) {
	            this.transformOnLevelWinLootTable = LootTablesMgr.ins().get(cfg["Level End Loot Swap"]);
	        }
	        if (cfg["Defeated: Loot 1"]) {
	            this.onDefeated_Loot1 = LootTablesMgr.ins().get(cfg["Defeated: Loot 1"]);
	        }
	        if (cfg["Defeated: Loot 2"]) {
	            this.onDefeated_Loot2 = LootTablesMgr.ins().get(cfg["Defeated: Loot 2"]);
	            this.onDefeated_Loot2CountRange = RangeI.create(cfg["Defeated: Loot 2 Drop Count Range"]);
	        }
	        if (cfg["Loot Spawn Nearby"]) {
	            this.spawnDefinition = new SpawnDef(cfg);
	        }
	        if (cfg["Max Concurrent Harvesters"]) {
	            this.maxConcurrentHarvesters = cfg["Max Concurrent Harvesters"];
	        }
	        if (cfg["chainName"]) {
	            this.m_locKey_Chain = cfg["chainName"];
	        }
	        if (cfg["Dupe Chance"] != null) {
	            this.dupeChance = cfg["Dupe Chance"];
	            this.dupeCostGems = cfg["Dupe Cost"];
	        }
	        if (cfg["Event Dupe Chance"] != null) {
	            this.eventDupeChance = cfg["Event Dupe Chance"];
	            this.eventDupeCostGems = cfg["Event Dupe Cost"];
	        }
	        this.breedId = cfg["breedId"] ? cfg["breedId"] : 0;
	        this.hasChain = (this.breedId > 0);
	        if (this.hasChain) {
	            this.englishChainName = this.breedId.toString();
	            this.chainPosition = cfg["chainOrder"];
	            this.chainObj = DiscoveryChain.addToChain(this);
	            if (cfg["isPrediscovered"]) {
	                this.discoveryState = DiscoveryItemStateID.Discovered;
	            }
	        }
	        if (cfg["Attack Distance Range"]) {
	            this.attackDistanceRange = Range.create(cfg["Attack Distance Range"]);
	        }
	        if (cfg["Bring Home Cost"]) {
	            this.takeHomeCost = cfg["Bring Home Cost"];
	            this.forceIntoTakeHomeList = cfg["Force Home?"];
	            this.canTakeHome = this.takeHomeCost >= 0;
	        }
	        this.saves = cfg["Saves"] == 1;
	        if (cfg["On Tap: Num Taps"]) {
	            this.numTaps = Range.create(cfg["On Tap: Num Taps"]);
	            this.infiniteTaps = this.numTaps.max <= 0;
	        }
	        else {
	            this.infiniteTaps = true;
	        }
	        this.disallowAsPrefabLoot = cfg["DAPL"] == 1;
	        let sellValue = cfg["Sell Value"] || cfg["price"];
	        if (sellValue != null) {
	            if (typeof sellValue === "string") {
	                sellValue = parseInt(sellValue);
	            }
	            this.baseSellValue = sellValue;
	            this.eventBaseSellValue = cfg["Event Sell Value"] ? parseInt(cfg["Event Sell Value"]) : 0;
	            this.confirmSell = cfg["isConfirmSell"] ? true : false;
	            let tmp = cfg["Stop Sell if Last of Category"];
	            if (tmp) {
	                this.preventSellIfLastInThisCategory = CategoryID[tmp];
	            }
	        }
	        this.usesDynamicStrength = cfg["Uses Dynamic Strength"] == 1;
	        this.isDeadThing = cfg["Is Dead"] == 1;
	        this.immuneToDeathComponent = cfg["Immune to Death Component"] == 1;
	        this.attackInitiationRange = cfg["Attack Initiation Range"] ? cfg["Attack Initiation Range"] : 0;
	        if (cfg["HP"]) {
	            this.startingHP = cfg["HP"];
	            if (this.startingHP > PropCfgVo.maxStartingHPFound) {
	                PropCfgVo.maxStartingHPFound = this.startingHP;
	            }
	        }
	        this.stealable = cfg["Can Steal"] == 1;
	        this.creationScore = cfg["score"] ? cfg["score"] : 0;
	        this.spawnAtSpawnersRoot = cfg["On Created by Other Object: Spawn at Root"] == 1;
	        this.confirmOnTap = cfg["Tap Confirm?"] == 1;
	        if (cfg["Win Proxy"])
	            this.winProxyPrefab = cfg["Win Proxy"];
	        this.floatRegister2 = cfg["Float Register 2"] ? cfg["Float Register 2"] : 0;
	        this.floatRegister3 = cfg["Float Register 3"] ? cfg["Float Register 3"] : 0;
	        if (cfg["SFX Unique Appear"])
	            this.SFX_UniqueAppearByMatchingSound = cfg["SFX Unique Appear"];
	        if (cfg["Destroyed VFX"])
	            this.dieVFXPrefabName = cfg["Destroyed VFX"];
	        if (cfg["Destroyed SFX"])
	            this.SFX_Destroyed = cfg["Destroyed SFX"];
	        if (cfg["On Created: Dialog ID"])
	            this.onCreatedDialogID = cfg["On Created: Dialog ID"];
	        this.showTapArrowBeforeFirstTap = cfg.isTapArrow == 1;
	        if (cfg["Projectile ID: Basic Attack"]) {
	            this.projectileDef_BasicAttack = ProjectileCfg.get(cfg["Projectile ID: Basic Attack"]);
	        }
	        if (cfg["text2"]) {
	            this.m_locKey_Text2 = LanCfg.get(cfg["text2"]);
	        }
	        let currency = cfg["Stores Currency Enum"];
	        if (currency) {
	            this.currencyTypeStored = ECurrency[currency];
	        }
	        if (cfg["On Created: Custom Function"]) {
	            this.eventCreated = new Laya.Handler(CustomCalls, CustomCalls[cfg["On Created: Custom Function"]], null, false);
	        }
	        if (cfg["On Destroyed: Custom Function"]) {
	            this.eventDestroyed = new Laya.Handler(CustomCalls, CustomCalls[cfg["On Destroyed: Custom Function"]], null, false);
	        }
	        if (cfg["Adjacent Tile Restored Callback"]) {
	            this.eventAdjacent = new Laya.Handler(CustomCalls, CustomCalls[cfg["Adjacent Tile Restored Callback"]], null, false);
	        }
	        if (cfg["Level Egg Home Proxy"]) {
	            this.LEVEL_EGG_HomeProxy = parseInt(cfg["Level Egg Home Proxy"]);
	            this.LEVEL_EGG_HomeProxy_Tier2 = parseInt(cfg["LEHP_T2"]);
	            this.LEVEL_EGG_Proxy_MinDragonPower = Math.round(cfg["Egg Proxy - Min DP"] * MergeDragonsAppConfig.LOCKED_CHEST_APPEARANCE_MULTIPLIER);
	        }
	        PropsCfg.addCategory(this);
	        PropsCfg.addDefinition(this);
	    }
	    get matchable() {
	        return this.matchRecipe != null;
	    }
	    get diesAfterTimeout() {
	        return this.lifetimeRange != null;
	    }
	    get harvestIsExhaustible() {
	        return this.harvestCharges > 0;
	    }
	    get asMonsterDef() {
	        return this;
	    }
	    get isAMonsterDef() {
	        return this instanceof MonsterCfgVo;
	    }
	    get chainLocID() {
	        return this.m_locKey_Chain;
	    }
	    get chainName() {
	        return this.m_locKey_Chain != "" ? LanCfg.get(this.m_locKey_Chain) : "";
	    }
	    get ActionText() {
	        return this.m_locKey_Action ? LanCfg.get(this.m_locKey_Action) : "";
	    }
	    get OnTapGemCost() {
	        return (this.tapBehavior && this.tapBehavior.onTapGemCost) ? this.tapBehavior.onTapGemCost : 0;
	    }
	    getDupeChance(isEvent) {
	        if (!this.hasDupeChance(isEvent)) {
	            return 0;
	        }
	        let num = (!isEvent) ? this.dupeChance : this.eventDupeChance;
	        if (this.discoveryState == DiscoveryItemStateID.Undiscovered) {
	            return Math.min(num + 0.1, 1);
	        }
	        return num;
	    }
	    hasDupeChance(isEvent) {
	        return ((!isEvent) ? this.dupeChance : this.eventDupeChance) > 0;
	    }
	    getDupeCostGems(inEvent) {
	        let cost = (!inEvent) ? this.dupeCostGems : this.eventDupeCostGems;
	        return cost == null ? 0 : cost;
	    }
	    getStrength() {
	        return this.strength;
	    }
	    getTimeStr() {
	        let h = this.timedUnlockSeconds;
	        return TimeMgr.ins().formatTimer1(h);
	    }
	    hasCategory(category) {
	        if (this.categories == null) {
	            return false;
	        }
	        return this.categories.indexOf(category) >= 0;
	    }
	    static getCategories(arr) {
	        if (arr == null)
	            return null;
	        let r = [];
	        for (let i of arr) {
	            let a = CategoryID[i];
	            if (CategoryID[i] != null) {
	                r.push(CategoryID[i]);
	            }
	        }
	        return r;
	    }
	    getMatchOutputList() {
	        if (!this.matchable) {
	            console.log("Trying to create a match output from an object that isn't matchable: " + this.pref);
	            return null;
	        }
	        return this.matchRecipe.getPrefabsOfOutputs();
	    }
	    get namePlural() {
	        return LanCfg.get(this.m_locKey_NamePlural);
	    }
	    get descriptionShort_Base() {
	        if (this.m_locKey_Description) {
	            return LanCfg.get(this.m_locKey_Description);
	        }
	        return "";
	    }
	    get InfoPanelHeadlineText() {
	        if (this.visibleLv) {
	            return this.name + " - " + StringUtil.format(LanCfg.get("20010021") + " ", this.visibleLv);
	        }
	        return this.name;
	    }
	    getIsSellable(isEvent) {
	        if (this.isDeadThing && Glob.currLevelData.isLevel) {
	            return false;
	        }
	        return (isEvent ? this.eventBaseSellValue : this.baseSellValue) >= 0;
	    }
	    getSellValue(isEvent) {
	        if (!this.getIsSellable(isEvent)) {
	            return 0;
	        }
	        return isEvent ? this.eventBaseSellValue : this.baseSellValue;
	    }
	    createInMetaCell_SwoopFrom(target, isLevelLoad, x, y) {
	        let drawnObject = this.createInMetaCell(target, isLevelLoad);
	        Globals.swoopDropToMetaCell(drawnObject, target, x, y);
	        return drawnObject;
	    }
	    get hasVisibleLevel() {
	        return this.visibleLv > 0;
	    }
	    getVisibleLevelTextShortParenthetical() {
	        if (!this.hasVisibleLevel) {
	            return "";
	        }
	        return StringUtil.format(LanCfg.get("10010015"), this.visibleLv);
	    }
	    createInMetaCell(target, isLevelLoad = false, isFromFreshMapData = false) {
	        if (target.occupied) {
	            return null;
	        }
	        let thing = Thing.create(this.cid);
	        thing.createdDuringFreshMapLoad = isFromFreshMapData;
	        thing.setRootPosition(target.x, target.y);
	        if (thing.requiresCellPlacement) {
	            thing.occupyMetaCell(target);
	        }
	        if (!isLevelLoad || (isLevelLoad && Glob.map.totalCellCount <= 150)) {
	            ThingAnim.playNewObjectAppear(thing);
	        }
	        return thing;
	    }
	}
	PropCfgVo.maxStartingHPFound = 1;
	class BeingCfgVo extends PropCfgVo {
	    constructor(key, cfg) {
	        super(key, cfg);
	        this.carrySpeed = 0;
	    }
	}
	class EnemyCfgVo extends BeingCfgVo {
	    constructor(key, cfg) {
	        super(key, cfg);
	        this.type = MatchTypeID.Enemy;
	        this.walkSpeed = cfg["Move Speed (Normal)"];
	        this.fastSpeed = cfg["Move Speed (Fast)"];
	        this.idleTimeRange = Range.create(cfg["Idle Time Range Seconds"]);
	        this.chance_EvilAction = cfg["Evil Action Chance"];
	        this.attackObjectRange = cfg["Attack Object Range"];
	        this.channelSpellPrefabEffectName = cfg["Channel Spell Particle Prefab"];
	        if (cfg["Break Obj: Weight"] != null) {
	            this.weight_Break = cfg["Break Obj: Weight"];
	            this.break_UpToLevel = cfg["Break Obj: Up to Level"];
	            this.secondsToAttackForRange = Range.create(cfg["Break Obj: Seconds to Attack For"]);
	            this.breaks = true;
	        }
	        if (cfg["Kill Tile: Weight"] != null) {
	            this.weight_KillTile = cfg["Kill Tile: Weight"];
	            this.killTile_UpToLevel = cfg["Kill Tile: Death Level"];
	            this.killTile_Seconds = cfg["Kill Tile: Seconds"];
	            this.killsTiles = true;
	        }
	        if (cfg["Steal: Weight"] != null) {
	            this.weight_Steal = cfg["Steal: Weight"];
	            this.steal_UpToLevel = cfg["Steal: Up To Level"];
	            this.steal_SecondsPerLevel = cfg["Steal: Secs per Item Level"];
	            this.steals = true;
	        }
	        this.requiresCellPlacement = false;
	        this.immuneToDeathComponent = true;
	    }
	}
	class MonsterCfgVo extends BeingCfgVo {
	    constructor(key, cfg) {
	        super(key, cfg);
	        this.harvestSpeedMultiplier = 1;
	        this.buildSpeedMultiplier = 1;
	        this.workCapacity = cfg["Work Capacity"] ? parseInt(cfg["Work Capacity"]) : 0;
	        this.type = MatchTypeID.Monster;
	        this.harvests = cfg["Harvests"] == 1;
	        this.harvestSpeedMultiplier = cfg["Harvest Multiplier"];
	        this.walkSpeed = cfg["Walk Speed"];
	        this.fastSpeed = this.walkSpeed * 2;
	        this.carrySpeed = cfg["Carry Speed"];
	        this.monsterType = (MonsterTypeID[cfg["Type"]]);
	        this.workCapacity = cfg["Work Capacity"];
	        if (cfg["Build Multiplier"]) {
	            this.buildSpeedMultiplier = cfg["Build Multiplier"];
	        }
	        this.requiresCellPlacement = false;
	        this.immuneToDeathComponent = true;
	    }
	    GetMonsterTypeLocalizedString() {
	        switch (this.monsterType) {
	            case MonsterTypeID.Harvester:
	                return LanCfg.get("20011001");
	            case MonsterTypeID.Builder:
	                return LanCfg.get("20011002");
	            case MonsterTypeID.Zoomer:
	                return LanCfg.get("20011003");
	            case MonsterTypeID.Worker:
	                return LanCfg.get("20011004");
	            case MonsterTypeID.Trophy:
	                return LanCfg.get("20011005");
	            case MonsterTypeID.Defender:
	                return LanCfg.get("20011006");
	            default:
	                return "";
	        }
	    }
	    get InfoPanelHeadlineText() {
	        if (this.monsterType != MonsterTypeID.Normal) {
	            return super.InfoPanelHeadlineText + " " + this.GetMonsterTypeLocalizedString();
	        }
	        return super.InfoPanelHeadlineText;
	    }
	}

	class PropsCfg {
	    static init() {
	        this.cfg = {};
	        let cfg = PConfig.getCfg("Props.json");
	        for (let key in cfg) {
	            let item = cfg[key];
	            let vo = new PropCfgVo(key, item);
	            this.cfg[key] = vo;
	            this.addCategory(vo);
	        }
	    }
	    static addDefinition(vo) {
	        if (this.definitions[vo.cid]) {
	            console.error("ERROR: Found two Match Object Definitions with the same Prefab Name! --> [" + vo.cid + "]");
	        }
	        else {
	            this.definitions[vo.cid] = vo;
	        }
	    }
	    static addCategory(vo) {
	        if (vo.categories == null || vo.categories.length <= 0) {
	            return;
	        }
	        for (let key of vo.categories) {
	            if (!this.categories[key]) {
	                this.categories[key] = [];
	            }
	            this.categories[key].push(vo);
	        }
	    }
	    static get(id) {
	        return this.definitions[id];
	    }
	    static has(id) {
	        return !!this.definitions[id];
	    }
	    static getByPrefName(name) {
	        for (let key in this.cfg) {
	            let item = this.cfg[key];
	            if (item.pref === name) {
	                return item;
	            }
	        }
	        return null;
	    }
	    static getPref(id) {
	        let obj = this.get(id);
	        if (obj) {
	            return obj.pref;
	        }
	        else {
	            return "";
	        }
	    }
	    static getCategories(categories) {
	        let list = [];
	        for (let i = 0; i < categories.length; i++) {
	            if (this.categories[categories[i]]) {
	                let data = this.categories[categories[i]];
	                list = list.concat(data);
	            }
	        }
	        return list;
	    }
	    static isHasCfg(listIds) {
	        for (let i = 0; i < listIds.length; i++) {
	            let id = listIds[i];
	            let has = this.get(id);
	            if (has) {
	                return has.cid;
	            }
	        }
	        return null;
	    }
	}
	PropsCfg.definitions = {};
	PropsCfg.categories = {};
	PropsCfg.tapArrow_EverTappedList = [];

	class World_ChallengeLevelData {
	    constructor(data, challengeIndex, timeLimit, difficulty, v1TimeLimit) {
	        this.m_timeLimit = 0;
	        this.m_v1TimeLimit = 0;
	        this.Reward = null;
	        this.RewardDupeCostGems = 0;
	        this.Difficulty = ChallengeLevelDifficultyID.Level1;
	        if (data) {
	            this.Init(timeLimit, data["Challenge Reward " + challengeIndex], data["Reward Dupe Cost Gems " + challengeIndex], difficulty, v1TimeLimit);
	        }
	    }
	    get TimeLimit() {
	        if (World_ChallengeLevelData.Variant == ChallengeLevelV2VariantID.Variant1_Easier) {
	            return Math.round(this.m_timeLimit * 1.25);
	        }
	        if (World_ChallengeLevelData.Variant == ChallengeLevelV2VariantID.Variant4_EasierFirstPartOnly) {
	            if (this.Difficulty == ChallengeLevelDifficultyID.Level1) {
	                return Math.round(this.m_timeLimit * 1.25);
	            }
	            return this.m_timeLimit;
	        }
	        if (World_ChallengeLevelData.Variant == ChallengeLevelV2VariantID.Variant3_Harder) {
	            if (this.Difficulty == ChallengeLevelDifficultyID.Level1) {
	                return Math.round(this.m_timeLimit * 0.75);
	            }
	            if (this.Difficulty == ChallengeLevelDifficultyID.Level2) {
	                return Math.round(this.m_timeLimit * 0.85);
	            }
	            if (this.Difficulty == ChallengeLevelDifficultyID.Level3) {
	                return Math.round(this.m_timeLimit * 0.9);
	            }
	            console.error("Unknown Challenge Time Difficulty ID: " + this.Difficulty);
	            return this.m_timeLimit;
	        }
	        if (World_ChallengeLevelData.Variant == ChallengeLevelV2VariantID.Variant5_V1TimesPlus2Levels) {
	            if (this.Difficulty == ChallengeLevelDifficultyID.Level1) {
	                return this.m_v1TimeLimit;
	            }
	            return this.m_timeLimit;
	        }
	        return this.m_timeLimit;
	    }
	    Init(timeLimitSeconds, rewardID, rewardDupeCost, difficulty, v1TimeLimit) {
	        this.m_timeLimit = timeLimitSeconds;
	        this.m_v1TimeLimit = v1TimeLimit;
	        this.Difficulty = difficulty;
	        if (!PropsCfg.has(rewardID)) {
	            console.error("Challenge Level Data cannot find reward by ID: " + rewardID);
	        }
	        else {
	            this.Reward = PropsCfg.get(rewardID);
	        }
	        this.RewardDupeCostGems = rewardDupeCost;
	    }
	}
	World_ChallengeLevelData.Variant = ChallengeLevelV2VariantID.Variant2_Normal;

	class CompWindCarried extends Laya.Script3D {
	    onAwake() {
	        this.drawnObject = this.owner;
	        let rec = GuiMgr.getWorldSpaceRectOfScreenByRatio(-0.3, 0.75, -0.1, 0.45);
	        let localPosition = this.drawnObject.body.transform.localPosition;
	        let num = localPosition.y;
	        this.drawnObject.setRootPosition(MathUtil.randNum(rec.x, rec.right), MathUtil.randNum(rec.y - num, rec.bottom - num));
	    }
	    init(speed) {
	        this.speed = speed;
	    }
	    onUpdate() {
	        if (!Glob.isSimulationPaused()) {
	            if (this.drawnObject.idle()) {
	                this.drawnObject.moveRootPositionAtSpeedInDirection(CompWindCarried.windDirection.x, CompWindCarried.windDirection.y, this.speed);
	            }
	            this.checkForDeath();
	        }
	    }
	    checkForDeath() {
	        let x = this.drawnObject.x;
	        let max = Glob.map.bounds.getMax();
	        let min = Glob.map.bounds.getMin();
	        if (x < min.x + 0.35 * (min.x - max.x)) {
	            this.drawnObject.destroyDrawnObject();
	        }
	    }
	}
	CompWindCarried.windDirection = new Laya.Vector2(-1, 0);

	class WindLoot {
	    constructor(row) {
	        this.s_atCampAllAsleepSpawnCountMultiplier = 1;
	        this.m_speed_Range = null;
	        this.m_secondDelayBetweenSpawns_Range = null;
	        this.m_countPerWave_Range = null;
	        this.m_secondDelayBetweenWaves_Range = null;
	        this.m_spawnsLeftThisWave = 0;
	        this.m_inWaveDelay = false;
	        this.m_loot = LootTablesMgr.ins().get(row["Wind Loot"]);
	        this.m_speed_Range = Range.create(row["Wind Loot Speed Range"]);
	        this.m_secondDelayBetweenSpawns_Range = Range.create(row["Wind Loot Spawn Delay Range Seconds"]);
	        this.m_countPerWave_Range = RangeI.create(row["Wind Loot Count per Wave Range"]);
	        this.m_secondDelayBetweenWaves_Range = Range.create(row["Wind Loot Wave Delay Range Seconds"]);
	    }
	    InitForNewLevel() {
	        this.ResetSpawnCountForNewWave();
	        this.m_spawnTimer = new Clock();
	        this.m_spawnTimer.setRange(this.m_secondDelayBetweenSpawns_Range);
	        this.m_waveTimer = new Clock();
	        this.m_waveTimer.setRange(this.m_secondDelayBetweenWaves_Range);
	    }
	    Update() {
	        if (Glob.isSimulationPaused()) {
	            return;
	        }
	        if (this.m_inWaveDelay) {
	            this.m_waveTimer.update(Glob.deltaTime);
	            if (this.m_waveTimer.done) {
	                this.m_inWaveDelay = false;
	                this.ResetSpawnCountForNewWave();
	            }
	        }
	        else {
	            this.m_spawnTimer.update(Glob.deltaTime);
	            if (this.m_spawnTimer.done) {
	                this.SpawnAWindLootItem();
	            }
	        }
	    }
	    DecrementSpawnCount() {
	        this.m_spawnsLeftThisWave--;
	        if (this.m_spawnsLeftThisWave > 0) {
	            this.m_spawnTimer.reset();
	            return;
	        }
	        this.m_inWaveDelay = true;
	        this.m_waveTimer.reset();
	        this.CheckForCampSnoozeTime();
	    }
	    SpawnAWindLootItem() {
	        this.DecrementSpawnCount();
	        let drawnObject = this.m_loot.drop();
	        let comp = drawnObject.addComponent(CompWindCarried);
	        comp.init(this.m_speed_Range.random());
	    }
	    CheckForCampSnoozeTime() {
	        if (Glob.inHome && Monster.allMonstersAlseep) {
	            this.m_waveTimer.set(WindLoot.s_campAllAsleepWaveTimerRange.random());
	        }
	    }
	    AllCampMonstersAsleep() {
	        let num = WindLoot.s_campAllAsleepWaveTimerRange.random();
	        if (this.m_inWaveDelay && this.m_waveTimer.timeLeft > num) {
	            this.m_waveTimer.timeTravelTo(num);
	        }
	    }
	    ResetSpawnCountForNewWave() {
	        this.m_spawnsLeftThisWave = this.m_countPerWave_Range.random();
	        if (Glob.inHome && Monster.allMonstersAlseep) {
	            this.m_spawnsLeftThisWave = this.m_spawnsLeftThisWave;
	        }
	    }
	}
	WindLoot.s_campAllAsleepWaveTimerRange = new Range(6, 120);

	class WorldCfgVo {
	    constructor(cid, data) {
	        this.children = [];
	        this.guidePrefs = [];
	        this.MapVersion = -1;
	        this.Saves = false;
	        this.MusicTrackIndex = -1;
	        this.LevelCompleteSoundIndex = -1;
	        this.TomeTipID = "";
	        this.ShowArrowOnTomeTip = false;
	        this.LevelStartTipID = "";
	        this.ZomblinTowerID = "";
	        this.EventType = EventTypeID.NONE;
	        this._goalRewardPrefabRef = null;
	        this.ChallengeData_Version1 = null;
	        this.ChallengeData = [];
	        this.ChallengeTimeLimitSecondsPurchase = 60;
	        this.StartCameraVars = null;
	        this.StartZoom4x3Override = 0;
	        this.StartZoomMultiplierIf4x3 = 1.267;
	        this.HasStartCameraVars = false;
	        this.WindLootData = null;
	        this.cid = cid;
	        this.levelId = data["Level ID"];
	        this.chain = data["Chain #"] ? parseInt(data["Chain #"]) : 0;
	        this.startVisible = data["Starts Visible"] === 1;
	        this.isTest = data["Test?"] === 1;
	        this.isChallenge = data["Challenge?"] === 1;
	        this.isHome = data["Is a Home Area"] === 1;
	        this.isSecret = data["Secret?"] === 1;
	        this.finishPrefNum = data["Level Completion: Prefab Count"] ? data["Level Completion: Prefab Count"] : 0;
	        this.energy = data["Energy Cost"] || 0;
	        this.lootPrefix = data["Level Loot Prefix"];
	        this.maxFree = data["Max Free Loot"];
	        this.basicEgg = data["basicRewardEgg"];
	        this.rareEgg = data["rareRewardEgg"];
	        this.freeCoin1 = data["Free Coin 1"];
	        this.guidePrefs = data["guidePrefs"] || [];
	        if (data["Free Coin Count Range"]) {
	            this.freeCoinRange = RangeI.create(data["Free Coin Count Range"]);
	        }
	        this.freeRewardChance1 = data["freeRewardChance1"];
	        this.freeRewardChance2 = data["freeRewardChance2"];
	        if (data["Premium Loot"] && data["Premium Loot Chance"]) {
	            this.premiumLoot = data["Premium Loot"];
	            this.premiumLootChance = data["Premium Loot Chance"];
	        }
	        this.disableCreationLoot = data["Disable Creation Loot?"];
	        this.eliteReward = data["Elite Reward: Egg Nest"];
	        this.exaltedReward = data["Exalted Reward: Egg Nest"];
	        this.progressReward = data["progressReward"];
	        this.enterPref = data["enterPref"] ? data["enterPref"] : null;
	        let shopTags = data["Shop Tags"];
	        this.shopTags = shopTags ? shopTags : [];
	        let unlocks = data["Level Unlocks Challenge AB"];
	        this.unlocks = unlocks ? unlocks : [];
	        let finishPref = data["Level Completion: Prefab Needed"];
	        this.finishPref = finishPref ? finishPref : 0;
	        let chestPrefix = data["Timed Chest Prefix"];
	        if (chestPrefix) {
	            this.basicChests = [
	                chestPrefix + "T1",
	                chestPrefix + "T2",
	                chestPrefix + "T3"
	            ];
	            this.bigChests = [
	                chestPrefix + "T1_Big",
	                chestPrefix + "T2_Big",
	                chestPrefix + "T3_Big",
	            ];
	        }
	        this.banner = data["banner"];
	        this.override = data["override"];
	        this.MapVersion = data["Ver"];
	        this.MusicTrackIndex = data["Music"];
	        this.Saves = !data["Don't Save?"];
	        this.TomeTipID = data["Tome Tip"];
	        this.ShowArrowOnTomeTip = data["Show Arrow on Tome Tip"];
	        this.LevelStartTipID = data["Level Start Tip"];
	        if (data["Event Type"]) {
	            this.EventType = EventTypeID[data["Event Type"]];
	        }
	        this.ZomblinTowerID = data["Zomblin Tower ID"];
	        this.LevelCompleteSoundIndex = data["Level Complete Sound Index"];
	        if (data["Goal Reward Prefab"]) {
	            this._goalRewardPrefabRef = PropsCfg.get(data["Goal Reward Prefab"]);
	        }
	        if (!this.isHome) {
	            this.goodTime = this.getSeconds(data["Good Mins"], data["Good Secs"]);
	            this.greatTime = this.getSeconds(data["Great Mins"], data["Great Secs"]);
	            this.epicTime = this.getSeconds(data["Epic Mins"], data["Epic Secs"]);
	            this.goodScore = data["Good Score"];
	            this.greatScore = data["Great Score"];
	            this.epicScore = data["Epic Score"];
	        }
	        if (this.isChallenge) {
	            let seconds = this.getSeconds(data["v1 Mins"], data["v1 Secs"]);
	            this.ChallengeData[0] = new World_ChallengeLevelData(data, "1", this.goodTime, ChallengeLevelDifficultyID.Level1, seconds);
	            this.ChallengeData[1] = new World_ChallengeLevelData(data, "2", this.greatTime, ChallengeLevelDifficultyID.Level2, seconds);
	            this.ChallengeData[2] = new World_ChallengeLevelData(data, "3", this.epicTime, ChallengeLevelDifficultyID.Level3, seconds);
	            this.ChallengeData_Version1 = new World_ChallengeLevelData();
	            this.ChallengeData_Version1.Init(seconds, data["v1 Reward"], data["v1 Dupe Cost"], ChallengeLevelDifficultyID.Level1, seconds);
	        }
	        if (data["Challenge Secs Inc"]) {
	            this.ChallengeTimeLimitSecondsPurchase = data["Challenge Secs Inc"];
	        }
	        if (data["Start X"] != null && data["Start Y"] != null && data["Zoom 16x9"] != null) {
	            this.StartCameraVars = new Laya.Vector3(Number(data["Start X"]), Number(data["Start Y"]), Number(data["Zoom 16x9"]));
	            this.StartZoom4x3Override = Number(data["Zoom 4x3"]);
	            this.HasStartCameraVars = true;
	        }
	        if (data["Enemy Scenario ID"]) {
	        }
	        if (data["Wind Loot"]) {
	            this.WindLootData = new WindLoot(data);
	        }
	    }
	    get isLevel() {
	        return !this.isHome;
	    }
	    get GoalRewardPrefab() {
	        return this._goalRewardPrefabRef;
	    }
	    get IsEventLevel() {
	        return this.EventType != EventTypeID.NONE;
	    }
	    get IsEventLevel_Type1_ResourceCollection() {
	        return this.EventType == EventTypeID.Type1_ResourceCollection;
	    }
	    get IsEventLevel_Type2_ScorePuzzle() {
	        return this.EventType == EventTypeID.Type2_ScorePuzzle;
	    }
	    get HasZomblinTower() {
	        return !!this.ZomblinTowerID;
	    }
	    getSeconds(min, sec) {
	        return min * 60 + sec;
	    }
	    get json() {
	        return this.levelId + ".json";
	    }
	    isNormal() {
	        return !this.isHome && !this.isChallenge && !this.isSecret && !this.isTest;
	    }
	    isExistChests() {
	        return !!this.basicChests;
	    }
	    isExistReward() {
	        return !!this.basicEgg;
	    }
	    isExistPremium() {
	        return !!this.premiumLoot;
	    }
	    isProgressReward() {
	        return !!this.progressReward;
	    }
	    chestAt(index) {
	        return this.basicChests[index];
	    }
	    bigChestAt(index) {
	        return this.bigChests[index];
	    }
	    IsValidChallengeIndex(index) {
	        if (this.ChallengeData && this.ChallengeData[index]) {
	            return true;
	        }
	        return false;
	    }
	}

	class WorldCfg {
	    static get progressReward1() {
	        if (!this._progressReward1) {
	            this._progressReward1 = "";
	        }
	        return this._progressReward1;
	    }
	    static get progressReward2() {
	        if (!this._progressReward2) {
	            this._progressReward2 = "";
	        }
	        return this._progressReward2;
	    }
	    static get winTimes() {
	        if (!this._winTimes) {
	            this._winTimes = [3, 5, 9];
	        }
	        return this._winTimes;
	    }
	    static get winTimesIncrease() {
	        if (!this._winTimesIncrease) {
	            this._winTimesIncrease = 3;
	        }
	        return this._winTimesIncrease;
	    }
	    static get bigChestChance() {
	        if (!this._bigChestChance) {
	            this._bigChestChance = parseInt(ConstCfg.getValue("6")) * 0.01;
	        }
	        return this._bigChestChance;
	    }
	    static getChestIndex(count) {
	        if (!this.thresholds) {
	            this.thresholds = ConstCfg.getValue("5").split(",").map(val => parseInt(val));
	        }
	        count = Math.floor(Math.random() * 500);
	        if (count <= this.thresholds[0]) {
	            return 0;
	        }
	        if (count <= this.thresholds[1]) {
	            return 1;
	        }
	        return 2;
	    }
	    static get cfg() {
	        if (!this._cfg) {
	            this._cfg = {};
	            let cfg = PConfig.getCfg("Levels.json");
	            for (let key in cfg) {
	                let item = cfg[key];
	                let vo = new WorldCfgVo(parseInt(key), item);
	                this._cfg[key] = vo;
	            }
	        }
	        return this._cfg;
	    }
	    static getConfig(id) {
	        let cfg = this.cfg;
	        return cfg[id];
	    }
	    static has(id) {
	        return this.getConfig(id) != null;
	    }
	    static cidToName(cid) {
	        let cfg = this.getConfig(cid);
	        return cfg ? cfg.levelId : null;
	    }
	    static getPageSize() {
	        return 24;
	    }
	    static getPageAt(index) {
	        return StringUtil.format("res/map/map_{0}.jpg", index);
	    }
	    static getHome() {
	        return this.getConfig(WorldCfg.HomeId);
	    }
	}
	WorldCfg.HomeId = 10058;
	WorldCfg.ICON_TIME = "res/skin/mainUI/zjm_shijian.png";
	WorldCfg.ICON_SCORE = "res/icon/dj006.png";
	WorldCfg.ICON_CHEST = "res/skin/mainUI/btn_baoxiang1.png";
	WorldCfg.ICON_DRAGON = "res/icon/dj001.png";
	WorldCfg.ICON_CELL = "res/icon/dj008.png";

	class LevelCfg {
	    constructor() {
	    }
	    static getCfg(levelName) {
	        let cfg = PConfig.getCfg(levelName + ".json");
	        return cfg;
	    }
	    static getCfgBy(id) {
	        let name = WorldCfg.cidToName(id);
	        if (name) {
	            return this.getCfg(name);
	        }
	        return null;
	    }
	}

	class TiledTile {
	    constructor() {
	        this.isFiller = false;
	        this.id = -1;
	        this.isStartingCameraLocation = false;
	    }
	    setObj(id, obj) {
	        this.id = id;
	        if (obj.prefab) {
	            this.prefab = obj.prefab;
	        }
	        if (obj.isFiller) {
	            this.isFiller = obj.isFiller;
	        }
	        if (obj.cameraStart == "") {
	            this.isStartingCameraLocation = true;
	        }
	        if (obj.fog) {
	            this.fogGroup = FogGroupID[obj.fog];
	        }
	        else if (obj.keyObject) {
	            this.fogGroup = FogGroupID[obj.keyObject];
	        }
	        if (obj.prop) {
	            this.prop = obj.prop;
	            this.prefab = PropsCfg.getPref(this.prop);
	        }
	        if (obj.dead) {
	            this.deadLevelValue = obj.dead[0];
	            CompFilledWithDeath.addDeadLevel(obj.dead[0], obj.dead[3], obj.dead[1], obj.dead[2], obj.dead[4]);
	        }
	    }
	}

	class TileCfg {
	    static init() {
	        this.land = PConfig.getCfg("Land.json");
	        this.add(this.land);
	        this.loot = PConfig.getCfg("Loot.json");
	        this.add(this.loot);
	        this.nature = PConfig.getCfg("Nature.json");
	        this.add(this.nature);
	        this.eggs = PConfig.getCfg("Eggs.json");
	        this.add(this.eggs);
	        this.structures = PConfig.getCfg("Structures.json");
	        this.add(this.structures);
	        this.dead = PConfig.getCfg("DeadStuff.json");
	        this.add(this.dead);
	        this.events = PConfig.getCfg("Events.json");
	        this.add(this.events);
	    }
	    static add(v) {
	        let items = v.tileMap;
	        for (let i in items) {
	            let id = Number(i) + 1 + this.startIndex;
	            let vo = new TiledTile();
	            vo.setObj(id, items[i]);
	            this.data[id] = vo;
	        }
	        this.startIndex += v.tileCount;
	    }
	    static get(id) {
	        return this.data[id];
	    }
	    static getPrefab(id) {
	        let obj = this.get(id);
	        if (obj) {
	            if (obj.prefab) {
	                return obj.prefab;
	            }
	            else if (obj.prop) {
	                return PropsCfg.getPref(obj.prop);
	            }
	        }
	        return "";
	    }
	    static getPropId(id) {
	        let obj = this.get(id);
	        if (obj && obj.prop) {
	            return obj.prop;
	        }
	        return 0;
	    }
	}
	TileCfg.data = {};
	TileCfg.startIndex = 0;

	class BaseData {
	    constructor() {
	    }
	}

	class MapData extends BaseData {
	    constructor(cfg, names = null) {
	        super();
	        this.layers = {};
	        this.parseCfg(cfg);
	        this.merge(names);
	    }
	    get cid() {
	        return this.vo.cid;
	    }
	    initArrays(w, h) {
	        this.width = w;
	        this.height = h;
	        this.fog = [];
	        this.entities = [];
	        this.death = [];
	        this.ground = [];
	        this.keyholes = [];
	        this.initArray(this.fog, MapTileLayerID.Fog);
	        this.initArray(this.entities, MapTileLayerID.Entities);
	        this.initArray(this.death, MapTileLayerID.Death);
	        this.initArray(this.ground, MapTileLayerID.Ground);
	        this.initArray(this.keyholes, MapTileLayerID.Keys);
	    }
	    initArray(tileArray, layerID) {
	        for (let i = 0; i < this.width; i++) {
	            tileArray[i] = [];
	        }
	        this.layers[layerID] = tileArray;
	    }
	    parseCfg(cfg) {
	        this.initArrays(cfg.width, cfg.height);
	        if (cfg.ground) {
	            this.parseLayer(cfg.ground, MapTileLayerID.Ground);
	        }
	        if (cfg.death) {
	            this.parseLayer(cfg.death, MapTileLayerID.Death);
	        }
	        if (cfg.entities) {
	            this.parseLayer(cfg.entities, MapTileLayerID.Entities);
	        }
	        if (cfg.fog) {
	            this.parseLayer(cfg.fog, MapTileLayerID.Fog);
	        }
	        if (cfg.keys) {
	            this.parseLayer(cfg.keys, MapTileLayerID.Keys);
	        }
	    }
	    parseLayer(list, layerID) {
	        let num = 0;
	        let num2 = this.height - 1;
	        let num3 = 0;
	        let arr;
	        switch (layerID) {
	            case MapTileLayerID.Ground:
	                arr = this.ground;
	                break;
	            case MapTileLayerID.Death:
	                arr = this.death;
	                break;
	            case MapTileLayerID.Entities:
	                arr = this.entities;
	                break;
	            case MapTileLayerID.Fog:
	                arr = this.fog;
	                break;
	            case MapTileLayerID.Keys:
	                arr = this.keyholes;
	                break;
	            default:
	                return;
	        }
	        for (let i = 0; i < list.length; i++) {
	            let id = list[i];
	            if (id != 0) {
	                let t = TileCfg.get(id);
	                if (t && !t.isFiller) {
	                    arr[num][num2] = t;
	                }
	            }
	            num++;
	            num3++;
	            if (num3 % this.width == 0) {
	                num = 0;
	                num2--;
	            }
	        }
	    }
	    merge(names) {
	        if (!names)
	            return;
	        for (let id of names) {
	            let cfg = LevelCfg.getCfg(id);
	            if (cfg) {
	                let add = new MapData(cfg);
	                this.mergeFrom(add, id);
	            }
	        }
	    }
	    mergeFrom(add, id) {
	        for (let key in add.layers) {
	            let array = this.layers[key];
	            let array2 = add.layers[key];
	            let tiledTile = null;
	            let tiledTile2 = null;
	            for (let i = 0; i < this.width; i++) {
	                for (let j = 0; j < this.height; j++) {
	                    tiledTile = array[i][j];
	                    tiledTile2 = array2[i][j];
	                    if (tiledTile2 != null) {
	                        if (tiledTile != null) {
	                            console.error("Additive map " + id + " has a tile that conflicts with a tile in the destination on the " + key + " layer at location (" + i + ", " + j + ")");
	                        }
	                        else {
	                            array[i][j] = tiledTile2;
	                        }
	                    }
	                }
	            }
	        }
	    }
	}

	class Level {
	    constructor(cfg, id) {
	        this.points = 0;
	        this.stateDelay = new Clock();
	        this.playerTime = new Clock();
	        this.sessionDuration = new Clock();
	        this.uiTickUpTime = new Clock(0.5);
	        this.speedBonusMultiplier = 1;
	        this.loadComplete = false;
	        this.rewardsSavedToFile = false;
	        this.levelComplete = false;
	        this.autoSaveElapsed = 0;
	        this.soundSkipper = 20;
	        this.ID = id;
	        this.data = WorldMgr.ins().getLevelVo(id);
	        Glob.setLevel(this);
	        this.loadSaveFileIntoMemoryIfExists();
	        let additiveMapResourceNames = Level.getAdditiveMapResourceNames(id);
	        let mapData = new MapData(cfg, additiveMapResourceNames);
	        if (this.needsMigrationForPremiumLand(id)) {
	            this.migrateCampForPremiumLand(mapData);
	        }
	        Glob.map.loadNewBoard(this, mapData);
	        this.initWithSaveFileData();
	        if (SL_Level.currentLoadedData == null && this.data.IsEventLevel) {
	            this.data.TryUpdateActiveGoalSetIfChainsExist();
	        }
	        SL_Level.DisposeLoadedData();
	        this.bringHomeItems_CheckForAndDrop();
	        this.loadComplete = true;
	        if (this.data.isHome) {
	            Level.unlockedAnyCamps = true;
	        }
	    }
	    get fogGoals() {
	        return this.data.FogGoals;
	    }
	    get reloadIntoLevelAllowed() {
	        return !this.rewardsSavedToFile && !this.levelComplete;
	    }
	    get saveFileName() {
	        return Level.getSaveFileName(this.ID);
	    }
	    get hasSaveFile() {
	        return Level.levelSaveFileExists(this.ID);
	    }
	    get tempSaveFileName() {
	        return this.ID + "_TEMP.txt";
	    }
	    get backupSaveFileName() {
	        return this.ID + "_BACKUP.txt";
	    }
	    get backupID() {
	        return this.ID + "_BACKUP";
	    }
	    static load(levelId) {
	        Glob.deleteCurrentLevel = false;
	        let level;
	        let xmlData = LevelCfg.getCfgBy(levelId);
	        level = new Level(xmlData, levelId);
	        if (this.isHomeLevel(levelId) && MergeDragonsAppConfig.RETENTION_CHESTS_ENABLED) {
	            let xmlUnityResourcePath = "Level_Home_PlinthOnly";
	            let xmlData2 = LevelCfg.getCfg(xmlUnityResourcePath);
	            level.additivelyLoadLand(xmlData2);
	            Glob.map.setAllCellDirectionalLinks();
	        }
	        LevelUtils.startLevel(level);
	        if (!this.isHomeLevel(levelId)) {
	            return level;
	        }
	        return level;
	    }
	    static exists(levelID) {
	        return WorldCfg.getConfig(levelID) != null;
	    }
	    static getAdditiveMapResourceNames(id) {
	        let list = [];
	        if (id == Level.ID_LEVEL_HOME) {
	            if (MergeDragonsAppConfig.PREMIUM_LAND_2_STATE != 0) {
	                list.push("Level_Home - Add PL2");
	            }
	            if (ShopSaveMgr.DidPurchasePremiumLand) {
	                list.push("Level_Home - Add PL3");
	            }
	        }
	        return list;
	    }
	    additivelyLoadLand(cfg) {
	        let mapData = new MapData(cfg);
	        Glob.map.additivelyAddBoardLayerFromData(MapTileLayerID.Ground, mapData);
	        Glob.map.additivelyAddBoardLayerFromData(MapTileLayerID.Entities, mapData);
	    }
	    setSpecialState(newSpecialState) {
	        this.specialStateID = newSpecialState;
	    }
	    setState(newState) {
	        if (this.state == newState || (newState == LevelStateID.Complete && this.state != LevelStateID.Playing)) {
	            return;
	        }
	        this.state = newState;
	        if (this.state == LevelStateID.Complete) {
	            this.levelComplete = true;
	            GGChallengeLevelController.ins().Deactivate();
	            this.setValidDecayedObjects();
	            ApiMgr.addGuanQiaSta(this.data.cid, LogLevelType.StayTime, this.playerTime.timeLeft);
	            if (Glob.cellLayer.deadCells.length == 0 && (this.decayedObjects == null || this.decayedObjects.length == 0)) {
	                this.setToUnsummonDelayState();
	                return;
	            }
	            this.clearValidDecayedObjects();
	            this.completedState = LevelCompleteStateID.PauseBeforeHealDeadLand;
	            this.stateDelay = new Clock(2);
	        }
	        else if (this.state == LevelStateID.Defeat) {
	            this.defeatedState = LevelDefeatedStateID.SummonOnslaught;
	            this.stateDelay = new Clock();
	            ApiMgr.addGuanQiaSta(this.data.cid, LogLevelType.StayTime, this.playerTime.timeLeft);
	        }
	        else if (this.state == LevelStateID.Resetting) {
	            this.resettingState = ResettingStateID.StartReset;
	            if (!LocalData.ins().isRecorded(this.data.cid, LogLevelType.Fail)) {
	                ApiMgr.addGuanQiaSta(this.data.cid, LogLevelType.Fail);
	                LocalData.ins().recordLevel(this.data.cid, LogLevelType.Fail);
	            }
	            ApiMgr.addGuanQiaSta(this.data.cid, LogLevelType.StayTime, this.playerTime.timeLeft);
	        }
	    }
	    shouldSimulateLevel() {
	        if (this.state == LevelStateID.Complete && (this.completedState == LevelCompleteStateID.BringHomeMenu || this.completedState == LevelCompleteStateID.ReturnToWorldMap)) {
	            return false;
	        }
	        if (LayerMgr.ins().windowIsShow()) {
	            return false;
	        }
	        if (Glob.isChangingScenes) {
	            return false;
	        }
	        if (MergeDragonsAppConfig.CHALLENGE_LEVELS_ENABLED
	            && (GGChallengeLevelController.ins().ShopTutorialState != TutorialState.Disabled)) {
	            return false;
	        }
	        return true;
	    }
	    loadComplete_StartPlaying() {
	        this.state = LevelStateID.Playing;
	        if (this.data.cfg.WindLootData != null) {
	            this.data.cfg.WindLootData.InitForNewLevel();
	        }
	        if (!this.reloadIntoLevelAllowed) {
	            this.justLoaded_ButRewardsComplete_ExitToWorld();
	        }
	        else if (Glob.cellLayer.livingCells.length == 0) {
	            this.setState(LevelStateID.Defeat);
	        }
	        MsgCenter.notify(MsgConst.LEVEL_START_PLAYING);
	        CurrencyMgr.ins().UpdateShopPips();
	        CurrencyMgr.ins().UpdateShopBanners();
	        GoalMgr.ins().RefreshActiveGoals();
	    }
	    showLevelStartTipAndStartMusic() {
	        let flag = false;
	        if (this.data.cfg.LevelStartTipID) {
	            flag = TomeTip.showDialog(this.data.cfg.LevelStartTipID);
	        }
	        else if (this.data.isChallenge) {
	            let v2data = this.data.GetChallengeV2Data();
	            if (v2data) {
	                if (v2data.Difficulty == ChallengeLevelDifficultyID.Level1) {
	                    flag = TomeTip.showGameTip(GameTipTypeID.Tip_Challenge_Stage1);
	                }
	                else if (v2data.Difficulty == ChallengeLevelDifficultyID.Level2) {
	                    flag = TomeTip.showGameTip(GameTipTypeID.Tip_Challenge_Stage2);
	                }
	                else if (v2data.Difficulty == ChallengeLevelDifficultyID.Level3) {
	                    flag = TomeTip.showGameTip(GameTipTypeID.Tip_Challenge_Stage3);
	                }
	            }
	        }
	        if (!flag) {
	            this.startMusic();
	        }
	        return flag;
	    }
	    tomeTipFinishedShowing() {
	        MsgCenter.notify(MsgConst.TOME_TIP_FINISH);
	        this.startMusic();
	    }
	    startMusic() {
	        if (!this.startedMusic) {
	            this.startedMusic = true;
	        }
	    }
	    isHomeLevel() {
	        return this.ID == Level.ID_LEVEL_HOME;
	    }
	    static isHomeLevel(id) {
	        return id == Level.ID_LEVEL_HOME;
	    }
	    static getLevelResourceName(levelName) {
	        return "Levels/" + levelName;
	    }
	    needsMigrationForPremiumLand(levelId) {
	        if (!Level.isHomeLevel(levelId))
	            return false;
	        if (!SL_Level.currentLoadedData)
	            return false;
	        let board = SL_Level.currentLoadedData.boardData;
	        if (!board)
	            return false;
	        if (!board.fogMapData)
	            return false;
	        return board.fogMapData.fogGroupIDMap[0].length == 25;
	    }
	    migrateCampForPremiumLand(mapData) {
	        let boardData = SL_Level.currentLoadedData.boardData;
	        let fogMapData = boardData.fogMapData;
	        let num = mapData.ground[0].length;
	        let num2 = fogMapData.fogGroupIDMap[0].length;
	        let num3 = num - num2;
	        for (let i = 0; i < fogMapData.fogGroupIDMap.length; i++) {
	            let sourceArray = fogMapData.fogGroupIDMap[i];
	            let array = [];
	            for (let j = 0; j < num3; j++) {
	                let tmp = mapData.fog[i][j];
	                array[j] = tmp ? tmp.fogGroup : FogGroupID.NONE;
	            }
	            array = array.concat(sourceArray);
	            fogMapData.fogGroupIDMap[i] = array;
	        }
	        for (let cellsDatum of boardData.cellsData) {
	            cellsDatum.yIndex += num3;
	        }
	        let drawnObjectsData = SL_Level.currentLoadedData.drawnObjectsData;
	        let bx = MapUtil.getWx(0, 0);
	        let by = MapUtil.getWy(0, 0);
	        let ax = MapUtil.getWx(0, num3);
	        let ay = MapUtil.getWy(0, num3);
	        let cx = ax - bx;
	        let cy = ay - by;
	        for (let item of drawnObjectsData) {
	            item.position.x += cx;
	            item.position.y += cy;
	        }
	    }
	    static doesSaveFileHasPremiumLand(levelID) {
	        if (!this.isHomeLevel(levelID)) {
	            return false;
	        }
	        let saveData_Level = this.loadSaveFileWithID(levelID);
	        if (saveData_Level == null) {
	            return false;
	        }
	        return saveData_Level.boardData.fogMapData.fogGroupIDMap[0].length == 35;
	    }
	    update() {
	        GGChallengeLevelController.ins().update();
	        this.autoSaveTick();
	        if (this.shouldAutoSave()) {
	            this.autoSave();
	        }
	        if (this.state == LevelStateID.Playing) {
	            this.update_Playing();
	        }
	        else if (this.state == LevelStateID.Complete) {
	            this.update_Complete();
	        }
	        else if (this.state == LevelStateID.Defeat) {
	            this.update_Defeat();
	        }
	        else if (this.state == LevelStateID.Resetting) {
	            this.update_Resetting();
	        }
	        else if (this.state == LevelStateID.NONE) {
	            console.error("Somehow we have GameState == InLevel, but LevelState == NONE");
	        }
	        else {
	            console.error("Unhandled LevelState in Game.cs: " + this.state);
	        }
	        this.updateFinger();
	        this.universalUpdates();
	    }
	    autoSaveTick() {
	        this.autoSaveElapsed += Glob.deltaTime;
	    }
	    shouldAutoSave() {
	        return this.autoSaveElapsed > MergeDragonsAppConfig.AUTO_SAVE_INTERVAL;
	    }
	    autoSave() {
	        SaveLoad.AutoSaveLevel();
	        this.autoSaveElapsed = 0;
	    }
	    universalUpdates() {
	        if (Level.timeUntilCanReplayDiscoverySound != null) {
	            Level.timeUntilCanReplayDiscoverySound.update(Glob.deltaTime);
	        }
	    }
	    update_Playing() {
	        let flag = this.shouldSimulateLevel();
	        GGChallengeLevelController.ins().SetPaused(!flag);
	        if (flag) {
	            this.playerTime.addTime(Glob.deltaTime);
	            this.sessionDuration.addTime(Glob.deltaTime);
	            if (this.data.cfg.WindLootData != null) {
	                this.data.cfg.WindLootData.Update();
	            }
	        }
	    }
	    updateFinger() {
	        let guidePrefs = this.data.cfg.guidePrefs;
	        if (guidePrefs && guidePrefs.length > 0 && !this.data.EverCompleted()) {
	            if (this.state == LevelStateID.Playing) {
	                FingerGuiderMgr.update(guidePrefs);
	            }
	            else {
	                FingerGuiderMgr.hide();
	            }
	        }
	    }
	    updatePointsCount(delta, isBonusPoints = false) {
	        this.points += delta;
	        if (this.points < 0) {
	            this.points = 0;
	        }
	        if (isBonusPoints) {
	            GuiMgr.swapToBonusPointSoundAndVFX();
	        }
	        GoalMgr.ins().ScoreUpdated();
	        MsgCenter.notify(MsgConst.LEVEL_POINT_CHANGE, this.points);
	    }
	    levelComplete_LockInAccomplishedGoals() {
	        if (this.data.GoalsCompleteTotal > this.data.MaxStarsAchieved) {
	            this.data.MaxStarsAchieved = this.data.GoalsCompleteInCurrentStarSet;
	        }
	    }
	    levelComplete_LockInLevelStats() {
	        this.levelComplete_LockInAnyProgressRewards();
	        this.data.TimesWon++;
	        if (this.points > this.data.HighScore) {
	            this.data.HighScore = this.points;
	        }
	        if (this.playerTime.timeLeft < this.data.BestTime || this.data.BestTime <= 0) {
	            this.data.BestTime = this.playerTime.timeLeft;
	        }
	    }
	    puzzleChallengeLevelComplete_LockInLevelStats(won) {
	        if (won) {
	            this.data.TimesWon++;
	        }
	        else {
	            this.data.TimesLost++;
	        }
	        if (this.points > this.data.HighScore) {
	            this.data.HighScore = this.points;
	        }
	    }
	    levelComplete_LockInAnyProgressRewards() {
	        if (this.data.HasProgressRewards) {
	            if (this.data.GetWinsNeededForNextReward() != 1) {
	                this.data.TimesWonSinceLastReward++;
	                return;
	            }
	            this.data.RewardPrefabNameEarned = this.data.GetProgressRewardPrefabName();
	            SaveLoad.AddItemToSavedBringHomeRewards(this.data.RewardPrefabNameEarned);
	            this.data.TimesWonSinceLastReward = 0;
	            this.data.NumProgressRewardsCollected++;
	        }
	    }
	    update_Resetting() {
	        if (this.resettingState == ResettingStateID.StartReset) {
	            if (this.update_Instant_UnSummonAll()) {
	                this.resettingState = ResettingStateID.PauseBeforeExit;
	                this.stateDelay = new Clock(2);
	            }
	            else {
	                this.resettingState = ResettingStateID.ResetAndExit;
	            }
	            if (this.specialStateID == SpecialStateID.ResetIsASuccess) {
	                LevelUtils.endLevel(this, EnumLevelEndStatus.SUCCESS);
	            }
	            else {
	                LevelUtils.endLevel(this, EnumLevelEndStatus.RESTART);
	            }
	        }
	        else if (this.resettingState == ResettingStateID.PauseBeforeExit) {
	            this.stateDelay.update(Glob.deltaTime);
	            if (this.stateDelay.done) {
	                this.resettingState = ResettingStateID.ResetAndExit;
	            }
	        }
	        else if (this.resettingState == ResettingStateID.ResetAndExit) {
	            Glob.deleteCurrentLevel = true;
	            Glob.request_LoadWorldMap();
	        }
	        else if (this.resettingState == ResettingStateID.NONE) {
	            console.error("Somehow in the Resetting state without the resetting substate set to anything but NONE.");
	            this.resettingState = ResettingStateID.StartReset;
	        }
	    }
	    update_Complete() {
	        this.stateDelay.update(Glob.deltaTime);
	        if (this.completedState == LevelCompleteStateID.NONE) {
	            console.error("Should not be in Level::Update_Complete() when this.completedState is set to NONE.");
	        }
	        else if (this.completedState == LevelCompleteStateID.PauseBeforeHealDeadLand) {
	            this.update_Complete_PauseBeforeHealDeadLand();
	        }
	        else if (this.completedState == LevelCompleteStateID.HealDeadLand) {
	            this.update_Complete_HealDeadLand();
	        }
	        else if (this.completedState == LevelCompleteStateID.BringDeadThingsToLife) {
	            this.update_Complete_BringDeadThingsToLife();
	        }
	        else if (this.completedState == LevelCompleteStateID.CreateLifeOnEmptyTiles) {
	            this.update_Complete_CreateLifeOnEmptyTiles();
	        }
	        else if (this.completedState == LevelCompleteStateID.UnSummon) {
	            this.update_Complete_UnSummon();
	        }
	        else if (this.completedState == LevelCompleteStateID.LevelWinBanner) {
	            this.update_Complete_LevelWinBanner();
	        }
	        else if (this.completedState == LevelCompleteStateID.PauseBeforeLevelStatsScreen) {
	            this.update_Complete_PauseAfterLevelCompleteText();
	        }
	        else if (this.completedState == LevelCompleteStateID.StarTally) {
	            this.update_Complete_StarTally();
	        }
	        else if (this.completedState == LevelCompleteStateID.TimeTally) {
	            this.update_Complete_Time();
	        }
	        else if (this.completedState == LevelCompleteStateID.PointsTally) {
	            this.update_Complete_Points();
	        }
	        else if (this.completedState != LevelCompleteStateID.BringHomeMenu) {
	            if (this.completedState == LevelCompleteStateID.ReturnToWorldMap) {
	                this.levelComplete_LockInAccomplishedGoals();
	                this.levelComplete_LockInLevelStats();
	                this.data.TimesExitedWithoutEnd = 0;
	                SaveLoad.saveLevelStats(this.data.GetSaveDataObject(), this.ID);
	                Glob.deleteCurrentLevel = true;
	                Glob.request_LoadWorldMap();
	            }
	        }
	    }
	    update_Complete_PauseBeforeHealDeadLand() {
	        if (!this.stateDelay.going) {
	            if (Glob.cellLayer.deadCells.length != 0) {
	                this.deadCells = MathUtil.randomizedListCopy(Glob.cellLayer.deadCells);
	                LevelUtils.stats.noOfTilesHealedByAutomaticallyAtEnd = Glob.cellLayer.deadCells.length;
	                LevelUtils.stats.totalDeadLandLeft = Glob.cellLayer.deadCells.length;
	                LevelUtils.stats.totalSuperDeadLandLeft = Glob.cellLayer.deadCells.filter(p => p.deathComponent.isImmune()).length;
	                let tmp = Glob.cellLayer.deadCells;
	                let total = 0;
	                for (let i of tmp) {
	                    if (!i.deathComponent.isImmune()) {
	                        total += i.deathComponent.deadLevel.HP;
	                    }
	                }
	                LevelUtils.stats.totalHealAmountNeededForDeadTilesAtEnd = total;
	            }
	            this.completedState = LevelCompleteStateID.HealDeadLand;
	            this.stateDelay.set(0.2);
	        }
	    }
	    update_Complete_HealDeadLand() {
	        if (this.deadCells == null || this.deadCells.length == 0) {
	            this.stateDelay.reset();
	            this.completedState = LevelCompleteStateID.BringDeadThingsToLife;
	            this.setValidDecayedObjects();
	        }
	        if (!this.stateDelay.going) {
	            this.stateDelay.reset();
	            let cell = this.deadCells.shift();
	            if (cell != null && cell.deathComponent != null) {
	                cell.deathComponent.instantHeal(Level.winDeadTileRestorePointsMult);
	            }
	        }
	    }
	    setValidDecayedObjects() {
	        let things = ThingList.guidMap;
	        this.decayedObjects = [];
	        for (let i in things) {
	            let item = things[i];
	            if (item.isInAKillableState() && item.cfg.transformOnLevelWinLootTable) {
	                this.decayedObjects.push(item);
	            }
	        }
	    }
	    clearValidDecayedObjects() {
	        this.decayedObjects = null;
	    }
	    setToUnsummonDelayState() {
	        this.stateDelay.set(1);
	        this.setUnSummonMonsterList();
	        this.completedState = LevelCompleteStateID.UnSummon;
	    }
	    update_Complete_BringDeadThingsToLife() {
	        if (this.decayedObjects == null || this.decayedObjects.length == 0) {
	            this.setToSpawnLifeOnEmptyTilesState();
	        }
	        else if (!this.stateDelay.going) {
	            this.stateDelay.reset();
	            let drawnObject = this.decayedObjects.shift();
	            if (drawnObject != null && !drawnObject.isDispose && drawnObject.isInAKillableState() && !drawnObject.selected) {
	                let key = drawnObject.cfg.transformOnLevelWinLootTable.dropPrefabId();
	                drawnObject.destroyAndReplaceWith(PropsCfg.get(key), false);
	            }
	        }
	    }
	    setToSpawnLifeOnEmptyTilesState() {
	        this.stateDelay.reset();
	        this.completedState = LevelCompleteStateID.CreateLifeOnEmptyTiles;
	        if (Glob.cellLayer.emptyCells.length <= 5) {
	            this.winSpawnLifeOnEmptyTilesUntilThisManyRemain = MathUtil.INT_MAX_VALUE;
	            return;
	        }
	        this.winSpawnLifeOnEmptyTilesUntilThisManyRemain = MathUtil.randInt(5, Glob.cellLayer.emptyCells.length);
	        this.winSpawnTable = LootTablesMgr.ins().get(MathUtil.randElement(PrefabDB.kPrefabNames_DeathToLife));
	    }
	    update_Complete_CreateLifeOnEmptyTiles() {
	        if (this.winSpawnTable == null || Glob.cellLayer.emptyCells.length <= this.winSpawnLifeOnEmptyTilesUntilThisManyRemain) {
	            this.setToUnsummonDelayState();
	        }
	        else if (!this.stateDelay.going) {
	            this.stateDelay.reset();
	            let drawnObject = Thing.createInFreeCell(this.winSpawnTable.dropPrefabId(), "ParticleRoot_SpawnLife", false, false);
	            if (!(drawnObject == null)) {
	                drawnObject.playMatchCreatedSound();
	            }
	        }
	    }
	    setUnSummonMonsterList() {
	        this.monstersToUnSummon = [];
	        for (let monster of Monster.monsters) {
	            if (monster.homeLevelID) {
	                this.monstersToUnSummon.push(monster);
	            }
	        }
	        if (this.monstersToUnSummon.length == 0) {
	            this.monstersToUnSummon = null;
	        }
	    }
	    update_Complete_UnSummon() {
	        if (this.monstersToUnSummon == null || this.monstersToUnSummon.length == 0) {
	            this.stateDelay.set(1.0);
	            this.completedState = LevelCompleteStateID.LevelWinBanner;
	        }
	        if (!this.stateDelay.going) {
	            this.stateDelay.reset();
	            let monster = this.monstersToUnSummon.shift();
	            if (monster != null && !monster.isDispose) {
	                OwnedMonsterMgr.unSummon(monster);
	            }
	        }
	    }
	    update_Complete_LevelWinBanner() {
	        if (!this.stateDelay.going) {
	            this.data.PlayLevelCompleteSound();
	            MsgCenter.notify(MsgConst.LEVEL_SHOW_WON_VIEW, [this.points, Glob.currLevelData.HighScore]);
	            if (!this.data.EverCompleted()) {
	                Glob.levelIDJustCompletedForFirstTime = this.data.cid;
	            }
	            Glob.levelJustWon = this.data.cid;
	            this.stateDelay.set(1.5);
	            this.completedState = LevelCompleteStateID.PauseBeforeLevelStatsScreen;
	        }
	    }
	    update_Complete_PauseAfterLevelCompleteText() {
	        if (!this.stateDelay.going) {
	            this.completedState = LevelCompleteStateID.StarTally;
	            this.starTallyState = StarTallyStateID.Star1;
	            this.stateDelay = new Clock(0.6);
	        }
	    }
	    update_Complete_StarTally() {
	        if (this.stateDelay.going) {
	            return;
	        }
	        if (this.starTallyState == StarTallyStateID.Star1) {
	            if (this.data.MaxStars > 0) {
	                let earnedTheStar = this.data.GetNumStarGoalsComplete() > 0;
	            }
	            this.starTallyState = StarTallyStateID.Star2;
	            this.stateDelay.reset();
	            return;
	        }
	        if (this.starTallyState == StarTallyStateID.Star2) {
	            if (this.data.MaxStars > 1) {
	                let earnedTheStar = this.data.GetNumStarGoalsComplete() > 1;
	            }
	            this.starTallyState = StarTallyStateID.Star3;
	            this.stateDelay.reset();
	            return;
	        }
	        if (this.starTallyState == StarTallyStateID.Star3 && this.data.MaxStars > 2) {
	            let earnedTheStar = this.data.GetNumStarGoalsComplete() > 2;
	        }
	        this.completedState = LevelCompleteStateID.PointsTally;
	        this.pointsTallyState = PointsTallyStateID.PlayerScoreTickUp;
	        this.stateDelay = new Clock(0.2);
	        this.uiTickUpTime.reset();
	        this.win_ShowScoreUIChunk();
	    }
	    justLoaded_ButRewardsComplete_ExitToWorld() {
	        this.state = LevelStateID.Complete;
	        this.completedState = LevelCompleteStateID.ReturnToWorldMap;
	    }
	    update_Complete_Time() {
	        if (this.timeTallyState == TimeTallySateID.PlayerTimeTickUp) {
	            this.update_Complete_Time_TimeTally();
	        }
	        else if (this.timeTallyState == TimeTallySateID.TimeQualityStamp) {
	            this.update_Complete_Time_QualityStamp();
	        }
	        else if (this.timeTallyState == TimeTallySateID.NewTimeRecord) {
	            this.update_Complete_Time_RecordStamp();
	        }
	        else if (this.timeTallyState == TimeTallySateID.DelayBeforeTransToPoints) {
	            this.update_Complete_Time_DelayBeforeTransToPoints();
	        }
	        else if (this.timeTallyState == TimeTallySateID.NONE) {
	            console.error("In Level::Update_Complete_Time() when this.timeTallyState is NONE. This should not happen.");
	        }
	        else {
	            console.error("In Level::Update_Complete_Time() -- unhandled state: " + this.timeTallyState);
	        }
	    }
	    bringHomeMenuDone() {
	        this.completedState = LevelCompleteStateID.ReturnToWorldMap;
	    }
	    update_Complete_Time_TimeTally() {
	        if (!this.stateDelay.going) {
	            if (this.uiTickUpTime.going) {
	                this.uiTickUpTime.update(Glob.deltaTime);
	                this.winPlayerTime.resetToPercent(this.uiTickUpTime.percentElapsed);
	                SoundMgr.ins().playSound("m19");
	            }
	            else if (this.speedStamp != 0) {
	                this.timeTallyState = TimeTallySateID.TimeQualityStamp;
	                this.stateDelay = new Clock(0.15);
	            }
	            else {
	                this.update_Complete_Time_CheckForRecordState();
	            }
	        }
	    }
	    update_Complete_Time_QualityStamp() {
	        if (!this.stateDelay.going) {
	            this.update_Complete_Time_CheckForRecordState();
	        }
	    }
	    update_Complete_Time_CheckForRecordState() {
	        if (this.playerTime.timeLeft < this.data.BestTime) {
	            this.timeTallyState = TimeTallySateID.NewTimeRecord;
	            this.stateDelay = new Clock(0.2);
	        }
	        else {
	            this.update_Complete_Time_TransitionToScores();
	        }
	    }
	    update_Complete_Time_RecordStamp() {
	        if (!this.stateDelay.going) {
	            SoundMgr.ins().playSound("m29");
	            this.update_Complete_Time_TransitionToScores();
	        }
	    }
	    update_Complete_Time_TransitionToScores() {
	        this.timeTallyState = TimeTallySateID.DelayBeforeTransToPoints;
	        this.stateDelay = new Clock(0.25);
	    }
	    update_Complete_Time_DelayBeforeTransToPoints() {
	        if (!this.stateDelay.going) {
	            this.completedState = LevelCompleteStateID.PointsTally;
	            this.timeTallyState = TimeTallySateID.NONE;
	            if (this.hasSpeedBonus) {
	                this.pointsTallyState = PointsTallyStateID.SpeedBonusTickUp;
	            }
	            else {
	                this.pointsTallyState = PointsTallyStateID.PlayerScoreTickUp;
	            }
	            this.stateDelay = new Clock(0.2);
	            this.uiTickUpTime.reset();
	            this.win_ShowScoreUIChunk();
	        }
	    }
	    win_ShowScoreUIChunk() {
	    }
	    calculateSpeedMultiplierBonusAndStamp() {
	        this.hasSpeedBonus = true;
	        if (this.playerTime.timeLeft >= this.data.cfg.goodTime) {
	            this.speedBonusMultiplier = 1;
	            this.hasSpeedBonus = false;
	        }
	        else if (this.playerTime.timeLeft <= this.data.cfg.epicTime) {
	            this.speedBonusMultiplier = Level.speedBonusPointsMutliplierRange.max;
	        }
	        else {
	            let num = (this.playerTime.timeLeft - this.data.cfg.epicTime) / (this.data.cfg.goodTime - this.data.cfg.epicTime);
	            num = 1 - num;
	            this.speedBonusMultiplier = Level.speedBonusPointsMutliplierRange.getValue(num);
	        }
	        if (this.playerTime.timeLeft <= this.data.cfg.epicTime) {
	            this.speedStamp = WinStampTierID.Epic;
	        }
	        else if (this.playerTime.timeLeft <= this.data.cfg.greatTime) {
	            this.speedStamp = WinStampTierID.Great;
	        }
	        else if (this.playerTime.timeLeft <= this.data.cfg.goodTime) {
	            this.speedStamp = WinStampTierID.Good;
	        }
	    }
	    update_Complete_Points() {
	        if (this.pointsTallyState == PointsTallyStateID.SpeedBonusTickUp) {
	            this.update_Complete_Points_SpeedBonusTickUp();
	        }
	        else if (this.pointsTallyState == PointsTallyStateID.SpeedBonusQualityStamp) {
	            this.update_Complete_Points_SpeedBonusQualityStamp();
	        }
	        else if (this.pointsTallyState == PointsTallyStateID.PlayerScoreTickUp) {
	            this.update_Complete_Points_PlayerScoreTickUp();
	        }
	        else if (this.pointsTallyState == PointsTallyStateID.PlayerScoreQualityStamp) {
	            this.update_Complete_Points_PlayerScoreQualityStamp();
	        }
	        else if (this.pointsTallyState == PointsTallyStateID.NewHighScoreRecord) {
	            this.update_Complete_Points_NewHighScoreRecord();
	        }
	        else if (this.pointsTallyState == PointsTallyStateID.WaitForContinueTap) {
	            this.update_Complete_Points_WaitForContinueTap();
	        }
	        else if (this.pointsTallyState == PointsTallyStateID.NONE) {
	            console.error("In Level::Update_Complete_Points() when this.pointsTallyState is NONE. This should not happen.");
	        }
	        else {
	            console.error("In Level::Update_Complete_Points() -- unhandled state: " + this.pointsTallyState);
	        }
	    }
	    update_Complete_Points_SpeedBonusTickUp() {
	        if (this.stateDelay.going) {
	            return;
	        }
	        if (this.uiTickUpTime.going) {
	            this.uiTickUpTime.update(Glob.deltaTime, true);
	            let num = this.speedBonusMultiplier * this.uiTickUpTime.percentElapsed;
	            num *= 100;
	            let str = (num >> 0) + "%";
	            if (num > 100) {
	                str += Globals.getRepeatedCharacterString('!', (num / 50 - 1) >> 0);
	            }
	            SoundMgr.ins().playSound("m19");
	        }
	        else {
	            this.stateDelay = new Clock(0.15);
	            this.pointsTallyState = PointsTallyStateID.SpeedBonusQualityStamp;
	        }
	    }
	    update_Complete_Points_SpeedBonusQualityStamp() {
	        if (!this.stateDelay.going) {
	            this.updateScoreBasedOnSpeedBonusMutliplier();
	            this.stateDelay = new Clock(0.15);
	            this.pointsTallyState = PointsTallyStateID.PlayerScoreTickUp;
	            this.uiTickUpTime.reset();
	        }
	    }
	    updateScoreBasedOnSpeedBonusMutliplier() {
	        let num = (this.points * this.speedBonusMultiplier) >> 0;
	        let delta = num - this.points;
	        this.updatePointsCount(delta, false);
	    }
	    update_Complete_Points_PlayerScoreTickUp() {
	        if (this.stateDelay.going) {
	            return;
	        }
	        if (this.uiTickUpTime.going) {
	            this.uiTickUpTime.update(Glob.deltaTime, true);
	            let num = (this.points * this.uiTickUpTime.percentElapsed) >> 0;
	            this.soundSkipper++;
	            if (this.soundSkipper > 20) {
	                this.soundSkipper -= 20;
	                SoundMgr.ins().playSound("m19");
	            }
	        }
	        else {
	            this.update_Complete_Points_LockInScoreStamp();
	            if (this.scoreStamp != 0) {
	                this.stateDelay = new Clock(0.15);
	                this.pointsTallyState = PointsTallyStateID.PlayerScoreQualityStamp;
	            }
	            else {
	                this.update_Complete_Score_CheckForHighScoreState();
	            }
	        }
	    }
	    update_Complete_Points_LockInScoreStamp() {
	        if (this.points >= this.data.cfg.epicScore) {
	            this.scoreStamp = WinStampTierID.Epic;
	        }
	        else if (this.points >= this.data.cfg.greatScore) {
	            this.scoreStamp = WinStampTierID.Great;
	        }
	        else if (this.points >= this.data.cfg.goodScore) {
	            this.scoreStamp = WinStampTierID.Good;
	        }
	        LevelUtils.endLevel(this, EnumLevelEndStatus.SUCCESS);
	    }
	    update_Complete_Score_CheckForHighScoreState() {
	        if (this.points > this.data.HighScore) {
	            this.stateDelay = new Clock(0.2);
	            this.pointsTallyState = PointsTallyStateID.NewHighScoreRecord;
	        }
	        else {
	            this.pointsTallyState = PointsTallyStateID.WaitForContinueTap;
	        }
	    }
	    update_Complete_Points_PlayerScoreQualityStamp() {
	        if (!this.stateDelay.going) {
	            this.update_Complete_Score_CheckForHighScoreState();
	        }
	    }
	    update_Complete_Points_NewHighScoreRecord() {
	        if (!this.stateDelay.going) {
	            SoundMgr.ins().playSound("m30");
	            this.pointsTallyState = PointsTallyStateID.WaitForContinueTap;
	        }
	    }
	    update_Complete_Points_WaitForContinueTap() {
	        if (InputMgr.mainActionDown) {
	            this.pointsTallyState = PointsTallyStateID.NONE;
	            this.completedState = LevelCompleteStateID.BringHomeMenu;
	        }
	    }
	    onWinViewTap() {
	        this.pointsTallyState = PointsTallyStateID.NONE;
	        this.completedState = LevelCompleteStateID.BringHomeMenu;
	        WorldMgr.ins().showBringHomeView();
	    }
	    bringHomeItems_CheckForAndDrop() {
	        if (this.data.isHome) {
	            let saveData_BringHome = SaveLoad.LoadBringHomeData();
	            if (saveData_BringHome != null) {
	                this.bringHomeItems_Drop(saveData_BringHome.m_drawnObjectsData);
	            }
	        }
	    }
	    bringHomeItems_Drop(loadedObjs) {
	        let drawnObject = Level.createLevelLootOrb(loadedObjs);
	        drawnObject.setLabel("Script/Level_OrbRewardsLable");
	        drawnObject.customLootBundle.isLevelReward = true;
	        Level.dropLevelLootOrb(drawnObject);
	    }
	    static createLevelLootOrb(loadedObjs) {
	        let drawnObject = LootOrb.createSL(loadedObjs);
	        drawnObject.scaleRestingScale(1.5);
	        drawnObject.restoreLocalScale();
	        return drawnObject;
	    }
	    static dropLevelLootOrb(orb) {
	        let gameObject = Globals.createFromPrefab("ParticleRoot_LevelLootOrb");
	        orb.body.addChild(gameObject);
	        gameObject.transform.localPosition = new Laya.Vector3(0, 0.3, 0.2);
	        let closestMetaCellToScreenCenter = Glob.map.getClosestMetaCellToScreenCenter();
	        if (closestMetaCellToScreenCenter != null) {
	            Globals.swoopDropToMetaCell(orb, closestMetaCellToScreenCenter, orb.x, orb.y);
	        }
	        else {
	            Globals.swoopDropToFreeMetaCell(orb);
	        }
	    }
	    update_Defeat() {
	        this.stateDelay.update(Glob.deltaTime);
	        if (this.defeatedState == LevelDefeatedStateID.NONE) {
	            GuiMgr.errorMessage("Should not be in Level::Update_Defeat() when this.defeatedState is set to NONE.");
	        }
	        else if (this.defeatedState == LevelDefeatedStateID.SummonOnslaught) {
	            this.update_Defeat_SummonOnslaught();
	        }
	        else if (this.defeatedState == LevelDefeatedStateID.ShowDefeatHeadline) {
	            this.update_Defeat_ShowDefeatHeadline();
	        }
	        else if (this.defeatedState == LevelDefeatedStateID.CameraFade) {
	            this.update_Defeat_CameraFade();
	        }
	        else if (this.defeatedState == LevelDefeatedStateID.ReturnToWorldMap) {
	            this.update_Defeat_ReturnToWorldMap();
	        }
	        else {
	            GuiMgr.errorMessage("Unhandled Level Defeat State: " + this.defeatedState);
	        }
	    }
	    update_Defeat_SummonOnslaught() {
	        this.stateDelay.set(6);
	        this.defeatedState = LevelDefeatedStateID.ShowDefeatHeadline;
	    }
	    update_Defeat_ShowDefeatHeadline() {
	        if (!this.stateDelay.going) {
	            SoundMgr.ins().playSound("m32");
	            this.stateDelay.set(5);
	            this.defeatedState = LevelDefeatedStateID.CameraFade;
	            this.update_Instant_UnSummonAll();
	        }
	    }
	    update_Instant_UnSummonAll() {
	        let result = false;
	        for (let monster of Monster.monsters) {
	            if (monster != null && monster.verify() && monster.homeLevelID) {
	                OwnedMonsterMgr.unSummon(monster);
	                result = true;
	            }
	        }
	        return result;
	    }
	    update_Defeat_CameraFade() {
	        if (!this.stateDelay.going) {
	            Tween.FadeCameraOut(5);
	            this.stateDelay.set(5);
	            this.defeatedState = LevelDefeatedStateID.ReturnToWorldMap;
	        }
	    }
	    update_Defeat_ReturnToWorldMap() {
	        if (!this.stateDelay.going) {
	            this.data.TimesLost++;
	            LevelUtils.endLevel(this, EnumLevelEndStatus.LOSE);
	            this.data.TimesExitedWithoutEnd = 0;
	            SaveLoad.saveLevelStats(this.data.GetSaveDataObject(), this.ID);
	            Glob.deleteCurrentLevel = true;
	            Glob.request_LoadWorldMap();
	        }
	    }
	    static levelSaveFileExists(levelID) {
	        return SaveLoad.has(levelID.toString());
	    }
	    static getSaveFileName(levelID) {
	        return levelID + ".txt";
	    }
	    static getBackupSaveFileName(levelID) {
	        return levelID + "_BACKUP.txt";
	    }
	    static deleteSaveFileAndBackup(levelID) {
	        SaveLoad.clearLevelData(levelID);
	    }
	    static isSaveFileMapVersionCurrent(levelID) {
	        let saveFileMapVersion_IfSaveExists = this.getSaveFileMapVersion_IfSaveExists(levelID);
	        if (saveFileMapVersion_IfSaveExists >= 0 && saveFileMapVersion_IfSaveExists != this.getMostCurrentMapVersionNumber(levelID)) {
	            return false;
	        }
	        return true;
	    }
	    static getMostCurrentMapVersionNumber(levelID) {
	        return WorldMgr.ins().getLevelVo(levelID).cfg.MapVersion;
	    }
	    getHomeStatsSaveDataObject() {
	        if (!this.data.isHome) {
	            GuiMgr.errorMessage("Trying to save Home Stats, but this isn't a home level.");
	            return null;
	        }
	        if (this.data.HomeStats == null) {
	            this.data.HomeStats = new SL_HomeStats();
	        }
	        this.data.HomeStats.m_dragonPower = Thing.totalDragonPower;
	        let stat = Glob.map.setLandHealthStats();
	        this.data.HomeStats.m_unhealedLand = stat.unhealedCellCount;
	        this.data.HomeStats.m_healedLand = stat.healedCellCount;
	        this.data.HomeStats.m_fogTilesLeft = stat.foggedCellCount;
	        this.data.HomeStats.m_runningScore = this.points;
	        let best = Monster.setBestDragons();
	        this.data.HomeStats.m_bestDragon1 = best.bestDragon1;
	        this.data.HomeStats.m_bestDragon2 = best.bestDragon2;
	        this.data.HomeStats.m_bestDragon3 = best.bestDragon3;
	        this.data.HomeStats.m_starsEarned = this.data.GoalsCompleteInAllChains;
	        return this.data.HomeStats;
	    }
	    getSaveDataObject() {
	        if (!this.data.Saves) {
	            GuiMgr.errorMessage("Requesting Save this.data Object for level that does not save: " + this.data.cid);
	        }
	        let saveData_Level = new SL_Level();
	        saveData_Level.mapVersion = this.data.cfg.MapVersion;
	        saveData_Level.currentPoints = this.points;
	        saveData_Level.boardData = Glob.map.getSaveDataObject();
	        saveData_Level.drawnObjectsData = Thing.getSaveDataForAllDrawnObjects();
	        saveData_Level.cameraData = CameraMgr.getSaveDataObject();
	        saveData_Level.goals = [];
	        for (let allStarGoal of this.data.AllStarGoals) {
	            saveData_Level.goals.push(allStarGoal.GetSaveDataObject());
	        }
	        saveData_Level.playTimeData = this.playerTime.getSaveDataObject();
	        saveData_Level.rewardsSavedToFile = this.rewardsSavedToFile;
	        saveData_Level.levelComplete = this.levelComplete;
	        saveData_Level.timeRemaining = GGChallengeLevelController.ins().TimeLeftInSeconds;
	        saveData_Level.numTimePurchases = GGChallengeLevelController.ins().NumPurchasesMade;
	        return saveData_Level;
	    }
	    loadSaveFileIntoMemoryIfExists() {
	        SL_Level.currentLoadedData = Level.loadSaveFileWithID(this.ID);
	    }
	    static loadSaveFileWithID(id) {
	        return SaveLoad.loadLevelData(id);
	    }
	    static getSaveFileMapVersion_IfSaveExists(levelID) {
	        return SaveLoad.loadLevelVersion(levelID);
	    }
	    initWithSaveFileData() {
	        if (SL_Level.currentLoadedData != null) {
	            GGChallengeLevelController.ins().SetSavedData(SL_Level.currentLoadedData.timeRemaining, SL_Level.currentLoadedData.numTimePurchases);
	            this.points = SL_Level.currentLoadedData.currentPoints;
	            if (SL_Level.currentLoadedData.cameraData != null) {
	                CameraMgr.initFromSaveData(SL_Level.currentLoadedData.cameraData);
	            }
	            for (let goal of SL_Level.currentLoadedData.goals) {
	                this.tryInitLevelGoal(goal);
	            }
	            this.data.TryUpdateActiveGoalSetIfChainsExist();
	            this.playerTime = new Clock();
	            this.playerTime.initFromSaveData(SL_Level.currentLoadedData.playTimeData);
	            if (SL_Level.currentLoadedData.enemyDirector_exists) {
	            }
	            this.rewardsSavedToFile = SL_Level.currentLoadedData.rewardsSavedToFile;
	            this.levelComplete = SL_Level.currentLoadedData.levelComplete;
	        }
	        else {
	            GGChallengeLevelController.ins().resetData();
	        }
	    }
	    tryInitLevelGoal(goalData) {
	        if (this.data.AllGoalsIDMap != null && this.data.AllGoalsIDMap[goalData.m_localID]) {
	            this.data.AllGoalsIDMap[goalData.m_localID].InitFromSaveData(goalData);
	        }
	    }
	    allowGoalProgress() {
	        if (this.state == LevelStateID.Playing) {
	            return true;
	        }
	        if (this.state == LevelStateID.Complete && (this.completedState == LevelCompleteStateID.NONE || this.completedState == LevelCompleteStateID.PauseBeforeHealDeadLand)) {
	            return true;
	        }
	        return false;
	    }
	}
	Level.ID_LEVEL_HOME = 10058;
	Level.unlockedAnyCamps = false;

	class Cell extends Unit {
	    constructor() {
	        super();
	        this.isInitWall = false;
	        this.bind = false;
	        this.offGridMatchObjects = [];
	    }
	    get highlightedRed() {
	        return this.redHighlight != null && this.redHighlight.active;
	    }
	    get occupant() {
	        return this._occupant;
	    }
	    get occupied() {
	        return this._occupant != null;
	    }
	    get overlapOccupant() {
	        return this._overlapOccupant;
	    }
	    get overlapOccupied() {
	        return this._overlapOccupant != null;
	    }
	    get center() {
	        return this.transform.position;
	    }
	    get xIndex() {
	        return this._xIndex;
	    }
	    get yIndex() {
	        return this._yIndex;
	    }
	    get x() {
	        return this.transform.position.x;
	    }
	    get y() {
	        return this.transform.position.y;
	    }
	    get dead() {
	        return this.deathComponent && !this.deathComponent.destroyed;
	    }
	    get emptyAndAlive() {
	        return this._occupant == null && this._deathComponent == null;
	    }
	    get renderer() {
	        if (!this.sp)
	            return null;
	        let m = this.sp.getChildAt(0);
	        return m.meshRenderer;
	    }
	    get deathComponent() {
	        if (this._deathComponent == null) {
	            this._deathComponent = this.getComponent(CompFilledWithDeath);
	        }
	        return this._deathComponent;
	    }
	    initialize(xIndex, yIndex) {
	        this._xIndex = xIndex;
	        this._yIndex = yIndex;
	        let x = MapUtil.getWxL(xIndex, yIndex);
	        let y = MapUtil.getWyL(xIndex, yIndex);
	        let z = MapUtil.getCellZ(y);
	        this.transform.position = new Laya.Vector3(x, y, z);
	    }
	    bodyLoaded() {
	        super.bodyLoaded();
	        if (this.bind) {
	            this.initWall();
	        }
	    }
	    initWall(force = false) {
	        if (!force && this.isInitWall)
	            return;
	        if (!this.isBodyLoaded)
	            return;
	        let isAdd = false;
	        if (force) {
	            if (this._deathComponent) {
	                this._deathComponent.release();
	            }
	        }
	        this.clearWallSide();
	        if (!this.left || !this.down) {
	            if (!this.wall) {
	                this.wall = PrefMgr.get("CellSideBrownRockWinter");
	                let p = this.sp.getChildByName("Side");
	                p.addChild(this.wall);
	                if (!this.wall.sp) {
	                    this.wall.loadedHand = Laya.Handler.create(this, this.childLoaded);
	                }
	                isAdd = true;
	            }
	        }
	        if (!this.left) {
	            this.leftSide = PrefMgr.get(this.nid + "_L");
	            let tl = this.sp.getChildByName("TuftLeft");
	            tl.addChild(this.leftSide);
	            if (!this.leftSide.sp) {
	                this.leftSide.loadedHand = Laya.Handler.create(this, this.childLoaded);
	            }
	            isAdd = true;
	        }
	        if (!this.right) {
	            this.rightSide = PrefMgr.get(this.nid + "_R");
	            let tr = this.sp.getChildByName("TuftRight");
	            tr.addChild(this.rightSide);
	            if (!this.rightSide.sp) {
	                this.rightSide.loadedHand = Laya.Handler.create(this, this.childLoaded);
	            }
	            isAdd = true;
	        }
	        if (!this.up) {
	            this.upSide = PrefMgr.get(this.nid + "_U");
	            let tu = this.sp.getChildByName("TuftUp");
	            tu.addChild(this.upSide);
	            if (!this.upSide.sp) {
	                this.upSide.loadedHand = Laya.Handler.create(this, this.childLoaded);
	            }
	            isAdd = true;
	        }
	        if (!this.down) {
	            this.downSide = PrefMgr.get(this.nid + "_D");
	            let td = this.sp.getChildByName("TuftDown");
	            td.addChild(this.downSide);
	            if (!this.downSide.sp) {
	                this.downSide.loadedHand = Laya.Handler.create(this, this.childLoaded);
	            }
	            isAdd = true;
	        }
	        this.isInitWall = true;
	        if ((isAdd || force) && this.deathComponent) {
	            this.deathComponent.refreshMaterials();
	        }
	    }
	    clearWallSide() {
	        if (this.wall) {
	            this.wall.dispose();
	            this.wall = null;
	        }
	        if (this.leftSide) {
	            this.leftSide.dispose();
	            this.leftSide = null;
	        }
	        if (this.rightSide) {
	            this.rightSide.dispose();
	            this.rightSide = null;
	        }
	        if (this.downSide) {
	            this.downSide.dispose();
	            this.downSide = null;
	        }
	        if (this.upSide) {
	            this.upSide.dispose();
	            this.upSide = null;
	        }
	    }
	    release() {
	        super.release();
	        this.isInitWall = false;
	        this.bind = false;
	        if (this._deathComponent) {
	            this._deathComponent.release();
	            this._deathComponent = null;
	        }
	        this.clearWallSide();
	        this.left = this.right = this.down = this.up = null;
	    }
	    childLoaded() {
	        this.callLater(this.childLoadedLater);
	    }
	    childLoadedLater() {
	        if (this.isDispose)
	            return;
	        if (this.deathComponent) {
	            this.deathComponent.refreshMaterials();
	        }
	    }
	    onStart() {
	    }
	    canBeOccupiedBy(newOccupant) {
	        if (this.dead) {
	            return false;
	        }
	        if (this.isKeyhole && !this.isUnlocked && !CloudDungeon.fitsKeyhole(newOccupant, this)) {
	            return false;
	        }
	        if (this.occupied) {
	            return this.occupant == newOccupant;
	        }
	        return true;
	    }
	    canBeOverlapOccupiedBy(newOccupant) {
	        if (this.dead) {
	            return false;
	        }
	        if (this.isKeyhole && !this.isUnlocked && !CloudDungeon.fitsKeyhole(newOccupant, this)) {
	            return false;
	        }
	        if (this.occupied && this.occupant.cfg != newOccupant.cfg && !this.occupant.isValidInputCategoryMatch(newOccupant)) {
	            return false;
	        }
	        if (this.overlapOccupied) {
	            return this.overlapOccupant == newOccupant;
	        }
	        return true;
	    }
	    occupantsCanBePushedOutAndOccupiedBy(pusher) {
	        if (this.dead) {
	            return false;
	        }
	        if (this.isKeyhole && !this.isUnlocked) {
	            return false;
	        }
	        if (!this.occupied) {
	            return true;
	        }
	        if (this.occupant == pusher) {
	            return true;
	        }
	        return this.occupant.isInADraggableState();
	    }
	    setOccupant(thing) {
	        if (this._occupant != null) {
	            console.error("Trying to set the occupant of a cell that's already full.\nExisting occupant: " + this._occupant + "\nNew occupant: " + thing);
	            return false;
	        }
	        this._occupant = thing;
	        if (this.isKeyhole && !this.isUnlocked && CloudDungeon.fitsKeyhole(this.occupant, this) && !(this.pendingPlacementParticles != null)) {
	            this.pendingPlacementParticles = Globals.createFromPrefabAt("ParticleRoot_KeyholePendingMatch", new Laya.Vector3(this.x, this.y, 0));
	            if (this.keyObjectSilhoutte != null) {
	                this.keyObjectSilhoutte.validUnlockPending();
	            }
	        }
	        ArrayUtil.remove(Glob.cellLayer.emptyCells, this);
	        ArrayUtil.remove(Glob.cellLayer.emptyLivingCells, this);
	        thing.tryAddDeathComponents();
	        return true;
	    }
	    tryRemovePendingKeyholeParticles() {
	        if (this.pendingPlacementParticles != null) {
	            this.pendingPlacementParticles.dispose();
	            this.pendingPlacementParticles = null;
	        }
	        if (this.keyObjectSilhoutte) {
	            this.keyObjectSilhoutte.validUnlockPending_Ended();
	        }
	    }
	    setOverlapOccupant(thing) {
	        if (this._overlapOccupant != null) {
	            console.error("Trying to set the Overlap Occupant of a cell that's already got one.\nExisting Overlap Occupant: " + this._overlapOccupant + "\nNew Overlap Occupant: " + thing);
	            return false;
	        }
	        this._overlapOccupant = thing;
	        return true;
	    }
	    clearOccupant() {
	        let occupant = this._occupant;
	        this._occupant = null;
	        let layer = Glob.cellLayer;
	        if (layer.emptyCells.indexOf(this) < 0) {
	            layer.emptyCells.push(this);
	        }
	        if (layer.emptyLivingCells.indexOf(this) < 0 && !this.dead) {
	            layer.emptyLivingCells.push(this);
	        }
	        if (this.dead) {
	            this.deathComponent.instantHeal(Cell.pointMultiplier);
	            if (occupant != null) {
	                GoalMgr.ins().MatchOnDeadLand(occupant);
	            }
	        }
	        this.tryRemovePendingKeyholeParticles();
	    }
	    clearOverlapOccupant() {
	        this._overlapOccupant = null;
	        this.tryRemovePendingKeyholeParticles();
	    }
	    highlightRed() {
	        if (this.redHighlight == null) {
	            this.redHighlight = PrefMgr.get("Highlight_Red1x1");
	            this.redHighlight.transform.position = this.transform.position;
	        }
	        if (!this.redHighlight.active) {
	            this.redHighlight.active = false;
	        }
	    }
	    unhighlight() {
	        if (this.redHighlight != null && this.redHighlight.active) {
	            this.redHighlight.active = false;
	        }
	    }
	    clearOffGridMatchObjects() {
	        this.offGridMatchObjects.length = 0;
	    }
	    addOffGridMatchObject(obj) {
	        this.offGridMatchObjects.push(obj);
	    }
	    recursiveFindMatches(definition, matchPartners, requestor) {
	        if (this.occupied && (this.occupant.cfg == definition || requestor.isValidInputCategoryMatch(this.occupant)) && this.occupant.tryClaimForMatch(requestor)) {
	            matchPartners.push(this.occupant);
	            if (this.occupant.metaCell == null) {
	                console.log("ERROR: Found a match partner through a cell, but the partner's m_metaCell is null: " + this.occupant);
	            }
	            this.occupant.metaCell.findAvailableMatchesFor_Recursive(definition, matchPartners, requestor);
	        }
	    }
	    recursiveFindMatches_NoReservation(definition, matchPartners, requestor, cellsChecked) {
	        if (cellsChecked.indexOf(this) >= 0) {
	            return;
	        }
	        cellsChecked.push(this);
	        if (this.occupied && (this.occupant.cfg == definition || requestor.isValidInputCategoryMatch(this.occupant))) {
	            matchPartners.push(this.occupant);
	            if (this.occupant.metaCell == null) {
	                console.log("ERROR: Found a match partner through a cell, but the partner's m_metaCell is null: " + this.occupant);
	            }
	            this.occupant.metaCell.findAvailableMatchesFor_Recursive_NoReservation(definition, matchPartners, requestor, cellsChecked);
	        }
	    }
	    findAvailableMatchesFor_OffGrid(masterObject, matchPartners, requesterToIgnore) {
	        this.checkForOffGridMatchPartners(masterObject, matchPartners, requesterToIgnore);
	        if (this.left != null) {
	            this.left.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	        }
	        if (this.right != null) {
	            this.right.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	        }
	        if (this.up != null) {
	            this.up.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	        }
	        if (this.down != null) {
	            this.down.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	        }
	    }
	    recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore) {
	        if (this.checkForOffGridMatchPartners(masterObject, matchPartners, requesterToIgnore)) {
	            if (this.left != null) {
	                this.left.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	            }
	            if (this.right != null) {
	                this.right.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	            }
	            if (this.up != null) {
	                this.up.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	            }
	            if (this.down != null) {
	                this.down.recursiveFindMatches_OffGrid(masterObject, matchPartners, requesterToIgnore);
	            }
	        }
	    }
	    checkForOffGridMatchPartners(masterObject, matchPartners, requesterToIgnore) {
	        let result = false;
	        if (this.offGridMatchObjects.length == 0 || this.offGridMatchObjects[0].cfg != masterObject.cfg) {
	            return false;
	        }
	        for (let offGridMatchObject of this.offGridMatchObjects) {
	            if (!(offGridMatchObject == masterObject) && offGridMatchObject.tryClaimForMatch(requesterToIgnore)) {
	                matchPartners.push(offGridMatchObject);
	                result = true;
	            }
	        }
	        return result;
	    }
	    getSaveDataObject() {
	        let saveData_Cell = new SL_Cell();
	        let flag = this.deathComponent != null && this.deathComponent.deadEnoughToSave();
	        saveData_Cell.xIndex = this.xIndex;
	        saveData_Cell.yIndex = this.yIndex;
	        if (flag) {
	            saveData_Cell.exists_deathComponent = true;
	            saveData_Cell.deathSaveData = this.deathComponent.getSaveDataObject();
	        }
	        if (this.isKeyhole) {
	            saveData_Cell.isKeyhole = this.isKeyhole;
	            saveData_Cell.isUnlocked = this.isUnlocked;
	            saveData_Cell.keyedFogGroupIdName = FogGroupID[this.keyedFogGroupId];
	            saveData_Cell.keyObjectPrefabName = this.keyObjectDefinition.cid;
	        }
	        return saveData_Cell;
	    }
	    initFromLoadedData(loadedCellData) {
	        if (loadedCellData.exists_deathComponent) {
	            Glob.map.addDeathComponentToCell(this);
	            this.deathComponent.initFromSave(loadedCellData.deathSaveData, this);
	        }
	        if (loadedCellData.isKeyhole) {
	            this.isKeyhole = loadedCellData.isKeyhole;
	            this.isUnlocked = loadedCellData.isUnlocked;
	            this.keyedFogGroupId = FogGroupID[loadedCellData.keyedFogGroupIdName];
	            this.keyObjectDefinition = PropsCfg.get(loadedCellData.keyObjectPrefabName);
	        }
	    }
	    addDeadeningProgress(percentTowardDead, maxPossibleDeadLevel) {
	        if (!this.dead) {
	            this.deadeningProgressPercent += percentTowardDead;
	            if (this.deadeningProgressPercent >= 1) {
	                this.makeDead(MathUtil.randInt(1, maxPossibleDeadLevel));
	            }
	            else {
	                this.tryShowDeadeningMeter();
	            }
	        }
	    }
	    tryShowDeadeningMeter() {
	        if (this.deadeningMeterTimeOutTimer == null) {
	            this.deadeningMeterTimeOutTimer = new Clock(3);
	        }
	        else {
	            this.deadeningMeterTimeOutTimer.reset();
	        }
	    }
	    makeDead(deadLevel) {
	        if (deadLevel > DeadLevel.maxDeadLevel) {
	            GuiMgr.errorMessage("Trying to make cell dead in MakeDead() with dead level ( " + deadLevel + " that is higher than the maximum dead level of " + DeadLevel.maxDeadLevel);
	            deadLevel = DeadLevel.maxDeadLevel;
	        }
	        let component_FilledWithDeath = Glob.map.addDeathComponentToCell(this);
	        component_FilledWithDeath.initDeadLevel(deadLevel, this, true);
	        if (this.occupant != null) {
	            this.occupant.tryAddDeathComponents();
	        }
	        let offGridObjectsAboveMe = this.getOffGridObjectsAboveMe();
	        for (let item of offGridObjectsAboveMe) {
	            item.tryAddDeathComponents();
	        }
	        SoundMgr.ins().playSound("m33");
	        Tween.ShakeCamera_LandKilled();
	        Globals.createFromPrefabAt("ParticleRoot_TileDeadened", this.body.transform.position);
	        this.tryDestroyDeadeningMeter();
	        Glob.map.tryAddLevelDyingVFX();
	        if (this.isKeyhole && !this.isUnlocked && this.keyObjectSilhoutte != null) {
	            this.keyObjectSilhoutte.makeDead();
	        }
	        if (Glob.cellLayer.livingCells.length == 0) {
	            Glob.defeated();
	        }
	    }
	    tryDestroyDeadeningMeter() {
	    }
	    getOffGridObjectsAboveMe() {
	        let list = [];
	        for (let offGridObject of ThingList.offGridObjects) {
	            if (this.containsPoint(offGridObject.transform.position)) {
	                list.push(offGridObject);
	            }
	        }
	        return list;
	    }
	    containsPoint(position) {
	        let gx = MapUtil.getGx(position.x, position.y);
	        let gy = MapUtil.getGy(position.x, position.y);
	        if (gx < 0 || gy < 0) {
	            return false;
	        }
	        return this.xIndex == gx && this.yIndex == gy;
	    }
	    tryInstantHeal() {
	        if (this.dead) {
	            this.deathComponent.instantHeal(1);
	        }
	    }
	    tryInfiniteHeal() {
	        if (!this.dead) {
	            return false;
	        }
	        this.deathComponent.hitByInfiniteHeal();
	        return true;
	    }
	    tryInfiniteHealNeighbors() {
	        let flag = false;
	        if (this.left != null) {
	            flag = this.left.tryInfiniteHeal() || flag;
	        }
	        if (this.right != null) {
	            flag = this.right.tryInfiniteHeal() || flag;
	        }
	        if (this.up != null) {
	            flag = this.up.tryInfiniteHeal() || flag;
	        }
	        if (this.down != null) {
	            flag = this.down.tryInfiniteHeal() || flag;
	        }
	        return flag;
	    }
	    cellReturnedToLife() {
	        Glob.map.tryRemoveLevelDyingVFX();
	        ArrayUtil.remove(Glob.cellLayer.deadCells, this);
	        ArrayUtil.remove(Glob.cellLayer.outterRingDeadCells, this);
	        Glob.cellLayer.livingCells.push(this);
	        this._deathComponent = null;
	        if (Glob.cellLayer.deadCells.length == 0 && !CloudDungeon.isThereAnyCellWithFogAndDead()) {
	            GoalMgr.ins().AllLandHealed();
	            if (Glob.isCurrentLevelState(LevelStateID.Playing)) {
	                SoundMgr.ins().playSound("m63");
	            }
	        }
	        if (this.occupant != null) {
	            this.occupant.tryRemoveDeathComponents();
	        }
	        else {
	            Glob.cellLayer.emptyLivingCells.push(this);
	        }
	        if (this.isKeyhole && !this.isUnlocked && this.keyObjectSilhoutte != null) {
	            this.keyObjectSilhoutte.makeAlive();
	        }
	        let offGridObjectsAboveMe = this.getOffGridObjectsAboveMe();
	        for (let item of offGridObjectsAboveMe) {
	            item.tryRemoveDeathComponents();
	        }
	        SoundMgr.ins().playSound("m4");
	        GoalMgr.ins().HealLandCell();
	        this.cellReturnedToLife_NotifyNeighbor(this.left);
	        this.cellReturnedToLife_NotifyNeighbor(this.right);
	        this.cellReturnedToLife_NotifyNeighbor(this.up);
	        this.cellReturnedToLife_NotifyNeighbor(this.down);
	    }
	    cellReturnedToLife_NotifyNeighbor(neighbor) {
	        if (neighbor && neighbor.occupied && neighbor.occupant != this.occupant) {
	            neighbor.occupant.neighborCellJustRevived(this);
	        }
	    }
	}

	class CellLayer extends Laya.Sprite3D {
	    constructor() {
	        super();
	        this.isInit = false;
	        this.cells = [];
	        this.livingCells = [];
	        this.emptyCells = [];
	        this.emptyLivingCells = [];
	        this.deadCells = [];
	        this.allCells = [];
	        this.cameraPos = new Laya.Vector3();
	        Glob.cellLayer = this;
	    }
	    initData(data) {
	        if (this.isInit) {
	            this.dispose();
	        }
	        this.isInit = true;
	        this.mapData = data;
	        this.widthInCells = data.width;
	        this.heightInCells = data.height;
	        this.initCellArray();
	        Glob.map.loadBoardLayerFromData(MapTileLayerID.Ground, false);
	        if (Map.loadedFromSave) {
	            Glob.map.loadFromSave_DeathLayer();
	        }
	        for (let allCell of this.allCells) {
	            if (allCell.isKeyhole && !allCell.isUnlocked) {
	                ArrayUtil.remove(this.emptyCells, allCell);
	                ArrayUtil.remove(this.emptyLivingCells, allCell);
	            }
	        }
	    }
	    dispose() {
	        this.isInit = false;
	        this.removeCells();
	    }
	    initCellArray() {
	        this.cells = [];
	        for (let i = 0; i < this.widthInCells; i++) {
	            this.cells[i] = [];
	        }
	    }
	    creatGround(vo, x, y) {
	        let item = new Cell();
	        if (vo.prefab.indexOf("Cell_") >= 0) {
	            vo.prefab = "CellGrassLight";
	        }
	        item.setNid(vo.prefab);
	        item.initialize(x, y);
	        this.addChild(item);
	        this.cells[x][y] = item;
	        this.emptyCells.push(item);
	        this.emptyLivingCells.push(item);
	        this.livingCells.push(item);
	        this.allCells.push(item);
	        return item;
	    }
	    createDeath(tile, x, y) {
	        let cell = this.cells[x][y];
	        if (tile.isStartingCameraLocation) {
	            let wx = MapUtil.getWx(x, y);
	            let wy = MapUtil.getWy(x, y);
	            CameraMgr.centerAt(x, y);
	            Glob.map.cameraLocationFoundInMapFile = true;
	        }
	        else if (tile.deadLevelValue != null) {
	            let component_FilledWithDeath = Glob.map.addDeathComponentToCell(cell);
	            component_FilledWithDeath.initDeadLevel(tile.deadLevelValue, cell, true);
	        }
	    }
	    getCellGxy(gx, gy) {
	        let gxs = this.cells[gx];
	        if (gxs) {
	            return gxs[gy];
	        }
	        return null;
	    }
	    getCellStagePos(x, y) {
	        CameraMgr.toCameraPos(x, y, 0, this.cameraPos);
	        return this.getCellCameraPos(this.cameraPos.x, this.cameraPos.y);
	    }
	    getCellCameraPos(x, y) {
	        let gx = MapUtil.getGx(x, y);
	        let gy = MapUtil.getGy(x, y);
	        return this.getCellGxy(gx, gy);
	    }
	    getCellNear(nearWorldX, nearWorldY) {
	        let cell = this.getCellCameraPos(nearWorldX, nearWorldY);
	        if (cell) {
	            return cell;
	        }
	        let cell2;
	        let num = Number.MAX_VALUE;
	        for (let i = 0; i < this.cells.length; i++) {
	            for (let j = 0; j < this.cells[i].length; j++) {
	                cell2 = this.cells[i][j];
	                if (!cell2)
	                    continue;
	                let num2 = MathUtil.getDistance(nearWorldX, nearWorldY, cell2.center.x, cell2.center.y);
	                if (num2 < num) {
	                    num = num2;
	                    cell = cell2;
	                }
	            }
	        }
	        if (cell == null) {
	            console.log("Ended with a null cell in GetCellNear(), which should be impossible.");
	        }
	        return cell;
	    }
	    removeCells() {
	        for (let item of this.allCells) {
	            if (!item)
	                continue;
	            item.dispose();
	        }
	        this.cells.length = 0;
	        this.emptyCells.length = 0;
	        this.emptyLivingCells.length = 0;
	        this.livingCells.length = 0;
	        this.allCells.length = 0;
	        this.deadCells.length = 0;
	    }
	    boardTooFullFor(propId) {
	        return this.boardTooFullForCfg(PropsCfg.get(propId));
	    }
	    boardTooFullForCfg(def) {
	        if (!def.requiresCellPlacement) {
	            return false;
	        }
	        if (def.widthCell == 1 && def.heightCell == 1) {
	            let num = this.emptyLivingCells.filter((cell) => { return cell != null && (!cell.isKeyhole || cell.isUnlocked); }).length;
	            return num <= 2;
	        }
	        let num2 = def.widthCell * def.heightCell + 2;
	        if (this.emptyLivingCells.length < num2) {
	            return true;
	        }
	        let flag = false;
	        for (let i = 0; i < this.emptyLivingCells.length; i++) {
	            let cell2 = this.emptyLivingCells[i];
	            if (cell2.xIndex + def.widthCell > this.mapData.width || cell2.yIndex + def.heightCell > this.mapData.height) {
	                continue;
	            }
	            for (let j = cell2.xIndex; j < cell2.xIndex + def.widthCell; j++) {
	                for (let k = cell2.yIndex; k < cell2.yIndex + def.heightCell; k++) {
	                    let item = this.getCellGxy(j, k);
	                    if (item == null || !item.emptyAndAlive || (item.isKeyhole && !item.isUnlocked)) {
	                        flag = true;
	                        break;
	                    }
	                }
	                if (flag) {
	                    break;
	                }
	            }
	            if (!flag) {
	                return false;
	            }
	            flag = false;
	        }
	        return true;
	    }
	    setCellDirectionalLinks_PlusNeighbors(x, y) {
	        this.setCellDirectionalLinks(x, y, true);
	        let cells = this.cells;
	        if (Glob.map.inBounds(x + 1, y, true)) {
	            this.setCellDirectionalLinks(x + 1, y, true);
	        }
	        if (Glob.map.inBounds(x - 1, y, true)) {
	            this.setCellDirectionalLinks(x - 1, y, true);
	        }
	        if (Glob.map.inBounds(x, y + 1, true)) {
	            this.setCellDirectionalLinks(x, y + 1, true);
	        }
	        if (Glob.map.inBounds(x, y - 1, true)) {
	            this.setCellDirectionalLinks(x, y - 1, true);
	        }
	    }
	    setCellDirectionalLinks(x, y, force = false) {
	        let cells = this.cells;
	        let cell = this.cells[x][y];
	        if (cell) {
	            if (x > 0) {
	                cell.left = cells[x - 1][y];
	            }
	            if (x < this.widthInCells - 1) {
	                cell.right = cells[x + 1][y];
	            }
	            if (y != 0) {
	                cell.down = cells[x][y - 1];
	            }
	            if (y < this.heightInCells - 1) {
	                cell.up = cells[x][y + 1];
	            }
	            cell.bind = true;
	            cell.initWall(force);
	        }
	    }
	    initOutterRingDeadCells() {
	        this.outterRingCells = this.getOutterCellRing();
	        this.outterRingDeadCells = [];
	        for (let outterRingCell of this.outterRingCells) {
	            outterRingCell.isOutterRingCell = true;
	            if (outterRingCell.dead) {
	                this.outterRingDeadCells.push(outterRingCell);
	            }
	        }
	    }
	    getOutterCellRing() {
	        let list = [];
	        let i = 0;
	        let j = this.heightInCells - 1;
	        let cell = null;
	        for (; i < this.widthInCells - 1; i++) {
	            cell = this.getFirstCellInLine(i, j, 0, -1);
	            if (cell != null) {
	                list.push(cell);
	            }
	        }
	        while (j > 0) {
	            cell = this.getFirstCellInLine(i, j, -1, 0);
	            if (cell != null) {
	                if (cell.xIndex == i && cell.yIndex == j) {
	                    list.push(cell);
	                }
	                else if (list.indexOf(cell) < 0) {
	                    list.push(cell);
	                }
	            }
	            j--;
	        }
	        while (i > 0) {
	            cell = this.getFirstCellInLine(i, j, 0, 1);
	            if (cell != null) {
	                if (cell.xIndex == i && cell.yIndex == j) {
	                    list.push(cell);
	                }
	                else if (list.indexOf(cell) < 0) {
	                    list.push(cell);
	                }
	            }
	            i--;
	        }
	        for (; j < this.heightInCells - 1; j++) {
	            cell = this.getFirstCellInLine(i, j, 1, 0);
	            if (cell != null) {
	                if (cell.xIndex == i && cell.yIndex == j) {
	                    list.push(cell);
	                }
	                else if (list.indexOf(cell) < 0) {
	                    list.push(cell);
	                }
	            }
	        }
	        return list;
	    }
	    getFirstCellInLine(startXIndex, startYIndex, xDelta, yDelta) {
	        if (xDelta == 0 && yDelta == 0) {
	            GuiMgr.errorMessage("GetFirstCellInLine() does not want xDelta and yDelta to both be 0. That makes no sense!");
	            return null;
	        }
	        if (Math.abs(xDelta + yDelta) > 1) {
	            GuiMgr.errorMessage("GetFirstCellInLine() only allows xDelta or yDelta to be non-zero. Not both.");
	            return null;
	        }
	        let cell = null;
	        let num = startXIndex;
	        let num2 = startYIndex;
	        if (!Glob.map.inBounds(num, num2, false)) {
	            GuiMgr.errorMessage("The starting cell index given to GetFirstCellInLine() was out of bounds. This should never happen.");
	            return null;
	        }
	        while (cell == null && Glob.map.inBounds(num, num2, false)) {
	            cell = this.cells[num][num2];
	            if (cell != null) {
	                return cell;
	            }
	            num += xDelta;
	            num2 += yDelta;
	        }
	        return null;
	    }
	}

	class Fogmap {
	    constructor(startingFogLayer, groundLayer, levelOwner, cellsThatHadSaveDataWithLastLoad) {
	        this.fogAreas = {};
	        this.totalFog = 0;
	        this.levelOwner = levelOwner;
	        if (SL_Level.currentLoadedData && SL_Level.currentLoadedData.boardData) {
	            this.init_FromSavedFogMapData(SL_Level.currentLoadedData.boardData.fogMapData, cellsThatHadSaveDataWithLastLoad);
	        }
	        else {
	            this.init_LoadFromBaseData(startingFogLayer);
	        }
	    }
	    static get fogPrefabMap() {
	        if (this._fogPrefabMap == null) {
	            this._fogPrefabMap = {};
	            this._fogPrefabMap[GameActionTypeID.PremiumLand] = 10422;
	            this._fogPrefabMap[GameActionTypeID.PremiumLand2] = 10422;
	            this._fogPrefabMap[GameActionTypeID.PremiumLand3] = 10422;
	            this._fogPrefabMap[GameActionTypeID.DragonPower] = 10420;
	            this._fogPrefabMap[GameActionTypeID.CloudDungeon] = 10423;
	        }
	        return this._fogPrefabMap;
	    }
	    getFogAreaAt(tileX, tileY) {
	        if (tileX < 0 || tileY < 0 || tileX >= this.fogMap.length || tileY >= this.fogMap[tileX].length) {
	            return null;
	        }
	        let key = this.fogMap[tileX][tileY];
	        if (!this.fogAreas[key]) {
	            return null;
	        }
	        return this.fogAreas[key];
	    }
	    finishInitialization() {
	        this.createAllFog();
	        this.lockInAllFogAreaPositions();
	    }
	    init_FromSavedFogMapData(saveData, cellsThatHadSaveDataWithLastLoad) {
	        this.fogMap = saveData.fogGroupIDMap;
	        this.verifyLoadedFogMapData_RemoveOutdatedFog();
	        this.verifyLoadedFogMapData_AddNewFog(cellsThatHadSaveDataWithLastLoad);
	    }
	    verifyLoadedFogMapData_RemoveOutdatedFog() {
	        for (let i = 0; i < Glob.map.widthInCells; i++) {
	            for (let j = 0; j < Glob.map.heightInCells; j++) {
	                if (this.fogMap[i][j] != 0) {
	                    this.totalFog++;
	                }
	                let tiledTile = Glob.map.mapData.fog[i][j];
	                if ((tiledTile == null || tiledTile.fogGroup == FogGroupID.NONE) && this.fogMap[i][j] != 0) {
	                    this.fogMap[i][j] = FogGroupID.NONE;
	                    this.totalFog--;
	                }
	            }
	        }
	    }
	    verifyLoadedFogMapData_AddNewFog(cellsThatHadSaveDataWithLastLoad) {
	        for (let i = 0; i < Glob.map.widthInCells; i++) {
	            for (let j = 0; j < Glob.map.heightInCells; j++) {
	                if (!cellsThatHadSaveDataWithLastLoad[i][j] && Glob.map.mapData.ground[i][j] != null) {
	                    let tiledTile = Glob.map.mapData.fog[i][j];
	                    if (tiledTile == null) {
	                        this.fogMap[i][j] = FogGroupID.NONE;
	                    }
	                    else if (this.fogMap[i][j] != tiledTile.fogGroup) {
	                        this.fogMap[i][j] = tiledTile.fogGroup;
	                        this.totalFog++;
	                    }
	                }
	            }
	        }
	        let hashSet = {};
	        for (let k = 0; k < Glob.map.widthInCells; k++) {
	            for (let l = 0; l < Glob.map.heightInCells; l++) {
	                if (this.fogMap[k][l] != 0) {
	                    hashSet[this.fogMap[k][l]] = true;
	                }
	            }
	        }
	        for (let m = 0; m < Glob.map.widthInCells; m++) {
	            for (let n = 0; n < Glob.map.heightInCells; n++) {
	                if (cellsThatHadSaveDataWithLastLoad[m][n] || Glob.map.mapData.ground[m][n] != null) {
	                    continue;
	                }
	                let tiledTile2 = Glob.map.mapData.fog[m][n];
	                if (tiledTile2 != null && tiledTile2.fogGroup != 0 && this.fogMap[m][n] != tiledTile2.fogGroup && hashSet[tiledTile2.fogGroup]) {
	                    if (this.fogMap[m][n] == FogGroupID.NONE) {
	                        this.totalFog++;
	                    }
	                    this.fogMap[m][n] = tiledTile2.fogGroup;
	                }
	            }
	        }
	    }
	    init_LoadFromBaseData(startingFogLayer) {
	        this.fogMap = [];
	        for (let i = 0; i < Glob.map.widthInCells; i++) {
	            this.fogMap[i] = [];
	            for (let j = 0; j < Glob.map.heightInCells; j++) {
	                let tiledTile = startingFogLayer[i][j];
	                if (tiledTile && tiledTile.fogGroup) {
	                    this.fogMap[i][j] = tiledTile.fogGroup;
	                }
	                else {
	                    this.fogMap[i][j] = FogGroupID.NONE;
	                }
	                this.totalFog++;
	            }
	        }
	    }
	    createAllFog() {
	        if (this.totalFog <= 0) {
	            return;
	        }
	        let chanceOfSuccess = 30 / this.totalFog;
	        let flag = false;
	        let num = 0;
	        for (let i = 0; i < Glob.map.widthInCells; i++) {
	            for (let j = 0; j < Glob.map.heightInCells; j++) {
	                if (this.fogMap[i][j] != 0) {
	                    flag = (num < 30 && MathUtil.chance(chanceOfSuccess));
	                    this.createFogObjectAtIndex(i, j, flag);
	                    if (flag) {
	                        num++;
	                    }
	                }
	            }
	        }
	    }
	    addToFogAreas(xIndex, yIndex, fog) {
	        let fogGroupId = this.getFogGroupId(xIndex, yIndex);
	        if (fogGroupId == FogGroupID.NONE) {
	            return;
	        }
	        let flag = false;
	        if (!this.fogAreas[fogGroupId]) {
	            let drawnObject = Thing.create(this.getFogAreaPrefab(fogGroupId));
	            let component = drawnObject.getComponent(CompFogArea);
	            if (component == null) {
	                return;
	            }
	            flag = component.init(fogGroupId, this.levelOwner);
	            if (flag) {
	                this.fogAreas[fogGroupId] = component;
	            }
	            flag = true;
	        }
	        else {
	            flag = true;
	        }
	        if (flag) {
	            this.fogAreas[fogGroupId].add(fog);
	        }
	    }
	    getFogAreaPrefab(fogId) {
	        if (CloudDungeon.isCloudDungeonFogId(fogId)) {
	            return 10427;
	        }
	        return 10425;
	    }
	    lockInAllFogAreaPositions() {
	        for (let i in this.fogAreas) {
	            let value = this.fogAreas[i];
	            value.lockInFinalPosition();
	            value.findNeighborFogAreas();
	        }
	    }
	    setVisibilityOfFogUI() {
	        for (let i in this.fogAreas) {
	            let value = this.fogAreas[i];
	            if (CloudDungeon.isCloudDungeonFogId(value.fogGroup)) {
	                let cell = CloudDungeon.findKeyholeCellForFogId(value.fogGroup);
	                if (cell != null && cell.isUnlocked) {
	                    value.unfog();
	                }
	            }
	            value.setVisibilityBasedOnNeighbors();
	        }
	    }
	    createFogObjectAtIndex(xIndex, yIndex, animate) {
	        let fogGroupId = this.getFogGroupId(xIndex, yIndex);
	        let fogGoalId = this.getFogGoalId(fogGroupId);
	        let fogPrefabName = this.getFogPrefabName(fogGoalId);
	        let drawnObject = Thing.create(fogPrefabName);
	        drawnObject.cfg.isFog = true;
	        let x = MapUtil.getWxL(xIndex, yIndex);
	        let y = MapUtil.getWyL(xIndex, yIndex);
	        drawnObject.setRootPosition(x, y);
	        if (animate) {
	            let componentInChildren = drawnObject.baseAnimComponent;
	            if (componentInChildren != null) {
	                componentInChildren.enabled = true;
	            }
	        }
	        this.addToFogAreas(xIndex, yIndex, drawnObject);
	    }
	    verifyIndex(xIndex, yIndex) {
	        if (xIndex < 0 || xIndex >= this.fogMap.length) {
	            return false;
	        }
	        if (yIndex < 0 || yIndex >= this.fogMap[0].length) {
	            return false;
	        }
	        return true;
	    }
	    foggedAt(xIndex, yIndex) {
	        if (!this.verifyIndex(xIndex, yIndex)) {
	            return false;
	        }
	        return this.fogMap[xIndex][yIndex] != FogGroupID.NONE;
	    }
	    isClearAt(xIndex, yIndex) {
	        if (!this.verifyIndex(xIndex, yIndex)) {
	            return true;
	        }
	        return this.fogMap[xIndex][yIndex] == FogGroupID.NONE;
	    }
	    set(xIndex, yIndex, fogGroup) {
	        if (this.verifyIndex(xIndex, yIndex)) {
	            this.fogMap[xIndex][yIndex] = fogGroup;
	        }
	    }
	    getFogGroupId(x, y) {
	        return this.fogMap[x][y];
	    }
	    getFogGoalId(fogGroup) {
	        if (CloudDungeon.isCloudDungeonFogId(fogGroup)) {
	            return GameActionTypeID.CloudDungeon;
	        }
	        return this.levelOwner.fogGoals[fogGroup].acType;
	    }
	    getFogPrefabName(fogGoal) {
	        return Fogmap.fogPrefabMap[fogGoal];
	    }
	    getPremiumFogArea() {
	        for (let i in this.fogAreas) {
	            let value = this.fogAreas[i];
	            if (value.fogGoal.acType == GameActionTypeID.PremiumLand) {
	                return value;
	            }
	        }
	        return null;
	    }
	    getPremiumFogArea2() {
	        for (let i in this.fogAreas) {
	            let value = this.fogAreas[i];
	            if (value.fogGoal.acType == GameActionTypeID.PremiumLand2) {
	                return value;
	            }
	        }
	        return null;
	    }
	    getPremiumFogArea3() {
	        for (let i in this.fogAreas) {
	            let value = this.fogAreas[i];
	            if (value.fogGoal.acType == GameActionTypeID.PremiumLand3) {
	                return value;
	            }
	        }
	        return null;
	    }
	    getSaveDataObject() {
	        let saveData_FogMap = new SL_FogMap();
	        saveData_FogMap.fogGroupIDMap = this.fogMap;
	        return saveData_FogMap;
	    }
	}

	class MetaCell {
	    constructor(gx, gy, widthCell, heightCell) {
	        this.widthCell = -1;
	        this.heightCell = -1;
	        this.gx = -1;
	        this.gy = -1;
	        this.center = new Laya.Vector2();
	        this.gx = gx;
	        this.gy = gy;
	        this.widthCell = widthCell;
	        this.heightCell = heightCell;
	        this.initCells();
	        this.initPos();
	    }
	    get area() {
	        return this.widthCell * this.heightCell;
	    }
	    get x() {
	        return this.center.x;
	    }
	    get y() {
	        return this.center.y;
	    }
	    get anchor() {
	        return this.cells[0][0];
	    }
	    get oppositeAnchor() {
	        return this.cells[this.widthCell - 1][this.heightCell - 1];
	    }
	    get cellIndex_Right() {
	        return this.gx + this.widthCell - 1;
	    }
	    get dead() {
	        return this.hasAnyDeadCells();
	    }
	    get hasCell() {
	        return this.cells != null;
	    }
	    get occupied() {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (this.cells[i][j].occupied) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    initCells() {
	        let cell = null;
	        this.cells = [];
	        for (let i = 0; i < this.widthCell; i++) {
	            this.cells[i] = [];
	            for (let j = 0; j < this.heightCell; j++) {
	                cell = Glob.cellLayer.getCellGxy(this.gx + i, this.gy + j);
	                if (!cell) {
	                    console.error("MetaCell.initCells is null:", this.gx + i, this.gy + j, "init x y :", this.gx, this.gy);
	                }
	                this.cells[i][j] = cell;
	            }
	        }
	    }
	    initPos() {
	        let x = this.gx + this.widthCell / 2;
	        let y = this.gy + this.heightCell / 2;
	        this.center.setValue(MapUtil.getWx(x, y), MapUtil.getWy(x, y));
	    }
	    getOccupants() {
	        let list = null;
	        let cell = null;
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                cell = this.cells[i][j];
	                if (cell.occupied) {
	                    if (list == null) {
	                        list = [];
	                    }
	                    if (list.indexOf(cell.occupant) < 0) {
	                        list.push(cell.occupant);
	                    }
	                }
	            }
	        }
	        return list;
	    }
	    isOverlapObject(obj) {
	        return this.cells[0][0].overlapOccupant == obj;
	    }
	    isFullyOccupiedBy(obj, requireSizeParity) {
	        if (requireSizeParity && !this.verifySizesMatch(obj)) {
	            return false;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (this.cells[i][j].occupant != obj) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    setOccupant(thing) {
	        if (!this.verifySizesMatch(thing)) {
	            return;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                this.cells[i][j].setOccupant(thing);
	            }
	        }
	    }
	    setOverlapOccupant(thing) {
	        if (!this.verifySizesMatch(thing)) {
	            return;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                this.cells[i][j].setOverlapOccupant(thing);
	            }
	        }
	    }
	    canBeOccupiedBy(potentialOccupant) {
	        if (!this.verifySizesMatch(potentialOccupant, true)) {
	            return false;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (!this.cells[i][j].canBeOccupiedBy(potentialOccupant)) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    canBeOverlapOccupiedBy(potentialOverlapOccupant) {
	        if (!this.verifySizesMatch(potentialOverlapOccupant, true)) {
	            return false;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (!this.cells[i][j].canBeOverlapOccupiedBy(potentialOverlapOccupant)) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    occupantsCanBePushedOutAndOccupiedBy(pusher) {
	        if (!this.verifySizesMatch(pusher, true)) {
	            return false;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (!this.cells[i][j].occupantsCanBePushedOutAndOccupiedBy(pusher)) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    verifySizesMatch(obj, showErrorOnMismatch = true) {
	        if (obj.cfg.widthCell != this.widthCell || obj.cfg.heightCell != this.heightCell) {
	            if (showErrorOnMismatch) {
	                console.log("Size mismatch in MetaCell. Object size: [" + obj.cfg.widthCell + ", " + obj.cfg.heightCell + "] and MetaCell Size: [" + this.widthCell + ", " + this.heightCell + "]");
	            }
	            return false;
	        }
	        return true;
	    }
	    vacate(obj) {
	        this.verifySizesMatch(obj);
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                let cell = this.cells[i][j];
	                if (cell.occupant == obj) {
	                    cell.clearOccupant();
	                }
	                else if (cell.overlapOccupant == obj) {
	                    cell.clearOverlapOccupant();
	                }
	                else {
	                    console.log(obj.name + " is trying to vacate a MetaCell, but it's not there. Instead found a cell inside that contains: Occupant: " + cell.occupant + " and Overlap Occupant: " + cell.overlapOccupant);
	                }
	            }
	        }
	    }
	    unhighlightAnyRedCells() {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (this.cells[i][j].highlightedRed) {
	                    this.cells[i][j].unhighlight();
	                }
	            }
	        }
	    }
	    highlightRed_AnyObstructingCells(potentialOccupant) {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (!this.cells[i][j].canBeOccupiedBy(potentialOccupant)) {
	                    this.cells[i][j].highlightRed();
	                }
	            }
	        }
	    }
	    meetsRequirements(allowedToHaveOccupiedCells, allowedToHaveDeadCells, allowStickyCells) {
	        if (allowedToHaveOccupiedCells && allowedToHaveDeadCells && allowStickyCells) {
	            return true;
	        }
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (!allowedToHaveOccupiedCells && this.cells[i][j].occupied) {
	                    return false;
	                }
	                if (!allowedToHaveDeadCells && this.cells[i][j].dead) {
	                    return false;
	                }
	                if (!allowStickyCells && this.cells[i][j].isSticky) {
	                    return false;
	                }
	                if (this.cells[i][j].isKeyhole && !this.cells[i][j].isUnlocked) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    findAvailableMatchesFor_Recursive(definition, matchPartners, requesterToIgnore) {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                let cell = this.cells[i][j];
	                if (i == 0 && cell.left != null) {
	                    cell.left.recursiveFindMatches(definition, matchPartners, requesterToIgnore);
	                }
	                if (i == this.widthCell - 1 && cell.right != null) {
	                    cell.right.recursiveFindMatches(definition, matchPartners, requesterToIgnore);
	                }
	                if (j == 0 && cell.down != null) {
	                    cell.down.recursiveFindMatches(definition, matchPartners, requesterToIgnore);
	                }
	                if (j == this.heightCell - 1 && cell.up != null) {
	                    cell.up.recursiveFindMatches(definition, matchPartners, requesterToIgnore);
	                }
	            }
	        }
	    }
	    findAvailableMatchesFor_Recursive_NoReservation(definition, matchPartners, requesterToIgnore, cellsChecked) {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                let cell = this.cells[i][j];
	                if (i == 0 && cell.left != null) {
	                    cell.left.recursiveFindMatches_NoReservation(definition, matchPartners, requesterToIgnore, cellsChecked);
	                }
	                if (i == this.widthCell - 1 && cell.right != null) {
	                    cell.right.recursiveFindMatches_NoReservation(definition, matchPartners, requesterToIgnore, cellsChecked);
	                }
	                if (j == 0 && cell.down != null) {
	                    cell.down.recursiveFindMatches_NoReservation(definition, matchPartners, requesterToIgnore, cellsChecked);
	                }
	                if (j == this.heightCell - 1 && cell.up != null) {
	                    cell.up.recursiveFindMatches_NoReservation(definition, matchPartners, requesterToIgnore, cellsChecked);
	                }
	            }
	        }
	    }
	    sharesXorYOverlap(compareTo) {
	        let anchor = this.anchor;
	        let oppositeAnchor = this.oppositeAnchor;
	        if (anchor.xIndex == compareTo.anchor.xIndex || oppositeAnchor.xIndex == compareTo.oppositeAnchor.xIndex || anchor.yIndex == compareTo.anchor.yIndex || oppositeAnchor.yIndex == compareTo.oppositeAnchor.yIndex) {
	            return true;
	        }
	        if (anchor.xIndex > compareTo.anchor.xIndex && anchor.xIndex < compareTo.oppositeAnchor.xIndex) {
	            return true;
	        }
	        if (oppositeAnchor.xIndex > compareTo.anchor.xIndex && oppositeAnchor.xIndex < compareTo.oppositeAnchor.xIndex) {
	            return true;
	        }
	        if (anchor.yIndex > compareTo.anchor.yIndex && anchor.yIndex < compareTo.oppositeAnchor.yIndex) {
	            return true;
	        }
	        if (oppositeAnchor.yIndex > compareTo.anchor.yIndex && oppositeAnchor.yIndex < compareTo.oppositeAnchor.yIndex) {
	            return true;
	        }
	        return false;
	    }
	    getCellSeparationInCellRings(otherCell) {
	        let gx = MapUtil.getGx(this.x, this.y, false);
	        let gy = MapUtil.getGy(this.x, this.y, false);
	        let ogx = MapUtil.getGx(otherCell.x, otherCell.y, false);
	        let ogy = MapUtil.getGy(otherCell.x, otherCell.y, false);
	        let value = gx - ogx;
	        let value2 = gy - ogy;
	        value = Math.abs(value);
	        value2 = Math.abs(value2);
	        return Math.max(value, value2);
	    }
	    isCloserToInCellRingCount(otherCell, compareTo) {
	        let cellSeparationInCellRings = this.getCellSeparationInCellRings(compareTo);
	        let cellSeparationInCellRings2 = otherCell.getCellSeparationInCellRings(compareTo);
	        return cellSeparationInCellRings + 0.001 < cellSeparationInCellRings2;
	    }
	    getAverageDeathLevel() {
	        let num = 0;
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (this.cells[i][j].dead) {
	                    num += this.cells[i][j].deathComponent.deadLevel.level;
	                }
	            }
	        }
	        let flag = num > 0;
	        num = num / (this.widthCell * this.heightCell) >> 0;
	        if (num == 0 && flag) {
	            num = 1;
	        }
	        return num;
	    }
	    hasAnyDeadCells() {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                if (this.cells[i][j].dead) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    equals(otherMetaCell) {
	        if (otherMetaCell == null) {
	            return false;
	        }
	        return otherMetaCell.widthCell == this.widthCell && otherMetaCell.heightCell == this.heightCell && otherMetaCell.gx == this.gx && otherMetaCell.gy == this.gy;
	    }
	    overlapsLeftwardOn(otherMetaCell) {
	        if (otherMetaCell == null) {
	            return true;
	        }
	        if (this.gx == otherMetaCell.gx && this.widthCell == otherMetaCell.widthCell) {
	            return true;
	        }
	        if (this.cellIndex_Right < otherMetaCell.cellIndex_Right) {
	            return true;
	        }
	        return false;
	    }
	}

	class ThingLayer extends Laya.Sprite3D {
	    constructor() {
	        super();
	        this.isInit = false;
	        Glob.thingLayer = this;
	    }
	    initData(data) {
	        if (this.isInit) {
	            this.dispose();
	        }
	        this.mapData = data;
	        this.isInit = true;
	    }
	    dispose() {
	        this.isInit = false;
	    }
	    create(cfg) {
	        let thing;
	        let propId = cfg.cid;
	        if (propId < 50000) {
	            thing = new Thing();
	        }
	        else if (propId < 70000) {
	            thing = new Monster();
	        }
	        else {
	            thing = new Enemy();
	        }
	        thing.setCid(propId);
	        this.addChild(thing);
	        return thing;
	    }
	    createEntities(vo, x, y) {
	        try {
	            let cfg = PropsCfg.get(vo.prop);
	            if (Glob.map.ownerLevel.data.EverCompleted() && cfg.winProxyPrefab) {
	                cfg = PropsCfg.get(cfg.winProxyPrefab);
	            }
	            let drawnObject;
	            let target = new MetaCell(x, y, cfg.widthCell, cfg.heightCell);
	            let anchor = target.anchor;
	            let tiledTile = this.mapData.keyholes[anchor.xIndex][anchor.yIndex];
	            if (tiledTile != null) {
	                CloudDungeon.makeCellKeyhole(target, tiledTile.fogGroup, cfg);
	            }
	            else {
	                drawnObject = cfg.createInMetaCell(target, true, true);
	            }
	            if (drawnObject) {
	                drawnObject.makeImmuneToDeathOnCreation = false;
	            }
	        }
	        catch (e) {
	            GuiMgr.errorMessage(e, "Error loading cell Entity (tile GID: " + vo.id + ") from XML in level: " + Glob.map.ownerLevel.ID);
	        }
	    }
	}

	class Map extends Laya.Sprite3D {
	    constructor() {
	        super();
	        this.levelEggPrefabNames = [];
	        Glob.map = this;
	        this.init();
	    }
	    static get loadedFromSave() {
	        return SL_Level.currentLoadedData != null;
	    }
	    get boardTooFullForBeingToMakeNewObjects() {
	        return this.cellLayer.emptyLivingCells.length <= 5;
	    }
	    get boardTooFullForBeingToHarvest() {
	        return this.cellLayer.emptyLivingCells.length <= 3;
	    }
	    get playObjectAppearAnimsOnLoad() {
	        return this.totalCellCount <= 150;
	    }
	    init() {
	        this.cellLayer = new CellLayer();
	        this.cellLayer.transform.localPosition = Vector3.ZERO;
	        this.addChild(this.cellLayer);
	        this.thingLayer = new ThingLayer();
	        this.addChild(this.thingLayer);
	    }
	    addParticle(sp) {
	        this.particleLayer.addChild(sp);
	    }
	    get particleLayer() {
	        return this;
	    }
	    loadNewBoard(levelOwner, mapData) {
	        this.ownerLevel = levelOwner;
	        this.mapData = mapData;
	        this.widthInCells = mapData.width;
	        this.heightInCells = mapData.height;
	        this.totalCellCount = this.widthInCells * this.heightInCells;
	        this.surveySavedCells();
	        this.fogMap = new Fogmap(this.mapData.fog, this.mapData.ground, levelOwner, this.cellsThatHadSaveDataWithLastLoad);
	        this.fogMap.finishInitialization();
	        this.lockInBounds();
	        CameraMgr.bounds = this.bounds;
	        this.cellLayer.initData(mapData);
	        this.thingLayer.initData(mapData);
	        this.loadBoardLayerFromData(MapTileLayerID.Death, true);
	        this.gatherEggDataFromMapEntitiesLayer();
	        if (Map.loadedFromSave) {
	            this.loadFromSave_EntitiesLayer();
	        }
	        this.loadBoardLayerFromData(MapTileLayerID.Entities, true);
	        this.fogMap.setVisibilityOfFogUI();
	        this.setAllCellDirectionalLinks();
	        this.cellLayer.initOutterRingDeadCells();
	        this._initialHealedCellCount = this.getHealedCellCount();
	        Laya.timer.frameOnce(2, this, this.setCameraPositionIfNecessary);
	    }
	    get widthCell() {
	        return this.mapData.width;
	    }
	    get heightCell() {
	        return this.mapData.height;
	    }
	    get centerX() {
	        return this.bounds.getCenter().x;
	    }
	    get centerY() {
	        return this.bounds.getCenter().y;
	    }
	    setCameraPositionIfNecessary() {
	        if (Map.loadedFromSave) {
	            return;
	        }
	        let cfg = this.ownerLevel.data.cfg;
	        if (cfg.HasStartCameraVars) {
	            CameraMgr.centerAt(-cfg.StartCameraVars.x, cfg.StartCameraVars.y);
	            let num = cfg.StartCameraVars.z;
	            if (GuiMgr.aspect4x3) {
	                num = cfg.StartZoom4x3Override <= 0 ? cfg.StartZoom4x3Override : (num * 1.267);
	            }
	            num *= 2.131;
	            CameraMgr.camera.orthographicVerticalSize = num;
	            Glob.scene.setWheelS(num);
	        }
	        else if (!this.cameraLocationFoundInMapFile) {
	            let wx = MapUtil.getWx(0, 0);
	            let wy = MapUtil.getWy(0, 0);
	            CameraMgr.centerAt(this.centerX + wx, this.centerY + wy);
	        }
	    }
	    lockInBounds() {
	        let x = MapUtil.getWx(0, this.heightCell);
	        let y = MapUtil.getWy(0, this.heightCell);
	        let x2 = MapUtil.getWx(this.widthCell, this.heightCell);
	        let y2 = MapUtil.getWy(this.widthCell, this.heightCell);
	        let x3 = MapUtil.getWx(this.widthCell, 0);
	        let y3 = MapUtil.getWy(this.widthCell, 0);
	        let x4 = MapUtil.getWx(0, 0);
	        let y4 = MapUtil.getWy(0, 0);
	        let num = x3 - x;
	        let num2 = y2 - y4;
	        let min = new Laya.Vector3(x3, y4, 0);
	        let max = new Laya.Vector3(x, y2, 999999);
	        this.bounds = new Laya.Bounds(min, max);
	        let num3 = 3;
	        let x5 = MapUtil.getWx(-num3, this.heightCell + num3);
	        let y5 = MapUtil.getWy(-num3, this.heightCell + num3);
	        let x6 = MapUtil.getWx(this.widthCell + num3, this.heightCell + num3);
	        let y6 = MapUtil.getWy(this.widthCell + num3, this.heightCell + num3);
	        let x7 = MapUtil.getWx(this.widthCell + num3, -num3);
	        let y7 = MapUtil.getWy(this.widthCell + num3, -num3);
	        let x8 = MapUtil.getWx(-num3, -num3);
	        let y8 = MapUtil.getWy(-num3, -num3);
	        num = x7 - x5;
	        num2 = y6 - y8;
	        min = new Laya.Vector3(x7, y8, 0);
	        max = new Laya.Vector3(x5, y6, 999999);
	        this.boundsWideForOffGridObjects = new Laya.Bounds(min, max);
	    }
	    inWideBounds_WorldSpace(x, y) {
	        return GameUtil.boundsContains(this.boundsWideForOffGridObjects, x, y);
	    }
	    inBounds(gx, gy, checkNull = false) {
	        gx = gx >> 0;
	        gy = gy >> 0;
	        if (gx < 0 || gx >= this.widthCell) {
	            return false;
	        }
	        if (gy < 0 || gy >= this.heightCell) {
	            return false;
	        }
	        if (checkNull && this.cellLayer.getCellGxy(gx, gy) == null) {
	            return false;
	        }
	        return true;
	    }
	    inBoundsBy(cx, cy, checkNull = false) {
	        let gx = MapUtil.getGx(cx, cy, false);
	        let gy = MapUtil.getGy(cx, cy, false);
	        let r = this.inBounds(gx, gy, checkNull);
	        return r;
	    }
	    wouldMetaCellBeOutOfBounds_OrOverNullCell(boardX, boardY, metaCellWidth, metaCellHeight, errorType) {
	        if (boardX >= this.widthCell || boardY >= this.heightCell || boardX < 0 || boardY < 0) {
	            if (errorType == OOBErrorTypeID.ShowIfLowerLeftAnchorIsOOB || errorType == OOBErrorTypeID.ShowIfAnyOOB) {
	                console.log("MetaCell would be out of bounds: [" + boardX + ", " + boardY + "]   :(");
	            }
	            return true;
	        }
	        if (boardX + metaCellWidth - 1 >= this.widthCell || boardY + metaCellHeight - 1 >= this.heightCell) {
	            if (errorType == OOBErrorTypeID.ShowIfAnyOOB) {
	                console.log("MetaCell would extend over the edge of the board. Lower left of MetaCell cell: [" + boardX + ", " + boardY + "] with dimensions " + metaCellWidth + " x " + metaCellHeight);
	            }
	            return true;
	        }
	        let errorIfNull = errorType == OOBErrorTypeID.ShowIfOverNullCell || errorType == OOBErrorTypeID.ShowIfAnyOOB;
	        if (this.wouldMetaCellBeOverNullCell(boardX, boardY, metaCellWidth, metaCellHeight, errorIfNull)) {
	            return true;
	        }
	        return false;
	    }
	    wouldMetaCellBeOverNullCell(boardX, boardY, metaCellWidth, metaCellHeight, errorIfNull) {
	        for (let i = boardX; i < boardX + metaCellWidth; i++) {
	            for (let j = boardY; j < boardY + metaCellHeight; j++) {
	                if (this.cellLayer.getCellGxy(i, j) == null) {
	                    if (errorIfNull) {
	                        console.log("MetaCell would be over a null cell inside the board at: [" + i + ", " + j + "]   :(");
	                    }
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    getMetaCell(worldX, worldY, metaWidth, metaHeight, errorIfOverNullCell = false) {
	        let gx = MapUtil.getGx(worldX, worldY, false);
	        let gy = MapUtil.getGy(worldX, worldY, false);
	        let num = this.getLowerLeftMetaCellCornerIndex(gx, metaWidth);
	        let num2 = this.getLowerLeftMetaCellCornerIndex(gy, metaHeight);
	        if (num < 0) {
	            num = 0;
	        }
	        else if (num + metaWidth > this.widthCell) {
	            num = this.widthCell - metaWidth;
	        }
	        if (num2 < 0) {
	            num2 = 0;
	        }
	        else if (num2 + metaHeight > this.heightCell) {
	            num2 = this.heightCell - metaHeight;
	        }
	        if (this.wouldMetaCellBeOverNullCell(num, num2, metaWidth, metaHeight, false)) {
	            if (errorIfOverNullCell) {
	                Glob.recordLog("Tried to get a centered MetaCell centered at (" + worldX + ", " + worldY + ") but it was over a null cell.");
	            }
	            let wx = MapUtil.getWxL(num, num2);
	            let wy = MapUtil.getWyL(num, num2);
	            return this.getMetaCellNear(wx, wy, 1, 1, true, -1, metaWidth, metaHeight, CellProximitySearchTypeID.PreferCloser, CellAdjacencySearchTypeID.AllowAll, true, true, true);
	        }
	        return new MetaCell(num, num2, metaWidth, metaHeight);
	    }
	    getMetaCell_WithLowerLeftIndex(lowerLeftXIndex, lowerLeftYIndex, metaWidth, metaHeight, errorType) {
	        if (this.wouldMetaCellBeOutOfBounds_OrOverNullCell(lowerLeftXIndex, lowerLeftYIndex, metaWidth, metaHeight, errorType)) {
	            return null;
	        }
	        return new MetaCell(lowerLeftXIndex, lowerLeftYIndex, metaWidth, metaHeight);
	    }
	    getMetaCellNear(worldX, worldY, innerCellWidth, innerCellHeight, allowOverlapOfCenter, maxSearchCellRadius, metaWidth, metaHeight, searchType, adjacencyPreference, allowDeadCells, allowOccupiedCells, allowStickyCells) {
	        if (innerCellWidth < 1) {
	            innerCellWidth = 1;
	            console.log("innerCellWidth passed in as less than 1. 1 is minimum allowed. If you want to search from the middle, just set radius to 0.");
	        }
	        if (innerCellHeight < 1) {
	            innerCellHeight = 1;
	            console.log("innerCellHeight passed in as less than 1. 1 is minimum allowed. If you want to search from the middle, just set radius to 0.");
	        }
	        let list = [];
	        let cellNear = this.cellLayer.getCellNear(worldX, worldY);
	        if (maxSearchCellRadius < 0) {
	            maxSearchCellRadius = this.maxCellCountToEdgeOfBoardFrom(cellNear);
	        }
	        for (let i = 0; i <= maxSearchCellRadius; i++) {
	            let metaCellRing = this.getMetaCellRing(cellNear, innerCellWidth, innerCellHeight, allowOverlapOfCenter, i, metaWidth, metaHeight, allowOccupiedCells, allowDeadCells, allowStickyCells);
	            if (metaCellRing.length == 0) {
	                continue;
	            }
	            switch (searchType) {
	                case CellProximitySearchTypeID.PreferCloser:
	                    break;
	                case CellProximitySearchTypeID.RandomFromAll:
	                    list = list.concat(metaCellRing);
	                    continue;
	                default:
	                    console.log("In Board::GetEmptyMetaCellNear(), encountered an unhandled search type: " + searchType);
	                    continue;
	            }
	            list = metaCellRing;
	            break;
	        }
	        if (adjacencyPreference == CellAdjacencySearchTypeID.PreferAdjacent) {
	            let listWithRemovedNonAdjacentCells = this.getListWithRemovedNonAdjacentCells(list, new MetaCell(cellNear.xIndex, cellNear.yIndex, innerCellWidth, innerCellHeight));
	            if (listWithRemovedNonAdjacentCells.length != 0) {
	                list = listWithRemovedNonAdjacentCells;
	            }
	        }
	        if (list.length == 0) {
	            return null;
	        }
	        return MathUtil.randElement(list);
	    }
	    getMetaCellsWithOccupantOfType(defToMatch, allowDeadCells = false) {
	        let list = [];
	        for (let livingCell of this.cellLayer.livingCells) {
	            if (livingCell.occupied && livingCell.occupant.cfg == defToMatch && livingCell.occupant.metaCell.anchor == livingCell) {
	                list.push(livingCell.occupant.metaCell);
	            }
	        }
	        if (allowDeadCells) {
	            for (let deadCell of this.cellLayer.deadCells) {
	                if (deadCell.occupied && deadCell.occupant.cfg == defToMatch && deadCell.occupant.metaCell.anchor == deadCell) {
	                    list.push(deadCell.occupant.metaCell);
	                }
	            }
	            return list;
	        }
	        return list;
	    }
	    getMetaCellsWithOccupantOfSameChainAs(chain, chainIndexToBiasToward, allowDeadCells = false) {
	        let list = [];
	        for (let livingCell of this.cellLayer.livingCells) {
	            if (livingCell.occupied && livingCell.occupant.cfg.hasChain && livingCell.occupant.metaCell.anchor == livingCell && livingCell.occupant.cfg.englishChainName == chain) {
	                list.push(livingCell.occupant.metaCell);
	            }
	        }
	        if (allowDeadCells) {
	            for (let deadCell of this.cellLayer.deadCells) {
	                if (deadCell.occupied && deadCell.occupant.cfg.hasChain && deadCell.occupant.metaCell.anchor == deadCell && deadCell.occupant.cfg.englishChainName == chain) {
	                    list.push(deadCell.occupant.metaCell);
	                }
	            }
	        }
	        if (chainIndexToBiasToward >= 0 && list.length > 0) {
	            let num = MathUtil.INT_MAX_VALUE;
	            for (let item of list) {
	                let value = item.anchor.occupant.cfg.chainPosition - chainIndexToBiasToward;
	                value = Math.abs(value);
	                if (value < num) {
	                    num = value;
	                }
	            }
	            let list2 = [];
	            for (let item2 of list) {
	                let value = item2.anchor.occupant.cfg.chainPosition - chainIndexToBiasToward;
	                value = Math.abs(value);
	                if (value <= num) {
	                    list2.push(item2);
	                }
	            }
	            if (list2.length == 0) {
	                console.log("Ended up with 0 meta cells in list:closestMetaCellsToBias.");
	            }
	            else {
	                list = list2;
	            }
	        }
	        return list;
	    }
	    getLowerLeftMetaCellCornerIndex(metaCellCenterCoordinate, dimensionSizeInCells) {
	        if (dimensionSizeInCells % 2 == 0) {
	            metaCellCenterCoordinate -= ((dimensionSizeInCells - 2) / 2);
	            let remainder = MathUtil.getRemainder(metaCellCenterCoordinate);
	            if (remainder > 0.5) {
	                return metaCellCenterCoordinate >> 0;
	            }
	            return (metaCellCenterCoordinate - 1) >> 0;
	        }
	        metaCellCenterCoordinate -= ((dimensionSizeInCells - 1) / 2);
	        return metaCellCenterCoordinate >> 0;
	    }
	    maxCellCountToEdgeOfBoardFrom(start) {
	        let a = Math.max(start.xIndex, this.widthCell - start.xIndex);
	        let b = Math.max(start.yIndex, this.heightCell - start.yIndex);
	        return Math.max(a, b);
	    }
	    getMetaCellRing(lowerLeftAnchor, anchorWidth, anchorHeight, allowOverlapOfCenter, radius, metaWidth, metaHeight, allowOccupiedCells, allowDeadCells, allowStickyCells) {
	        if (anchorWidth < 1) {
	            anchorWidth = 1;
	            console.log("anchorWidth passed in as less than 1. 1 is minimum allowed. If you want to search from the middle, just set radius to 0.");
	        }
	        if (anchorHeight < 1) {
	            anchorHeight = 1;
	            console.log("anchorHeight passed in as less than 1. 1 is minimum allowed. If you want to search from the middle, just set radius to 0.");
	        }
	        let list = [];
	        if (radius <= 0) {
	            let metaCell_WithLowerLeftIndex = this.getMetaCell_WithLowerLeftIndex(lowerLeftAnchor.xIndex, lowerLeftAnchor.yIndex, metaWidth, metaHeight, OOBErrorTypeID.ShowIfLowerLeftAnchorIsOOB);
	            if (metaCell_WithLowerLeftIndex != null && metaCell_WithLowerLeftIndex.meetsRequirements(allowOccupiedCells, allowDeadCells, allowStickyCells)) {
	                list.push(metaCell_WithLowerLeftIndex);
	            }
	            return list;
	        }
	        let num = allowOverlapOfCenter ? 1 : metaWidth;
	        let num2 = allowOverlapOfCenter ? 1 : metaHeight;
	        let num3 = lowerLeftAnchor.xIndex - radius - (num - 1);
	        let num4 = lowerLeftAnchor.xIndex + (anchorWidth - 1) + radius;
	        let num5 = lowerLeftAnchor.yIndex - radius - (num2 - 1);
	        let num6 = lowerLeftAnchor.yIndex + (anchorHeight - 1) + radius;
	        let i = num3;
	        let j = num6;
	        for (; i < num4; i++) {
	            let metaCell_WithLowerLeftIndex = this.getMetaCell_WithLowerLeftIndex(i, j, metaWidth, metaHeight, OOBErrorTypeID.SuppressErrors);
	            if (metaCell_WithLowerLeftIndex != null && metaCell_WithLowerLeftIndex.meetsRequirements(allowOccupiedCells, allowDeadCells, allowStickyCells)) {
	                list.push(metaCell_WithLowerLeftIndex);
	            }
	        }
	        while (j > num5) {
	            let metaCell_WithLowerLeftIndex = this.getMetaCell_WithLowerLeftIndex(i, j, metaWidth, metaHeight, OOBErrorTypeID.SuppressErrors);
	            if (metaCell_WithLowerLeftIndex != null && metaCell_WithLowerLeftIndex.meetsRequirements(allowOccupiedCells, allowDeadCells, allowStickyCells)) {
	                list.push(metaCell_WithLowerLeftIndex);
	            }
	            j--;
	        }
	        while (i > num3) {
	            let metaCell_WithLowerLeftIndex = this.getMetaCell_WithLowerLeftIndex(i, j, metaWidth, metaHeight, OOBErrorTypeID.SuppressErrors);
	            if (metaCell_WithLowerLeftIndex != null && metaCell_WithLowerLeftIndex.meetsRequirements(allowOccupiedCells, allowDeadCells, allowStickyCells)) {
	                list.push(metaCell_WithLowerLeftIndex);
	            }
	            i--;
	        }
	        for (; j < num6; j++) {
	            let metaCell_WithLowerLeftIndex = this.getMetaCell_WithLowerLeftIndex(i, j, metaWidth, metaHeight, OOBErrorTypeID.SuppressErrors);
	            if (metaCell_WithLowerLeftIndex != null && metaCell_WithLowerLeftIndex.meetsRequirements(allowOccupiedCells, allowDeadCells, allowStickyCells)) {
	                list.push(metaCell_WithLowerLeftIndex);
	            }
	        }
	        return list;
	    }
	    isAllLandHealed_ExcludingFoggedPremium() {
	        if (this.cellLayer.deadCells.length != 0) {
	            return false;
	        }
	        for (let key in this.fogMap.fogAreas) {
	            let value = this.fogMap.fogAreas[key];
	            if (!value.isAnyPremiumType()) {
	                return false;
	            }
	        }
	        return true;
	    }
	    getListWithRemovedNonAdjacentCells(metaCells, compareTo) {
	        let list = [];
	        for (let i = 0; i < metaCells.length; i++) {
	            let metaCell = metaCells[i];
	            if (metaCell.sharesXorYOverlap(compareTo)) {
	                list.push(metaCell);
	            }
	        }
	        return list;
	    }
	    updateOffGridMatchLocations(objectsOfType) {
	        let list = [];
	        for (let item of objectsOfType) {
	            let cell = this.cellLayer.getCellCameraPos(item.x, item.y);
	            if (cell) {
	                if (list.indexOf(cell) < 0) {
	                    cell.clearOffGridMatchObjects();
	                    list.push(cell);
	                }
	                cell.addOffGridMatchObject(item);
	            }
	        }
	    }
	    getEmptyMetaCellNear(searchAround, allowOverlapOfCenter, searchCellRadius, metaWidth, metaHeight, searchType, adjacencyPreference, allowDeadCells, allowStickyCells = true) {
	        let wx = searchAround.anchor.center.x;
	        let wy = searchAround.anchor.center.y;
	        let r = this.getMetaCellNear(wx, wy, searchAround.widthCell, searchAround.heightCell, allowOverlapOfCenter, searchCellRadius, metaWidth, metaHeight, searchType, adjacencyPreference, allowDeadCells, false, allowStickyCells);
	        return r;
	    }
	    getEmptyWorldPointNear(wx, wy, searchCellRadius, searchType, allowDeadCells) {
	        let emptyCellNear = this.getEmptyCellNear(wx, wy, searchCellRadius, searchType, allowDeadCells);
	        if (emptyCellNear == null) {
	            return new Laya.Vector2(wx, wy);
	        }
	        let renderer = emptyCellNear.renderer;
	        if (renderer) {
	            let min = renderer.bounds.getMin();
	            let max = renderer.bounds.getMax();
	            let x = MathUtil.randNum(min.x, max.x);
	            let y = MathUtil.randNum(min.y, max.y);
	            return new Laya.Vector2(x, y);
	        }
	        return new Laya.Vector2(emptyCellNear.center.x, emptyCellNear.center.y);
	    }
	    getEmptyCellNear(wx, wy, searchCellRadius, searchType, allowDeadCells) {
	        let list = [];
	        let cellNear = this.cellLayer.getCellNear(wx, wy);
	        if (searchCellRadius < 0) {
	            searchCellRadius = this.maxCellCountToEdgeOfBoardFrom(cellNear);
	        }
	        for (let i = 0; i <= searchCellRadius; i++) {
	            let cells = this.getCellRing(cellNear, i);
	            this.removeOccupiedCells(cells);
	            if (!allowDeadCells) {
	                this.removeDeadCells(cells);
	            }
	            if (cells.length == 0) {
	                continue;
	            }
	            switch (searchType) {
	                case CellProximitySearchTypeID.PreferCloser:
	                    break;
	                case CellProximitySearchTypeID.RandomFromAll:
	                    list = list.concat(cells);
	                    continue;
	                default:
	                    console.log("In Board::GetEmptyCell(), encountered an unhandled search type: " + searchType);
	                    continue;
	            }
	            list = cells;
	            break;
	        }
	        if (list.length == 0) {
	            return null;
	        }
	        return MathUtil.randElement(list);
	    }
	    removeOccupiedCells(cells) {
	        if (cells == null || cells.length == 0) {
	            return;
	        }
	        for (let num = cells.length - 1; num >= 0; num--) {
	            if (cells[num].occupied) {
	                cells.splice(num, 1);
	            }
	        }
	    }
	    removeDeadCells(cells) {
	        if (cells == null || cells.length == 0) {
	            return;
	        }
	        for (let num = cells.length - 1; num >= 0; num--) {
	            if (cells[num].deathComponent != null) {
	                cells.splice(num, 1);
	            }
	        }
	    }
	    getCellRing(center, radius) {
	        let list = [];
	        if (radius <= 0) {
	            list.push(center);
	            return list;
	        }
	        let num = radius * 2;
	        let xIndex = center.xIndex;
	        let yIndex = center.yIndex;
	        xIndex -= radius;
	        yIndex += radius;
	        let num2 = xIndex + num;
	        let num3 = yIndex;
	        for (; xIndex < num2; xIndex++) {
	            if (this.inBounds(xIndex, yIndex, true)) {
	                list.push(this.cellLayer.cells[xIndex][yIndex]);
	            }
	        }
	        num3 -= num;
	        while (yIndex > num3) {
	            if (this.inBounds(xIndex, yIndex, true)) {
	                list.push(this.cellLayer.cells[xIndex][yIndex]);
	            }
	            yIndex--;
	        }
	        num2 -= num;
	        while (xIndex > num2) {
	            if (this.inBounds(xIndex, yIndex, true)) {
	                list.push(this.cellLayer.cells[xIndex][yIndex]);
	            }
	            xIndex--;
	        }
	        for (num3 += num; yIndex < num3; yIndex++) {
	            if (this.inBounds(xIndex, yIndex, true)) {
	                list.push(this.cellLayer.cells[xIndex][yIndex]);
	            }
	        }
	        return list;
	    }
	    getRandomLivingCell(preferEmpty) {
	        if (preferEmpty && this.cellLayer.emptyCells.length > 0) {
	            return MathUtil.randElement(this.cellLayer.emptyLivingCells);
	        }
	        return MathUtil.randElement(this.cellLayer.livingCells);
	    }
	    getRandomPointOnInternalGridJoint() {
	        let gx = MathUtil.randInt(1, this.widthCell - 1);
	        let gy = MathUtil.randInt(1, this.heightCell - 1);
	        let x = MapUtil.getWx(gx, gy);
	        let y = MapUtil.getWy(gx, gy);
	        return new Laya.Vector2(x, y);
	    }
	    fog_PreLoadCellEntity_GetDependentCellCoords(x, y) {
	        let tiledTile = this.mapData.layers[MapTileLayerID.Entities][x][y];
	        if (tiledTile == null) {
	            return null;
	        }
	        let cfg = PropsCfg.get(tiledTile.prop);
	        if (!cfg.requiresCellPlacement || (cfg.widthCell * cfg.heightCell) <= 1) {
	            return null;
	        }
	        let list = [];
	        for (let i = 0; i < cfg.widthCell; i++) {
	            for (let j = 0; j < cfg.heightCell; j++) {
	                if (!this.inBounds(i, j, false)) {
	                    return null;
	                }
	                list.push(new Laya.Point(x + i, y + j));
	            }
	        }
	        list.shift();
	        return list;
	    }
	    surveySavedCells() {
	        this.cellsThatHadSaveDataWithLastLoad = [];
	        for (let i = 0; i < this.widthInCells; i++) {
	            this.cellsThatHadSaveDataWithLastLoad[i] = [];
	        }
	        if (SL_Level.currentLoadedData && SL_Level.currentLoadedData.boardData) {
	            for (let cellsDatum of SL_Level.currentLoadedData.boardData.cellsData) {
	                this.cellsThatHadSaveDataWithLastLoad[cellsDatum.xIndex][cellsDatum.yIndex] = true;
	            }
	        }
	    }
	    fog_ShouldLoadCell(currentLayerID, xCellIndex, yCellIndex) {
	        if (currentLayerID == MapTileLayerID.Fog) {
	            return true;
	        }
	        return this.fogMap.isClearAt(xCellIndex, yCellIndex);
	    }
	    loadCellDuringGameplay_Unfogged(x, y) {
	        this.loadCellFromMapData(x, y, MapTileLayerID.Ground);
	        this.loadCellFromMapData(x, y, MapTileLayerID.Death);
	        this.loadCellFromMapData(x, y, MapTileLayerID.Entities);
	        this.cellLayer.setCellDirectionalLinks_PlusNeighbors(x, y);
	    }
	    loadFromSave_DeathLayer() {
	        let boardData = SL_Level.currentLoadedData.boardData;
	        let cells = this.cellLayer.cells;
	        for (let cellsDatum of boardData.cellsData) {
	            let xIndex = cellsDatum.xIndex;
	            let yIndex = cellsDatum.yIndex;
	            if (!this.inBounds(xIndex, yIndex, true)) {
	                if (this.ownerLevel.ID != Level.ID_LEVEL_HOME) {
	                    GuiMgr.errorMessage("Loaded cell data has index out of bounds for the current board. Did the board size change? Or did fog get added after the board was saved? If so, this message can be ignored. Index: [" + xIndex + ", " + yIndex + "]");
	                }
	            }
	            else {
	                let cell = cells[xIndex][yIndex];
	                cell.initFromLoadedData(cellsDatum);
	                let tiledTile = this.mapData.layers[MapTileLayerID.Death][xIndex][yIndex];
	                if (tiledTile != null && cell.dead) {
	                    cell.deathComponent.setOriginalDeadLevelValue(tiledTile.deadLevelValue);
	                }
	            }
	        }
	        if (Debug.printSaveLoadMessages) {
	            console.log("Death Cell Data Loaded from: " + this.ownerLevel.saveFileName);
	        }
	    }
	    gatherEggDataFromMapEntitiesLayer() {
	        let array = this.mapData.layers[MapTileLayerID.Entities];
	        let tiledTile = null;
	        for (let i = 0; i < this.mapData.width; i++) {
	            for (let j = 0; j < this.mapData.height; j++) {
	                tiledTile = this.mapData.layers[MapTileLayerID.Entities][i][j];
	                if (tiledTile == null) {
	                    continue;
	                }
	                if (!tiledTile.prop) {
	                    if (tiledTile.isStartingCameraLocation) {
	                        GuiMgr.errorMessage("Found Starting Camera location on Entities Layer instead of Dead Layer.");
	                    }
	                    else {
	                        GuiMgr.errorMessage("In GatherEggDataFromMapEntitiesLayer() found Entity Tile with null prefab. ID: " + tiledTile.id);
	                    }
	                }
	                else {
	                    let value = PropsCfg.get(tiledTile.prop);
	                    if (value) {
	                        if (value.categories == null && value.isEgg) {
	                            GuiMgr.errorMessage("Map has prefab ID in a tile which has a null categories list, but are marked as IsEgg in data so they are expected to have a category: " + tiledTile.prop);
	                        }
	                        else if (value.isEgg && value.hasCategory(CategoryID.Eggs)) {
	                            this.catalogLevelEgg(tiledTile.prop);
	                        }
	                    }
	                }
	            }
	        }
	    }
	    catalogLevelEgg(prefabNameOfEgg) {
	        if (this.levelEggPrefabNames.indexOf(prefabNameOfEgg) < 0) {
	            this.levelEggPrefabNames.push(prefabNameOfEgg);
	        }
	    }
	    loadBoardLayerFromData(layerID, skipCellsAlreadyLoadedFromSave) {
	        let array = this.mapData.layers[layerID];
	        for (let i = 0; i < this.widthInCells; i++) {
	            for (let j = 0; j < this.heightInCells; j++) {
	                if ((!skipCellsAlreadyLoadedFromSave || !this.cellsThatHadSaveDataWithLastLoad[i][j]) && this.fog_ShouldLoadCell(layerID, i, j)) {
	                    this.loadCellFromMapData1(array[i][j], i, j, layerID);
	                }
	            }
	        }
	    }
	    loadCellFromMapData(xCellIndex, yCellIndex, layerID) {
	        let tile = this.mapData.layers[layerID][xCellIndex][yCellIndex];
	        this.loadCellFromMapData1(tile, xCellIndex, yCellIndex, layerID);
	    }
	    loadCellFromMapData1(tile, xCellIndex, yCellIndex, layerID) {
	        if (tile == null) {
	            if (layerID == MapTileLayerID.Ground) {
	                this.totalCellCount--;
	            }
	            return;
	        }
	        switch (layerID) {
	            case MapTileLayerID.Ground:
	                this.cellLayer.creatGround(tile, xCellIndex, yCellIndex);
	                break;
	            case MapTileLayerID.Death:
	                this.cellLayer.createDeath(tile, xCellIndex, yCellIndex);
	                break;
	            case MapTileLayerID.Entities:
	                this.thingLayer.createEntities(tile, xCellIndex, yCellIndex);
	                break;
	            default:
	                break;
	        }
	        if (layerID != 0 && layerID != MapTileLayerID.Fog && this.cellLayer.cells[xCellIndex][yCellIndex] == null && !tile.isStartingCameraLocation) {
	        }
	    }
	    additivelyAddBoardLayerFromData(layerID, mapData) {
	        let array = mapData.layers[layerID];
	        for (let i = 0; i < mapData.width; i++) {
	            for (let j = 0; j < mapData.height; j++) {
	                if (this.fog_ShouldLoadCell(layerID, i, j)) {
	                    this.loadCellFromMapData1(array[i][j], i, j, layerID);
	                }
	            }
	        }
	    }
	    setAllCellDirectionalLinks() {
	        for (let i = 0; i < this.widthCell; i++) {
	            for (let j = 0; j < this.heightCell; j++) {
	                this.cellLayer.setCellDirectionalLinks(i, j);
	            }
	        }
	    }
	    getClosestMetaCellToScreenCenter() {
	        let screenCenterInWorldSpace = GuiMgr.getScreenCenterInWorldSpace();
	        return Glob.map.getMetaCell(screenCenterInWorldSpace.x, screenCenterInWorldSpace.y, 1, 1, false);
	    }
	    getInitialHealedCellCount() {
	        return this._initialHealedCellCount;
	    }
	    getHealedCellCount() {
	        let obj = this.setLandHealthStats();
	        return obj.healedCellCount;
	    }
	    setLandHealthStats() {
	        let unhealedCellCount = 0;
	        let foggedCellCount = 0;
	        let healedCellCount = 0;
	        let cell = null;
	        let tiledTile = null;
	        let cells = this.cellLayer.cells;
	        for (let i = 0; i < cells.length; i++) {
	            for (let j = 0; j < cells[i].length; j++) {
	                if (this.fogMap.foggedAt(i, j)) {
	                    foggedCellCount++;
	                    tiledTile = this.mapData.layers[MapTileLayerID.Ground][i][j];
	                    if (tiledTile != null) {
	                        unhealedCellCount++;
	                    }
	                    continue;
	                }
	                cell = cells[i][j];
	                if (cell) {
	                    if (cell.dead) {
	                        unhealedCellCount++;
	                    }
	                    else {
	                        healedCellCount++;
	                    }
	                }
	            }
	        }
	        return { unhealedCellCount, healedCellCount, foggedCellCount };
	    }
	    getSaveDataObject() {
	        let saveData_Board = new SL_Board();
	        saveData_Board.cellsData = [];
	        let cells = this.cellLayer.cells;
	        for (let i = 0; i < this.widthInCells; i++) {
	            for (let j = 0; j < this.heightInCells; j++) {
	                if (cells[i][j]) {
	                    saveData_Board.cellsData.push(cells[i][j].getSaveDataObject());
	                }
	            }
	        }
	        saveData_Board.fogMapData = this.fogMap.getSaveDataObject();
	        return saveData_Board;
	    }
	    loadFromSave_EntitiesLayer() {
	        let drawnObjectsData = SL_Level.currentLoadedData.drawnObjectsData;
	        for (let item of drawnObjectsData) {
	            try {
	                this.loadFromSave_EntitiesLayer_SingleEntity(item);
	            }
	            catch (e) {
	                GuiMgr.errorMessage(e, "ERROR Initializing object from save data. The data loaded fine from the save file, but creating the object failed: " + item.definition.cid);
	            }
	        }
	        let monstersWithCurrentLevel = OwnedMonsterMgr.getMonstersWithCurrentLevel(this.ownerLevel.ID);
	        for (let item2 of monstersWithCurrentLevel) {
	            if (item2.isValid() && PropsCfg.has(item2.prefabName) && Thing.canCreateObjectPrefab(item2.prefabName)) {
	                let drawnObject = Thing.loadFromSave_Entity(item2);
	                if (drawnObject) {
	                    drawnObject.moveOffGridObjInBoundsIfNeeded();
	                }
	            }
	        }
	        if (Debug.printSaveLoadMessages) {
	            console.log("Entities Data Loaded from: " + this.ownerLevel.saveFileName);
	        }
	    }
	    loadFromSave_EntitiesLayer_SingleEntity(loadedDrawnObjectData) {
	        let definition = loadedDrawnObjectData.definition;
	        let width, height;
	        if (definition != null) {
	            loadedDrawnObjectData.position = Globals.wideLevelBoundsCheck(definition, loadedDrawnObjectData.position);
	            width = definition.widthCell;
	            height = definition.heightCell;
	        }
	        else {
	            width = loadedDrawnObjectData.widthInTiles;
	            height = loadedDrawnObjectData.heightInTiles;
	        }
	        let position = loadedDrawnObjectData.position;
	        if (width > 0 && height > 0) {
	            let metaCell_CenteredOn = this.getMetaCell(position.x, position.y, width, height, false);
	            if (metaCell_CenteredOn != null && metaCell_CenteredOn.hasCell) {
	                let anchor = metaCell_CenteredOn.anchor;
	                let tiledTile = this.mapData.keyholes[anchor.xIndex][anchor.yIndex];
	                if (tiledTile != null && !anchor.isUnlocked && definition != null && loadedDrawnObjectData.definition.cid == anchor.keyObjectDefinition.cid) {
	                    CloudDungeon.makeCellKeyhole(metaCell_CenteredOn, anchor.keyedFogGroupId, loadedDrawnObjectData.definition);
	                }
	                else {
	                    Thing.loadFromSave_Entity(loadedDrawnObjectData);
	                }
	            }
	            else {
	                Thing.loadFromSave_Entity(loadedDrawnObjectData);
	            }
	        }
	        else {
	            console.log("UnknownObjectInSave", `We are trying to load an object without its size/data: ${loadedDrawnObjectData.prefabName}`);
	            Thing.loadFromSave_Entity(loadedDrawnObjectData);
	        }
	    }
	    addDeathComponentToCell(cell) {
	        let result = cell.addComponent(CompFilledWithDeath);
	        result.event_OnRevived = new Laya.Handler(cell, cell.cellReturnedToLife, null, false);
	        this.cellLayer.deadCells.push(cell);
	        if (cell.isOutterRingCell && this.cellLayer.outterRingDeadCells.indexOf(cell) < 0) {
	            this.cellLayer.outterRingDeadCells.push(cell);
	        }
	        ArrayUtil.remove(this.cellLayer.emptyLivingCells, cell);
	        ArrayUtil.remove(this.cellLayer.livingCells, cell);
	        return result;
	    }
	    tryAddLevelDyingVFX() {
	        if (this.cellLayer.livingCells.length <= Map.tilesLeftAtWhichToAddLevelDyingVFX) {
	        }
	    }
	    tryRemoveLevelDyingVFX() {
	        if (this.cellLayer.livingCells.length <= Map.tilesLeftAtWhichToAddLevelDyingVFX) {
	        }
	    }
	    getDeadCellsClosestTo(x, y, numToFind, deadSearchType) {
	        let deadCells = this.cellLayer.deadCells;
	        if (deadCells.length == 0) {
	            return null;
	        }
	        let list = deadCells.concat();
	        let list2 = [];
	        let flag = false;
	        while (list2.length < numToFind && list.length != 0 && !flag) {
	            let num = Number.MAX_SAFE_INTEGER;
	            let cell = null;
	            for (let item of list) {
	                if (deadSearchType != DeadCellSearchID.NeedsHealing || item.deathComponent.needsMoreHealing) {
	                    let sqrMagnitude = MathUtil.magnitudeMinus(item.center.x, item.center.y, x, y);
	                    if (sqrMagnitude < num) {
	                        num = sqrMagnitude;
	                        cell = item;
	                    }
	                }
	            }
	            if (cell != null) {
	                list2.push(cell);
	                ArrayUtil.remove(list, cell);
	            }
	            else {
	                flag = true;
	            }
	        }
	        return list2;
	    }
	}
	Map.tilesLeftAtWhichToAddLevelDyingVFX = -1;

	class Scene {
	    constructor() {
	        this.point = new Laya.Vector2();
	        this._ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
	        this._outHitResult = new Laya.HitResult();
	        this.v = new Laya.Vector3(1, 1);
	        this.s = 1;
	        this.downPos = new Laya.Vector2();
	        this.camDownPos = new Laya.Vector3();
	        this.lastDistance = 0;
	        this.lastSelectPos = new Laya.Vector3();
	    }
	    init() {
	        this.initBox();
	        this.initBg();
	        this.initScene();
	        this.initMap();
	        this.initEvent();
	    }
	    initBox() {
	        this.box = new Laya.Sprite();
	        this.box.size(Laya.stage.width, Laya.stage.height);
	        LayerMgr.ins().uiScene.addChild(this.box);
	    }
	    initBg() {
	        this.bg = new Laya.Sprite();
	        this.bg.loadImage("res/load/mohubeijing.jpg");
	        this.bg.size(Laya.stage.width, Laya.stage.height);
	        this.box.addChild(this.bg);
	    }
	    initScene() {
	        Laya.RenderElement.DEFAULT_DYNAMIC_VERTEX_BATCH = false;
	        this.scene3D = new Laya.Scene3D();
	        this.box.addChild(this.scene3D);
	        this.scene3D.addChild(new Laya.DirectionLight());
	        this.camera = (this.scene3D.addChild(new Laya.Camera(0, MapUtil.CAMERA_NEAR, MapUtil.CAMERA_FAR)));
	        this.camera.orthographic = true;
	        this.camera.clearFlag = Laya.CameraClearFlags.DepthOnly;
	        this.camera.transform.rotation = new Laya.Quaternion(0, 1, 0, 0);
	        this.s = this.camera.orthographicVerticalSize;
	        CameraMgr.init(this.camera);
	        let shake = new Laya.Sprite3D();
	        this.scene3D.addChild(shake);
	        CameraMgr.initShakeWatcher(shake);
	    }
	    initMap() {
	        this.map = new Map();
	        this.map.transform.position = new Laya.Vector3(0, 0, 0);
	        this.scene3D.addChild(this.map);
	    }
	    initEvent() {
	        this.box.on(Laya.Event.MOUSE_WHEEL, this, this.onWheel);
	        InputMgr.initMouseEvent(this.box);
	    }
	    ;
	    getObjByPoint(satgeX, stageY) {
	        let result = null;
	        this.point.x = satgeX;
	        this.point.y = stageY;
	        this.camera.viewportPointToRay(this.point, this._ray);
	        this.scene3D.physicsSimulation.rayCast(this._ray, this._outHitResult);
	        if (this._outHitResult.succeeded) {
	            try {
	                result = this._outHitResult.collider.owner.parent.parent.parent;
	                if (!(result instanceof Thing))
	                    result = null;
	            }
	            catch (e) {
	            }
	        }
	        if (!result && Glob.inLevelOrHome) {
	            let cell = Glob.cellLayer.getCellStagePos(satgeX, stageY);
	            if (cell != null) {
	                result = cell.occupant;
	            }
	        }
	        return result;
	    }
	    getObjectsUnderWorldPoint(worldX, worldY) {
	        let v2 = CameraMgr.toScreenPos(new Laya.Vector3(worldX, worldY));
	        this.camera.viewportPointToRay(v2, this._ray);
	        let hitList = [];
	        this.scene3D.physicsSimulation.rayCastAll(this._ray, hitList);
	        let r = [];
	        for (let i = 0; i < hitList.length; i++) {
	            let hit = hitList[i];
	            if (hit.succeeded) {
	                try {
	                    let item = hit.collider.owner.parent.parent.parent;
	                    if (item instanceof Thing) {
	                        r.push(item);
	                    }
	                    else {
	                    }
	                }
	                catch (e) { }
	            }
	        }
	        return r;
	    }
	    setWheelS(v) {
	        this.s = v;
	    }
	    onWheel(arg) {
	        this.v.x = this.v.x + arg.delta * 0.05;
	        this.v.y = this.v.y + arg.delta * 0.05;
	        this.s -= arg.delta * 0.2;
	        if (this.s < 0)
	            this.s = 0.1;
	        this.camera.orthographicVerticalSize = this.s;
	    }
	    onMouseDown(e) {
	        this.point.x = Laya.MouseManager.instance.mouseX;
	        this.point.y = Laya.MouseManager.instance.mouseY;
	        this.camera.viewportPointToRay(this.point, this._ray);
	        this.scene3D.physicsSimulation.rayCast(this._ray, this._outHitResult);
	        let posX = Laya.stage.mouseX;
	        let posY = Laya.stage.mouseY;
	        let out = new Laya.Vector3();
	        let source = new Laya.Vector3(posX, posY);
	        this.camera.convertScreenCoordToOrthographicCoord(source, out);
	        let gx = MapUtil.getGx(out.x, out.y);
	        let gy = MapUtil.getGy(out.x, out.y);
	        console.log("点中的格子是:", out.x, out.y, gx, gy);
	        if (this._outHitResult.succeeded) {
	            this.selectThing = this._outHitResult.collider.owner.parent.parent.parent;
	            let a = this._outHitResult.collider.owner;
	            this.selectThing.transform.localPosition.cloneTo(this.lastSelectPos);
	            Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onThingMove);
	        }
	        else {
	            let touches = e.touches;
	            if (touches && touches.length == 2) {
	                this.lastDistance = this.getDistance(touches);
	                Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove1);
	            }
	            else {
	                Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
	                this.downPos.setValue(Laya.stage.mouseX, Laya.stage.mouseY);
	                this.camera.transform.localPosition.cloneTo(this.camDownPos);
	            }
	        }
	        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
	        Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
	    }
	    onMouseMove(e) {
	        if (e.touches && e.touches.length >= 2)
	            return;
	        var mx = (Laya.stage.mouseX - this.downPos.x) * 0.01;
	        var my = (Laya.stage.mouseY - this.downPos.y) * 0.01;
	        this.camera.transform.localPosition = new Laya.Vector3(this.camDownPos.x + mx, this.camDownPos.y + my);
	    }
	    onThingMove(e) {
	        let posX = Laya.stage.mouseX;
	        let posY = Laya.stage.mouseY;
	        let out = new Laya.Vector3();
	        let source = new Laya.Vector3(posX, posY);
	        this.camera.convertScreenCoordToOrthographicCoord(source, out);
	        out.z = MapUtil.getPropZ(out.y);
	        this.selectThing.transform.localPosition = out;
	    }
	    onMouseMove1(e) {
	        if (!e.touches || e.touches.length < 2)
	            return;
	        var distance = this.getDistance(e.touches);
	        const factor = 0.01;
	        this.s -= (distance - this.lastDistance) * factor;
	        this.camera.orthographicVerticalSize = this.s;
	        this.lastDistance = distance;
	    }
	    onMouseUp() {
	        if (this.selectThing) {
	            this.selectThing = null;
	        }
	        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
	        Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
	        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
	        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove1);
	        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onThingMove);
	    }
	    getDistance(points) {
	        var distance = 0;
	        if (points && points.length == 2) {
	            var dx = points[0].stageX - points[1].stageX;
	            var dy = points[0].stageY - points[1].stageY;
	            distance = Math.sqrt(dx * dx + dy * dy);
	        }
	        return distance;
	    }
	}

	class LoadMgr {
	    constructor() {
	        MsgCenter.listen(MsgConst.CONFIG_COMPLETE, this.preloadingRes, this);
	    }
	    preloadingRes() {
	        Loading.ins().setInfo(LanCfg.get("10010022"));
	        Loading.ins().setProgress(Loading.STEP_PRELOAD);
	        let txt = PConfig.getCfg("preloading.txt");
	        if (txt) {
	            txt = txt.trim();
	            let urls = txt.split(/\r\n/g);
	            if (LoginData.isNew) {
	                var ntxt = PConfig.getCfg("preloadingNew.txt");
	                if (ntxt) {
	                    ntxt = ntxt.trim();
	                    var nurls = ntxt.split(/\r\n/g);
	                    urls = urls.concat(nurls);
	                }
	            }
	            Laya.loader.create(urls, Laya.Handler.create(this, this.onComplete), Laya.Handler.create(this, this.onProgress, null, false));
	            Laya.loader.on(Laya.Event.ERROR, this, this.onError);
	        }
	    }
	    onProgress(evt) {
	        var per = Loading.STEP_PRELOAD + (100 - Loading.STEP_PRELOAD) * evt;
	        Loading.ins().setProgress(per);
	    }
	    onComplete(evt) {
	        ApiMgr.addNewLoginSta(LogLoginType.LoadSuccess);
	        Loading.ins().setProgress(100);
	        Loading.ins().setInfo(LanCfg.get("10010023"));
	        console.log("资源预加载完毕!");
	        Laya.timer.once(500, this, () => { MsgCenter.notify(MsgConst.RES_COMPLETE); });
	    }
	    onError(url) {
	    }
	}

	class Glob {
	    static get currLevelData() {
	        return this.currentLevel ? this.currentLevel.data : null;
	    }
	    static get inLevel() {
	        return this.currentLevel != null && this.currentLevel.data.isLevel;
	    }
	    static get inHomeCampArea() {
	        return this.currentLevel != null && this.currentLevel.ID == Level.ID_LEVEL_HOME;
	    }
	    static get inHome() {
	        return this.currentLevel != null && this.currentLevel.data.isHome;
	    }
	    static get inLevelOrHome() {
	        return this.inHome || this.inLevel;
	    }
	    static get inAnEventArea() {
	        return this.currentLevel != null && this.currentLevel.data.IsEventLevel;
	    }
	    static get inAnEventArea_Type2_ScorePuzzle() {
	        return this.currentLevel != null && this.currentLevel.data.IsEventLevel_Type2_ScorePuzzle;
	    }
	    static get inAnEventArea_Type1_ResourceCollection() {
	        return this.currentLevel != null && this.currentLevel.data.IsEventLevel_Type1_ResourceCollection;
	    }
	    static get inWorld() {
	        return this.gameState == GameState.WorldMap;
	    }
	    static get inAChallengeArea() {
	        return this.currLevelData != null && this.currLevelData.isChallenge;
	    }
	    static get scrollLockActive() {
	        return this.scrollLock_SavedState || this.inAnEventArea_Type2_ScorePuzzle;
	    }
	    static set scrollLockActive(v) {
	        this.scrollLock_SavedState = v;
	    }
	    static isCampUnlocked() {
	        return !!this.mostRecentHomeID;
	    }
	    static get deltaTime() {
	        return Laya.timer.delta * 0.001;
	    }
	    static init() {
	        Laya.timer.frameLoop(1, this, this.update);
	        MsgCenter.listen(MsgConst.SHOW_ERROR_MSG, this.onErrorMsg, this);
	    }
	    static onErrorMsg(data) {
	        let key = data.tipKey;
	        if (key == "1006")
	            return;
	        let msg = StringUtil.formatArr(LanCfg.get(key + "_err"), data.paramValue);
	        FloatMsgUtil.start(msg);
	    }
	    static recordLog(msg) {
	        console.log(msg);
	    }
	    static isSimulationPaused() {
	        if (this.currentLevel != null && !this.currentLevel.shouldSimulateLevel()) {
	            return true;
	        }
	        if (this.pausedByPlayer) {
	            return true;
	        }
	        return false;
	    }
	    static levelCompleted() {
	        if (this.currentLevel.state != LevelStateID.Complete && this.currentLevel.state != LevelStateID.Defeat) {
	            this.currentLevel.setState(LevelStateID.Complete);
	        }
	    }
	    static setLevel(level) {
	        this.currentLevel = level;
	    }
	    static isCurrentLevelState(state) {
	        return this.currentLevel && this.currentLevel.state == state;
	    }
	    static request_LoadHome(fallbackToWorld = false) {
	        if (!this.mostRecentHomeID) {
	            if (fallbackToWorld) {
	                console.log("Cannot load camp, defaulting to world map");
	                this.request_LoadWorldMap();
	            }
	            else {
	                GuiMgr.errorMessage("Requested to load recent Home level, but m_mostRecentHomeID is an empty string.");
	            }
	        }
	        else {
	            this.loadLevel(this.mostRecentHomeID);
	        }
	    }
	    static request_LoadWorldMap() {
	        if (this.currentLevel != null) {
	            if (this.currentLevel.data.isHome) {
	                this.updateTotalDead();
	                LevelUtils.endLevel(this.currentLevel, EnumLevelEndStatus.CAMP);
	            }
	            else if (this.currentLevel.state == LevelStateID.Playing) {
	                this.updateTotalDead();
	                LevelUtils.endLevel(this.currentLevel, EnumLevelEndStatus.LEAVE);
	            }
	        }
	        this.request_LoadWorldMap2(true);
	    }
	    static updateTotalDead() {
	        LevelUtils.stats.totalDeadLandLeft = Glob.cellLayer.deadCells.length;
	        LevelUtils.stats.totalSuperDeadLandLeft = Glob.cellLayer.deadCells.filter(p => p.deathComponent.isImmune()).length;
	        let tmp = Glob.cellLayer.deadCells;
	        let total = 0;
	        for (let i of tmp) {
	            if (!i.deathComponent.isImmune()) {
	                total += i.deathComponent.deadLevel.HP;
	            }
	        }
	        LevelUtils.stats.totalHealAmountNeededForDeadTilesAtEnd = total;
	    }
	    static request_LoadWorldMap2(saveState) {
	        LayerMgr.ins().closeAll();
	        this.preSceneChange(saveState);
	        MsgCenter.notify(MsgConst.SCENE_STATE_CHANGED, { state: GameState.LoadingWorldMap, preState: this.gameState, level: this.currLevelData });
	        this.gameState = GameState.LoadingWorldMap;
	        this.flushAndLoadScene(SceneID.Scene_WorldMap, LanCfg.get("10010010"));
	    }
	    static preSceneChange(saveState = true) {
	        this.isChangingScenes = true;
	        if (saveState) {
	            if (!SaveLoad.SAVE_DISABLED && this.currentScene != SceneID.GAME_LOADER && this.currentScene != 0) {
	                if (this.currentScene == SceneID.Scene_Level) {
	                    if (this.currentLevel && this.currentLevel.data.Saves) {
	                        let currentLevel = this.currentLevel;
	                        currentLevel.data.TimesExitedWithoutEnd++;
	                    }
	                }
	            }
	            this.saveCurrentSceneAndPlayerData(true);
	        }
	    }
	    static saveCurrentSceneAndPlayerData(syncRemote) {
	        Debug.mLog("saveCurrentSceneAndPlayerData_start");
	        if (!SaveLoad.SAVE_DISABLED && this.currentScene != SceneID.GAME_LOADER && this.currentScene != 0) {
	            if (this.currentScene == SceneID.Scene_Level) {
	                this.trySaveLevel_OrResetCompletedLevel();
	            }
	            else if (this.currentScene == SceneID.Scene_WorldMap) {
	                SaveLoad.SaveWorldMap(WorldMgr.ins().GetSaveDataObject());
	            }
	            else {
	                SaveLoad.SaveEssentials();
	            }
	        }
	        Debug.mLog("saveCurrentSceneAndPlayerData_end");
	    }
	    static trySaveLevel_OrResetCompletedLevel() {
	        if (this.currentLevel == null) {
	            return;
	        }
	        if (!this.currentLevel.data.Saves) {
	            if (this.deleteCurrentLevel) {
	                this.deleteCurrentLevelNow();
	            }
	            return;
	        }
	        OwnedMonsterMgr.updateAllOwnedMonsterDataFromCurrentLevel();
	        if (this.deleteCurrentLevel) {
	            this.deleteCurrentLevelNow();
	            SaveLoad.SaveEssentials();
	        }
	        else {
	            let currentLevel = this.currentLevel;
	            if (this.inHome) {
	                SaveLoad.saveCamp(currentLevel);
	            }
	            else {
	                SaveLoad.saveLevel(currentLevel);
	            }
	        }
	        if (this.socketMgr.connected) {
	            WorldMgr.ins().ReTallyNumStarsEarned();
	        }
	    }
	    static CanMakePurchase() {
	        return !MergeDragonsAppConfig.CHILD_MODE_ON && !this.noPurchaseModeOn;
	    }
	    static defeated() {
	        if (this.currentLevel.state != LevelStateID.Complete && this.currentLevel.state != LevelStateID.Defeat) {
	            this.currentLevel.setState(LevelStateID.Defeat);
	        }
	    }
	    static sceneExitCleanup() {
	        PopupManager.sceneExitCleanup();
	    }
	    static setScene(scene) {
	        if (this.currentScene != SceneID.SCENE_SWITCH) {
	            this.previousScene = this.currentScene;
	        }
	        this.currentScene = scene;
	    }
	    static loadUnityScene(scene, loadText) {
	        if (this._isLoadingLevel) {
	            return;
	        }
	        this._isLoadingLevel = true;
	        let sceneName = scene.toString();
	        this.showScreenTransition(loadText);
	        this.setScene(SceneID.SCENE_SWITCH);
	        this.sceneExitCleanup();
	        switch (scene) {
	            case SceneID.Scene_WorldMap:
	                this._isLoadingLevel = false;
	                this.setScene(SceneID.Scene_WorldMap);
	                break;
	            case SceneID.Scene_Level:
	                this._isLoadingLevel = false;
	                this.setScene(SceneID.Scene_Level);
	                break;
	        }
	    }
	    static update() {
	        if (this._isWaitingForFlushToLoadScene) {
	            if (!this._didReceiveFlushToLoadLevel) {
	                return;
	            }
	            this._isWaitingForFlushToLoadScene = false;
	            this.loadUnityScene(this._loadSceneIdAfterFlush, this._waitingForFlushLoadingText);
	        }
	        if (this.gameState == 0)
	            return;
	        if (this.gameState == GameState.LoadingLevel) {
	            this.update_FinishLevelLoad();
	        }
	        else if (this.gameState == GameState.LoadingWorldMap) {
	            this.update_FinishLoadingWorldMap();
	        }
	        else if (this.gameState == GameState.InLevel) {
	            if (this.currentLevel != null) {
	                this.currentLevel.update();
	            }
	            else {
	                console.error("Something has gone horribly wrong: GameState == InLevel but CurrentLevel == null!");
	            }
	            InputMgr.updatePlayingState();
	            CameraMgr.update();
	            InputMgr.finalUpdate();
	        }
	        else if (this.gameState == GameState.WorldMap) {
	        }
	    }
	    static update_FinishLoadingWorldMap() {
	        if (this.currentScene == SceneID.SCENE_SWITCH)
	            return;
	        SoundMgr.ins().playMusic("m236");
	        this.setLevel(null);
	        this.sceneChangeCleanup();
	        MsgCenter.notify(MsgConst.SCENE_STATE_CHANGED, { state: GameState.WorldMap, preState: this.gameState, level: this.currLevelData });
	        this.gameState = GameState.WorldMap;
	        this.removeBookListeners();
	        let saveData_Map_World = SaveLoad.LoadWorldMap();
	        if (saveData_Map_World != null) {
	            WorldMgr.ins().InitFromSaveData(saveData_Map_World);
	        }
	        WorldMgr.ins().OnWorldFinishedLoading();
	    }
	    static loadLevel(levelID) {
	        this.preSceneChange();
	        GoalMgr.ins().DisableGoalProgression();
	        this.nextLevelID = levelID;
	        let vo = WorldMgr.ins().getLevelVo(levelID);
	        MsgCenter.notify(MsgConst.SCENE_STATE_CHANGED, { state: GameState.LoadingLevel, preState: this.gameState, level: vo });
	        this.gameState = GameState.LoadingLevel;
	        if (vo.isHome) {
	            this.addBookListeners();
	        }
	        let loadText = vo.isHome ? LanCfg.get("10010008") : LanCfg.get("10010009");
	        if (vo.isHome) {
	        }
	        else {
	            if (!LocalData.ins().isRecorded(vo.cid, LogLevelType.Enter)) {
	                ApiMgr.addGuanQiaSta(vo.cid, LogLevelType.Enter);
	                LocalData.ins().recordLevel(vo.cid, LogLevelType.Enter);
	            }
	        }
	        this.flushAndLoadScene(SceneID.Scene_Level, loadText);
	    }
	    static flushAndLoadScene(sceneId, loadText) {
	        this._isWaitingForFlushToLoadScene = true;
	        this._didReceiveFlushToLoadLevel = false;
	        this._loadSceneIdAfterFlush = sceneId;
	        this._waitingForFlushLoadingText = loadText;
	        this.showScreenTransition(loadText);
	        this._didReceiveFlushToLoadLevel = true;
	        SyncMgr.ins().flushSync(Laya.Handler.create(this, () => {
	            if (sceneId == SceneID.Scene_Level) {
	                if (this.nextLevelID != WorldMgr.ins().homeLevelId) {
	                    this._didReceiveFlushToLoadLevel = true;
	                }
	                else {
	                    this._didReceiveFlushToLoadLevel = true;
	                }
	            }
	            else if (sceneId == SceneID.Scene_WorldMap) {
	                LayerMgr.ins().open(UiConst.WorldView);
	                this._didReceiveFlushToLoadLevel = true;
	            }
	            else {
	                this._didReceiveFlushToLoadLevel = true;
	            }
	        }));
	    }
	    static showScreenTransition(loadingText = "") {
	    }
	    static update_FinishLevelLoad() {
	        if (this.currentScene != SceneID.Scene_Level) {
	            return;
	        }
	        this.sceneChangeCleanup();
	        SoundMgr.ins().playMusics(["m234", "m235"]);
	        let level = Level.load(this.nextLevelID);
	        this.mostRecentLevelID = this.nextLevelID;
	        MsgCenter.notify(MsgConst.SCENE_STATE_CHANGED, { state: GameState.InLevel, preState: this.gameState, level: this.currLevelData });
	        this.gameState = GameState.InLevel;
	        InputMgr.allowDrag = true;
	        CameraMgr.zoomMin = 1 * 2;
	        CameraMgr.zoomMax = this.inAnEventArea_Type2_ScorePuzzle ? 4.72 * 2 : 12 * 2;
	        CameraMgr.lockedToHorizontal = false;
	        CameraMgr.isLocked = this.scrollLockActive;
	        CameraMgr.residualDragTime = 0.5;
	        CameraMgr.checkForZoom();
	        CameraMgr.stayInBounds();
	        if (level == null) {
	            this.setLevel(null);
	            GuiMgr.errorMessage("没有这个关卡的配置文件:" + this.nextLevelID);
	            GoalMgr.ins().EnableGoalProgression();
	            this.request_LoadWorldMap2(false);
	            let vo = WorldMgr.ins().getLevelVo(this.nextLevelID);
	            if (!vo.isHome && !vo.IsEventLevel) {
	                Level.deleteSaveFileAndBackup(this.nextLevelID);
	            }
	            return;
	        }
	        GoalMgr.ins().HomeLoaded_RefreshHaveObjectGoals();
	        MsgCenter.notify(MsgConst.CURRENT_LEVEL_READY);
	        this.currentLevel.loadComplete_StartPlaying();
	        GoalMgr.ins().EnableGoalProgression();
	        if (this.currentLevel.data.isHome) {
	            this.mostRecentHomeID = this.currentLevel.data.cid;
	            GoalMgr.ins().HomeLoaded_RefreshHaveObjectGoals();
	            let flag = ThingList.lists[DailyQuestMgr.ShipId] != null;
	            DailyQuestMgr.ins().enterHome(!flag);
	        }
	        Monster.levelLoadComplete();
	    }
	    static sceneChangeCleanup() {
	        if (this.previousScene == SceneID.Scene_Level) {
	        }
	        else if (this.previousScene != SceneID.Scene_WorldMap) {
	        }
	        PrefMgr.clear();
	        FingerGuiderMgr.clear();
	        ThingList.sceneChangeCleanup();
	        Monster.monster_SceneChangeCleanup();
	        Enemy.enemy_SceneChangeCleanup();
	        MoverMgr.sceneChangeCleanup();
	        CameraMgr.sceneChangeCleanup();
	        LevelUtils.stats.reset();
	        this.isChangingScenes = false;
	    }
	    static deleteCurrentLevelNow() {
	        if (!this.deleteCurrentLevel) {
	            return;
	        }
	        if (this.currentLevel.data.isHome) {
	            this.deleteCurrentLevel = false;
	            return;
	        }
	        this.currentLevel.data.TimesExitedWithoutEnd = 0;
	        SaveLoad.clearLevelData(this.currentLevel.ID);
	        GoalMgr.ins().ResetCurrentGoals();
	        this.deleteCurrentLevel = false;
	    }
	    static addBookListeners() {
	        let bookMgr = DragonBookMgr.ins();
	        MsgCenter.listen(MsgConst.THING_SPAWN, bookMgr.onObjSpawn, bookMgr);
	        MsgCenter.listen(MsgConst.THING_DESTROY, bookMgr.onObjDestroy, bookMgr);
	        MsgCenter.listen(MsgConst.THING_MERGE_START, bookMgr.onMergeStart, bookMgr);
	        MsgCenter.listen(MsgConst.THING_BECOME_ALIVE, bookMgr.onObjBecomeAlive, bookMgr);
	    }
	    static removeBookListeners() {
	        let bookMgr = DragonBookMgr.ins();
	        MsgCenter.remove(MsgConst.THING_SPAWN, bookMgr.onObjSpawn, bookMgr);
	        MsgCenter.remove(MsgConst.THING_DESTROY, bookMgr.onObjDestroy, bookMgr);
	        MsgCenter.remove(MsgConst.THING_MERGE_START, bookMgr.onMergeStart, bookMgr);
	        MsgCenter.remove(MsgConst.THING_BECOME_ALIVE, bookMgr.onObjBecomeAlive, bookMgr);
	    }
	    static levelOnBack() {
	        if (Glob.inAChallengeArea) {
	            LayerMgr.ins().open(UiConst.ChallengeExitView);
	        }
	        else {
	            LayerMgr.ins().open(UiConst.LevelQuitView);
	        }
	    }
	}
	Glob.isResLoaded = false;
	Glob.isEnterGame = false;
	Glob.gameState = GameState.GameLoad;
	Glob.currentScene = SceneID.GAME_LOADER;
	Glob.socketMgr = new SocketMgr();
	Glob.loadMgr = new LoadMgr();
	Glob.scene = new Scene();
	Glob.campAllowChainReactions = true;
	Glob.k_LEVEL_EGG = 10043;
	Glob.k_DEFAULT_EGG = 10514;
	Glob.campAutonomyOn = true;
	Glob.tutorialOn = true;
	Glob._waitingForFlushLoadingText = "";
	Glob.scrollLock_SavedState = false;

	class CurrencyMgr extends Singleton {
	    constructor() {
	        super();
	        this.nextEnergyTime = null;
	        this.capacityMap = {
	            [ECurrency.Gold]: 0,
	            [ECurrency.Stone]: 0,
	            [ECurrency.Diamond]: 0,
	            [ECurrency.Energy]: 0,
	        };
	        this.amountMap = {
	            [ECurrency.Gold]: 0,
	            [ECurrency.Stone]: 0,
	            [ECurrency.Diamond]: 0,
	            [ECurrency.Energy]: 0,
	        };
	    }
	    static isEnergy(type) {
	        return type === ECurrency.Energy;
	    }
	    static isDiamond(type) {
	        return type === ECurrency.Diamond;
	    }
	    updateAmount(type, delta, isNewGame = false, isSave = true) {
	        if (delta === 0)
	            return;
	        let currAmount = this.getAmount(type);
	        let isEnergy = CurrencyMgr.isEnergy(type);
	        let isDiamond = CurrencyMgr.isDiamond(type);
	        if (this.isFull(type) && delta > 0 && !isDiamond && (!isNewGame || !isEnergy)) {
	            return delta;
	        }
	        let result = 0;
	        let capacity = this.getCapacity(type);
	        let newAmount = delta + currAmount;
	        newAmount = newAmount < 0 ? 0 : newAmount;
	        if (delta > 0 && newAmount > capacity) {
	            if (isDiamond) {
	                this.setCapacity(type, newAmount);
	            }
	            else if (!isEnergy || !isNewGame) {
	                if (isEnergy && (currAmount > capacity)) {
	                    if (currAmount > 15) {
	                        GuiMgr.errorMessage("Loaded Chalices are greater than the allowed amount: " + 15 + ". Resetting to " + 15);
	                        newAmount = 15;
	                        result = 0;
	                    }
	                    else {
	                        newAmount = currAmount;
	                        result = 0;
	                    }
	                }
	                else if (isEnergy && (currAmount === 0 && delta > 7)) {
	                    if (delta > 15) {
	                        GuiMgr.errorMessage("Loaded Chalices are greater than the allowed amount: " + 15 + ". Resetting to " + 15);
	                        newAmount = 15;
	                        result = 0;
	                    }
	                    else {
	                        newAmount = delta;
	                        result = 0;
	                    }
	                }
	                else {
	                    result = newAmount - capacity;
	                    newAmount = capacity;
	                }
	            }
	        }
	        this.amountMap[type] = newAmount;
	        MsgCenter.notify(MsgConst.CURRENCY_CHANGE, { currency: type, amount: newAmount });
	        if (isSave) {
	            ProxyMgr.player.sSave(type, newAmount);
	            if (isEnergy) {
	                let realDelta = newAmount - currAmount;
	                if (realDelta > 0) {
	                    ApiMgr.addTiliRecord(realDelta, LogEarnType.EnergyAdd);
	                }
	                else if (realDelta < 0) {
	                    ApiMgr.addTiliRecord(-realDelta, LogCostType.EnergyCost);
	                }
	            }
	        }
	        return result;
	    }
	    init() {
	        this.updateAmount(ECurrency.Gold, ProtUtil.ltn(UserData.player.gold), true, false);
	        this.updateAmount(ECurrency.Stone, ProtUtil.ltn(UserData.player.stone), true, false);
	        this.updateAmount(ECurrency.Diamond, ProtUtil.ltn(UserData.player.yuanBao), true, false);
	        this.updateAmount(ECurrency.Energy, ProtUtil.ltn(UserData.player.energy), true, false);
	    }
	    initNew() {
	        let gold = parseInt(ConstCfg.getValue("11"));
	        let energy = CurrencyCfg.defaultEnergy;
	        let stone = parseInt(ConstCfg.getValue("12"));
	        let diamond = parseInt(ConstCfg.getValue("13"));
	        this.updateAmount(ECurrency.Gold, gold, true);
	        this.updateAmount(ECurrency.Energy, energy, true);
	        this.updateAmount(ECurrency.Stone, stone, true);
	        this.updateAmount(ECurrency.Diamond, diamond, true);
	    }
	    initNextEnergyTime(saveTime) {
	        this.nextEnergyTime = saveTime;
	        Laya.timer.loop(1000, this, () => {
	            let now = TimeMgr.ins().getTime();
	            if (this.nextEnergyTime <= now) {
	                let pass = now - this.nextEnergyTime;
	                let replyNum = Math.floor(pass / CurrencyCfg.energyReplyTime) + 1;
	                this.nextEnergyTime += (replyNum * CurrencyCfg.energyReplyTime);
	                SL_PlayExpand.save();
	                let maxReplyNum = CurrencyCfg.capEnergy - this.getAmount(ECurrency.Energy);
	                replyNum = replyNum > maxReplyNum ? maxReplyNum : replyNum;
	                replyNum > 0 && this.updateAmount(ECurrency.Energy, replyNum);
	            }
	        });
	    }
	    getReplySeconds() {
	        let now = TimeMgr.ins().getTime();
	        return Math.ceil((this.nextEnergyTime - now) * 0.001);
	    }
	    getAmount(type) {
	        return this.amountMap[type] || 0;
	    }
	    isFull(type) {
	        let value = this.getAmount(type);
	        let max = this.getCapacity(type);
	        return value >= max;
	    }
	    isEnough(type, cost) {
	        return this.getAmount(type) >= cost;
	    }
	    getCapacity(type) {
	        return this.capacityMap[type] || 0;
	    }
	    setCapacity(type, value) {
	        return this.capacityMap[type] = value;
	    }
	    getPercent(type) {
	        let amount = this.getAmount(type);
	        let capacity = this.getCapacity(type);
	        return amount / capacity;
	    }
	    charge(type, cost) {
	        this.updateAmount(type, -cost);
	        MsgCenter.notify(MsgConst.CURRENCY_PURCHASE);
	    }
	    charge2(i_currency, i_delta, i_creditType, i_source, i_itemIID = -1, i_objectName = null, i_objectFID = null) {
	        this.charge(i_currency, i_delta);
	    }
	    setAmount(type, newAmount, overflow = true) {
	        if (this.amountMap[type]) {
	            let capacity = this.getCapacity(type);
	            newAmount = newAmount < 0 ? 0 : newAmount;
	            if (newAmount > capacity) {
	                if (type === ECurrency.Diamond) {
	                    this.capacityMap[type] = newAmount;
	                }
	                else {
	                    !overflow && (newAmount = capacity);
	                }
	            }
	            this.amountMap[type] = newAmount;
	        }
	    }
	    refillDiamond() {
	        let id = ECurrency.Diamond;
	        let amount = this.getCapacity(ECurrency.Diamond);
	        this.updateAmount(id, amount);
	    }
	    refillEnergy() {
	        let cost = this.refillEnergyCost();
	        this.charge(ECurrency.Diamond, cost);
	        ApiMgr.addYbRecord(cost, LogCostType.BuyEnergy);
	        this.updateAmount(ECurrency.Energy, this.getCapacity(ECurrency.Energy));
	    }
	    refillEnergyCost() {
	        let type = ECurrency.Energy;
	        return (this.capacityMap[type] - this.amountMap[type]) * CurrencyCfg.costPerEnergy;
	    }
	    credit(currency, delta, isNewGame = false) {
	        return this.updateAmount(currency, delta, isNewGame);
	    }
	    credit2(i_currency, i_delta, i_creditType, i_source, i_premiumPackDef = null, i_product = null, offer = null) {
	        let num = this.credit(i_currency, i_delta);
	        switch (i_currency) {
	            case ECurrency.Gold:
	                break;
	            case ECurrency.Diamond:
	                break;
	            case ECurrency.Stone:
	                break;
	            case ECurrency.Life:
	                break;
	        }
	        return num;
	    }
	    get currentLevelState() {
	        if (Glob.currentLevel) {
	            return Glob.currentLevel.state;
	        }
	        return null;
	    }
	    UpdateShopPips() {
	        if (Glob.inLevelOrHome && this.currentLevelState != LevelStateID.Complete && Glob.currentScene != SceneID.Scene_WorldMap) {
	        }
	    }
	    UpdateShopBanners() {
	        if (Glob.inLevelOrHome && this.currentLevelState != LevelStateID.Complete) {
	        }
	    }
	    CanAfford(currencyType, cost) {
	        if (currencyType == ECurrency.Diamond && !Glob.CanMakePurchase()) {
	            return false;
	        }
	        return this.isEnough(currencyType, cost);
	    }
	    updateCurrencyCap(currency, delta, decreaseCurrencyIfCapSinksBelowIt) {
	        let num = this.getCapacity(currency);
	        num += delta;
	        if (num < Globals.CurrencyBaseStorageAmounts[currency]) {
	            GuiMgr.errorMessage("Trying to reduce currency cap below the base starting value: " + currency + ". Request cap: " + num);
	            num = Globals.CurrencyBaseStorageAmounts[currency];
	        }
	        if (delta < 0 && decreaseCurrencyIfCapSinksBelowIt && currency != ECurrency.Diamond && this.getAmount(currency) > num) {
	            this.setAmount(currency, num, false);
	        }
	        this.setCapacity(currency, num);
	    }
	    showNotEnoughPremiumCurrency(openUberShopAfterComplete = false) {
	        LayerMgr.ins().closeAllPop();
	        if (!Glob.CanMakePurchase()) {
	            PopupManager.show2(Presets.CanNotPurchase());
	        }
	        else {
	            PopupManager.show2(Presets.Simple1Button4(LanCfg.get("20021003"), LanCfg.get("20021004"), LanCfg.get("20021005"), true, Laya.Handler.create(this, this.notEnoughPremiumCurrency_ModalClosedCallback)));
	        }
	    }
	    notEnoughPremiumCurrency_ModalClosedCallback() {
	        if (LayerMgr.ins().winIsShow(UiConst.ShopView)) {
	            MsgCenter.notify(MsgConst.OPENSHOP_BUYDIAMONDS, 5);
	        }
	        else {
	            LayerMgr.ins().open(UiConst.ShopView, 5);
	        }
	    }
	    ShowNotEnoughEnergyDialog() {
	        if (!this.isFull(ECurrency.Energy)) {
	            SoundMgr.ins().playSound("m86");
	            PopupManager.show2(Presets.PurchaseConfirmation(LanCfg.get("20014108"), LanCfg.get("20014106") + LanCfg.get("20014107"), ECurrency.Diamond, this.refillEnergyCost(), true, null, false, Laya.Handler.create(this, this.Event_EnergyRefillPurchaseRequested), Laya.Handler.create(this, this.Event_BuyEnergyCancelledAfterNotEnoughEnergyDialog)));
	        }
	    }
	    Event_BuyEnergyCancelledAfterNotEnoughEnergyDialog() {
	        if (Glob.inWorld && Glob.isCampUnlocked()) {
	            PopupManager.show2(Presets.Simple1Button6(LanCfg.get("20014109"), LanCfg.get("20014110"), LanCfg.get("20014111"), true, "res/skin/level/gk_jiayuan.png", false, null, Laya.Handler.create(this, this.Event_BuyEnergyCancelledAfterNotEnoughEnergyDialog_PressedPlayCamp)));
	        }
	    }
	    Event_BuyEnergyCancelledAfterNotEnoughEnergyDialog_PressedPlayCamp() {
	        Glob.request_LoadHome();
	        LayerMgr.ins().close(UiConst.WorldInfoView);
	        LayerMgr.ins().close(UiConst.WorldView);
	    }
	    Event_EnergyRefillPurchaseRequested() {
	        let costToRefillEnergy = this.refillEnergyCost();
	        if (!this.CanAfford(ECurrency.Diamond, costToRefillEnergy)) {
	            GuiMgr.errorMessage("Somehow confirmed a Chalice purchase when the player can't afford it. Cost: " + costToRefillEnergy + " " + ECurrency.Diamond);
	            return;
	        }
	        this.refillEnergy();
	        SoundMgr.ins().playSound("m42");
	        LayerMgr.ins().close(UiConst.ModalDialogConfirmPurchase);
	        SaveLoad.SaveEssentials();
	    }
	}

	class ApiMgr {
	    constructor() {
	    }
	    static get window() {
	        return window;
	    }
	    static setHead(head) {
	        if (!head || head == "")
	            return;
	        this.head = head + "/";
	    }
	    static noHead() {
	        return !this.head;
	    }
	    static setSign(v) {
	        this.sign = v;
	    }
	    static onError(event) {
	        console.log("http back error : " + event);
	    }
	    static onSuc(data) {
	        let jd = JSON.parse(data);
	        if (jd.code == 200) {
	        }
	        else {
	        }
	    }
	    static loginBack() {
	        let url = LoginData.backIp + "/player/login";
	        let sign = MD5.ins().hex_md5(LoginData.account + LoginData.agent + LoginData.channel + LoginData.backKey);
	        var param = "openId=" + LoginData.account
	            + "&token=" + LoginData.plToken
	            + "&agent=" + LoginData.agent
	            + "&channel=" + LoginData.currChannel
	            + "&platform=" + LoginData.pf
	            + "&sign=" + sign;
	        console.log("loginBack:" + url + " " + param);
	        Http.create().success(this.onLoginBackSuc, this)
	            .error(this.onLoginBackErr, this)
	            .post(url, param);
	    }
	    static onLoginBackSuc(data) {
	        console.log("onLoginBackSuc:" + data);
	        let jd = JSON.parse(data);
	        if (jd.code == 200) {
	            MsgCenter.notify(MsgConst.LOGIN_BACK_SUC, jd.data);
	        }
	        else {
	            ConnectMgr.reload(jd.code.toString());
	            console.log(jd.msg);
	        }
	    }
	    static onLoginBackErr(data) {
	        console.log("onLoginBackErr:" + data);
	        ConnectMgr.reload("0");
	    }
	    static createOrder(productId, productName) {
	        let url = LoginData.backIp + "/order/create";
	        let sign = MD5.ins().hex_md5(LoginData.account + UserData.playerId + LoginData.areaId + productId + LoginData.backKey);
	        var param = "openId=" + LoginData.account
	            + "&playerId=" + UserData.playerId
	            + "&serverId=" + LoginData.areaId
	            + "&productId=" + productId
	            + "&productName=" + productName
	            + "&sign=" + sign;
	        console.log("createOrder:" + url + " " + param);
	        Http.create().success(this.onCreateOrderSuc, this)
	            .error(this.onCreateOrderErr, this)
	            .post(url, param);
	    }
	    static onCreateOrderSuc(data) {
	        console.log("onCreateOrderSuc:" + data);
	        let jd = JSON.parse(data);
	        if (jd.code == 200) {
	            let orderId = jd.data.orderId;
	            let productId = jd.data.productId;
	            let obj = {};
	            obj.areaId = LoginData.areaId;
	            obj.productName = PaySHopCfg.getGoodsNameById(productId);
	            obj.productId = productId;
	            obj.playerId = UserData.playerId;
	            obj.playerName = UserData.playerName;
	            obj.playerLevel = UserData.playerLevel;
	            obj.orderId = orderId;
	            obj.orderAnmout = PaySHopCfg.getRechargePrice(productId);
	            let arg = JSON.stringify(obj);
	            PlatBridge.plPay(arg);
	        }
	        else {
	            console.log(jd.msg);
	        }
	    }
	    static onCreateOrderErr(data) {
	        console.log("onCreateOrderErr:" + data);
	    }
	    static loginGate() {
	        ApiMgr.addNewLoginSta(LogLoginType.ClickLogin);
	        let url = LoginData.ip;
	        var param = "cmd=loginAccount"
	            + "&openId=" + LoginData.account
	            + "&operatorId=" + LoginData.operatorId
	            + "&version=" + Version.ver
	            + "&terminal=" + LoginData.terminal
	            + "&terminalType=" + LoginData.terminalType
	            + "&channel=" + LoginData.channel
	            + "&token=" + LoginData.token;
	        console.log("loginGate:" + url + " " + param);
	        Http.create().success(this.onLoginGateSuc, this)
	            .error(this.onLoginGateErr, this)
	            .post(url, param);
	    }
	    static onLoginGateSuc(data) {
	        console.log("onLoginGateSuc:" + data);
	        let jd = JSON.parse(data);
	        if (jd.code == 200) {
	            LoginData.accountId = jd.data.accountId;
	            LoginData.areaId = jd.data.areaId;
	            LoginData.loginPath = jd.data.loginPath;
	            LoginData.gateToken = jd.data.gateToken;
	            let tain = jd.data.mainTainValue;
	            if (tain > 0) {
	                ConnectMgr.maintain(tain);
	            }
	            else {
	                MsgCenter.notify(MsgConst.LOGIN_GATE_SUC);
	            }
	        }
	        else {
	            ConnectMgr.reload(jd.code.toString());
	            console.log(jd.message);
	        }
	    }
	    static onLoginGateErr(data) {
	        ConnectMgr.reload("1");
	        console.log("onLoginGateErr:" + data);
	    }
	    static callPay() {
	        if (LoginData.verCN) {
	            return;
	        }
	        this.fullscreen(false);
	        try {
	            this.window.callPay();
	        }
	        catch (e) { }
	    }
	    static callPayVip() {
	        this.fullscreen(false);
	        try {
	            this.window.callPayVip();
	        }
	        catch (e) { }
	    }
	    static callPayBy(id, name) {
	        this.fullscreen(false);
	        try {
	        }
	        catch (e) { }
	    }
	    static callUpgrade(lvl) {
	        try {
	            this.window.callUpgrade(lvl);
	        }
	        catch (e) { }
	    }
	    static addBookmark() {
	        try {
	            this.window.addBookmark();
	        }
	        catch (e) { }
	    }
	    static callReLogin() {
	        try {
	            this.window.callReLogin();
	        }
	        catch (e) { }
	    }
	    static gameCompleteRegistration() {
	        try {
	            if (LoginData.isNew) {
	                this.window.gameCompleteRegistration();
	            }
	        }
	        catch (e) { }
	    }
	    static fullscreen(b) {
	        try {
	            if (b) {
	                this.window.openFullscreen();
	            }
	            else {
	                this.window.exitFullscreen();
	            }
	        }
	        catch (e) { }
	    }
	    static fcmReg() {
	        try {
	            this.window.callAntiAddiction();
	        }
	        catch (e) { }
	    }
	    static initError() {
	        var self = this;
	        Laya.Browser.window.onerror = function (msg, url, line, column, detail) {
	            self.errorCount++;
	            if (self.errorCount > 4)
	                return;
	            var alertMsg;
	            var isUpload = true;
	            if (LoginData.uploadError && isUpload) {
	                self.addErrorRecord(msg, url, line, column, detail.stack);
	            }
	            if (self.errorCount > 3) {
	            }
	            if (detail) {
	                if (LoginData.gm > 0) {
	                    alert("出错啦，请把此信息截图给研发商，感谢!\n" + msg + "\n" + detail.stack);
	                }
	            }
	            self.reload();
	        };
	        Laya.Browser.window.onerrorUpload = function (msg, url, line, column, stack) {
	            self.addErrorRecord(msg, url, line, column, stack);
	        };
	    }
	    static windowFocus() {
	        try {
	            Laya.Browser.window.focus();
	        }
	        catch (e) {
	            console.log("ApiMgr.windowFocus ERROR!", e);
	        }
	    }
	    static longToNumber(v) {
	        var protobuf = Laya.Browser.window.protobuf;
	        return protobuf.util.LongBits.from(v).toNumber();
	    }
	    static record(param) {
	        let url = LoginData.logUrl;
	        if (!url)
	            return;
	        Http.create().success(this.onSuc, this)
	            .error(this.onError, this)
	            .post(url, param);
	    }
	    static commonParam() {
	        return {
	            areaId: LoginData.areaId,
	        };
	    }
	    static commonParam2() {
	        if (!UserData.player)
	            return {};
	        return {
	            playerId: UserData.playerId,
	            level: UserData.playerLevel,
	            createtime: UserData.createTime,
	            openId: LoginData.account,
	            channel: LoginData.channel,
	            currChannel: LoginData.currChannel,
	            operatorId: LoginData.operatorId,
	            token: UserData.logToken,
	            isInternal: UserData.isInternal,
	        };
	    }
	    static packageParam(...param) {
	        let obj = Object.assign({}, ...param);
	        let str = "";
	        for (let key in obj) {
	            str += ("&" + key + "=" + obj[key]);
	        }
	        return str;
	    }
	    static addRecord(cmd, usenum, leftnum, type) {
	        var param = "cmd=" + cmd + this.packageParam({ usenum, leftnum, type }, this.commonParam(), this.commonParam2());
	        this.record(param);
	    }
	    static addCurrencyRecord(currency, usenum, type) {
	        let cmd = null;
	        let amount = CurrencyMgr.ins().getAmount(currency);
	        switch (currency) {
	            case ECurrency.Diamond:
	                cmd = "addYbRecord";
	                break;
	            case ECurrency.Gold:
	                cmd = "addGoldRecord";
	                break;
	            case ECurrency.Stone:
	                cmd = "addStoneRecord";
	                break;
	            case ECurrency.Energy:
	                cmd = "addTiliRecord";
	                break;
	        }
	        if (cmd) {
	            this.addRecord(cmd, usenum, amount, type);
	        }
	    }
	    static addYbRecord(usenum, type) {
	        this.addCurrencyRecord(ECurrency.Diamond, usenum, type);
	    }
	    static addGoldRecord(usenum, type) {
	        this.addCurrencyRecord(ECurrency.Gold, usenum, type);
	    }
	    static addStoneRecord(usenum, type) {
	        this.addCurrencyRecord(ECurrency.Stone, usenum, type);
	    }
	    static addTiliRecord(usenum, type) {
	        this.addCurrencyRecord(ECurrency.Energy, usenum, type);
	    }
	    static addDragonForceRecord(usenum, leftnum, type) {
	        this.addRecord("addDragonForceRecord", usenum, leftnum, type);
	    }
	    static addCashRecord(usenum, leftnum, type) {
	        this.addRecord("addCashRecord", usenum, leftnum, type);
	    }
	    static addGoodsRecord(goodsType, sysId, spent, usenum, leftnum, type) {
	        let param = "cmd=addGoodsRecord" +
	            "&sysId=" + sysId +
	            "&spent=" + spent +
	            "&goodsType=" + goodsType +
	            this.packageParam({ usenum, leftnum, type }, this.commonParam(), this.commonParam2());
	        this.record(param);
	    }
	    static addErrorRecord(msg, url, line, column, detail) {
	        if (detail)
	            detail = detail.replace(/;/g, "$");
	        let param = "cmd=" + "addErrorRecord" +
	            this.packageParam({ usenum: 0, leftnum: 0, type: 0 }, this.commonParam(), this.commonParam2()) +
	            "&gameVersion=" + Version.ver +
	            "&msg=" + msg +
	            "&url=" + url +
	            "&line=" + line +
	            "&column=" + column +
	            "&detail=" + detail;
	        console.log("addErrorRecord:" + param);
	        this.record(param);
	    }
	    static addGuanQiaSta(id, type, count = 1) {
	        let param = "cmd=" + "addGuanQiaSta" +
	            "&id=" + id +
	            "&type=" + type +
	            "&count=" + count +
	            this.packageParam(this.commonParam2());
	        this.record(param);
	    }
	    static addHomeSta(id) {
	        let param = "cmd=" + "addHomeSta" +
	            "&id=" + id + this.packageParam(this.commonParam2());
	        this.record(param);
	    }
	    static addNewLoginSta(type) {
	        if (LocalData.ins().isLoginRecorded(type))
	            return;
	        let param = "cmd=" + "addNewLoginSta" +
	            "&type=" + type +
	            "&openId=" + LoginData.account;
	        this.packageParam(this.commonParam2());
	        let url = LoginData.logUrl;
	        if (!url)
	            return;
	        Http.create().success(this.onLoginRecordSuc, this, [type])
	            .error(this.onLoginRecordErr, this)
	            .post(url, param);
	    }
	    static onLoginRecordSuc(type, data) {
	        let jd = JSON.parse(data);
	        if (jd.code == 200) {
	            LocalData.ins().recordLogin(type);
	        }
	        else {
	            console.log(jd.errmsg);
	        }
	    }
	    static onLoginRecordErr(event) {
	    }
	    static reload() {
	        location.reload();
	    }
	}
	ApiMgr.guideKey = "3t92adf8OLqNd3abq";
	ApiMgr.errorCount = 0;
	var LogCostType;
	(function (LogCostType) {
	    LogCostType[LogCostType["KalaShop"] = 1] = "KalaShop";
	    LogCostType[LogCostType["EggShop"] = 2] = "EggShop";
	    LogCostType[LogCostType["ChestShop"] = 3] = "ChestShop";
	    LogCostType[LogCostType["BuildShop"] = 4] = "BuildShop";
	    LogCostType[LogCostType["EggBank"] = 5] = "EggBank";
	    LogCostType[LogCostType["LevelChest"] = 6] = "LevelChest";
	    LogCostType[LogCostType["DiamondChest"] = 7] = "DiamondChest";
	    LogCostType[LogCostType["MergeDouble"] = 8] = "MergeDouble";
	    LogCostType[LogCostType["WakeUpDragon"] = 9] = "WakeUpDragon";
	    LogCostType[LogCostType["QuickBuild"] = 10] = "QuickBuild";
	    LogCostType[LogCostType["UpTemple"] = 11] = "UpTemple";
	    LogCostType[LogCostType["SkipHomeTask"] = 12] = "SkipHomeTask";
	    LogCostType[LogCostType["SkipLevelTask"] = 13] = "SkipLevelTask";
	    LogCostType[LogCostType["LevelAndChallenge"] = 14] = "LevelAndChallenge";
	    LogCostType[LogCostType["ChallengeTime"] = 15] = "ChallengeTime";
	    LogCostType[LogCostType["ChallengeDouble"] = 16] = "ChallengeDouble";
	    LogCostType[LogCostType["Resign"] = 17] = "Resign";
	    LogCostType[LogCostType["BuyEnergy"] = 18] = "BuyEnergy";
	    LogCostType[LogCostType["CoinBuy"] = 19] = "CoinBuy";
	    LogCostType[LogCostType["StoneBuy"] = 20] = "StoneBuy";
	    LogCostType[LogCostType["PayForCell"] = 21] = "PayForCell";
	    LogCostType[LogCostType["PayForGift"] = 22] = "PayForGift";
	    LogCostType[LogCostType["PayForRookie"] = 23] = "PayForRookie";
	    LogCostType[LogCostType["SellDragon"] = 24] = "SellDragon";
	    LogCostType[LogCostType["SellProp"] = 25] = "SellProp";
	    LogCostType[LogCostType["EnergyCost"] = 26] = "EnergyCost";
	})(LogCostType || (LogCostType = {}));
	var LogEarnType;
	(function (LogEarnType) {
	    LogEarnType[LogEarnType["First"] = 101] = "First";
	    LogEarnType[LogEarnType["Shop"] = 102] = "Shop";
	    LogEarnType[LogEarnType["MonthLv1"] = 103] = "MonthLv1";
	    LogEarnType[LogEarnType["Gift"] = 104] = "Gift";
	    LogEarnType[LogEarnType["PickGemHome"] = 105] = "PickGemHome";
	    LogEarnType[LogEarnType["PickGemLevel"] = 106] = "PickGemLevel";
	    LogEarnType[LogEarnType["PickGoldHome"] = 107] = "PickGoldHome";
	    LogEarnType[LogEarnType["PickGoldLevel"] = 108] = "PickGoldLevel";
	    LogEarnType[LogEarnType["SellProp"] = 109] = "SellProp";
	    LogEarnType[LogEarnType["PickStoneHome"] = 110] = "PickStoneHome";
	    LogEarnType[LogEarnType["PickStoneLevel"] = 111] = "PickStoneLevel";
	    LogEarnType[LogEarnType["DragonMerge"] = 112] = "DragonMerge";
	    LogEarnType[LogEarnType["PropAdd"] = 113] = "PropAdd";
	    LogEarnType[LogEarnType["EnergyAdd"] = 114] = "EnergyAdd";
	})(LogEarnType || (LogEarnType = {}));
	var LogLevelType;
	(function (LogLevelType) {
	    LogLevelType[LogLevelType["Enter"] = 1] = "Enter";
	    LogLevelType[LogLevelType["Won"] = 2] = "Won";
	    LogLevelType[LogLevelType["Fail"] = 3] = "Fail";
	    LogLevelType[LogLevelType["BackToHome"] = 4] = "BackToHome";
	    LogLevelType[LogLevelType["BackToWorld"] = 5] = "BackToWorld";
	    LogLevelType[LogLevelType["ResetLevel"] = 6] = "ResetLevel";
	    LogLevelType[LogLevelType["BuyTimes"] = 7] = "BuyTimes";
	    LogLevelType[LogLevelType["StayTime"] = 8] = "StayTime";
	    LogLevelType[LogLevelType["CostDiamond"] = 9] = "CostDiamond";
	    LogLevelType[LogLevelType["CostGold"] = 10] = "CostGold";
	    LogLevelType[LogLevelType["CostStone"] = 11] = "CostStone";
	})(LogLevelType || (LogLevelType = {}));
	var LogLoginType;
	(function (LogLoginType) {
	    LogLoginType[LogLoginType["AppStart"] = 1] = "AppStart";
	    LogLoginType[LogLoginType["LoginLoadOk"] = 2] = "LoginLoadOk";
	    LogLoginType[LogLoginType["LoginViewLoadOk"] = 3] = "LoginViewLoadOk";
	    LogLoginType[LogLoginType["PrivateStart"] = 4] = "PrivateStart";
	    LogLoginType[LogLoginType["PrivatePass"] = 5] = "PrivatePass";
	    LogLoginType[LogLoginType["BeginLoad"] = 6] = "BeginLoad";
	    LogLoginType[LogLoginType["LoadSuccess"] = 7] = "LoadSuccess";
	    LogLoginType[LogLoginType["ClickLogin"] = 8] = "ClickLogin";
	    LogLoginType[LogLoginType["LoginOk"] = 9] = "LoginOk";
	    LogLoginType[LogLoginType["EnterGame"] = 10] = "EnterGame";
	    LogLoginType[LogLoginType["RoleData"] = 11] = "RoleData";
	})(LogLoginType || (LogLoginType = {}));

	class PConfig {
	    constructor() { }
	    static initJson() {
	        Loading.ins().setProgress(Loading.STEP_LANG);
	        Laya.loader.load("config/lang/" + AppCfg.lang + ".lang", Laya.Handler.create(this, this.langComplete), Laya.Handler.create(this, this.langProgress), Laya.Loader.TEXT);
	    }
	    static langComplete(data) {
	        ApiMgr.addNewLoginSta(LogLoginType.BeginLoad);
	        if (data != null) {
	            LanCfg.setData(data);
	            Laya.Text.langPacks = LanCfg.keys;
	        }
	        else if (AppCfg.lang != "en" && !this.langReload) {
	            this.langReload = true;
	            LocalData.ins().lang = AppCfg.lang = "en";
	            LocalData.ins().save();
	            this.initJson();
	            return;
	        }
	        this.initCfg();
	    }
	    static langProgress(evt) {
	        Loading.ins().setProgress(Loading.STEP_LANG + (Loading.STEP_CONFIG - Loading.STEP_LANG) * evt);
	    }
	    static initCfg() {
	        Loading.ins().setInfo(LanCfg.get("10010020"));
	        Loading.ins().setProgress(Loading.STEP_CONFIG);
	        Laya.loader.load("config/initCfg.txt", Laya.Handler.create(this, this.loadInitCfg), null, Laya.Loader.TEXT);
	    }
	    static loadInitCfg(data) {
	        if (data) {
	            let initCfgArr = data.split(",");
	            initCfgArr.forEach(element => {
	                PConfig.initCfgMap[element] = true;
	            });
	        }
	        Loading.ins().setInfo(LanCfg.get("10010021"));
	        Loading.ins().setProgress(Loading.STEP_ZIP);
	        Laya.Loader.typeMap["mpt"] = Laya.Loader.BUFFER;
	        let bufferUrls = ["config/config.mpt"];
	        Laya.loader.load(bufferUrls, Laya.Handler.create(this, this.loadCfg), null);
	    }
	    static loadCfg(isTure) {
	        if (isTure) {
	            let tt = Laya.timer.currTimer;
	            let len = 0, cur = 0;
	            let data = Laya.loader.getRes("config/config.mpt");
	            let z = new window["JSZip"]();
	            z.loadAsync(data).then((zip) => {
	                zip.forEach(function (name, file) {
	                    len++;
	                    file.async("text").then(function (data) {
	                        cur++;
	                        if (PConfig.initCfgMap[name]) {
	                            PConfig.configs[name] = JSON.parse(data);
	                        }
	                        else {
	                            PConfig.configs[name] = data;
	                        }
	                        if (cur >= len) {
	                            PConfig.isInited = true;
	                            console.log("解析配置所花费时间(ms):", Laya.timer.currTimer - tt);
	                            MsgCenter.notify(MsgConst.CONFIG_COMPLETE);
	                        }
	                    });
	                });
	            });
	        }
	        else {
	            console.error("配置等相关资源加载失败");
	        }
	    }
	    static getCfg(name) {
	        let curData = this.configs[name];
	        if (curData != null) {
	            if (typeof curData === "string") {
	                if (name.search(/.json$/) > -1) {
	                    try {
	                        this.configs[name] = JSON.parse(curData);
	                    }
	                    catch (error) {
	                        console.error("配置文件格式不是正确json格式：" + name);
	                        return;
	                    }
	                    curData = this.configs[name];
	                }
	                else {
	                    return curData;
	                }
	            }
	            return curData;
	        }
	        else {
	            console.error("项目中没有找到" + name + "名的配置文件");
	            return null;
	        }
	    }
	}
	PConfig.isInited = false;
	PConfig.initCfgMap = {};
	PConfig.configs = {};
	PConfig.langReload = false;

	class FilterText extends Singleton {
	    constructor() {
	        super();
	        this.filters = new Array();
	        this.createRegularExpression();
	    }
	    createRegularExpression() {
	        if (!PConfig.isInited) {
	            console.error("FilterText.createRegularExpression error!Because Pconfig.isInited is false!");
	            return;
	        }
	        let role = PConfig.getCfg("filterName.txt");
	        let roleFilter = new FilterMsg();
	        roleFilter.createRegExpStr(role);
	        let sub = PConfig.getCfg("filterSubName.txt");
	        roleFilter.createRegExpStr(sub);
	        this.filters[FilterText.NAME] = roleFilter;
	        let chat = PConfig.getCfg("filterChat.txt");
	        let chatFilter = new FilterMsg();
	        chatFilter.createRegExpStr(chat);
	        chatFilter.createRegExpStr(role);
	        this.filters[FilterText.CHAT] = chatFilter;
	    }
	    getFilterStr(str, type = 0) {
	        if (type > 1 || str == null) {
	            return null;
	        }
	        let filter = this.filters[type];
	        if (filter == null) {
	            filter = this.filters[0];
	        }
	        return filter.getFilterStr(str);
	    }
	    isInvalid(str, isShieldSpace = false, type = 0) {
	        if (type > 1 || str == null) {
	            return false;
	        }
	        if (isShieldSpace && str.search(' ') != -1) {
	            return true;
	        }
	        let filter = this.filters[type];
	        if (filter == null) {
	            filter = this.filters[0];
	        }
	        var str = filter.invalid(str);
	        if (str == null) {
	            return false;
	        }
	        else {
	            return true;
	        }
	    }
	    invalid(str, type = 0) {
	        if (type > 1 || str == null) {
	            return null;
	        }
	        let filter = this.filters[type];
	        if (filter == null) {
	            filter = this.filters[0];
	        }
	        return filter.invalid(str);
	    }
	}
	FilterText.NAME = 0;
	FilterText.CHAT = 1;
	class FilterMsg {
	    constructor() {
	        this.wordMap = {};
	    }
	    createRegExpStr(str) {
	        if (str == null) {
	            return;
	        }
	        str = str.replace(/\r/g, "");
	        let temp = str.split(/\n/);
	        let count = temp.length;
	        for (let i = 0; i < count; ++i) {
	            this.addWord(temp[i]);
	        }
	    }
	    addWord(word) {
	        if (word == "" || word == null)
	            return;
	        word = word.replace("(", "\\(");
	        word = word.replace(")", "\\)");
	        if (word.length > 0) {
	            let c = word[0];
	            if (this.wordMap[c]) {
	                this.wordMap[c] += "|" + word;
	            }
	            else {
	                this.wordMap[c] = word;
	            }
	        }
	    }
	    getFilterStr(str) {
	        if (str == "" || str == null) {
	            return str;
	        }
	        for (let i = 0; i < str.length; ++i) {
	            let c = str[i];
	            if (c != '*') {
	                let s = this.wordMap[c];
	                if (s) {
	                    let reg = new RegExp(s, "g");
	                    let replaceStr = "";
	                    let replaceList = reg.exec(str);
	                    if (replaceList) {
	                        for (let val of replaceList) {
	                            for (let j = 0; j < val.length; j++) {
	                                replaceStr += "*";
	                            }
	                        }
	                    }
	                    str = str.replace(reg, replaceStr);
	                }
	            }
	        }
	        return str;
	    }
	    invalid(str) {
	        for (let i = 0; i < str.length; ++i) {
	            let c = str[i];
	            if (c != '*') {
	                let s = this.wordMap[c];
	                if (s) {
	                    let reg = new RegExp(s);
	                    let match = str.match(reg);
	                    if (match) {
	                        return match[0];
	                    }
	                }
	            }
	        }
	        return null;
	    }
	}

	class StringUtil {
	    static isEmpty(obj) {
	        if (obj == undefined || obj == null || obj == "") {
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    static strIsEmpty(str) {
	        if (str) {
	            if (typeof (str) === "string") {
	                str = str.trim();
	                return this.isEmpty(str);
	            }
	            return false;
	        }
	        return true;
	    }
	    static format(format, ...args) {
	        return this.formatArr(format, args);
	    }
	    static formatArr(format, args, argsLang = false) {
	        if (!args)
	            return format;
	        var str;
	        var len = args.length;
	        for (var i = 0; i < len; i++) {
	            str = args[i];
	            if (str == null) {
	                str = "";
	            }
	            else {
	                str = str.toString();
	                if (argsLang) {
	                    str = LanCfg.get(str);
	                }
	            }
	            format = format.replace(new RegExp("\\{" + i + "\\}", "g"), str);
	        }
	        format = format.replace(new RegExp("\\{" + "#" + "\\}", "g"), str);
	        return format;
	    }
	    static formatNum(num) {
	        if (!num)
	            return "0";
	        let numStr = num.toString();
	        let result = '';
	        while (numStr.length > 3) {
	            result = ',' + numStr.slice(-3) + result;
	            numStr = numStr.slice(0, numStr.length - 3);
	        }
	        if (numStr) {
	            result = numStr + result;
	        }
	        return result;
	    }
	    static formatStr(str) {
	        var numArr = str.split(",");
	        var total = 0;
	        var newStr = numArr.join("");
	        var newVal = Number(newStr);
	        if (newVal) {
	            total = newVal;
	        }
	        return total;
	    }
	    static checkName(name) {
	        var ret = { pass: false, msg: "" };
	        if (name.length == 0) {
	            ret.msg = LoginData.verCN ? LanCfg.get("10630007") : LanCfg.get("10630004");
	            return ret;
	        }
	        var filter = FilterText.ins().invalid(name);
	        if (filter != null) {
	            ret.msg = LanCfg.get("10630003") + filter;
	            return ret;
	        }
	        var nameLen = StringUtil.gblen(name);
	        var min = 3, max = 14;
	        var nameReg;
	        var regKey = "10630005";
	        if (LoginData.verCN) {
	            min = 4;
	            max = 12;
	            if (nameLen < min) {
	                ret.msg = LanCfg.get("10630007");
	                return ret;
	            }
	            if (nameLen > max) {
	                ret.msg = LanCfg.get("10630008");
	                return ret;
	            }
	            nameReg = /^(?![0-9]+$)[\u4e00-\u9fa50-9A-Za-z]{1,20}$/;
	            regKey = "10630006";
	        }
	        else {
	            if (nameLen < min || nameLen > max) {
	                ret.msg = LanCfg.get("10630004");
	                return ret;
	            }
	            nameReg = /^(?![0-9]+$)[0-9A-Za-z]{1,20}$/;
	        }
	        if (!nameReg.test(name)) {
	            ret.msg = LanCfg.get(regKey);
	            return ret;
	        }
	        ret.pass = true;
	        return ret;
	    }
	    static formatEmail(str) {
	        var r = str.replace(/#/g, "*");
	        r = r.replace(/\^/g, "*");
	        r = this.filterEmoji(r);
	        return r;
	    }
	    static filterEmoji(str) {
	        var ret = str.replace(/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]|[\uD800-\uDBFF]|[\uDC00-\uDFFF]/g, "");
	        return ret;
	    }
	    static filterSpechars(str) {
	        var ret = str.replace(this.spechars, "");
	        return ret;
	    }
	    static testSpechars(str, alert = true) {
	        this.spechars.lastIndex = 0;
	        var ret = this.spechars.test(str);
	        if (alert && ret) {
	            FloatMsgUtil.start(LanCfg.get("30070034"));
	        }
	        return ret;
	    }
	    static gblen(str) {
	        if (!str)
	            return 0;
	        var len = 0;
	        for (var i = 0; i < str.length; i++) {
	            var c = str.charCodeAt(i);
	            if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
	                len++;
	            }
	            else {
	                len += 2;
	            }
	        }
	        return len;
	    }
	}
	StringUtil.spechars = /[`\[\]',~!#$%^&*()_\\+=<>?:"{}|~！#￥%……&*（）={}|《》？：“”【】、；’‘，。、\s+]/g;

	class RollText extends Laya.Script {
	    constructor() {
	        super(...arguments);
	        this.to = 0;
	        this.from = 0;
	        this.time = 0;
	        this.progressHandler = null;
	        this.completeHandler = null;
	        this.value = 0;
	        this.currTime = 0;
	        this.isRolling = false;
	    }
	    get distance() {
	        return this.to - this.from;
	    }
	    get precent() {
	        return Math.min(this.currTime / this.time, 1);
	    }
	    get percentVal() {
	        return this.from + Math.floor(this.precent * this.distance);
	    }
	    reset() {
	        this.to = 0;
	        this.time = 0;
	        this.from = 0;
	        this.progressHandler = null;
	        this.completeHandler = null;
	        this.owner.scale(this.lblScaleX, this.lblScaleY);
	        this.lblScaleX = 0;
	        this.lblScaleY = 0;
	        this.currTime = 0;
	        this.isRolling = false;
	    }
	    progress(val) {
	        if (this.progressHandler) {
	            this.progressHandler.runWith(val);
	        }
	        else {
	            this.owner.text = StringUtil.formatNum(val);
	        }
	    }
	    finish() {
	        let val = this.to;
	        this.progress(val);
	        this.completeHandler && this.completeHandler.runWith(val);
	        this.reset();
	        this.enabled = false;
	    }
	    roll(to, time, progress = null, complete = null) {
	        if (to === this.value) {
	            if (progress) {
	                progress.runWith(to);
	            }
	            else {
	                this.owner.text = to.toString();
	            }
	            complete && complete.runWith(to);
	            return;
	        }
	        if (this.isRolling) {
	            this.reset();
	        }
	        this.to = to;
	        this.from = this.value;
	        this.value = to;
	        this.time = time;
	        this.progressHandler = progress;
	        this.completeHandler = complete;
	        this.isRolling = true;
	        if (!this.enabled) {
	            this.enabled = true;
	        }
	        this.lblScaleX = this.owner.scaleX;
	        this.lblScaleY = this.owner.scaleY;
	        this.owner.scale(this.lblScaleX + 0.3, this.lblScaleY + 0.3);
	    }
	    onUpdate() {
	        if (this.isRolling) {
	            if (this.currTime >= this.time) {
	                this.finish();
	                return;
	            }
	            this.progress(this.percentVal);
	            this.currTime += Laya.timer.delta;
	        }
	    }
	}

	class ShopTabItem extends Laya.Box {
	    set locked(val) {
	        this._locked = val;
	        this.onLockedChange();
	    }
	    get locked() {
	        return this._locked;
	    }
	    set selected(val) {
	        this._selected = val;
	        this.onSelectedChange();
	    }
	    get selected() {
	        return this._selected;
	    }
	    set clickHandler(val) {
	        this._clickHandler = val;
	    }
	    get clickHandler() {
	        return this._clickHandler;
	    }
	    onLockedChange() {
	        let locked = this.locked;
	        this.imgLock.visible = locked;
	        this.button.alpha = locked ? 0.7 : 1;
	        if (locked) {
	            this.button.mouseEnabled = false;
	            this.off(Laya.Event.CLICK, this, this.onClick);
	        }
	        else {
	            this.button.mouseEnabled = true;
	            this.on(Laya.Event.CLICK, this, this.onClick);
	        }
	    }
	    onSelectedChange() {
	        if (this.button) {
	            this.button.selected = this.selected;
	            this.button.height = this.selected ? 76 : 66;
	        }
	    }
	    onClick() {
	        this._clickHandler && this._clickHandler.run();
	    }
	    onAwake() {
	        this.button = this.getChildAt(0);
	        this.imgLock = this.getChildAt(1);
	        this.imgIcon = this.button.getChildAt(0);
	        this.onLockedChange();
	        this.onSelectedChange();
	    }
	}

	class NoLangLabel extends Laya.Label {
	    constructor(text) {
	        super(text);
	    }
	    set text(value) {
	        var tmp = Laya.Text.langPacks;
	        Laya.Text.langPacks = null;
	        super.text = value;
	        Laya.Text.langPacks = tmp;
	    }
	}

	class PanelStack extends Laya.Box {
	    constructor() {
	        super(...arguments);
	        this.isInit = false;
	        this._selectedIndex = -1;
	        this.items = [];
	        this.classes = [];
	    }
	    get length() {
	        return this.classes.length;
	    }
	    isSelectItem() {
	        return !!this.selection;
	    }
	    set selectedIndex(index) {
	        if (typeof index !== "number" || -1 > index || index >= this.length)
	            return;
	        if (this._selectedIndex !== index) {
	            let preIndex = this._selectedIndex;
	            if (this.isSelectItem()) {
	                this.selection.visible = false;
	                this.selection.onExit();
	            }
	            this._selectedIndex = index;
	            if (index !== -1) {
	                if (this.isSelectItem()) {
	                    this.selection.visible = true;
	                }
	                else {
	                    let cls = this.classes[index];
	                    let sp = new cls();
	                    this.addChild(sp);
	                    this.items[index] = sp;
	                }
	                this.selection.onEnter();
	            }
	            this._selectHandler && this._selectHandler.runWith([index, preIndex]);
	        }
	    }
	    get selectedIndex() {
	        return this._selectedIndex;
	    }
	    set selectHandler(value) {
	        this._selectHandler = value;
	    }
	    get selectHandler() {
	        return this._selectHandler;
	    }
	    get selection() {
	        return this.getItem(this._selectedIndex);
	    }
	    init(list, index) {
	        if (this.isInit)
	            return;
	        this.isInit = true;
	        this.classes = list;
	        this.items = list.map(cls => null);
	        if (!isNaN(index)) {
	            this.selectedIndex = index;
	        }
	    }
	    getItem(index) {
	        return this.items[index] || null;
	    }
	    resetIndex() {
	        this.selectedIndex = -1;
	    }
	    onDestroy() {
	        this.classes = this.items = this._selectHandler = null;
	    }
	}

	class GameConfig {
	    constructor() { }
	    static init() {
	        var reg = Laya.ClassUtils.regClass;
	        reg("frame/ui/ScaleButton.ts", ScaleButton);
	        reg("frame/ui/HtmlLabel.ts", HtmlLabel);
	        reg("frame/ui/TimerBox.ts", TimerBox);
	        reg("module/atlas/AtlasTabItem.ts", AtlasTabItem);
	        reg("frame/ui/ModalCom.ts", ModalCom);
	        reg("frame/ui/RollText.ts", RollText);
	        reg("module/shop/ShopTabItem.ts", ShopTabItem);
	        reg("frame/ui/NoLangLabel.ts", NoLangLabel);
	        reg("frame/view/PanelStack.ts", PanelStack);
	    }
	}
	GameConfig.width = 1334;
	GameConfig.height = 750;
	GameConfig.scaleMode = "fixedauto";
	GameConfig.screenMode = "none";
	GameConfig.alignV = "top";
	GameConfig.alignH = "left";
	GameConfig.startScene = "data/window/WorldView.scene";
	GameConfig.sceneRoot = "";
	GameConfig.debug = false;
	GameConfig.stat = true;
	GameConfig.physicsDebug = false;
	GameConfig.exportSceneToJson = true;
	GameConfig.init();

	class LoginView extends Laya.View {
	    constructor() {
	        super();
	        this.loadScene("data/window/LoginView.scene");
	    }
	    onAwake() {
	        super.onAwake();
	        this.event(LoginView.AWAKE);
	        this.init();
	    }
	    init() {
	        this.ipTi.text = "ws://gzyiyu.qicp.vip:18001/websocket";
	        this.areaIdTi.text = "1";
	        this.accountTi.text = "test";
	        var login = Laya.LocalStorage.getJSON("login");
	        if (login) {
	            if (login.account)
	                this.accountTi.text = login.account;
	            if (login.ip)
	                this.ipTi.text = login.ip;
	            if (login.areaId)
	                this.areaIdTi.text = login.areaId;
	            if (login.loginSig)
	                this.loginSigTi.text = login.loginSig;
	        }
	        if (LoginView.PF == 1) {
	            this.ipTi.text = "ws://47.88.62.56:8001/websocket";
	            this.areaIdTi.text = "1";
	            this.loginSigTi.text = "";
	            this.ipTi.visible = this.areaIdTi.visible = this.loginSigTi.visible = false;
	            this.ipLbl.visible = this.areaIdLbl.visible = this.loginSigLbl.visible = false;
	        }
	        this.loginBtn.on(Laya.Event.MOUSE_DOWN, this, this.onLogin);
	        this.ipLbl.visible = this.ipTi.visible = this.areaIdLbl.visible = this.areaIdTi.visible = this.loginSigLbl.visible = this.loginSigTi.visible = false;
	    }
	    onLogin() {
	        if (this.accountTi.text == "")
	            return;
	        var local = {};
	        local.account = this.accountTi.text;
	        local.ip = this.ipTi.text;
	        local.areaId = this.areaIdTi.text;
	        local.loginSig = this.loginSigTi.text;
	        Laya.LocalStorage.setJSON("login", local);
	        var loginArg = {};
	        loginArg.ip = this.ipTi.text;
	        loginArg.port = 0;
	        loginArg.account = this.accountTi.text;
	        loginArg.loginSig = this.loginSigTi.text;
	        loginArg.areaId = Number(this.areaIdTi.text);
	        loginArg.guideData = "";
	        loginArg.openGM = true;
	        loginArg.api = "";
	        loginArg.new = false;
	        loginArg.lang = LoginView.PF == 1 ? "en" : "zh";
	        loginArg.debug = false;
	        loginArg.gm = LoginView.PF == 1 ? 0 : 1;
	        loginArg.openLang = ["zh"];
	        loginArg.ip = "";
	        loginArg.gm = loginArg.account.substring(3, 5) == "gm" ? 1 : 0;
	        this.event(LoginView.LOGIN, { loginArg: loginArg, cdnArg: null });
	    }
	}
	LoginView.PF = 0;
	LoginView.LOGIN = "LOGIN";
	LoginView.AWAKE = "AWAKE";

	class SL_Bag {
	    constructor() {
	        this.id = SaveLoadConst.BAG;
	        this.bagIds = [];
	    }
	    export() {
	        let obj = SyncObj.create();
	        obj.setValue("0", SyncObj.serializeFromArray(this.bagIds));
	        return obj;
	    }
	    import(data) {
	        let val = data.getValue("0");
	        this.bagIds = val ? SyncObj.deserializeToArray(val) : [];
	    }
	}

	var BagType;
	(function (BagType) {
	    BagType[BagType["Diamond"] = 1] = "Diamond";
	    BagType[BagType["PROP"] = 3] = "PROP";
	    BagType[BagType["PAYLAND"] = 4] = "PAYLAND";
	})(BagType || (BagType = {}));
	class BagCmd {
	    constructor() {
	        this.funMap = {};
	        this.init();
	    }
	    init() {
	        this.funMap[BagType.Diamond] = this.diamond;
	        this.funMap[BagType.PROP] = this.prop;
	        this.funMap[BagType.PAYLAND] = this.payLand;
	    }
	    exe(vo) {
	        let fun = this.funMap[vo.type];
	        if (!fun)
	            return;
	        fun(vo);
	    }
	    diamond(vo) {
	        CurrencyMgr.ins().credit(ECurrency.Diamond, vo.number);
	    }
	    prop(vo) {
	        if (Glob.inHome) {
	            ExchangeRewardsMgr.createLootBundle(vo.sysId, vo.number);
	        }
	        else {
	            ExchangeRewardsMgr.bringHomeData(vo.sysId, vo.number);
	        }
	    }
	    payLand(vo) {
	        if (Glob.inHome) {
	            BuyLandMgr.ins().onPurchseOk(vo.sysId);
	        }
	        else {
	            ExchangeRewardsMgr.saveLandId(vo.sysId);
	        }
	    }
	}

	class BagVo {
	}

	class BagMgr {
	    static init() {
	        MsgCenter.listen(MsgConst.R_BAG_UPATE, this.rBagUpdate, this);
	        MsgCenter.listen(MsgConst.R_BAG_LIST, this.rBagList, this);
	    }
	    static initBag() {
	        this.cmd = new BagCmd();
	        this.slBag = new SL_Bag();
	        SaveLoad.load(this.slBag);
	        this.clearBag();
	        this.startTimer();
	    }
	    static clearBag() {
	        let ids = this.slBag.bagIds;
	        let nowTime = TimeMgr.ins().getTime();
	        let newIds = [];
	        for (let item of ids) {
	            if (!item)
	                continue;
	            let list = item.split("_");
	            let time = list[1];
	            if (time) {
	                let go = nowTime - parseInt(time);
	                if (go < this.maxTime) {
	                    newIds.push(item);
	                }
	            }
	        }
	        this.slBag.bagIds = newIds;
	    }
	    static rBagList(msg) {
	        this.updateList = [];
	        this.rBagUpdate(msg);
	    }
	    static rBagUpdate(msg) {
	        if (!msg || msg.length == 0)
	            return;
	        for (let item of msg) {
	            let vo = new BagVo();
	            vo.index = item.index;
	            vo.type = item.type;
	            vo.sysId = item.sysId;
	            vo.number = item.number;
	            vo.startTime = ProtUtil.ltn(item.startTime);
	            vo.soruce = item.soruce;
	            vo.guid = vo.index + "_" + vo.startTime;
	            this.updateList.push(vo);
	        }
	        this.startTimer();
	    }
	    static startTimer() {
	        if (this.isTimerStart)
	            return;
	        if (!this.slBag)
	            return;
	        Laya.timer.loop(100, this, this.onUpdate);
	        this.isTimerStart = true;
	    }
	    static stopTimer() {
	        Laya.timer.clear(this, this.onUpdate);
	        this.isTimerStart = false;
	    }
	    static onUpdate() {
	        if (this.updateList.length <= 0) {
	            this.stopTimer();
	            return;
	        }
	        let ids = this.slBag.bagIds;
	        let indexs = [];
	        let i = 20;
	        while (i > 0) {
	            let item = this.updateList.shift();
	            if (item.type == 0 && item.sysId == 0) {
	                ArrayUtil.remove(ids, item.guid);
	            }
	            else {
	                if (!ArrayUtil.contains(ids, item.guid)) {
	                    this.cmd.exe(item);
	                    ids.push(item.guid);
	                }
	                indexs.push(item.index);
	                i--;
	            }
	            if (this.updateList.length <= 0) {
	                i = 0;
	            }
	        }
	        ProxyMgr.bag.sConfirm(indexs);
	        SaveLoad.save(this.slBag);
	    }
	}
	BagMgr.updateList = [];
	BagMgr.isTimerStart = false;
	BagMgr.maxTime = 3600 * 24 * 7 * 1000;

	class EnemyCfg {
	    static init() {
	        this.cfg = {};
	        let cfg = PConfig.getCfg("Enemys.json");
	        for (let key in cfg) {
	            let vo = new EnemyCfgVo(key, cfg[key]);
	            this.cfg[key] = vo;
	        }
	    }
	    static get(cid) {
	        return PropsCfg.get(cid);
	    }
	}

	class MonstersCfg {
	    static init() {
	        this.cfg = {};
	        let cfg = PConfig.getCfg("Monsters.json");
	        for (let key in cfg) {
	            let vo = new MonsterCfgVo(key, cfg[key]);
	            this.cfg[key] = vo;
	        }
	    }
	    static get(cid) {
	        return PropsCfg.get(cid);
	    }
	}

	class KeyboardUtil {
	    constructor() {
	        this.keyCode = -1;
	        Laya.stage.on(Laya.Event.KEY_DOWN, this, this.KeyboardDown);
	        Laya.stage.on(Laya.Event.KEY_UP, this, this.KeyboardUp);
	    }
	    KeyboardDown(evt) {
	        if (this.keyCode == evt.keyCode) {
	            if (Laya.timer.currTimer - this.lastKeyDownTime < 500)
	                return;
	        }
	        this.lastKeyDownTime = Laya.timer.currTimer;
	        switch (evt.keyCode) {
	            case 27:
	                PlatBridge.onBackPressed();
	                break;
	            case 71:
	                if (evt.shiftKey) {
	                    if (LoginData.gm > 0) {
	                        LayerMgr.ins().open(UiConst.GmView);
	                    }
	                }
	                else {
	                }
	                break;
	            case 70:
	                if (Glob.inHome) {
	                    LayerMgr.ins().closeAll();
	                    WorldMgr.ins().enterWorld();
	                }
	                else if (Glob.inLevel) {
	                    LayerMgr.ins().closeAll();
	                    Glob.levelOnBack();
	                }
	                else {
	                    console.log("111111111111111111111111111111");
	                }
	                break;
	            case 87:
	                break;
	        }
	        this.keyCode = evt.keyCode;
	    }
	    KeyboardUp(evt) {
	        switch (evt.keyCode) {
	        }
	    }
	}

	class Init {
	    static init() {
	        ApiMgr.addNewLoginSta(LogLoginType.LoginLoadOk);
	        PConfig.initJson();
	        Glob.socketMgr.init();
	        ProxyMgr.init();
	        MapUtil.init();
	        Glob.init();
	        BagMgr.init();
	    }
	    static preEnterGame() {
	        ApiMgr.addNewLoginSta(LogLoginType.EnterGame);
	        Laya.timer.frameLoop(1, this, this.frameInit);
	        PlatBridge.plEnterGame();
	    }
	    static frameInit() {
	        if (this.frame == 1) {
	            Loading.ins().initMsg();
	            new KeyboardUtil();
	            CompBlinker.init();
	            TileCfg.init();
	        }
	        else if (this.frame == 2) {
	            MatchRecipeCfg.init();
	            LootTablesCfg.init();
	            ProjectileCfg.init();
	        }
	        else if (this.frame == 3) {
	            PropsCfg.init();
	            MonstersCfg.init();
	            EnemyCfg.init();
	        }
	        else if (this.frame == 4) {
	            LootListCfg.init();
	            this.enterLoad();
	            WorldMgr.ins().init();
	            CurrencyMgr.ins().init();
	            UiPrefMgr.init();
	        }
	        else if (this.frame == 5) {
	            this.initUi();
	        }
	        else if (this.frame == 6) {
	            ThingCompMgr.init();
	            this.initOwnedMonster();
	            this.initObjectStates();
	        }
	        else if (this.frame == 7) {
	            TomeTip.init();
	            TomeTip.load(SaveLoad.LoadTutorial());
	            GoalMgr.ins().init();
	        }
	        else if (this.frame == 8) {
	            BagMgr.initBag();
	        }
	        else if (this.frame == 9) {
	            FirstChargeMgr.init();
	            BuyDiamondsMgr.init();
	            SignInMgr.init();
	        }
	        else if (this.frame == 10) {
	        }
	        else if (this.frame > 10) {
	            this.enterGame();
	            Laya.timer.clear(this, this.frameInit);
	        }
	        this.frame++;
	    }
	    static enterGame() {
	        Glob.isEnterGame = true;
	        Loading.ins().hide();
	        MsgCenter.notify(MsgConst.ENTER_GAME);
	        this.initScene();
	        WorldMgr.ins().loadLevelOrWorld();
	        SaveMgr.init();
	        ActivityMgr.OpenOnlineTimer();
	    }
	    static enterLoad() {
	        SL_PlayExpand.enterLoad();
	        SL_DailyQuest.enterLoad();
	    }
	    static initOwnedMonster() {
	        let data = SaveLoad.loadMonsters();
	        OwnedMonsterMgr.init(data);
	    }
	    static initObjectStates() {
	        let data = SaveLoad.loadObjectStates();
	        if (data) {
	            data.initObjectDefStateFromSaveData();
	        }
	    }
	    static initUi() {
	        CornerUiMgr.ins().init();
	    }
	    static initScene() {
	        Glob.scene.init();
	    }
	}
	Init.frame = 0;

	class Main {
	    constructor() {
	        this.isInitScale = false;
	        console.log("Main.constructor");
	        var config = new Config3D();
	        config.isAntialias = true;
	        if (window["Laya3D"])
	            Laya3D.init(GameConfig.width, GameConfig.height, config);
	        else
	            Laya.init(GameConfig.width, GameConfig.height, Laya["WebGL"]);
	        Laya["Physics"] && Laya["Physics"].enable();
	        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
	        Laya.stage.scaleMode = GameConfig.scaleMode;
	        Laya.stage.screenMode = GameConfig.screenMode;
	        Laya.stage.alignV = GameConfig.alignV;
	        Laya.stage.alignH = GameConfig.alignH;
	        Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;
	        Laya.alertGlobalError(true);
	        let shader = Laya.Shader3D.find("Unlit");
	        shader["_enableInstancing"] = false;
	        this.initNoti();
	        ApiMgr.initError();
	        this.beforInit();
	    }
	    initNoti() {
	        MsgCenter.listen(MsgConst.INIT_APP, this.initApp, this);
	        MsgCenter.listen(MsgConst.LOGIN_BACK_SUC, this.loginBackSuc, this);
	        MsgCenter.listen(MsgConst.RELOAD, this.reload, this);
	        MsgCenter.listen(MsgConst.PL_INITED_ARG, this.plInitedArg, this);
	    }
	    beforInit() {
	        if (Platfrom.isMobile) {
	            Loading.ins().appInit();
	            PlatBridge.initNative();
	            PlatBridge.plInitArg();
	        }
	        else {
	            var cdnArg = window.getCdnArg();
	            var loginArg = window.getLoginArg();
	            var fver = window.getFileVer();
	            this.initArg(loginArg, cdnArg, fver);
	            this.initVersion();
	        }
	    }
	    plInitedArg() {
	        this.initVersion();
	    }
	    initArg(loginArg, cdnArg, fver = null) {
	        if (cdnArg) {
	            if (cdnArg.cdn) {
	                AppCfg.cdn = cdnArg.cdn;
	                if (AppCfg.cdn.charAt(AppCfg.cdn.length - 1) != "/") {
	                    AppCfg.cdn += "/";
	                }
	            }
	            AppCfg.binVersion = cdnArg.binVersion;
	            if (AppCfg.cdn && AppCfg.binVersion) {
	                AppCfg.basePath = cdnArg.cdn + cdnArg.binVersion + "/";
	                Laya.URL.basePath = AppCfg.basePath;
	            }
	        }
	        GameConfig.debug = Boolean(loginArg.debug);
	        LoginData.account = loginArg.account;
	        LoginData.ip = loginArg.ip;
	        LoginData.standAlone = LoginData.ip == "";
	        LoginData.port = Number(loginArg.port);
	        LoginData.areaId = Number(loginArg.areaId);
	        LoginData.areaName = loginArg.areaName ? loginArg.areaName : "";
	        LoginData.channelServer = loginArg.channelServer ? loginArg.channelServer : "";
	        LoginData.loginSig = loginArg.loginSig ? loginArg.loginSig : "";
	        LoginData.isNew = Boolean(loginArg.new);
	        LoginData.gm = loginArg.gm;
	        LoginData.openLang = loginArg.openLang ? loginArg.openLang : ["zh", "en"];
	        LoginData.guideData = loginArg.guideData;
	        LoginData.platSign = loginArg.platSign ? loginArg.platSign : "";
	        LoginData.platValue = loginArg.platValue ? loginArg.platValue : "";
	        LoginData.operatorId = loginArg.operatorId ? loginArg.operatorId : "1";
	        LoginData.loginIp = loginArg.loginIp ? loginArg.loginIp : "";
	        LoginData.logUrl = loginArg.logUrl ? loginArg.logUrl : null;
	        LoginData.pf = loginArg.pf ? loginArg.pf : "";
	        LoginData.pd = loginArg.pd ? loginArg.pd : "";
	        LoginData.uploadError = loginArg.uploadError ? Number(loginArg.uploadError) == 1 : true;
	        LoginData.uploadPage = loginArg.func ? loginArg.func.indexOf("page") >= 0 : false;
	        if (loginArg.age || loginArg.age == 0) {
	            LoginData.age = Number(loginArg.age);
	        }
	        if (loginArg.lang)
	            LoginData.lang = loginArg.lang;
	        if (loginArg.ver) {
	            LoginData.ver = Number(loginArg.ver);
	        }
	        if (fver)
	            Version.fileVer = fver;
	        this.initArgExt();
	    }
	    initArgMobile(loginArg) {
	        LoginData.token = loginArg.token;
	        LoginData.channel = loginArg.channel;
	        LoginData.loginIp = loginArg.loginIp;
	        LoginData.operatorId = String(loginArg.operatorId);
	        LoginData.ip = loginArg.serverUrl;
	        LoginData.logUrl = loginArg.logUrl;
	        if (loginArg.gm) {
	            LoginData.gm = loginArg.gm;
	        }
	        if (LoginData.pf == PlatformID.exter_test) {
	            LoginData.gm = 1;
	        }
	        this.initArgExt();
	    }
	    initArgExt() {
	        LocalData.setId(LoginData.account, LoginData.areaId);
	        AppCfg.lang = LocalData.ins().lang ? LocalData.ins().lang : LoginData.lang;
	        if (!AppCfg.lang || LoginData.openLang.indexOf(AppCfg.lang) < 0) {
	            AppCfg.lang = LoginData.verCN ? "zh" : "en";
	        }
	        console.log("AppCfg.lang:" + AppCfg.lang);
	        if (LoginData.gm > 0) {
	            Laya.Stat.show();
	            if (Laya.Utils.getQueryString("socket_timer")) {
	                SocketMgr.TIMER = Number(Laya.Utils.getQueryString("socket_timer"));
	            }
	            if (Laya.Utils.getQueryString("socket_num")) {
	                SocketMgr.NUM = Number(Laya.Utils.getQueryString("socket_num"));
	            }
	        }
	    }
	    initVersion() {
	        LoginData.isDebug = GameConfig.debug;
	        if (GameConfig.debug || Laya.Utils.getQueryString("debug") == "true")
	            Laya.enableDebugPanel();
	        if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"])
	            Laya["PhysicsDebugDraw"].enable();
	        var verUrl = Laya.Render.isConchApp ? "version.json" : "version.json?v=" + Version.fver;
	        Laya.ResourceVersion.enable(verUrl, Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
	    }
	    initApp() {
	        this.showGame();
	        this.loginView = new LoginView();
	        Laya.stage.addChild(this.loginView);
	        this.loginView.on(LoginView.LOGIN, this, this.onAppLogin);
	        this.loginView.on(LoginView.AWAKE, this, this.onAppAwake);
	    }
	    onAppLogin(data) {
	        let obj = {};
	        obj.uid = data.loginArg.account;
	        obj.token = "1";
	        let str = JSON.stringify(obj);
	        PlatBridge.jsLogined(str);
	        this.loginView.removeSelf();
	        this.loginView.off(LoginView.LOGIN, this, this.onAppLogin);
	        this.loginView.off(LoginView.AWAKE, this, this.onAppAwake);
	    }
	    onAppAwake() {
	        this.initScale();
	    }
	    showGame() {
	        if (Platfrom.isMobile)
	            return;
	        try {
	            window.showGame();
	        }
	        catch (e) { }
	    }
	    initScale() {
	        if (this.isInitScale)
	            return;
	        this.isInitScale = true;
	    }
	    onVersionLoaded() {
	        this.initScale();
	        this.showGame();
	        Loading.ins().show(Loading.STEP_VERSION);
	        Loading.ins().setProgress(Loading.STEP_FILECONFIG);
	        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
	    }
	    onConfigLoaded() {
	        LayerMgr.ins().init();
	        Loading.ins().setProgress(Loading.STEP_INIT);
	        MsgCenter.listen(MsgConst.LOGIN_GATE_SUC, this.onLoginGateSuc, this);
	        MsgCenter.listen(MsgConst.LOGIN_SUCCESS, this.onLoginSuccess, this);
	        MsgCenter.listen(MsgConst.RES_COMPLETE, this.onResComplete, this);
	        if (LoginData.standAlone) {
	            Init.init();
	            this.initStandAlone();
	            this.onLoginSuccess();
	            ConnectMgr.isLogined = true;
	        }
	        else {
	            if (Platfrom.isMobile) {
	                PlatBridge.plLogin();
	            }
	            else {
	                Init.init();
	                ApiMgr.loginGate();
	            }
	        }
	    }
	    loginBackSuc(data) {
	        this.initArgMobile(data);
	        Init.init();
	        ApiMgr.loginGate();
	    }
	    onResComplete() {
	        Glob.isResLoaded = true;
	        ConnectMgr.sLogin();
	        if (LoginData.standAlone) {
	            this.checkEnterGame();
	        }
	    }
	    onLoginGateSuc() {
	        this.connectSocket();
	    }
	    onLoginSuccess() {
	        ConnectMgr.isFirstLogin = false;
	        this.checkEnterGame();
	    }
	    checkEnterGame() {
	        if (Glob.isEnterGame)
	            return;
	        ApiMgr.addNewLoginSta(LogLoginType.LoginOk);
	        if (Glob.isResLoaded && ConnectMgr.isLogined) {
	            SaveLoad.init(Laya.Handler.create(null, () => {
	                Init.preEnterGame();
	            }));
	        }
	    }
	    connectSocket() {
	        ConnectMgr.init();
	        if (LoginData.standAlone) {
	            this.onLoginSuccess();
	        }
	        else {
	            this.connectServer();
	        }
	    }
	    connectServer() {
	        ConnectMgr.connectServer();
	    }
	    initStandAlone() {
	        let loginData = new com.proto.MLoginData();
	        let player = new com.proto.MPlayer();
	        player.id = 1;
	        player.openId = "1";
	        player.areaId = 1;
	        player.name = "测试";
	        player.level = 1;
	        player.exp = 0;
	        player.yuanBao = 99999;
	        player.stone = 99999;
	        player.gold = 99999;
	        player.energy = 99999;
	        loginData.player = player;
	        UserData.initData(loginData);
	    }
	    reload() {
	        ApiMgr.reload();
	    }
	}
	new Main();

	return Main;

}());
